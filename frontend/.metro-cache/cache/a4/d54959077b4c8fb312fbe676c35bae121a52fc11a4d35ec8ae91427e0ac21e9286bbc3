{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.validatePathConfig = validatePathConfig;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var formatToList = items => Object.entries(items).map(_ref => {\n    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    return `- ${key} (${value})`;\n  }).join('\\n');\n  function validatePathConfig(config) {\n    var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var validation = {\n      path: 'string',\n      initialRouteName: 'string',\n      screens: 'object',\n      ...(root ? null : {\n        alias: 'array',\n        exact: 'boolean',\n        stringify: 'object',\n        parse: 'object'\n      })\n    };\n    if (typeof config !== 'object' || config === null) {\n      throw new Error(`Expected the configuration to be an object, but got ${JSON.stringify(config)}.`);\n    }\n    var validationErrors = Object.fromEntries(Object.keys(config).map(key => {\n      if (key in validation) {\n        var type = validation[key];\n        // @ts-expect-error: we know the key exists\n        var value = config[key];\n        if (value !== undefined) {\n          if (type === 'array') {\n            if (!Array.isArray(value)) {\n              return [key, `expected 'Array', got '${typeof value}'`];\n            }\n          } else if (typeof value !== type) {\n            return [key, `expected '${type}', got '${typeof value}'`];\n          }\n        }\n      } else {\n        return [key, 'extraneous'];\n      }\n      return null;\n    }).filter(Boolean));\n    if (Object.keys(validationErrors).length) {\n      throw new Error(`Found invalid properties in the configuration:\\n${formatToList(validationErrors)}\\n\\nYou can only specify the following properties:\\n${formatToList(validation)}\\n\\nIf you want to specify configuration for screens, you need to specify them under a 'screens' property.\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n    }\n    if (root && 'path' in config && typeof config.path === 'string' && config.path.includes(':')) {\n      throw new Error(`Found invalid path '${config.path}'. The 'path' in the top-level configuration cannot contain patterns for params.`);\n    }\n    if ('screens' in config && config.screens) {\n      Object.entries(config.screens).forEach(_ref3 => {\n        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n          _ = _ref4[0],\n          value = _ref4[1];\n        if (typeof value !== 'string') {\n          validatePathConfig(value, false);\n        }\n      });\n    }\n  }\n});","lineCount":68,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"validatePathConfig"],[8,28,1,13],[8,31,1,13,"validatePathConfig"],[8,49,1,13],[9,2,1,13],[9,6,1,13,"_slicedToArray2"],[9,21,1,13],[9,24,1,13,"_interopRequireDefault"],[9,46,1,13],[9,47,1,13,"require"],[9,54,1,13],[9,55,1,13,"_dependencyMap"],[9,69,1,13],[10,2,3,0],[10,6,3,6,"formatToList"],[10,18,3,18],[10,21,3,21,"items"],[10,26,3,26],[10,30,3,30,"Object"],[10,36,3,36],[10,37,3,37,"entries"],[10,44,3,44],[10,45,3,45,"items"],[10,50,3,50],[10,51,3,51],[10,52,3,52,"map"],[10,55,3,55],[10,56,3,56,"_ref"],[10,60,3,56],[11,4,3,56],[11,8,3,56,"_ref2"],[11,13,3,56],[11,20,3,56,"_slicedToArray2"],[11,35,3,56],[11,36,3,56,"default"],[11,43,3,56],[11,45,3,56,"_ref"],[11,49,3,56],[12,6,3,58,"key"],[12,9,3,61],[12,12,3,61,"_ref2"],[12,17,3,61],[13,6,3,63,"value"],[13,11,3,68],[13,14,3,68,"_ref2"],[13,19,3,68],[14,4,3,68],[14,11,3,74],[14,16,3,79,"key"],[14,19,3,82],[14,24,3,87,"value"],[14,29,3,92],[14,32,3,95],[15,2,3,95],[15,4,3,96],[15,5,3,97,"join"],[15,9,3,101],[15,10,3,102],[15,14,3,106],[15,15,3,107],[16,2,4,7],[16,11,4,16,"validatePathConfig"],[16,29,4,34,"validatePathConfig"],[16,30,4,35,"config"],[16,36,4,41],[16,38,4,56],[17,4,4,56],[17,8,4,43,"root"],[17,12,4,47],[17,15,4,47,"arguments"],[17,24,4,47],[17,25,4,47,"length"],[17,31,4,47],[17,39,4,47,"arguments"],[17,48,4,47],[17,56,4,47,"undefined"],[17,65,4,47],[17,68,4,47,"arguments"],[17,77,4,47],[17,83,4,50],[17,87,4,54],[18,4,5,2],[18,8,5,8,"validation"],[18,18,5,18],[18,21,5,21],[19,6,6,4,"path"],[19,10,6,8],[19,12,6,10],[19,20,6,18],[20,6,7,4,"initialRouteName"],[20,22,7,20],[20,24,7,22],[20,32,7,30],[21,6,8,4,"screens"],[21,13,8,11],[21,15,8,13],[21,23,8,21],[22,6,9,4],[22,10,9,8,"root"],[22,14,9,12],[22,17,9,15],[22,21,9,19],[22,24,9,22],[23,8,10,6,"alias"],[23,13,10,11],[23,15,10,13],[23,22,10,20],[24,8,11,6,"exact"],[24,13,11,11],[24,15,11,13],[24,24,11,22],[25,8,12,6,"stringify"],[25,17,12,15],[25,19,12,17],[25,27,12,25],[26,8,13,6,"parse"],[26,13,13,11],[26,15,13,13],[27,6,14,4],[27,7,14,5],[28,4,15,2],[28,5,15,3],[29,4,16,2],[29,8,16,6],[29,15,16,13,"config"],[29,21,16,19],[29,26,16,24],[29,34,16,32],[29,38,16,36,"config"],[29,44,16,42],[29,49,16,47],[29,53,16,51],[29,55,16,53],[30,6,17,4],[30,12,17,10],[30,16,17,14,"Error"],[30,21,17,19],[30,22,17,20],[30,77,17,75,"JSON"],[30,81,17,79],[30,82,17,80,"stringify"],[30,91,17,89],[30,92,17,90,"config"],[30,98,17,96],[30,99,17,97],[30,102,17,100],[30,103,17,101],[31,4,18,2],[32,4,19,2],[32,8,19,8,"validationErrors"],[32,24,19,24],[32,27,19,27,"Object"],[32,33,19,33],[32,34,19,34,"fromEntries"],[32,45,19,45],[32,46,19,46,"Object"],[32,52,19,52],[32,53,19,53,"keys"],[32,57,19,57],[32,58,19,58,"config"],[32,64,19,64],[32,65,19,65],[32,66,19,66,"map"],[32,69,19,69],[32,70,19,70,"key"],[32,73,19,73],[32,77,19,77],[33,6,20,4],[33,10,20,8,"key"],[33,13,20,11],[33,17,20,15,"validation"],[33,27,20,25],[33,29,20,27],[34,8,21,6],[34,12,21,12,"type"],[34,16,21,16],[34,19,21,19,"validation"],[34,29,21,29],[34,30,21,30,"key"],[34,33,21,33],[34,34,21,34],[35,8,22,6],[36,8,23,6],[36,12,23,12,"value"],[36,17,23,17],[36,20,23,20,"config"],[36,26,23,26],[36,27,23,27,"key"],[36,30,23,30],[36,31,23,31],[37,8,24,6],[37,12,24,10,"value"],[37,17,24,15],[37,22,24,20,"undefined"],[37,31,24,29],[37,33,24,31],[38,10,25,8],[38,14,25,12,"type"],[38,18,25,16],[38,23,25,21],[38,30,25,28],[38,32,25,30],[39,12,26,10],[39,16,26,14],[39,17,26,15,"Array"],[39,22,26,20],[39,23,26,21,"isArray"],[39,30,26,28],[39,31,26,29,"value"],[39,36,26,34],[39,37,26,35],[39,39,26,37],[40,14,27,12],[40,21,27,19],[40,22,27,20,"key"],[40,25,27,23],[40,27,27,25],[40,53,27,51],[40,60,27,58,"value"],[40,65,27,63],[40,68,27,66],[40,69,27,67],[41,12,28,10],[42,10,29,8],[42,11,29,9],[42,17,29,15],[42,21,29,19],[42,28,29,26,"value"],[42,33,29,31],[42,38,29,36,"type"],[42,42,29,40],[42,44,29,42],[43,12,30,10],[43,19,30,17],[43,20,30,18,"key"],[43,23,30,21],[43,25,30,23],[43,38,30,36,"type"],[43,42,30,40],[43,53,30,51],[43,60,30,58,"value"],[43,65,30,63],[43,68,30,66],[43,69,30,67],[44,10,31,8],[45,8,32,6],[46,6,33,4],[46,7,33,5],[46,13,33,11],[47,8,34,6],[47,15,34,13],[47,16,34,14,"key"],[47,19,34,17],[47,21,34,19],[47,33,34,31],[47,34,34,32],[48,6,35,4],[49,6,36,4],[49,13,36,11],[49,17,36,15],[50,4,37,2],[50,5,37,3],[50,6,37,4],[50,7,37,5,"filter"],[50,13,37,11],[50,14,37,12,"Boolean"],[50,21,37,19],[50,22,37,20],[50,23,37,21],[51,4,38,2],[51,8,38,6,"Object"],[51,14,38,12],[51,15,38,13,"keys"],[51,19,38,17],[51,20,38,18,"validationErrors"],[51,36,38,34],[51,37,38,35],[51,38,38,36,"length"],[51,44,38,42],[51,46,38,44],[52,6,39,4],[52,12,39,10],[52,16,39,14,"Error"],[52,21,39,19],[52,22,39,20],[52,73,39,71,"formatToList"],[52,85,39,83],[52,86,39,84,"validationErrors"],[52,102,39,100],[52,103,39,101],[52,158,39,156,"formatToList"],[52,170,39,168],[52,171,39,169,"validation"],[52,181,39,179],[52,182,39,180],[52,408,39,406],[52,409,39,407],[53,4,40,2],[54,4,41,2],[54,8,41,6,"root"],[54,12,41,10],[54,16,41,14],[54,22,41,20],[54,26,41,24,"config"],[54,32,41,30],[54,36,41,34],[54,43,41,41,"config"],[54,49,41,47],[54,50,41,48,"path"],[54,54,41,52],[54,59,41,57],[54,67,41,65],[54,71,41,69,"config"],[54,77,41,75],[54,78,41,76,"path"],[54,82,41,80],[54,83,41,81,"includes"],[54,91,41,89],[54,92,41,90],[54,95,41,93],[54,96,41,94],[54,98,41,96],[55,6,42,4],[55,12,42,10],[55,16,42,14,"Error"],[55,21,42,19],[55,22,42,20],[55,45,42,43,"config"],[55,51,42,49],[55,52,42,50,"path"],[55,56,42,54],[55,138,42,136],[55,139,42,137],[56,4,43,2],[57,4,44,2],[57,8,44,6],[57,17,44,15],[57,21,44,19,"config"],[57,27,44,25],[57,31,44,29,"config"],[57,37,44,35],[57,38,44,36,"screens"],[57,45,44,43],[57,47,44,45],[58,6,45,4,"Object"],[58,12,45,10],[58,13,45,11,"entries"],[58,20,45,18],[58,21,45,19,"config"],[58,27,45,25],[58,28,45,26,"screens"],[58,35,45,33],[58,36,45,34],[58,37,45,35,"forEach"],[58,44,45,42],[58,45,45,43,"_ref3"],[58,50,45,43],[58,54,45,59],[59,8,45,59],[59,12,45,59,"_ref4"],[59,17,45,59],[59,24,45,59,"_slicedToArray2"],[59,39,45,59],[59,40,45,59,"default"],[59,47,45,59],[59,49,45,59,"_ref3"],[59,54,45,59],[60,10,45,45,"_"],[60,11,45,46],[60,14,45,46,"_ref4"],[60,19,45,46],[61,10,45,48,"value"],[61,15,45,53],[61,18,45,53,"_ref4"],[61,23,45,53],[62,8,46,6],[62,12,46,10],[62,19,46,17,"value"],[62,24,46,22],[62,29,46,27],[62,37,46,35],[62,39,46,37],[63,10,47,8,"validatePathConfig"],[63,28,47,26],[63,29,47,27,"value"],[63,34,47,32],[63,36,47,34],[63,41,47,39],[63,42,47,40],[64,8,48,6],[65,6,49,4],[65,7,49,5],[65,8,49,6],[66,4,50,2],[67,2,51,0],[68,0,51,1],[68,3]],"functionMap":{"names":["<global>","formatToList","Object.entries.map$argument_0","validatePathConfig","Object.keys.map$argument_0","Object.entries.forEach$argument_0"],"mappings":"AAA;qBCE,mCC,uCD,YD;OGC;sECe;GDkB;2CEQ;KFI;CHE"}},"type":"js/module"}]}