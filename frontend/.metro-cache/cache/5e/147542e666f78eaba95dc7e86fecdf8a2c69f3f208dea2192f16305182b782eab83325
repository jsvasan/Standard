{"dependencies":[{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":42,"index":57}}],"key":"Opxn8Ttfh7QNGeF0y+BQ6rRbDGo=","exportNames":["*"],"imports":1}},{"name":"query-string","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":58},"end":{"line":4,"column":44,"index":102}}],"key":"Tk6zkk+/XfK89igjx1MNWAcG1Q8=","exportNames":["*"],"imports":1}},{"name":"./arrayStartsWith.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":103},"end":{"line":5,"column":55,"index":158}}],"key":"mJQeK2ZRLq8v0j9J6l50oLtYU2c=","exportNames":["*"],"imports":1}},{"name":"./findFocusedRoute.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":159},"end":{"line":6,"column":57,"index":216}}],"key":"/OEwo8APHIJtscmrfuh7WccCayM=","exportNames":["*"],"imports":1}},{"name":"./getPatternParts.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":217},"end":{"line":7,"column":55,"index":272}}],"key":"ZBgxhB8YmJlp1KxhfM5ocx9xUB0=","exportNames":["*"],"imports":1}},{"name":"./isArrayEqual.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":273},"end":{"line":8,"column":49,"index":322}}],"key":"0Xv+Jf6vWjo3/vKyf7CxgrGRylo=","exportNames":["*"],"imports":1}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":323},"end":{"line":9,"column":61,"index":384}}],"key":"zoUaUuxQP5qPvRrno+lraXgTGfI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  exports.getStateFromPath = getStateFromPath;\n  var _escapeStringRegexp = require(_dependencyMap[0], \"escape-string-regexp\");\n  var escape = _interopDefault(_escapeStringRegexp);\n  var _queryString = require(_dependencyMap[1], \"query-string\");\n  var queryString = _interopNamespace(_queryString);\n  var _arrayStartsWithJs = require(_dependencyMap[2], \"./arrayStartsWith.js\");\n  var _findFocusedRouteJs = require(_dependencyMap[3], \"./findFocusedRoute.js\");\n  var _getPatternPartsJs = require(_dependencyMap[4], \"./getPatternParts.js\");\n  var _isArrayEqualJs = require(_dependencyMap[5], \"./isArrayEqual.js\");\n  var _validatePathConfigJs = require(_dependencyMap[6], \"./validatePathConfig.js\");\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    const {\n      initialRoutes,\n      configs\n    } = getConfigResources(options);\n    const screens = options?.screens;\n    let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n    if (prefix) {\n      // Make sure there is a trailing slash\n      const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      const routes = remaining.split('/').filter(Boolean).map(segment => {\n        const name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (routes.length) {\n        return createNestedStateObject(path, routes, initialRoutes);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      const match = configs.find(config => config.segments.join('/') === '');\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    let result;\n    let current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const {\n      routes,\n      remainingPath\n    } = matchAgainstConfigs(remaining, configs);\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  const cachedConfigResources = new WeakMap();\n  function getConfigResources(options) {\n    if (!options) return prepareConfigResources();\n    const cached = cachedConfigResources.get(options);\n    if (cached) return cached;\n    const resources = prepareConfigResources(options);\n    cachedConfigResources.set(options, resources);\n    return resources;\n  }\n  function prepareConfigResources(options) {\n    if (options) {\n      (0, _validatePathConfigJs.validatePathConfig)(options);\n    }\n    const initialRoutes = getInitialRoutes(options);\n    const configs = getSortedNormalizedConfigs(initialRoutes, options?.screens);\n    checkForDuplicatedConfigs(configs);\n    const configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    const initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getSortedNormalizedConfigs(initialRoutes, screens = {}) {\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, initialRoutes, [], [], []))).sort((a, b) => {\n      // Sort config from most specific to least specific:\n      // - more segments\n      // - static segments\n      // - params with regex\n      // - regular params\n      // - wildcard\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if ((0, _isArrayEqualJs.isArrayEqual)(a.segments, b.segments)) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if ((0, _arrayStartsWithJs.arrayStartsWith)(a.segments, b.segments)) {\n        return -1;\n      }\n      if ((0, _arrayStartsWithJs.arrayStartsWith)(b.segments, a.segments)) {\n        return 1;\n      }\n      for (let i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {\n        // if b is longer, b gets higher priority\n        if (a.segments[i] == null) {\n          return 1;\n        }\n\n        // if a is longer, a gets higher priority\n        if (b.segments[i] == null) {\n          return -1;\n        }\n        const aWildCard = a.segments[i] === '*';\n        const bWildCard = b.segments[i] === '*';\n        const aParam = a.segments[i].startsWith(':');\n        const bParam = b.segments[i].startsWith(':');\n        const aRegex = aParam && a.segments[i].includes('(');\n        const bRegex = bParam && b.segments[i].includes('(');\n\n        // if both are wildcard or regex, we compare next component\n        if (aWildCard && bWildCard || aRegex && bRegex) {\n          continue;\n        }\n\n        // if only a is wildcard, b gets higher priority\n        if (aWildCard && !bWildCard) {\n          return 1;\n        }\n\n        // if only b is wildcard, a gets higher priority\n        if (bWildCard && !aWildCard) {\n          return -1;\n        }\n\n        // If only a has a param, b gets higher priority\n        if (aParam && !bParam) {\n          return 1;\n        }\n\n        // If only b has a param, a gets higher priority\n        if (bParam && !aParam) {\n          return -1;\n        }\n\n        // if only a has regex, a gets higher priority\n        if (aRegex && !bRegex) {\n          return -1;\n        }\n\n        // if only b has regex, b gets higher priority\n        if (bRegex && !aRegex) {\n          return 1;\n        }\n      }\n      return a.segments.length - b.segments.length;\n    });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      const pattern = config.segments.join('/');\n      if (acc[pattern]) {\n        const a = acc[pattern].routeNames;\n        const b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => Object.assign({}, c, {\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    }));\n  }\n  const matchAgainstConfigs = (remaining, configs) => {\n    let routes;\n    let remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    for (const config of configs) {\n      if (!config.regex) {\n        continue;\n      }\n      const match = remainingPath.match(config.regex);\n\n      // If our regex matches, we need to extract params from the path\n      if (match) {\n        routes = config.routeNames.map(routeName => {\n          const routeConfig = configs.find(c => {\n            // Check matching name AND pattern in case same screen is used at different levels in config\n            return c.screen === routeName && (0, _arrayStartsWithJs.arrayStartsWith)(config.segments, c.segments);\n          });\n          const params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(([key, value]) => {\n            const index = Number(key.replace('param_', ''));\n            const param = routeConfig.params.find(it => it.index === index);\n            if (param?.screen === routeName && param?.name) {\n              return [param.name, value];\n            }\n            return null;\n          }).filter(it => it != null).map(([key, value]) => {\n            if (value == null) {\n              return [key, undefined];\n            }\n            const decoded = decodeURIComponent(value);\n            const parsed = routeConfig.parse?.[key] ? routeConfig.parse[key](decoded) : decoded;\n            return [key, parsed];\n          })) : undefined;\n          if (params && Object.keys(params).length) {\n            return {\n              name: routeName,\n              params\n            };\n          }\n          return {\n            name: routeName\n          };\n        });\n        remainingPath = remainingPath.replace(match[0], '');\n        break;\n      }\n    }\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  const createNormalizedConfigs = (screen, routeConfig, initials, paths, parentScreens, routeNames) => {\n    const configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    const config = routeConfig[screen];\n    if (typeof config === 'string') {\n      paths.push({\n        screen,\n        path: config\n      });\n      configs.push(createConfigItem(screen, [...routeNames], [...paths]));\n    } else if (typeof config === 'object') {\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path == null) {\n          throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. \\`path: ''\\`.`);\n        }\n\n        // We should add alias configs after the main config\n        // So unless they are more specific, main config will be matched first\n        const aliasConfigs = [];\n        if (config.alias) {\n          for (const alias of config.alias) {\n            if (typeof alias === 'string') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], [...paths, {\n                screen,\n                path: alias\n              }], config.parse));\n            } else if (typeof alias === 'object') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], alias.exact ? [{\n                screen,\n                path: alias.path\n              }] : [...paths, {\n                screen,\n                path: alias.path\n              }], alias.parse));\n            }\n          }\n        }\n        if (config.exact) {\n          // If it's an exact path, we don't need to keep track of the parent screens\n          // So we can clear it\n          paths.length = 0;\n        }\n        paths.push({\n          screen,\n          path: config.path\n        });\n        configs.push(createConfigItem(screen, [...routeNames], [...paths], config.parse));\n        configs.push(...aliasConfigs);\n      }\n      if (typeof config !== 'string' && typeof config.path !== 'string' && config.alias?.length) {\n        throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'.`);\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          const result = createNormalizedConfigs(nestedConfig, config.screens, initials, [...paths], [...parentScreens], routeNames);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  const createConfigItem = (screen, routeNames, paths, parse) => {\n    const parts = [];\n\n    // Parse the path string into parts for easier matching\n    for (const {\n      screen,\n      path\n    } of paths) {\n      parts.push(...(0, _getPatternPartsJs.getPatternParts)(path).map(part => Object.assign({}, part, {\n        screen\n      })));\n    }\n    const regex = parts.length ? new RegExp(`^(${parts.map((it, i) => {\n      if (it.param) {\n        const reg = it.regex || '[^/]+';\n        return `(((?<param_${i}>${reg})\\\\/)${it.optional ? '?' : ''})`;\n      }\n      return `${it.segment === '*' ? '.*' : (0, escape.default)(it.segment)}\\\\/`;\n    }).join('')})$`) : undefined;\n    const segments = parts.map(it => it.segment);\n    const params = parts.map((it, i) => it.param ? {\n      index: i,\n      screen: it.screen,\n      name: it.param\n    } : null).filter(it => it != null);\n    return {\n      screen,\n      regex,\n      segments,\n      params,\n      routeNames,\n      parse\n    };\n  };\n  const findParseConfigForRoute = (routeName, flatConfig) => {\n    for (const config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  const findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (const config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        let sameParents = true;\n        for (let i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  const createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      } else {\n        return {\n          routes: [Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      }\n    }\n  };\n  const createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n    let route = routes.shift();\n    const parentScreens = [];\n    let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    const state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      let nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRouteJs.findFocusedRoute)(state);\n    route.path = path.replace(/\\/$/, '');\n    const params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = Object.assign({}, route.params, params);\n    }\n    return state;\n  };\n  const parseQueryParams = (path, parseConfig) => {\n    const query = path.split('?')[1];\n    const params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":534,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,1,13],[12,11,1,13,"_interopNamespace"],[12,29,1,13,"e"],[12,30,1,13],[13,4,1,13],[13,8,1,13,"e"],[13,9,1,13],[13,13,1,13,"e"],[13,14,1,13],[13,15,1,13,"__esModule"],[13,25,1,13],[13,34,1,13,"e"],[13,35,1,13],[14,4,1,13],[14,8,1,13,"n"],[14,9,1,13],[15,4,1,13],[15,8,1,13,"e"],[15,9,1,13],[15,11,1,13,"Object"],[15,17,1,13],[15,18,1,13,"keys"],[15,22,1,13],[15,23,1,13,"e"],[15,24,1,13],[15,26,1,13,"forEach"],[15,33,1,13],[15,44,1,13,"k"],[15,45,1,13],[16,6,1,13],[16,10,1,13,"d"],[16,11,1,13],[16,14,1,13,"Object"],[16,20,1,13],[16,21,1,13,"getOwnPropertyDescriptor"],[16,45,1,13],[16,46,1,13,"e"],[16,47,1,13],[16,49,1,13,"k"],[16,50,1,13],[17,6,1,13,"Object"],[17,12,1,13],[17,13,1,13,"defineProperty"],[17,27,1,13],[17,28,1,13,"n"],[17,29,1,13],[17,31,1,13,"k"],[17,32,1,13],[17,34,1,13,"d"],[17,35,1,13],[17,36,1,13,"get"],[17,39,1,13],[17,42,1,13,"d"],[17,43,1,13],[18,8,1,13,"enumerable"],[18,18,1,13],[19,8,1,13,"get"],[19,11,1,13],[19,22,1,13,"get"],[19,23,1,13],[20,10,1,13],[20,17,1,13,"e"],[20,18,1,13],[20,19,1,13,"k"],[20,20,1,13],[21,8,1,13],[22,6,1,13],[23,4,1,13],[24,4,1,13,"n"],[24,5,1,13],[24,6,1,13,"default"],[24,13,1,13],[24,16,1,13,"e"],[24,17,1,13],[25,4,1,13],[25,11,1,13,"n"],[25,12,1,13],[26,2,1,13],[27,2,31,0,"exports"],[27,9,31,0],[27,10,31,0,"getStateFromPath"],[27,26,31,0],[27,29,31,0,"getStateFromPath"],[27,45,31,0],[28,2,3,0],[28,6,3,0,"_escapeStringRegexp"],[28,25,3,0],[28,28,3,0,"require"],[28,35,3,0],[28,36,3,0,"_dependencyMap"],[28,50,3,0],[29,2,3,0],[29,6,3,0,"escape"],[29,12,3,0],[29,15,3,0,"_interopDefault"],[29,30,3,0],[29,31,3,0,"_escapeStringRegexp"],[29,50,3,0],[30,2,4,0],[30,6,4,0,"_queryString"],[30,18,4,0],[30,21,4,0,"require"],[30,28,4,0],[30,29,4,0,"_dependencyMap"],[30,43,4,0],[31,2,4,0],[31,6,4,0,"queryString"],[31,17,4,0],[31,20,4,0,"_interopNamespace"],[31,37,4,0],[31,38,4,0,"_queryString"],[31,50,4,0],[32,2,5,0],[32,6,5,0,"_arrayStartsWithJs"],[32,24,5,0],[32,27,5,0,"require"],[32,34,5,0],[32,35,5,0,"_dependencyMap"],[32,49,5,0],[33,2,6,0],[33,6,6,0,"_findFocusedRouteJs"],[33,25,6,0],[33,28,6,0,"require"],[33,35,6,0],[33,36,6,0,"_dependencyMap"],[33,50,6,0],[34,2,7,0],[34,6,7,0,"_getPatternPartsJs"],[34,24,7,0],[34,27,7,0,"require"],[34,34,7,0],[34,35,7,0,"_dependencyMap"],[34,49,7,0],[35,2,8,0],[35,6,8,0,"_isArrayEqualJs"],[35,21,8,0],[35,24,8,0,"require"],[35,31,8,0],[35,32,8,0,"_dependencyMap"],[35,46,8,0],[36,2,9,0],[36,6,9,0,"_validatePathConfigJs"],[36,27,9,0],[36,30,9,0,"require"],[36,37,9,0],[36,38,9,0,"_dependencyMap"],[36,52,9,0],[37,2,10,0],[38,0,11,0],[39,0,12,0],[40,0,13,0],[41,0,14,0],[42,0,15,0],[43,0,16,0],[44,0,17,0],[45,0,18,0],[46,0,19,0],[47,0,20,0],[48,0,21,0],[49,0,22,0],[50,0,23,0],[51,0,24,0],[52,0,25,0],[53,0,26,0],[54,0,27,0],[55,0,28,0],[56,0,29,0],[57,0,30,0],[58,2,31,7],[58,11,31,16,"getStateFromPath"],[58,27,31,32,"getStateFromPath"],[58,28,31,33,"path"],[58,32,31,37],[58,34,31,39,"options"],[58,41,31,46],[58,43,31,48],[59,4,32,2],[59,10,32,8],[60,6,33,4,"initialRoutes"],[60,19,33,17],[61,6,34,4,"configs"],[62,4,35,2],[62,5,35,3],[62,8,35,6,"getConfigResources"],[62,26,35,24],[62,27,35,25,"options"],[62,34,35,32],[62,35,35,33],[63,4,36,2],[63,10,36,8,"screens"],[63,17,36,15],[63,20,36,18,"options"],[63,27,36,25],[63,29,36,27,"screens"],[63,36,36,34],[64,4,37,2],[64,8,37,6,"remaining"],[64,17,37,15],[64,20,37,18,"path"],[64,24,37,22],[64,25,37,23,"replace"],[64,32,37,30],[64,33,37,31],[64,39,37,37],[64,41,37,39],[64,44,37,42],[64,45,37,43],[64,46,37,44],[65,4,37,44],[65,5,38,3,"replace"],[65,12,38,10],[65,13,38,11],[65,18,38,16],[65,20,38,18],[65,22,38,20],[65,23,38,21],[65,24,38,22],[66,4,38,22],[66,5,39,3,"replace"],[66,12,39,10],[66,13,39,11],[66,20,39,18],[66,22,39,20],[66,24,39,22],[66,25,39,23],[66,26,39,24],[66,27,39,25],[68,4,41,2],[69,4,42,2,"remaining"],[69,13,42,11],[69,16,42,14,"remaining"],[69,25,42,23],[69,26,42,24,"endsWith"],[69,34,42,32],[69,35,42,33],[69,38,42,36],[69,39,42,37],[69,42,42,40,"remaining"],[69,51,42,49],[69,54,42,52],[69,57,42,55,"remaining"],[69,66,42,64],[69,69,42,67],[70,4,43,2],[70,10,43,8,"prefix"],[70,16,43,14],[70,19,43,17,"options"],[70,26,43,24],[70,28,43,26,"path"],[70,32,43,30],[70,34,43,32,"replace"],[70,41,43,39],[70,42,43,40],[70,47,43,45],[70,49,43,47],[70,51,43,49],[70,52,43,50],[70,53,43,51],[70,54,43,52],[72,4,45,2],[72,8,45,6,"prefix"],[72,14,45,12],[72,16,45,14],[73,6,46,4],[74,6,47,4],[74,12,47,10,"normalizedPrefix"],[74,28,47,26],[74,31,47,29,"prefix"],[74,37,47,35],[74,38,47,36,"endsWith"],[74,46,47,44],[74,47,47,45],[74,50,47,48],[74,51,47,49],[74,54,47,52,"prefix"],[74,60,47,58],[74,63,47,61],[74,66,47,64,"prefix"],[74,72,47,70],[74,75,47,73],[76,6,49,4],[77,6,50,4],[77,10,50,8],[77,11,50,9,"remaining"],[77,20,50,18],[77,21,50,19,"startsWith"],[77,31,50,29],[77,32,50,30,"normalizedPrefix"],[77,48,50,46],[77,49,50,47],[77,51,50,49],[78,8,51,6],[78,15,51,13,"undefined"],[78,24,51,22],[79,6,52,4],[81,6,54,4],[82,6,55,4,"remaining"],[82,15,55,13],[82,18,55,16,"remaining"],[82,27,55,25],[82,28,55,26,"replace"],[82,35,55,33],[82,36,55,34,"normalizedPrefix"],[82,52,55,50],[82,54,55,52],[82,56,55,54],[82,57,55,55],[83,4,56,2],[84,4,57,2],[84,8,57,6,"screens"],[84,15,57,13],[84,20,57,18,"undefined"],[84,29,57,27],[84,31,57,29],[85,6,58,4],[86,6,59,4],[86,12,59,10,"routes"],[86,18,59,16],[86,21,59,19,"remaining"],[86,30,59,28],[86,31,59,29,"split"],[86,36,59,34],[86,37,59,35],[86,40,59,38],[86,41,59,39],[86,42,59,40,"filter"],[86,48,59,46],[86,49,59,47,"Boolean"],[86,56,59,54],[86,57,59,55],[86,58,59,56,"map"],[86,61,59,59],[86,62,59,60,"segment"],[86,69,59,67],[86,73,59,71],[87,8,60,6],[87,14,60,12,"name"],[87,18,60,16],[87,21,60,19,"decodeURIComponent"],[87,39,60,37],[87,40,60,38,"segment"],[87,47,60,45],[87,48,60,46],[88,8,61,6],[88,15,61,13],[89,10,62,8,"name"],[90,8,63,6],[90,9,63,7],[91,6,64,4],[91,7,64,5],[91,8,64,6],[92,6,65,4],[92,10,65,8,"routes"],[92,16,65,14],[92,17,65,15,"length"],[92,23,65,21],[92,25,65,23],[93,8,66,6],[93,15,66,13,"createNestedStateObject"],[93,38,66,36],[93,39,66,37,"path"],[93,43,66,41],[93,45,66,43,"routes"],[93,51,66,49],[93,53,66,51,"initialRoutes"],[93,66,66,64],[93,67,66,65],[94,6,67,4],[95,6,68,4],[95,13,68,11,"undefined"],[95,22,68,20],[96,4,69,2],[97,4,70,2],[97,8,70,6,"remaining"],[97,17,70,15],[97,22,70,20],[97,25,70,23],[97,27,70,25],[98,6,71,4],[99,6,72,4],[100,6,73,4],[100,12,73,10,"match"],[100,17,73,15],[100,20,73,18,"configs"],[100,27,73,25],[100,28,73,26,"find"],[100,32,73,30],[100,33,73,31,"config"],[100,39,73,37],[100,43,73,41,"config"],[100,49,73,47],[100,50,73,48,"segments"],[100,58,73,56],[100,59,73,57,"join"],[100,63,73,61],[100,64,73,62],[100,67,73,65],[100,68,73,66],[100,73,73,71],[100,75,73,73],[100,76,73,74],[101,6,74,4],[101,10,74,8,"match"],[101,15,74,13],[101,17,74,15],[102,8,75,6],[102,15,75,13,"createNestedStateObject"],[102,38,75,36],[102,39,75,37,"path"],[102,43,75,41],[102,45,75,43,"match"],[102,50,75,48],[102,51,75,49,"routeNames"],[102,61,75,59],[102,62,75,60,"map"],[102,65,75,63],[102,66,75,64,"name"],[102,70,75,68],[102,75,75,73],[103,10,76,8,"name"],[104,8,77,6],[104,9,77,7],[104,10,77,8],[104,11,77,9],[104,13,77,11,"initialRoutes"],[104,26,77,24],[104,28,77,26,"configs"],[104,35,77,33],[104,36,77,34],[105,6,78,4],[106,6,79,4],[106,13,79,11,"undefined"],[106,22,79,20],[107,4,80,2],[108,4,81,2],[108,8,81,6,"result"],[108,14,81,12],[109,4,82,2],[109,8,82,6,"current"],[109,15,82,13],[111,4,84,2],[112,4,85,2],[113,4,86,2],[113,10,86,8],[114,6,87,4,"routes"],[114,12,87,10],[115,6,88,4,"remainingPath"],[116,4,89,2],[116,5,89,3],[116,8,89,6,"matchAgainstConfigs"],[116,27,89,25],[116,28,89,26,"remaining"],[116,37,89,35],[116,39,89,37,"configs"],[116,46,89,44],[116,47,89,45],[117,4,90,2],[117,8,90,6,"routes"],[117,14,90,12],[117,19,90,17,"undefined"],[117,28,90,26],[117,30,90,28],[118,6,91,4],[119,6,92,4,"current"],[119,13,92,11],[119,16,92,14,"createNestedStateObject"],[119,39,92,37],[119,40,92,38,"path"],[119,44,92,42],[119,46,92,44,"routes"],[119,52,92,50],[119,54,92,52,"initialRoutes"],[119,67,92,65],[119,69,92,67,"configs"],[119,76,92,74],[119,77,92,75],[120,6,93,4,"remaining"],[120,15,93,13],[120,18,93,16,"remainingPath"],[120,31,93,29],[121,6,94,4,"result"],[121,12,94,10],[121,15,94,13,"current"],[121,22,94,20],[122,4,95,2],[123,4,96,2],[123,8,96,6,"current"],[123,15,96,13],[123,19,96,17],[123,23,96,21],[123,27,96,25,"result"],[123,33,96,31],[123,37,96,35],[123,41,96,39],[123,43,96,41],[124,6,97,4],[124,13,97,11,"undefined"],[124,22,97,20],[125,4,98,2],[126,4,99,2],[126,11,99,9,"result"],[126,17,99,15],[127,2,100,0],[129,2,102,0],[130,0,103,0],[131,0,104,0],[132,2,105,0],[132,8,105,6,"cachedConfigResources"],[132,29,105,27],[132,32,105,30],[132,36,105,34,"WeakMap"],[132,43,105,41],[132,44,105,42],[132,45,105,43],[133,2,106,0],[133,11,106,9,"getConfigResources"],[133,29,106,27,"getConfigResources"],[133,30,106,28,"options"],[133,37,106,35],[133,39,106,37],[134,4,107,2],[134,8,107,6],[134,9,107,7,"options"],[134,16,107,14],[134,18,107,16],[134,25,107,23,"prepareConfigResources"],[134,47,107,45],[134,48,107,46],[134,49,107,47],[135,4,108,2],[135,10,108,8,"cached"],[135,16,108,14],[135,19,108,17,"cachedConfigResources"],[135,40,108,38],[135,41,108,39,"get"],[135,44,108,42],[135,45,108,43,"options"],[135,52,108,50],[135,53,108,51],[136,4,109,2],[136,8,109,6,"cached"],[136,14,109,12],[136,16,109,14],[136,23,109,21,"cached"],[136,29,109,27],[137,4,110,2],[137,10,110,8,"resources"],[137,19,110,17],[137,22,110,20,"prepareConfigResources"],[137,44,110,42],[137,45,110,43,"options"],[137,52,110,50],[137,53,110,51],[138,4,111,2,"cachedConfigResources"],[138,25,111,23],[138,26,111,24,"set"],[138,29,111,27],[138,30,111,28,"options"],[138,37,111,35],[138,39,111,37,"resources"],[138,48,111,46],[138,49,111,47],[139,4,112,2],[139,11,112,9,"resources"],[139,20,112,18],[140,2,113,0],[141,2,114,0],[141,11,114,9,"prepareConfigResources"],[141,33,114,31,"prepareConfigResources"],[141,34,114,32,"options"],[141,41,114,39],[141,43,114,41],[142,4,115,2],[142,8,115,6,"options"],[142,15,115,13],[142,17,115,15],[143,6,116,4],[143,10,116,4,"validatePathConfig"],[143,31,116,22],[143,32,116,22,"validatePathConfig"],[143,50,116,22],[143,52,116,23,"options"],[143,59,116,30],[143,60,116,31],[144,4,117,2],[145,4,118,2],[145,10,118,8,"initialRoutes"],[145,23,118,21],[145,26,118,24,"getInitialRoutes"],[145,42,118,40],[145,43,118,41,"options"],[145,50,118,48],[145,51,118,49],[146,4,119,2],[146,10,119,8,"configs"],[146,17,119,15],[146,20,119,18,"getSortedNormalizedConfigs"],[146,46,119,44],[146,47,119,45,"initialRoutes"],[146,60,119,58],[146,62,119,60,"options"],[146,69,119,67],[146,71,119,69,"screens"],[146,78,119,76],[146,79,119,77],[147,4,120,2,"checkForDuplicatedConfigs"],[147,29,120,27],[147,30,120,28,"configs"],[147,37,120,35],[147,38,120,36],[148,4,121,2],[148,10,121,8,"configWithRegexes"],[148,27,121,25],[148,30,121,28,"getConfigsWithRegexes"],[148,51,121,49],[148,52,121,50,"configs"],[148,59,121,57],[148,60,121,58],[149,4,122,2],[149,11,122,9],[150,6,123,4,"initialRoutes"],[150,19,123,17],[151,6,124,4,"configs"],[151,13,124,11],[152,6,125,4,"configWithRegexes"],[153,4,126,2],[153,5,126,3],[154,2,127,0],[155,2,128,0],[155,11,128,9,"getInitialRoutes"],[155,27,128,25,"getInitialRoutes"],[155,28,128,26,"options"],[155,35,128,33],[155,37,128,35],[156,4,129,2],[156,10,129,8,"initialRoutes"],[156,23,129,21],[156,26,129,24],[156,28,129,26],[157,4,130,2],[157,8,130,6,"options"],[157,15,130,13],[157,17,130,15,"initialRouteName"],[157,33,130,31],[157,35,130,33],[158,6,131,4,"initialRoutes"],[158,19,131,17],[158,20,131,18,"push"],[158,24,131,22],[158,25,131,23],[159,8,132,6,"initialRouteName"],[159,24,132,22],[159,26,132,24,"options"],[159,33,132,31],[159,34,132,32,"initialRouteName"],[159,50,132,48],[160,8,133,6,"parentScreens"],[160,21,133,19],[160,23,133,21],[161,6,134,4],[161,7,134,5],[161,8,134,6],[162,4,135,2],[163,4,136,2],[163,11,136,9,"initialRoutes"],[163,24,136,22],[164,2,137,0],[165,2,138,0],[165,11,138,9,"getSortedNormalizedConfigs"],[165,37,138,35,"getSortedNormalizedConfigs"],[165,38,138,36,"initialRoutes"],[165,51,138,49],[165,53,138,51,"screens"],[165,60,138,58],[165,63,138,61],[165,64,138,62],[165,65,138,63],[165,67,138,65],[166,4,139,2],[167,4,140,2],[167,11,140,9],[167,13,140,11],[167,14,140,12,"concat"],[167,20,140,18],[167,21,140,19],[167,24,140,22,"Object"],[167,30,140,28],[167,31,140,29,"keys"],[167,35,140,33],[167,36,140,34,"screens"],[167,43,140,41],[167,44,140,42],[167,45,140,43,"map"],[167,48,140,46],[167,49,140,47,"key"],[167,52,140,50],[167,56,140,54,"createNormalizedConfigs"],[167,79,140,77],[167,80,140,78,"key"],[167,83,140,81],[167,85,140,83,"screens"],[167,92,140,90],[167,94,140,92,"initialRoutes"],[167,107,140,105],[167,109,140,107],[167,111,140,109],[167,113,140,111],[167,115,140,113],[167,117,140,115],[167,119,140,117],[167,120,140,118],[167,121,140,119],[167,122,140,120],[167,123,140,121,"sort"],[167,127,140,125],[167,128,140,126],[167,129,140,127,"a"],[167,130,140,128],[167,132,140,130,"b"],[167,133,140,131],[167,138,140,136],[168,6,141,4],[169,6,142,4],[170,6,143,4],[171,6,144,4],[172,6,145,4],[173,6,146,4],[175,6,148,4],[176,6,149,4],[177,6,150,4],[177,10,150,8],[177,14,150,8,"isArrayEqual"],[177,29,150,20],[177,30,150,20,"isArrayEqual"],[177,42,150,20],[177,44,150,21,"a"],[177,45,150,22],[177,46,150,23,"segments"],[177,54,150,31],[177,56,150,33,"b"],[177,57,150,34],[177,58,150,35,"segments"],[177,66,150,43],[177,67,150,44],[177,69,150,46],[178,8,151,6],[178,15,151,13,"b"],[178,16,151,14],[178,17,151,15,"routeNames"],[178,27,151,25],[178,28,151,26,"join"],[178,32,151,30],[178,33,151,31],[178,36,151,34],[178,37,151,35],[178,38,151,36,"localeCompare"],[178,51,151,49],[178,52,151,50,"a"],[178,53,151,51],[178,54,151,52,"routeNames"],[178,64,151,62],[178,65,151,63,"join"],[178,69,151,67],[178,70,151,68],[178,73,151,71],[178,74,151,72],[178,75,151,73],[179,6,152,4],[181,6,154,4],[182,6,155,4],[183,6,156,4],[183,10,156,8],[183,14,156,8,"arrayStartsWith"],[183,32,156,23],[183,33,156,23,"arrayStartsWith"],[183,48,156,23],[183,50,156,24,"a"],[183,51,156,25],[183,52,156,26,"segments"],[183,60,156,34],[183,62,156,36,"b"],[183,63,156,37],[183,64,156,38,"segments"],[183,72,156,46],[183,73,156,47],[183,75,156,49],[184,8,157,6],[184,15,157,13],[184,16,157,14],[184,17,157,15],[185,6,158,4],[186,6,159,4],[186,10,159,8],[186,14,159,8,"arrayStartsWith"],[186,32,159,23],[186,33,159,23,"arrayStartsWith"],[186,48,159,23],[186,50,159,24,"b"],[186,51,159,25],[186,52,159,26,"segments"],[186,60,159,34],[186,62,159,36,"a"],[186,63,159,37],[186,64,159,38,"segments"],[186,72,159,46],[186,73,159,47],[186,75,159,49],[187,8,160,6],[187,15,160,13],[187,16,160,14],[188,6,161,4],[189,6,162,4],[189,11,162,9],[189,15,162,13,"i"],[189,16,162,14],[189,19,162,17],[189,20,162,18],[189,22,162,20,"i"],[189,23,162,21],[189,26,162,24,"Math"],[189,30,162,28],[189,31,162,29,"max"],[189,34,162,32],[189,35,162,33,"a"],[189,36,162,34],[189,37,162,35,"segments"],[189,45,162,43],[189,46,162,44,"length"],[189,52,162,50],[189,54,162,52,"b"],[189,55,162,53],[189,56,162,54,"segments"],[189,64,162,62],[189,65,162,63,"length"],[189,71,162,69],[189,72,162,70],[189,74,162,72,"i"],[189,75,162,73],[189,77,162,75],[189,79,162,77],[190,8,163,6],[191,8,164,6],[191,12,164,10,"a"],[191,13,164,11],[191,14,164,12,"segments"],[191,22,164,20],[191,23,164,21,"i"],[191,24,164,22],[191,25,164,23],[191,29,164,27],[191,33,164,31],[191,35,164,33],[192,10,165,8],[192,17,165,15],[192,18,165,16],[193,8,166,6],[195,8,168,6],[196,8,169,6],[196,12,169,10,"b"],[196,13,169,11],[196,14,169,12,"segments"],[196,22,169,20],[196,23,169,21,"i"],[196,24,169,22],[196,25,169,23],[196,29,169,27],[196,33,169,31],[196,35,169,33],[197,10,170,8],[197,17,170,15],[197,18,170,16],[197,19,170,17],[198,8,171,6],[199,8,172,6],[199,14,172,12,"aWildCard"],[199,23,172,21],[199,26,172,24,"a"],[199,27,172,25],[199,28,172,26,"segments"],[199,36,172,34],[199,37,172,35,"i"],[199,38,172,36],[199,39,172,37],[199,44,172,42],[199,47,172,45],[200,8,173,6],[200,14,173,12,"bWildCard"],[200,23,173,21],[200,26,173,24,"b"],[200,27,173,25],[200,28,173,26,"segments"],[200,36,173,34],[200,37,173,35,"i"],[200,38,173,36],[200,39,173,37],[200,44,173,42],[200,47,173,45],[201,8,174,6],[201,14,174,12,"aParam"],[201,20,174,18],[201,23,174,21,"a"],[201,24,174,22],[201,25,174,23,"segments"],[201,33,174,31],[201,34,174,32,"i"],[201,35,174,33],[201,36,174,34],[201,37,174,35,"startsWith"],[201,47,174,45],[201,48,174,46],[201,51,174,49],[201,52,174,50],[202,8,175,6],[202,14,175,12,"bParam"],[202,20,175,18],[202,23,175,21,"b"],[202,24,175,22],[202,25,175,23,"segments"],[202,33,175,31],[202,34,175,32,"i"],[202,35,175,33],[202,36,175,34],[202,37,175,35,"startsWith"],[202,47,175,45],[202,48,175,46],[202,51,175,49],[202,52,175,50],[203,8,176,6],[203,14,176,12,"aRegex"],[203,20,176,18],[203,23,176,21,"aParam"],[203,29,176,27],[203,33,176,31,"a"],[203,34,176,32],[203,35,176,33,"segments"],[203,43,176,41],[203,44,176,42,"i"],[203,45,176,43],[203,46,176,44],[203,47,176,45,"includes"],[203,55,176,53],[203,56,176,54],[203,59,176,57],[203,60,176,58],[204,8,177,6],[204,14,177,12,"bRegex"],[204,20,177,18],[204,23,177,21,"bParam"],[204,29,177,27],[204,33,177,31,"b"],[204,34,177,32],[204,35,177,33,"segments"],[204,43,177,41],[204,44,177,42,"i"],[204,45,177,43],[204,46,177,44],[204,47,177,45,"includes"],[204,55,177,53],[204,56,177,54],[204,59,177,57],[204,60,177,58],[206,8,179,6],[207,8,180,6],[207,12,180,10,"aWildCard"],[207,21,180,19],[207,25,180,23,"bWildCard"],[207,34,180,32],[207,38,180,36,"aRegex"],[207,44,180,42],[207,48,180,46,"bRegex"],[207,54,180,52],[207,56,180,54],[208,10,181,8],[209,8,182,6],[211,8,184,6],[212,8,185,6],[212,12,185,10,"aWildCard"],[212,21,185,19],[212,25,185,23],[212,26,185,24,"bWildCard"],[212,35,185,33],[212,37,185,35],[213,10,186,8],[213,17,186,15],[213,18,186,16],[214,8,187,6],[216,8,189,6],[217,8,190,6],[217,12,190,10,"bWildCard"],[217,21,190,19],[217,25,190,23],[217,26,190,24,"aWildCard"],[217,35,190,33],[217,37,190,35],[218,10,191,8],[218,17,191,15],[218,18,191,16],[218,19,191,17],[219,8,192,6],[221,8,194,6],[222,8,195,6],[222,12,195,10,"aParam"],[222,18,195,16],[222,22,195,20],[222,23,195,21,"bParam"],[222,29,195,27],[222,31,195,29],[223,10,196,8],[223,17,196,15],[223,18,196,16],[224,8,197,6],[226,8,199,6],[227,8,200,6],[227,12,200,10,"bParam"],[227,18,200,16],[227,22,200,20],[227,23,200,21,"aParam"],[227,29,200,27],[227,31,200,29],[228,10,201,8],[228,17,201,15],[228,18,201,16],[228,19,201,17],[229,8,202,6],[231,8,204,6],[232,8,205,6],[232,12,205,10,"aRegex"],[232,18,205,16],[232,22,205,20],[232,23,205,21,"bRegex"],[232,29,205,27],[232,31,205,29],[233,10,206,8],[233,17,206,15],[233,18,206,16],[233,19,206,17],[234,8,207,6],[236,8,209,6],[237,8,210,6],[237,12,210,10,"bRegex"],[237,18,210,16],[237,22,210,20],[237,23,210,21,"aRegex"],[237,29,210,27],[237,31,210,29],[238,10,211,8],[238,17,211,15],[238,18,211,16],[239,8,212,6],[240,6,213,4],[241,6,214,4],[241,13,214,11,"a"],[241,14,214,12],[241,15,214,13,"segments"],[241,23,214,21],[241,24,214,22,"length"],[241,30,214,28],[241,33,214,31,"b"],[241,34,214,32],[241,35,214,33,"segments"],[241,43,214,41],[241,44,214,42,"length"],[241,50,214,48],[242,4,215,2],[242,5,215,3],[242,6,215,4],[243,2,216,0],[244,2,217,0],[244,11,217,9,"checkForDuplicatedConfigs"],[244,36,217,34,"checkForDuplicatedConfigs"],[244,37,217,35,"configs"],[244,44,217,42],[244,46,217,44],[245,4,218,2],[246,4,219,2,"configs"],[246,11,219,9],[246,12,219,10,"reduce"],[246,18,219,16],[246,19,219,17],[246,20,219,18,"acc"],[246,23,219,21],[246,25,219,23,"config"],[246,31,219,29],[246,36,219,34],[247,6,220,4],[247,12,220,10,"pattern"],[247,19,220,17],[247,22,220,20,"config"],[247,28,220,26],[247,29,220,27,"segments"],[247,37,220,35],[247,38,220,36,"join"],[247,42,220,40],[247,43,220,41],[247,46,220,44],[247,47,220,45],[248,6,221,4],[248,10,221,8,"acc"],[248,13,221,11],[248,14,221,12,"pattern"],[248,21,221,19],[248,22,221,20],[248,24,221,22],[249,8,222,6],[249,14,222,12,"a"],[249,15,222,13],[249,18,222,16,"acc"],[249,21,222,19],[249,22,222,20,"pattern"],[249,29,222,27],[249,30,222,28],[249,31,222,29,"routeNames"],[249,41,222,39],[250,8,223,6],[250,14,223,12,"b"],[250,15,223,13],[250,18,223,16,"config"],[250,24,223,22],[250,25,223,23,"routeNames"],[250,35,223,33],[252,8,225,6],[253,8,226,6],[254,8,227,6],[254,14,227,12,"intersects"],[254,24,227,22],[254,27,227,25,"a"],[254,28,227,26],[254,29,227,27,"length"],[254,35,227,33],[254,38,227,36,"b"],[254,39,227,37],[254,40,227,38,"length"],[254,46,227,44],[254,49,227,47,"b"],[254,50,227,48],[254,51,227,49,"every"],[254,56,227,54],[254,57,227,55],[254,58,227,56,"it"],[254,60,227,58],[254,62,227,60,"i"],[254,63,227,61],[254,68,227,66,"a"],[254,69,227,67],[254,70,227,68,"i"],[254,71,227,69],[254,72,227,70],[254,77,227,75,"it"],[254,79,227,77],[254,80,227,78],[254,83,227,81,"a"],[254,84,227,82],[254,85,227,83,"every"],[254,90,227,88],[254,91,227,89],[254,92,227,90,"it"],[254,94,227,92],[254,96,227,94,"i"],[254,97,227,95],[254,102,227,100,"b"],[254,103,227,101],[254,104,227,102,"i"],[254,105,227,103],[254,106,227,104],[254,111,227,109,"it"],[254,113,227,111],[254,114,227,112],[255,8,228,6],[255,12,228,10],[255,13,228,11,"intersects"],[255,23,228,21],[255,25,228,23],[256,10,229,8],[256,16,229,14],[256,20,229,18,"Error"],[256,25,229,23],[256,26,229,24],[256,91,229,89,"pattern"],[256,98,229,96],[256,121,229,119,"a"],[256,122,229,120],[256,123,229,121,"join"],[256,127,229,125],[256,128,229,126],[256,133,229,131],[256,134,229,132],[256,144,229,142,"b"],[256,145,229,143],[256,146,229,144,"join"],[256,150,229,148],[256,151,229,149],[256,156,229,154],[256,157,229,155],[256,229,229,227],[256,230,229,228],[257,8,230,6],[258,6,231,4],[259,6,232,4],[259,13,232,11,"Object"],[259,19,232,17],[259,20,232,18,"assign"],[259,26,232,24],[259,27,232,25,"acc"],[259,30,232,28],[259,32,232,30],[260,8,233,6],[260,9,233,7,"pattern"],[260,16,233,14],[260,19,233,17,"config"],[261,6,234,4],[261,7,234,5],[261,8,234,6],[262,4,235,2],[262,5,235,3],[262,7,235,5],[262,8,235,6],[262,9,235,7],[262,10,235,8],[263,2,236,0],[264,2,237,0],[264,11,237,9,"getConfigsWithRegexes"],[264,32,237,30,"getConfigsWithRegexes"],[264,33,237,31,"configs"],[264,40,237,38],[264,42,237,40],[265,4,238,2],[265,11,238,9,"configs"],[265,18,238,16],[265,19,238,17,"map"],[265,22,238,20],[265,23,238,21,"c"],[265,24,238,22],[265,28,238,22,"Object"],[265,34,238,22],[265,35,238,22,"assign"],[265,41,238,22],[265,46,239,7,"c"],[265,47,239,8],[266,6,240,4],[267,6,241,4,"regex"],[267,11,241,9],[267,13,241,11,"c"],[267,14,241,12],[267,15,241,13,"regex"],[267,20,241,18],[267,23,241,21],[267,27,241,25,"RegExp"],[267,33,241,31],[267,34,241,32,"c"],[267,35,241,33],[267,36,241,34,"regex"],[267,41,241,39],[267,42,241,40,"source"],[267,48,241,46],[267,51,241,49],[267,54,241,52],[267,55,241,53],[267,58,241,56,"undefined"],[268,4,241,65],[268,6,242,4],[268,7,242,5],[269,2,243,0],[270,2,244,0],[270,8,244,6,"matchAgainstConfigs"],[270,27,244,25],[270,30,244,28,"matchAgainstConfigs"],[270,31,244,29,"remaining"],[270,40,244,38],[270,42,244,40,"configs"],[270,49,244,47],[270,54,244,52],[271,4,245,2],[271,8,245,6,"routes"],[271,14,245,12],[272,4,246,2],[272,8,246,6,"remainingPath"],[272,21,246,19],[272,24,246,22,"remaining"],[272,33,246,31],[274,4,248,2],[275,4,249,2],[275,9,249,7],[275,15,249,13,"config"],[275,21,249,19],[275,25,249,23,"configs"],[275,32,249,30],[275,34,249,32],[276,6,250,4],[276,10,250,8],[276,11,250,9,"config"],[276,17,250,15],[276,18,250,16,"regex"],[276,23,250,21],[276,25,250,23],[277,8,251,6],[278,6,252,4],[279,6,253,4],[279,12,253,10,"match"],[279,17,253,15],[279,20,253,18,"remainingPath"],[279,33,253,31],[279,34,253,32,"match"],[279,39,253,37],[279,40,253,38,"config"],[279,46,253,44],[279,47,253,45,"regex"],[279,52,253,50],[279,53,253,51],[281,6,255,4],[282,6,256,4],[282,10,256,8,"match"],[282,15,256,13],[282,17,256,15],[283,8,257,6,"routes"],[283,14,257,12],[283,17,257,15,"config"],[283,23,257,21],[283,24,257,22,"routeNames"],[283,34,257,32],[283,35,257,33,"map"],[283,38,257,36],[283,39,257,37,"routeName"],[283,48,257,46],[283,52,257,50],[284,10,258,8],[284,16,258,14,"routeConfig"],[284,27,258,25],[284,30,258,28,"configs"],[284,37,258,35],[284,38,258,36,"find"],[284,42,258,40],[284,43,258,41,"c"],[284,44,258,42],[284,48,258,46],[285,12,259,10],[286,12,260,10],[286,19,260,17,"c"],[286,20,260,18],[286,21,260,19,"screen"],[286,27,260,25],[286,32,260,30,"routeName"],[286,41,260,39],[286,45,260,43],[286,49,260,43,"arrayStartsWith"],[286,67,260,58],[286,68,260,58,"arrayStartsWith"],[286,83,260,58],[286,85,260,59,"config"],[286,91,260,65],[286,92,260,66,"segments"],[286,100,260,74],[286,102,260,76,"c"],[286,103,260,77],[286,104,260,78,"segments"],[286,112,260,86],[286,113,260,87],[287,10,261,8],[287,11,261,9],[287,12,261,10],[288,10,262,8],[288,16,262,14,"params"],[288,22,262,20],[288,25,262,23,"routeConfig"],[288,36,262,34],[288,40,262,38,"match"],[288,45,262,43],[288,46,262,44,"groups"],[288,52,262,50],[288,55,262,53,"Object"],[288,61,262,59],[288,62,262,60,"fromEntries"],[288,73,262,71],[288,74,262,72,"Object"],[288,80,262,78],[288,81,262,79,"entries"],[288,88,262,86],[288,89,262,87,"match"],[288,94,262,92],[288,95,262,93,"groups"],[288,101,262,99],[288,102,262,100],[288,103,262,101,"map"],[288,106,262,104],[288,107,262,105],[288,108,262,106],[288,109,262,107,"key"],[288,112,262,110],[288,114,262,112,"value"],[288,119,262,117],[288,120,262,118],[288,125,262,123],[289,12,263,10],[289,18,263,16,"index"],[289,23,263,21],[289,26,263,24,"Number"],[289,32,263,30],[289,33,263,31,"key"],[289,36,263,34],[289,37,263,35,"replace"],[289,44,263,42],[289,45,263,43],[289,53,263,51],[289,55,263,53],[289,57,263,55],[289,58,263,56],[289,59,263,57],[290,12,264,10],[290,18,264,16,"param"],[290,23,264,21],[290,26,264,24,"routeConfig"],[290,37,264,35],[290,38,264,36,"params"],[290,44,264,42],[290,45,264,43,"find"],[290,49,264,47],[290,50,264,48,"it"],[290,52,264,50],[290,56,264,54,"it"],[290,58,264,56],[290,59,264,57,"index"],[290,64,264,62],[290,69,264,67,"index"],[290,74,264,72],[290,75,264,73],[291,12,265,10],[291,16,265,14,"param"],[291,21,265,19],[291,23,265,21,"screen"],[291,29,265,27],[291,34,265,32,"routeName"],[291,43,265,41],[291,47,265,45,"param"],[291,52,265,50],[291,54,265,52,"name"],[291,58,265,56],[291,60,265,58],[292,14,266,12],[292,21,266,19],[292,22,266,20,"param"],[292,27,266,25],[292,28,266,26,"name"],[292,32,266,30],[292,34,266,32,"value"],[292,39,266,37],[292,40,266,38],[293,12,267,10],[294,12,268,10],[294,19,268,17],[294,23,268,21],[295,10,269,8],[295,11,269,9],[295,12,269,10],[295,13,269,11,"filter"],[295,19,269,17],[295,20,269,18,"it"],[295,22,269,20],[295,26,269,24,"it"],[295,28,269,26],[295,32,269,30],[295,36,269,34],[295,37,269,35],[295,38,269,36,"map"],[295,41,269,39],[295,42,269,40],[295,43,269,41],[295,44,269,42,"key"],[295,47,269,45],[295,49,269,47,"value"],[295,54,269,52],[295,55,269,53],[295,60,269,58],[296,12,270,10],[296,16,270,14,"value"],[296,21,270,19],[296,25,270,23],[296,29,270,27],[296,31,270,29],[297,14,271,12],[297,21,271,19],[297,22,271,20,"key"],[297,25,271,23],[297,27,271,25,"undefined"],[297,36,271,34],[297,37,271,35],[298,12,272,10],[299,12,273,10],[299,18,273,16,"decoded"],[299,25,273,23],[299,28,273,26,"decodeURIComponent"],[299,46,273,44],[299,47,273,45,"value"],[299,52,273,50],[299,53,273,51],[300,12,274,10],[300,18,274,16,"parsed"],[300,24,274,22],[300,27,274,25,"routeConfig"],[300,38,274,36],[300,39,274,37,"parse"],[300,44,274,42],[300,47,274,45,"key"],[300,50,274,48],[300,51,274,49],[300,54,274,52,"routeConfig"],[300,65,274,63],[300,66,274,64,"parse"],[300,71,274,69],[300,72,274,70,"key"],[300,75,274,73],[300,76,274,74],[300,77,274,75,"decoded"],[300,84,274,82],[300,85,274,83],[300,88,274,86,"decoded"],[300,95,274,93],[301,12,275,10],[301,19,275,17],[301,20,275,18,"key"],[301,23,275,21],[301,25,275,23,"parsed"],[301,31,275,29],[301,32,275,30],[302,10,276,8],[302,11,276,9],[302,12,276,10],[302,13,276,11],[302,16,276,14,"undefined"],[302,25,276,23],[303,10,277,8],[303,14,277,12,"params"],[303,20,277,18],[303,24,277,22,"Object"],[303,30,277,28],[303,31,277,29,"keys"],[303,35,277,33],[303,36,277,34,"params"],[303,42,277,40],[303,43,277,41],[303,44,277,42,"length"],[303,50,277,48],[303,52,277,50],[304,12,278,10],[304,19,278,17],[305,14,279,12,"name"],[305,18,279,16],[305,20,279,18,"routeName"],[305,29,279,27],[306,14,280,12,"params"],[307,12,281,10],[307,13,281,11],[308,10,282,8],[309,10,283,8],[309,17,283,15],[310,12,284,10,"name"],[310,16,284,14],[310,18,284,16,"routeName"],[311,10,285,8],[311,11,285,9],[312,8,286,6],[312,9,286,7],[312,10,286,8],[313,8,287,6,"remainingPath"],[313,21,287,19],[313,24,287,22,"remainingPath"],[313,37,287,35],[313,38,287,36,"replace"],[313,45,287,43],[313,46,287,44,"match"],[313,51,287,49],[313,52,287,50],[313,53,287,51],[313,54,287,52],[313,56,287,54],[313,58,287,56],[313,59,287,57],[314,8,288,6],[315,6,289,4],[316,4,290,2],[317,4,291,2],[317,11,291,9],[318,6,292,4,"routes"],[318,12,292,10],[319,6,293,4,"remainingPath"],[320,4,294,2],[320,5,294,3],[321,2,295,0],[321,3,295,1],[322,2,296,0],[322,8,296,6,"createNormalizedConfigs"],[322,31,296,29],[322,34,296,32,"createNormalizedConfigs"],[322,35,296,33,"screen"],[322,41,296,39],[322,43,296,41,"routeConfig"],[322,54,296,52],[322,56,296,54,"initials"],[322,64,296,62],[322,66,296,64,"paths"],[322,71,296,69],[322,73,296,71,"parentScreens"],[322,86,296,84],[322,88,296,86,"routeNames"],[322,98,296,96],[322,103,296,101],[323,4,297,2],[323,10,297,8,"configs"],[323,17,297,15],[323,20,297,18],[323,22,297,20],[324,4,298,2,"routeNames"],[324,14,298,12],[324,15,298,13,"push"],[324,19,298,17],[324,20,298,18,"screen"],[324,26,298,24],[324,27,298,25],[325,4,299,2,"parentScreens"],[325,17,299,15],[325,18,299,16,"push"],[325,22,299,20],[325,23,299,21,"screen"],[325,29,299,27],[325,30,299,28],[326,4,300,2],[326,10,300,8,"config"],[326,16,300,14],[326,19,300,17,"routeConfig"],[326,30,300,28],[326,31,300,29,"screen"],[326,37,300,35],[326,38,300,36],[327,4,301,2],[327,8,301,6],[327,15,301,13,"config"],[327,21,301,19],[327,26,301,24],[327,34,301,32],[327,36,301,34],[328,6,302,4,"paths"],[328,11,302,9],[328,12,302,10,"push"],[328,16,302,14],[328,17,302,15],[329,8,303,6,"screen"],[329,14,303,12],[330,8,304,6,"path"],[330,12,304,10],[330,14,304,12,"config"],[331,6,305,4],[331,7,305,5],[331,8,305,6],[332,6,306,4,"configs"],[332,13,306,11],[332,14,306,12,"push"],[332,18,306,16],[332,19,306,17,"createConfigItem"],[332,35,306,33],[332,36,306,34,"screen"],[332,42,306,40],[332,44,306,42],[332,45,306,43],[332,48,306,46,"routeNames"],[332,58,306,56],[332,59,306,57],[332,61,306,59],[332,62,306,60],[332,65,306,63,"paths"],[332,70,306,68],[332,71,306,69],[332,72,306,70],[332,73,306,71],[333,4,307,2],[333,5,307,3],[333,11,307,9],[333,15,307,13],[333,22,307,20,"config"],[333,28,307,26],[333,33,307,31],[333,41,307,39],[333,43,307,41],[334,6,308,4],[335,6,309,4],[336,6,310,4],[337,6,311,4],[337,10,311,8],[337,17,311,15,"config"],[337,23,311,21],[337,24,311,22,"path"],[337,28,311,26],[337,33,311,31],[337,41,311,39],[337,43,311,41],[338,8,312,6],[338,12,312,10,"config"],[338,18,312,16],[338,19,312,17,"exact"],[338,24,312,22],[338,28,312,26,"config"],[338,34,312,32],[338,35,312,33,"path"],[338,39,312,37],[338,43,312,41],[338,47,312,45],[338,49,312,47],[339,10,313,8],[339,16,313,14],[339,20,313,18,"Error"],[339,25,313,23],[339,26,313,24],[339,37,313,35,"screen"],[339,43,313,41],[339,223,313,221],[339,224,313,222],[340,8,314,6],[342,8,316,6],[343,8,317,6],[344,8,318,6],[344,14,318,12,"aliasConfigs"],[344,26,318,24],[344,29,318,27],[344,31,318,29],[345,8,319,6],[345,12,319,10,"config"],[345,18,319,16],[345,19,319,17,"alias"],[345,24,319,22],[345,26,319,24],[346,10,320,8],[346,15,320,13],[346,21,320,19,"alias"],[346,26,320,24],[346,30,320,28,"config"],[346,36,320,34],[346,37,320,35,"alias"],[346,42,320,40],[346,44,320,42],[347,12,321,10],[347,16,321,14],[347,23,321,21,"alias"],[347,28,321,26],[347,33,321,31],[347,41,321,39],[347,43,321,41],[348,14,322,12,"aliasConfigs"],[348,26,322,24],[348,27,322,25,"push"],[348,31,322,29],[348,32,322,30,"createConfigItem"],[348,48,322,46],[348,49,322,47,"screen"],[348,55,322,53],[348,57,322,55],[348,58,322,56],[348,61,322,59,"routeNames"],[348,71,322,69],[348,72,322,70],[348,74,322,72],[348,75,322,73],[348,78,322,76,"paths"],[348,83,322,81],[348,85,322,83],[349,16,323,14,"screen"],[349,22,323,20],[350,16,324,14,"path"],[350,20,324,18],[350,22,324,20,"alias"],[351,14,325,12],[351,15,325,13],[351,16,325,14],[351,18,325,16,"config"],[351,24,325,22],[351,25,325,23,"parse"],[351,30,325,28],[351,31,325,29],[351,32,325,30],[352,12,326,10],[352,13,326,11],[352,19,326,17],[352,23,326,21],[352,30,326,28,"alias"],[352,35,326,33],[352,40,326,38],[352,48,326,46],[352,50,326,48],[353,14,327,12,"aliasConfigs"],[353,26,327,24],[353,27,327,25,"push"],[353,31,327,29],[353,32,327,30,"createConfigItem"],[353,48,327,46],[353,49,327,47,"screen"],[353,55,327,53],[353,57,327,55],[353,58,327,56],[353,61,327,59,"routeNames"],[353,71,327,69],[353,72,327,70],[353,74,327,72,"alias"],[353,79,327,77],[353,80,327,78,"exact"],[353,85,327,83],[353,88,327,86],[353,89,327,87],[354,16,328,14,"screen"],[354,22,328,20],[355,16,329,14,"path"],[355,20,329,18],[355,22,329,20,"alias"],[355,27,329,25],[355,28,329,26,"path"],[356,14,330,12],[356,15,330,13],[356,16,330,14],[356,19,330,17],[356,20,330,18],[356,23,330,21,"paths"],[356,28,330,26],[356,30,330,28],[357,16,331,14,"screen"],[357,22,331,20],[358,16,332,14,"path"],[358,20,332,18],[358,22,332,20,"alias"],[358,27,332,25],[358,28,332,26,"path"],[359,14,333,12],[359,15,333,13],[359,16,333,14],[359,18,333,16,"alias"],[359,23,333,21],[359,24,333,22,"parse"],[359,29,333,27],[359,30,333,28],[359,31,333,29],[360,12,334,10],[361,10,335,8],[362,8,336,6],[363,8,337,6],[363,12,337,10,"config"],[363,18,337,16],[363,19,337,17,"exact"],[363,24,337,22],[363,26,337,24],[364,10,338,8],[365,10,339,8],[366,10,340,8,"paths"],[366,15,340,13],[366,16,340,14,"length"],[366,22,340,20],[366,25,340,23],[366,26,340,24],[367,8,341,6],[368,8,342,6,"paths"],[368,13,342,11],[368,14,342,12,"push"],[368,18,342,16],[368,19,342,17],[369,10,343,8,"screen"],[369,16,343,14],[370,10,344,8,"path"],[370,14,344,12],[370,16,344,14,"config"],[370,22,344,20],[370,23,344,21,"path"],[371,8,345,6],[371,9,345,7],[371,10,345,8],[372,8,346,6,"configs"],[372,15,346,13],[372,16,346,14,"push"],[372,20,346,18],[372,21,346,19,"createConfigItem"],[372,37,346,35],[372,38,346,36,"screen"],[372,44,346,42],[372,46,346,44],[372,47,346,45],[372,50,346,48,"routeNames"],[372,60,346,58],[372,61,346,59],[372,63,346,61],[372,64,346,62],[372,67,346,65,"paths"],[372,72,346,70],[372,73,346,71],[372,75,346,73,"config"],[372,81,346,79],[372,82,346,80,"parse"],[372,87,346,85],[372,88,346,86],[372,89,346,87],[373,8,347,6,"configs"],[373,15,347,13],[373,16,347,14,"push"],[373,20,347,18],[373,21,347,19],[373,24,347,22,"aliasConfigs"],[373,36,347,34],[373,37,347,35],[374,6,348,4],[375,6,349,4],[375,10,349,8],[375,17,349,15,"config"],[375,23,349,21],[375,28,349,26],[375,36,349,34],[375,40,349,38],[375,47,349,45,"config"],[375,53,349,51],[375,54,349,52,"path"],[375,58,349,56],[375,63,349,61],[375,71,349,69],[375,75,349,73,"config"],[375,81,349,79],[375,82,349,80,"alias"],[375,87,349,85],[375,89,349,87,"length"],[375,95,349,93],[375,97,349,95],[376,8,350,6],[376,14,350,12],[376,18,350,16,"Error"],[376,23,350,21],[376,24,350,22],[376,35,350,33,"screen"],[376,41,350,39],[376,126,350,124],[376,127,350,125],[377,6,351,4],[378,6,352,4],[378,10,352,8,"config"],[378,16,352,14],[378,17,352,15,"screens"],[378,24,352,22],[378,26,352,24],[379,8,353,6],[380,8,354,6],[380,12,354,10,"config"],[380,18,354,16],[380,19,354,17,"initialRouteName"],[380,35,354,33],[380,37,354,35],[381,10,355,8,"initials"],[381,18,355,16],[381,19,355,17,"push"],[381,23,355,21],[381,24,355,22],[382,12,356,10,"initialRouteName"],[382,28,356,26],[382,30,356,28,"config"],[382,36,356,34],[382,37,356,35,"initialRouteName"],[382,53,356,51],[383,12,357,10,"parentScreens"],[384,10,358,8],[384,11,358,9],[384,12,358,10],[385,8,359,6],[386,8,360,6,"Object"],[386,14,360,12],[386,15,360,13,"keys"],[386,19,360,17],[386,20,360,18,"config"],[386,26,360,24],[386,27,360,25,"screens"],[386,34,360,32],[386,35,360,33],[386,36,360,34,"forEach"],[386,43,360,41],[386,44,360,42,"nestedConfig"],[386,56,360,54],[386,60,360,58],[387,10,361,8],[387,16,361,14,"result"],[387,22,361,20],[387,25,361,23,"createNormalizedConfigs"],[387,48,361,46],[387,49,361,47,"nestedConfig"],[387,61,361,59],[387,63,361,61,"config"],[387,69,361,67],[387,70,361,68,"screens"],[387,77,361,75],[387,79,361,77,"initials"],[387,87,361,85],[387,89,361,87],[387,90,361,88],[387,93,361,91,"paths"],[387,98,361,96],[387,99,361,97],[387,101,361,99],[387,102,361,100],[387,105,361,103,"parentScreens"],[387,118,361,116],[387,119,361,117],[387,121,361,119,"routeNames"],[387,131,361,129],[387,132,361,130],[388,10,362,8,"configs"],[388,17,362,15],[388,18,362,16,"push"],[388,22,362,20],[388,23,362,21],[388,26,362,24,"result"],[388,32,362,30],[388,33,362,31],[389,8,363,6],[389,9,363,7],[389,10,363,8],[390,6,364,4],[391,4,365,2],[392,4,366,2,"routeNames"],[392,14,366,12],[392,15,366,13,"pop"],[392,18,366,16],[392,19,366,17],[392,20,366,18],[393,4,367,2],[393,11,367,9,"configs"],[393,18,367,16],[394,2,368,0],[394,3,368,1],[395,2,369,0],[395,8,369,6,"createConfigItem"],[395,24,369,22],[395,27,369,25,"createConfigItem"],[395,28,369,26,"screen"],[395,34,369,32],[395,36,369,34,"routeNames"],[395,46,369,44],[395,48,369,46,"paths"],[395,53,369,51],[395,55,369,53,"parse"],[395,60,369,58],[395,65,369,63],[396,4,370,2],[396,10,370,8,"parts"],[396,15,370,13],[396,18,370,16],[396,20,370,18],[398,4,372,2],[399,4,373,2],[399,9,373,7],[399,15,373,13],[400,6,374,4,"screen"],[400,12,374,10],[401,6,375,4,"path"],[402,4,376,2],[402,5,376,3],[402,9,376,7,"paths"],[402,14,376,12],[402,16,376,14],[403,6,377,4,"parts"],[403,11,377,9],[403,12,377,10,"push"],[403,16,377,14],[403,17,377,15],[403,20,377,18],[403,24,377,18,"getPatternParts"],[403,42,377,33],[403,43,377,33,"getPatternParts"],[403,58,377,33],[403,60,377,34,"path"],[403,64,377,38],[403,65,377,39],[403,66,377,40,"map"],[403,69,377,43],[403,70,377,44,"part"],[403,74,377,48],[403,78,377,48,"Object"],[403,84,377,48],[403,85,377,48,"assign"],[403,91,377,48],[403,96,378,9,"part"],[403,100,378,13],[404,8,379,6,"screen"],[405,6,379,12],[405,8,380,6],[405,9,380,7],[405,10,380,8],[406,4,381,2],[407,4,382,2],[407,10,382,8,"regex"],[407,15,382,13],[407,18,382,16,"parts"],[407,23,382,21],[407,24,382,22,"length"],[407,30,382,28],[407,33,382,31],[407,37,382,35,"RegExp"],[407,43,382,41],[407,44,382,42],[407,49,382,47,"parts"],[407,54,382,52],[407,55,382,53,"map"],[407,58,382,56],[407,59,382,57],[407,60,382,58,"it"],[407,62,382,60],[407,64,382,62,"i"],[407,65,382,63],[407,70,382,68],[408,6,383,4],[408,10,383,8,"it"],[408,12,383,10],[408,13,383,11,"param"],[408,18,383,16],[408,20,383,18],[409,8,384,6],[409,14,384,12,"reg"],[409,17,384,15],[409,20,384,18,"it"],[409,22,384,20],[409,23,384,21,"regex"],[409,28,384,26],[409,32,384,30],[409,39,384,37],[410,8,385,6],[410,15,385,13],[410,29,385,27,"i"],[410,30,385,28],[410,34,385,32,"reg"],[410,37,385,35],[410,45,385,43,"it"],[410,47,385,45],[410,48,385,46,"optional"],[410,56,385,54],[410,59,385,57],[410,62,385,60],[410,65,385,63],[410,67,385,65],[410,70,385,68],[411,6,386,4],[412,6,387,4],[412,13,387,11],[412,16,387,14,"it"],[412,18,387,16],[412,19,387,17,"segment"],[412,26,387,24],[412,31,387,29],[412,34,387,32],[412,37,387,35],[412,41,387,39],[412,44,387,42],[412,48,387,42,"escape"],[412,54,387,48],[412,55,387,48,"default"],[412,62,387,48],[412,64,387,49,"it"],[412,66,387,51],[412,67,387,52,"segment"],[412,74,387,59],[412,75,387,60],[412,80,387,65],[413,4,388,2],[413,5,388,3],[413,6,388,4],[413,7,388,5,"join"],[413,11,388,9],[413,12,388,10],[413,14,388,12],[413,15,388,13],[413,19,388,17],[413,20,388,18],[413,23,388,21,"undefined"],[413,32,388,30],[414,4,389,2],[414,10,389,8,"segments"],[414,18,389,16],[414,21,389,19,"parts"],[414,26,389,24],[414,27,389,25,"map"],[414,30,389,28],[414,31,389,29,"it"],[414,33,389,31],[414,37,389,35,"it"],[414,39,389,37],[414,40,389,38,"segment"],[414,47,389,45],[414,48,389,46],[415,4,390,2],[415,10,390,8,"params"],[415,16,390,14],[415,19,390,17,"parts"],[415,24,390,22],[415,25,390,23,"map"],[415,28,390,26],[415,29,390,27],[415,30,390,28,"it"],[415,32,390,30],[415,34,390,32,"i"],[415,35,390,33],[415,40,390,38,"it"],[415,42,390,40],[415,43,390,41,"param"],[415,48,390,46],[415,51,390,49],[416,6,391,4,"index"],[416,11,391,9],[416,13,391,11,"i"],[416,14,391,12],[417,6,392,4,"screen"],[417,12,392,10],[417,14,392,12,"it"],[417,16,392,14],[417,17,392,15,"screen"],[417,23,392,21],[418,6,393,4,"name"],[418,10,393,8],[418,12,393,10,"it"],[418,14,393,12],[418,15,393,13,"param"],[419,4,394,2],[419,5,394,3],[419,8,394,6],[419,12,394,10],[419,13,394,11],[419,14,394,12,"filter"],[419,20,394,18],[419,21,394,19,"it"],[419,23,394,21],[419,27,394,25,"it"],[419,29,394,27],[419,33,394,31],[419,37,394,35],[419,38,394,36],[420,4,395,2],[420,11,395,9],[421,6,396,4,"screen"],[421,12,396,10],[422,6,397,4,"regex"],[422,11,397,9],[423,6,398,4,"segments"],[423,14,398,12],[424,6,399,4,"params"],[424,12,399,10],[425,6,400,4,"routeNames"],[425,16,400,14],[426,6,401,4,"parse"],[427,4,402,2],[427,5,402,3],[428,2,403,0],[428,3,403,1],[429,2,404,0],[429,8,404,6,"findParseConfigForRoute"],[429,31,404,29],[429,34,404,32,"findParseConfigForRoute"],[429,35,404,33,"routeName"],[429,44,404,42],[429,46,404,44,"flatConfig"],[429,56,404,54],[429,61,404,59],[430,4,405,2],[430,9,405,7],[430,15,405,13,"config"],[430,21,405,19],[430,25,405,23,"flatConfig"],[430,35,405,33],[430,37,405,35],[431,6,406,4],[431,10,406,8,"routeName"],[431,19,406,17],[431,24,406,22,"config"],[431,30,406,28],[431,31,406,29,"routeNames"],[431,41,406,39],[431,42,406,40,"config"],[431,48,406,46],[431,49,406,47,"routeNames"],[431,59,406,57],[431,60,406,58,"length"],[431,66,406,64],[431,69,406,67],[431,70,406,68],[431,71,406,69],[431,73,406,71],[432,8,407,6],[432,15,407,13,"config"],[432,21,407,19],[432,22,407,20,"parse"],[432,27,407,25],[433,6,408,4],[434,4,409,2],[435,4,410,2],[435,11,410,9,"undefined"],[435,20,410,18],[436,2,411,0],[436,3,411,1],[438,2,413,0],[439,2,414,0],[439,8,414,6,"findInitialRoute"],[439,24,414,22],[439,27,414,25,"findInitialRoute"],[439,28,414,26,"routeName"],[439,37,414,35],[439,39,414,37,"parentScreens"],[439,52,414,50],[439,54,414,52,"initialRoutes"],[439,67,414,65],[439,72,414,70],[440,4,415,2],[440,9,415,7],[440,15,415,13,"config"],[440,21,415,19],[440,25,415,23,"initialRoutes"],[440,38,415,36],[440,40,415,38],[441,6,416,4],[441,10,416,8,"parentScreens"],[441,23,416,21],[441,24,416,22,"length"],[441,30,416,28],[441,35,416,33,"config"],[441,41,416,39],[441,42,416,40,"parentScreens"],[441,55,416,53],[441,56,416,54,"length"],[441,62,416,60],[441,64,416,62],[442,8,417,6],[442,12,417,10,"sameParents"],[442,23,417,21],[442,26,417,24],[442,30,417,28],[443,8,418,6],[443,13,418,11],[443,17,418,15,"i"],[443,18,418,16],[443,21,418,19],[443,22,418,20],[443,24,418,22,"i"],[443,25,418,23],[443,28,418,26,"parentScreens"],[443,41,418,39],[443,42,418,40,"length"],[443,48,418,46],[443,50,418,48,"i"],[443,51,418,49],[443,53,418,51],[443,55,418,53],[444,10,419,8],[444,14,419,12,"parentScreens"],[444,27,419,25],[444,28,419,26,"i"],[444,29,419,27],[444,30,419,28],[444,31,419,29,"localeCompare"],[444,44,419,42],[444,45,419,43,"config"],[444,51,419,49],[444,52,419,50,"parentScreens"],[444,65,419,63],[444,66,419,64,"i"],[444,67,419,65],[444,68,419,66],[444,69,419,67],[444,74,419,72],[444,75,419,73],[444,77,419,75],[445,12,420,10,"sameParents"],[445,23,420,21],[445,26,420,24],[445,31,420,29],[446,12,421,10],[447,10,422,8],[448,8,423,6],[449,8,424,6],[449,12,424,10,"sameParents"],[449,23,424,21],[449,25,424,23],[450,10,425,8],[450,17,425,15,"routeName"],[450,26,425,24],[450,31,425,29,"config"],[450,37,425,35],[450,38,425,36,"initialRouteName"],[450,54,425,52],[450,57,425,55,"config"],[450,63,425,61],[450,64,425,62,"initialRouteName"],[450,80,425,78],[450,83,425,81,"undefined"],[450,92,425,90],[451,8,426,6],[452,6,427,4],[453,4,428,2],[454,4,429,2],[454,11,429,9,"undefined"],[454,20,429,18],[455,2,430,0],[455,3,430,1],[457,2,432,0],[458,2,433,0],[459,2,434,0],[459,8,434,6,"createStateObject"],[459,25,434,23],[459,28,434,26,"createStateObject"],[459,29,434,27,"initialRoute"],[459,41,434,39],[459,43,434,41,"route"],[459,48,434,46],[459,50,434,48,"isEmpty"],[459,57,434,55],[459,62,434,60],[460,4,435,2],[460,8,435,6,"isEmpty"],[460,15,435,13],[460,17,435,15],[461,6,436,4],[461,10,436,8,"initialRoute"],[461,22,436,20],[461,24,436,22],[462,8,437,6],[462,15,437,13],[463,10,438,8,"index"],[463,15,438,13],[463,17,438,15],[463,18,438,16],[464,10,439,8,"routes"],[464,16,439,14],[464,18,439,16],[464,19,439,17],[465,12,440,10,"name"],[465,16,440,14],[465,18,440,16,"initialRoute"],[466,10,441,8],[466,11,441,9],[466,13,441,11,"route"],[466,18,441,16],[467,8,442,6],[467,9,442,7],[468,6,443,4],[468,7,443,5],[468,13,443,11],[469,8,444,6],[469,15,444,13],[470,10,445,8,"routes"],[470,16,445,14],[470,18,445,16],[470,19,445,17,"route"],[470,24,445,22],[471,8,446,6],[471,9,446,7],[472,6,447,4],[473,4,448,2],[473,5,448,3],[473,11,448,9],[474,6,449,4],[474,10,449,8,"initialRoute"],[474,22,449,20],[474,24,449,22],[475,8,450,6],[475,15,450,13],[476,10,451,8,"index"],[476,15,451,13],[476,17,451,15],[476,18,451,16],[477,10,452,8,"routes"],[477,16,452,14],[477,18,452,16],[477,19,452,17],[478,12,453,10,"name"],[478,16,453,14],[478,18,453,16,"initialRoute"],[479,10,454,8],[479,11,454,9],[479,13,454,9,"Object"],[479,19,454,9],[479,20,454,9,"assign"],[479,26,454,9],[479,31,455,13,"route"],[479,36,455,18],[480,12,456,10,"state"],[480,17,456,15],[480,19,456,17],[481,14,457,12,"routes"],[481,20,457,18],[481,22,457,20],[482,12,458,10],[483,10,458,11],[484,8,460,6],[484,9,460,7],[485,6,461,4],[485,7,461,5],[485,13,461,11],[486,8,462,6],[486,15,462,13],[487,10,463,8,"routes"],[487,16,463,14],[487,18,463,16],[487,19,463,16,"Object"],[487,25,463,16],[487,26,463,16,"assign"],[487,32,463,16],[487,37,464,13,"route"],[487,42,464,18],[488,12,465,10,"state"],[488,17,465,15],[488,19,465,17],[489,14,466,12,"routes"],[489,20,466,18],[489,22,466,20],[490,12,467,10],[491,10,467,11],[492,8,469,6],[492,9,469,7],[493,6,470,4],[494,4,471,2],[495,2,472,0],[495,3,472,1],[496,2,473,0],[496,8,473,6,"createNestedStateObject"],[496,31,473,29],[496,34,473,32,"createNestedStateObject"],[496,35,473,33,"path"],[496,39,473,37],[496,41,473,39,"routes"],[496,47,473,45],[496,49,473,47,"initialRoutes"],[496,62,473,60],[496,64,473,62,"flatConfig"],[496,74,473,72],[496,79,473,77],[497,4,474,2],[497,8,474,6,"route"],[497,13,474,11],[497,16,474,14,"routes"],[497,22,474,20],[497,23,474,21,"shift"],[497,28,474,26],[497,29,474,27],[497,30,474,28],[498,4,475,2],[498,10,475,8,"parentScreens"],[498,23,475,21],[498,26,475,24],[498,28,475,26],[499,4,476,2],[499,8,476,6,"initialRoute"],[499,20,476,18],[499,23,476,21,"findInitialRoute"],[499,39,476,37],[499,40,476,38,"route"],[499,45,476,43],[499,46,476,44,"name"],[499,50,476,48],[499,52,476,50,"parentScreens"],[499,65,476,63],[499,67,476,65,"initialRoutes"],[499,80,476,78],[499,81,476,79],[500,4,477,2,"parentScreens"],[500,17,477,15],[500,18,477,16,"push"],[500,22,477,20],[500,23,477,21,"route"],[500,28,477,26],[500,29,477,27,"name"],[500,33,477,31],[500,34,477,32],[501,4,478,2],[501,10,478,8,"state"],[501,15,478,13],[501,18,478,16,"createStateObject"],[501,35,478,33],[501,36,478,34,"initialRoute"],[501,48,478,46],[501,50,478,48,"route"],[501,55,478,53],[501,57,478,55,"routes"],[501,63,478,61],[501,64,478,62,"length"],[501,70,478,68],[501,75,478,73],[501,76,478,74],[501,77,478,75],[502,4,479,2],[502,8,479,6,"routes"],[502,14,479,12],[502,15,479,13,"length"],[502,21,479,19],[502,24,479,22],[502,25,479,23],[502,27,479,25],[503,6,480,4],[503,10,480,8,"nestedState"],[503,21,480,19],[503,24,480,22,"state"],[503,29,480,27],[504,6,481,4],[504,13,481,11,"route"],[504,18,481,16],[504,21,481,19,"routes"],[504,27,481,25],[504,28,481,26,"shift"],[504,33,481,31],[504,34,481,32],[504,35,481,33],[504,37,481,35],[505,8,482,6,"initialRoute"],[505,20,482,18],[505,23,482,21,"findInitialRoute"],[505,39,482,37],[505,40,482,38,"route"],[505,45,482,43],[505,46,482,44,"name"],[505,50,482,48],[505,52,482,50,"parentScreens"],[505,65,482,63],[505,67,482,65,"initialRoutes"],[505,80,482,78],[505,81,482,79],[506,8,483,6],[506,14,483,12,"nestedStateIndex"],[506,30,483,28],[506,33,483,31,"nestedState"],[506,44,483,42],[506,45,483,43,"index"],[506,50,483,48],[506,54,483,52,"nestedState"],[506,65,483,63],[506,66,483,64,"routes"],[506,72,483,70],[506,73,483,71,"length"],[506,79,483,77],[506,82,483,80],[506,83,483,81],[507,8,484,6,"nestedState"],[507,19,484,17],[507,20,484,18,"routes"],[507,26,484,24],[507,27,484,25,"nestedStateIndex"],[507,43,484,41],[507,44,484,42],[507,45,484,43,"state"],[507,50,484,48],[507,53,484,51,"createStateObject"],[507,70,484,68],[507,71,484,69,"initialRoute"],[507,83,484,81],[507,85,484,83,"route"],[507,90,484,88],[507,92,484,90,"routes"],[507,98,484,96],[507,99,484,97,"length"],[507,105,484,103],[507,110,484,108],[507,111,484,109],[507,112,484,110],[508,8,485,6],[508,12,485,10,"routes"],[508,18,485,16],[508,19,485,17,"length"],[508,25,485,23],[508,28,485,26],[508,29,485,27],[508,31,485,29],[509,10,486,8,"nestedState"],[509,21,486,19],[509,24,486,22,"nestedState"],[509,35,486,33],[509,36,486,34,"routes"],[509,42,486,40],[509,43,486,41,"nestedStateIndex"],[509,59,486,57],[509,60,486,58],[509,61,486,59,"state"],[509,66,486,64],[510,8,487,6],[511,8,488,6,"parentScreens"],[511,21,488,19],[511,22,488,20,"push"],[511,26,488,24],[511,27,488,25,"route"],[511,32,488,30],[511,33,488,31,"name"],[511,37,488,35],[511,38,488,36],[512,6,489,4],[513,4,490,2],[514,4,491,2,"route"],[514,9,491,7],[514,12,491,10],[514,16,491,10,"findFocusedRoute"],[514,35,491,26],[514,36,491,26,"findFocusedRoute"],[514,52,491,26],[514,54,491,27,"state"],[514,59,491,32],[514,60,491,33],[515,4,492,2,"route"],[515,9,492,7],[515,10,492,8,"path"],[515,14,492,12],[515,17,492,15,"path"],[515,21,492,19],[515,22,492,20,"replace"],[515,29,492,27],[515,30,492,28],[515,35,492,33],[515,37,492,35],[515,39,492,37],[515,40,492,38],[516,4,493,2],[516,10,493,8,"params"],[516,16,493,14],[516,19,493,17,"parseQueryParams"],[516,35,493,33],[516,36,493,34,"path"],[516,40,493,38],[516,42,493,40,"flatConfig"],[516,52,493,50],[516,55,493,53,"findParseConfigForRoute"],[516,78,493,76],[516,79,493,77,"route"],[516,84,493,82],[516,85,493,83,"name"],[516,89,493,87],[516,91,493,89,"flatConfig"],[516,101,493,99],[516,102,493,100],[516,105,493,103,"undefined"],[516,114,493,112],[516,115,493,113],[517,4,494,2],[517,8,494,6,"params"],[517,14,494,12],[517,16,494,14],[518,6,495,4,"route"],[518,11,495,9],[518,12,495,10,"params"],[518,18,495,16],[518,21,495,16,"Object"],[518,27,495,16],[518,28,495,16,"assign"],[518,34,495,16],[518,39,496,9,"route"],[518,44,496,14],[518,45,496,15,"params"],[518,51,496,21],[518,53,497,9,"params"],[518,59,497,15],[518,60,498,5],[519,4,499,2],[520,4,500,2],[520,11,500,9,"state"],[520,16,500,14],[521,2,501,0],[521,3,501,1],[522,2,502,0],[522,8,502,6,"parseQueryParams"],[522,24,502,22],[522,27,502,25,"parseQueryParams"],[522,28,502,26,"path"],[522,32,502,30],[522,34,502,32,"parseConfig"],[522,45,502,43],[522,50,502,48],[523,4,503,2],[523,10,503,8,"query"],[523,15,503,13],[523,18,503,16,"path"],[523,22,503,20],[523,23,503,21,"split"],[523,28,503,26],[523,29,503,27],[523,32,503,30],[523,33,503,31],[523,34,503,32],[523,35,503,33],[523,36,503,34],[524,4,504,2],[524,10,504,8,"params"],[524,16,504,14],[524,19,504,17,"queryString"],[524,30,504,28],[524,31,504,29,"parse"],[524,36,504,34],[524,37,504,35,"query"],[524,42,504,40],[524,43,504,41],[525,4,505,2],[525,8,505,6,"parseConfig"],[525,19,505,17],[525,21,505,19],[526,6,506,4,"Object"],[526,12,506,10],[526,13,506,11,"keys"],[526,17,506,15],[526,18,506,16,"params"],[526,24,506,22],[526,25,506,23],[526,26,506,24,"forEach"],[526,33,506,31],[526,34,506,32,"name"],[526,38,506,36],[526,42,506,40],[527,8,507,6],[527,12,507,10,"Object"],[527,18,507,16],[527,19,507,17,"hasOwnProperty"],[527,33,507,31],[527,34,507,32,"call"],[527,38,507,36],[527,39,507,37,"parseConfig"],[527,50,507,48],[527,52,507,50,"name"],[527,56,507,54],[527,57,507,55],[527,61,507,59],[527,68,507,66,"params"],[527,74,507,72],[527,75,507,73,"name"],[527,79,507,77],[527,80,507,78],[527,85,507,83],[527,93,507,91],[527,95,507,93],[528,10,508,8,"params"],[528,16,508,14],[528,17,508,15,"name"],[528,21,508,19],[528,22,508,20],[528,25,508,23,"parseConfig"],[528,36,508,34],[528,37,508,35,"name"],[528,41,508,39],[528,42,508,40],[528,43,508,41,"params"],[528,49,508,47],[528,50,508,48,"name"],[528,54,508,52],[528,55,508,53],[528,56,508,54],[529,8,509,6],[530,6,510,4],[530,7,510,5],[530,8,510,6],[531,4,511,2],[532,4,512,2],[532,11,512,9,"Object"],[532,17,512,15],[532,18,512,16,"keys"],[532,22,512,20],[532,23,512,21,"params"],[532,29,512,27],[532,30,512,28],[532,31,512,29,"length"],[532,37,512,35],[532,40,512,38,"params"],[532,46,512,44],[532,49,512,47,"undefined"],[532,58,512,56],[533,2,513,0],[533,3,513,1],[534,0,513,2],[534,3]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","configs.find$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getSortedNormalizedConfigs","Object.keys.map$argument_0","concat.sort$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","matchAgainstConfigs","config.routeNames.map$argument_0","Object.entries.map$argument_0","routeConfig.params.find$argument_0","Object.entries.map.filter$argument_0","Object.entries.map.filter.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","getPatternParts.map$argument_0","parts.map$argument_0","parts.map.filter$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;OC8B;4DC4B;KDK;+BES,0CF;gEGE;QHE;CDuB;AKM;CLO;AMC;CNa;AOC;CPS;AQC;+CCE,uED,QE;GF2E;CRC;AWC;iBCE;uDCQ,sBD,YE,sBF;GDQ;CXC;AeC;qBCC;IDI;CfC;4BiBC;qCCa;yCfC;SeG;yGCC;gDCE,wBD;SDK,SG,gBH,MI;SJO;ODU;CjBS;gCuBC;0CCgE;ODG;CvBK;yByBC;4CCQ;MDG;yDEE;GFM;6BEC,gBF;2BEC;UFI,SG,gBH;CzBS;gC6BC;C7BO;yB8BG;C9BgB;0B+BI;C/BsC;gCgCC;ChC4B;yBiCC;gCTI;KSI;CjCG"},"hasCjsExports":false},"type":"js/module"}]}