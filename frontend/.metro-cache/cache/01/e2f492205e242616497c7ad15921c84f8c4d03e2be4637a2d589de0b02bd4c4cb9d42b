{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"./bytesToUuid","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"xaWt6Yz4UoVWhmPSw/5J6OHvgNE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = _default;\n  var _bytesToUuid = _interopRequireDefault(require(_dependencyMap[1], \"./bytesToUuid\"));\n  function uuidToBytes(uuid) {\n    // Note: We assume we're being passed a valid uuid string\n    const bytes = [];\n    uuid.replace(/[a-fA-F0-9]{2}/g, hex => {\n      bytes.push(parseInt(hex, 16));\n      return '';\n    });\n    return bytes;\n  }\n  function stringToBytes(str) {\n    str = unescape(encodeURIComponent(str)); // UTF8 escape\n    const bytes = new Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      bytes[i] = str.charCodeAt(i);\n    }\n    return bytes;\n  }\n  function _default(name, version, hashfunc) {\n    const generateUUID = function (value, namespace, buf, offset) {\n      const off = buf && offset || 0;\n      if (typeof value == 'string') value = stringToBytes(value);\n      if (typeof namespace == 'string') namespace = uuidToBytes(namespace);\n      if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');\n      if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n\n      // Per 4.3\n      const bytes = hashfunc(namespace.concat(value));\n      bytes[6] = bytes[6] & 0x0f | version;\n      bytes[8] = bytes[8] & 0x3f | 0x80;\n      if (buf) {\n        for (let idx = 0; idx < 16; ++idx) {\n          buf[off + idx] = bytes[idx];\n        }\n      }\n      return (0, _bytesToUuid.default)(bytes);\n    };\n\n    // Function#name is not settable on some platforms (#270)\n    try {\n      generateUUID.name = name;\n    } catch {}\n\n    // Pre-defined namespaces, per Appendix C\n    generateUUID.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\n    generateUUID.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n    return generateUUID;\n  }\n});","lineCount":55,"map":[[7,2,1,0],[7,6,1,0,"_bytesToUuid"],[7,18,1,0],[7,21,1,0,"_interopRequireDefault"],[7,43,1,0],[7,44,1,0,"require"],[7,51,1,0],[7,52,1,0,"_dependencyMap"],[7,66,1,0],[8,2,3,0],[8,11,3,9,"uuidToBytes"],[8,22,3,20,"uuidToBytes"],[8,23,3,21,"uuid"],[8,27,3,33],[8,29,3,35],[9,4,4,2],[10,4,5,2],[10,10,5,8,"bytes"],[10,15,5,23],[10,18,5,26],[10,20,5,28],[11,4,6,2,"uuid"],[11,8,6,6],[11,9,6,7,"replace"],[11,16,6,14],[11,17,6,15],[11,34,6,32],[11,36,6,35,"hex"],[11,39,6,46],[11,43,6,51],[12,6,7,4,"bytes"],[12,11,7,9],[12,12,7,10,"push"],[12,16,7,14],[12,17,7,15,"parseInt"],[12,25,7,23],[12,26,7,24,"hex"],[12,29,7,27],[12,31,7,29],[12,33,7,31],[12,34,7,32],[12,35,7,33],[13,6,8,4],[13,13,8,11],[13,15,8,13],[14,4,9,2],[14,5,9,3],[14,6,9,4],[15,4,11,2],[15,11,11,9,"bytes"],[15,16,11,14],[16,2,12,0],[17,2,14,0],[17,11,14,9,"stringToBytes"],[17,24,14,22,"stringToBytes"],[17,25,14,23,"str"],[17,28,14,34],[17,30,14,36],[18,4,15,2,"str"],[18,7,15,5],[18,10,15,8,"unescape"],[18,18,15,16],[18,19,15,17,"encodeURIComponent"],[18,37,15,35],[18,38,15,36,"str"],[18,41,15,39],[18,42,15,40],[18,43,15,41],[18,44,15,42],[18,45,15,43],[19,4,16,2],[19,10,16,8,"bytes"],[19,15,16,23],[19,18,16,26],[19,22,16,30,"Array"],[19,27,16,35],[19,28,16,36,"str"],[19,31,16,39],[19,32,16,40,"length"],[19,38,16,46],[19,39,16,47],[20,4,17,2],[20,9,17,7],[20,13,17,11,"i"],[20,14,17,12],[20,17,17,15],[20,18,17,16],[20,20,17,18,"i"],[20,21,17,19],[20,24,17,22,"str"],[20,27,17,25],[20,28,17,26,"length"],[20,34,17,32],[20,36,17,34,"i"],[20,37,17,35],[20,39,17,37],[20,41,17,39],[21,6,18,4,"bytes"],[21,11,18,9],[21,12,18,10,"i"],[21,13,18,11],[21,14,18,12],[21,17,18,15,"str"],[21,20,18,18],[21,21,18,19,"charCodeAt"],[21,31,18,29],[21,32,18,30,"i"],[21,33,18,31],[21,34,18,32],[22,4,19,2],[23,4,20,2],[23,11,20,9,"bytes"],[23,16,20,14],[24,2,21,0],[25,2,23,15],[25,11,23,15,"_default"],[25,20,24,2,"name"],[25,24,24,14],[25,26,25,2,"version"],[25,33,25,17],[25,35,26,2,"hashfunc"],[25,43,26,50],[25,45,27,2],[26,4,28,2],[26,10,28,8,"generateUUID"],[26,22,28,20],[26,25,28,23],[26,34,28,23,"generateUUID"],[26,35,29,4,"value"],[26,40,29,28],[26,42,30,4,"namespace"],[26,51,30,32],[26,53,31,4,"buf"],[26,56,31,18],[26,58,32,4,"offset"],[26,64,32,19],[26,66,33,12],[27,6,34,4],[27,12,34,10,"off"],[27,15,34,13],[27,18,34,17,"buf"],[27,21,34,20],[27,25,34,24,"offset"],[27,31,34,30],[27,35,34,35],[27,36,34,36],[28,6,36,4],[28,10,36,8],[28,17,36,15,"value"],[28,22,36,20],[28,26,36,24],[28,34,36,32],[28,36,36,34,"value"],[28,41,36,39],[28,44,36,42,"stringToBytes"],[28,57,36,55],[28,58,36,56,"value"],[28,63,36,61],[28,64,36,62],[29,6,37,4],[29,10,37,8],[29,17,37,15,"namespace"],[29,26,37,24],[29,30,37,28],[29,38,37,36],[29,40,37,38,"namespace"],[29,49,37,47],[29,52,37,50,"uuidToBytes"],[29,63,37,61],[29,64,37,62,"namespace"],[29,73,37,71],[29,74,37,72],[30,6,39,4],[30,10,39,8],[30,11,39,9,"Array"],[30,16,39,14],[30,17,39,15,"isArray"],[30,24,39,22],[30,25,39,23,"value"],[30,30,39,28],[30,31,39,29],[30,33,39,31],[30,39,39,37,"TypeError"],[30,48,39,46],[30,49,39,47],[30,82,39,80],[30,83,39,81],[31,6,40,4],[31,10,40,8],[31,11,40,9,"Array"],[31,16,40,14],[31,17,40,15,"isArray"],[31,24,40,22],[31,25,40,23,"namespace"],[31,34,40,32],[31,35,40,33],[31,39,40,37,"namespace"],[31,48,40,46],[31,49,40,47,"length"],[31,55,40,53],[31,60,40,58],[31,62,40,60],[31,64,41,6],[31,70,41,12,"TypeError"],[31,79,41,21],[31,80,41,22],[31,141,41,83],[31,142,41,84],[33,6,43,4],[34,6,44,4],[34,12,44,10,"bytes"],[34,17,44,15],[34,20,44,18,"hashfunc"],[34,28,44,26],[34,29,44,27,"namespace"],[34,38,44,36],[34,39,44,37,"concat"],[34,45,44,43],[34,46,44,44,"value"],[34,51,44,49],[34,52,44,50],[34,53,44,51],[35,6,45,4,"bytes"],[35,11,45,9],[35,12,45,10],[35,13,45,11],[35,14,45,12],[35,17,45,16,"bytes"],[35,22,45,21],[35,23,45,22],[35,24,45,23],[35,25,45,24],[35,28,45,27],[35,32,45,31],[35,35,45,35,"version"],[35,42,45,42],[36,6,46,4,"bytes"],[36,11,46,9],[36,12,46,10],[36,13,46,11],[36,14,46,12],[36,17,46,16,"bytes"],[36,22,46,21],[36,23,46,22],[36,24,46,23],[36,25,46,24],[36,28,46,27],[36,32,46,31],[36,35,46,35],[36,39,46,39],[37,6,48,4],[37,10,48,8,"buf"],[37,13,48,11],[37,15,48,13],[38,8,49,6],[38,13,49,11],[38,17,49,15,"idx"],[38,20,49,18],[38,23,49,21],[38,24,49,22],[38,26,49,24,"idx"],[38,29,49,27],[38,32,49,30],[38,34,49,32],[38,36,49,34],[38,38,49,36,"idx"],[38,41,49,39],[38,43,49,41],[39,10,50,8,"buf"],[39,13,50,11],[39,14,50,12,"off"],[39,17,50,15],[39,20,50,18,"idx"],[39,23,50,21],[39,24,50,22],[39,27,50,25,"bytes"],[39,32,50,30],[39,33,50,31,"idx"],[39,36,50,34],[39,37,50,35],[40,8,51,6],[41,6,52,4],[42,6,54,4],[42,13,54,11],[42,17,54,11,"bytesToUuid"],[42,37,54,22],[42,39,54,23,"bytes"],[42,44,54,28],[42,45,54,29],[43,4,55,2],[43,5,55,3],[45,4,57,2],[46,4,58,2],[46,8,58,6],[47,6,59,4,"generateUUID"],[47,18,59,16],[47,19,59,17,"name"],[47,23,59,21],[47,26,59,24,"name"],[47,30,59,28],[48,4,60,2],[48,5,60,3],[48,6,60,4],[48,12,60,10],[48,13,60,11],[50,4,62,2],[51,4,63,2,"generateUUID"],[51,16,63,14],[51,17,63,15,"DNS"],[51,20,63,18],[51,23,63,21],[51,61,63,59],[52,4,64,2,"generateUUID"],[52,16,64,14],[52,17,64,15,"URL"],[52,20,64,18],[52,23,64,21],[52,61,64,59],[53,4,66,2],[53,11,66,9,"generateUUID"],[53,23,66,21],[54,2,67,0],[55,0,67,1],[55,3]],"functionMap":{"names":["<global>","uuidToBytes","uuid.replace$argument_1","stringToBytes","default","generateUUID"],"mappings":"AAA;ACE;kCCG;GDG;CDG;AGE;CHO;eIE;uBCK;GD2B;CJY"}},"type":"js/module"}]}