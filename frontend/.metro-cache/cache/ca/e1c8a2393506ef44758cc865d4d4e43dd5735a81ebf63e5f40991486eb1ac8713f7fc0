{"dependencies":[{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE=","exportNames":["*"],"imports":1}},{"name":"./Font.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"iwvcxaVgfIXdww6iPrKSgtcaZy8=","exportNames":["*"],"imports":1}},{"name":"./FontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}}],"key":"ubgLNxOkixzH8pVapAwap9wQ8XU=","exportNames":["*"],"imports":1}},{"name":"./memory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}}],"key":"wlrMBDc1MVhnZOig0xhYu83J328=","exportNames":["*"],"imports":1}},{"name":"./server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}}],"key":"QinwpQMs5c8GY+myVdgXEzx55Tw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.isLoaded = isLoaded;\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return _FontTypes.FontDisplay;\n    }\n  });\n  var _expoModulesCore = require(_dependencyMap[0], \"expo-modules-core\");\n  var _ExpoFontLoader = require(_dependencyMap[1], \"./ExpoFontLoader\");\n  var ExpoFontLoader = _interopDefault(_ExpoFontLoader);\n  var _FontTypes = require(_dependencyMap[2], \"./Font.types\");\n  var _FontLoader = require(_dependencyMap[3], \"./FontLoader\");\n  var _memory = require(_dependencyMap[4], \"./memory\");\n  var _server = require(_dependencyMap[5], \"./server\");\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      return (0, _memory.isLoadedInCache)(fontFamily) || !!ExpoFontLoader.default.isLoaded(fontFamily);\n    }\n    return (0, _memory.isLoadedNative)(fontFamily);\n  }\n  /**\n   * Synchronously get all the fonts that have been loaded.\n   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n   *\n   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n   */\n  function getLoadedFonts() {\n    return ExpoFontLoader.default.getLoadedFonts();\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  // @needsAudit\n  /**\n   * An efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * > **Note**: We recommend using the [config plugin](#configuration-in-appjsonappconfigjs) instead whenever possible.\n   *\n   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n   * with React Native `Text` elements.\n   * @param source The font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    const isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      const fontMap = fontFamilyOrFontMap;\n      const names = Object.keys(fontMap);\n      if (isServer) {\n        names.map(name => (0, _server.registerStaticFont)(name, fontMap[name]));\n        return Promise.resolve();\n      }\n      return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});\n    }\n    if (isServer) {\n      (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n      return Promise.resolve();\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  async function loadFontInNamespaceAsync(fontFamily, source) {\n    if (!source) {\n      throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n    }\n    // we consult the native module to see if the font is already loaded\n    // this is slower than checking the cache but can help avoid loading the same font n times\n    if (isLoaded(fontFamily)) {\n      return;\n    }\n    if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n      return _memory.loadPromises[fontFamily];\n    }\n    // Important: we want all callers that concurrently try to load the same font to await the same\n    // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n    // promise in the program, we need to create the promise synchronously without yielding the event\n    // loop from this point.\n    const asset = (0, _FontLoader.getAssetForSource)(source);\n    _memory.loadPromises[fontFamily] = (async () => {\n      try {\n        await (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n        (0, _memory.markLoaded)(fontFamily);\n      } finally {\n        delete _memory.loadPromises[fontFamily];\n      }\n    })();\n    await _memory.loadPromises[fontFamily];\n  }\n  // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   * @hidden\n   */\n  async function unloadAllAsync() {\n    if (!ExpoFontLoader.default.unloadAllAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n    }\n    if (Object.keys(_memory.loadPromises).length) {\n      throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n    }\n    (0, _memory.purgeCache)();\n    await ExpoFontLoader.default.unloadAllAsync();\n  }\n  // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * This is used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   * @hidden\n   */\n  async function unloadAsync(fontFamilyOrFontMap, options) {\n    if (!ExpoFontLoader.default.unloadAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n    }\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (options) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n      }\n      const fontMap = fontFamilyOrFontMap;\n      const names = Object.keys(fontMap);\n      await Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n      return;\n    }\n    return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n  }\n  async function unloadFontInNamespaceAsync(fontFamily, options) {\n    if (!isLoaded(fontFamily)) {\n      return;\n    } else {\n      (0, _memory.purgeFontFamilyFromCache)(fontFamily);\n    }\n    // Important: we want all callers that concurrently try to load the same font to await the same\n    // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n    // promise in the program, we need to create the promise synchronously without yielding the event\n    // loop from this point.\n    if (!fontFamily) {\n      throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n    }\n    await ExpoFontLoader.default.unloadAsync(fontFamily, options);\n  }\n});","lineCount":183,"map":[[12,2,14,0,"exports"],[12,9,14,0],[12,10,14,0,"isLoaded"],[12,18,14,0],[12,21,14,0,"isLoaded"],[12,29,14,0],[13,2,26,0,"exports"],[13,9,26,0],[13,10,26,0,"getLoadedFonts"],[13,24,26,0],[13,27,26,0,"getLoadedFonts"],[13,41,26,0],[14,2,36,0,"exports"],[14,9,36,0],[14,10,36,0,"isLoading"],[14,19,36,0],[14,22,36,0,"isLoading"],[14,31,36,0],[15,2,54,0,"exports"],[15,9,54,0],[15,10,54,0,"loadAsync"],[15,19,54,0],[15,22,54,0,"loadAsync"],[15,31,54,0],[16,2,110,0,"exports"],[16,9,110,0],[16,10,110,0,"unloadAllAsync"],[16,24,110,0],[16,27,110,0,"unloadAllAsync"],[16,41,110,0],[17,2,130,0,"exports"],[17,9,130,0],[17,10,130,0,"unloadAsync"],[17,21,130,0],[17,24,130,0,"unloadAsync"],[17,35,130,0],[18,2,161,0,"Object"],[18,8,161,0],[18,9,161,0,"defineProperty"],[18,23,161,0],[18,24,161,0,"exports"],[18,31,161,0],[19,4,161,0,"enumerable"],[19,14,161,0],[20,4,161,0,"get"],[20,7,161,0],[20,18,161,0,"get"],[20,19,161,0],[21,6,161,0],[21,13,161,9,"FontDisplay"],[21,23,161,20],[21,24,161,20,"FontDisplay"],[21,35,161,20],[22,4,161,20],[23,2,161,20],[24,2,1,0],[24,6,1,0,"_expoModulesCore"],[24,22,1,0],[24,25,1,0,"require"],[24,32,1,0],[24,33,1,0,"_dependencyMap"],[24,47,1,0],[25,2,2,0],[25,6,2,0,"_ExpoFontLoader"],[25,21,2,0],[25,24,2,0,"require"],[25,31,2,0],[25,32,2,0,"_dependencyMap"],[25,46,2,0],[26,2,2,0],[26,6,2,0,"ExpoFontLoader"],[26,20,2,0],[26,23,2,0,"_interopDefault"],[26,38,2,0],[26,39,2,0,"_ExpoFontLoader"],[26,54,2,0],[27,2,3,0],[27,6,3,0,"_FontTypes"],[27,16,3,0],[27,19,3,0,"require"],[27,26,3,0],[27,27,3,0,"_dependencyMap"],[27,41,3,0],[28,2,4,0],[28,6,4,0,"_FontLoader"],[28,17,4,0],[28,20,4,0,"require"],[28,27,4,0],[28,28,4,0,"_dependencyMap"],[28,42,4,0],[29,2,5,0],[29,6,5,0,"_memory"],[29,13,5,0],[29,16,5,0,"require"],[29,23,5,0],[29,24,5,0,"_dependencyMap"],[29,38,5,0],[30,2,6,0],[30,6,6,0,"_server"],[30,13,6,0],[30,16,6,0,"require"],[30,23,6,0],[30,24,6,0,"_dependencyMap"],[30,38,6,0],[31,2,7,0],[32,2,8,0],[33,0,9,0],[34,0,10,0],[35,0,11,0],[36,0,12,0],[37,0,13,0],[38,2,14,7],[38,11,14,16,"isLoaded"],[38,19,14,24,"isLoaded"],[38,20,14,25,"fontFamily"],[38,30,14,35],[38,32,14,37],[39,4,15,4],[39,8,15,8,"Platform"],[39,24,15,16],[39,25,15,16,"Platform"],[39,33,15,16],[39,34,15,17,"OS"],[39,36,15,19],[39,41,15,24],[39,46,15,29],[39,48,15,31],[40,6,16,8],[40,13,16,15],[40,17,16,15,"isLoadedInCache"],[40,24,16,30],[40,25,16,30,"isLoadedInCache"],[40,40,16,30],[40,42,16,31,"fontFamily"],[40,52,16,41],[40,53,16,42],[40,57,16,46],[40,58,16,47],[40,59,16,48,"ExpoFontLoader"],[40,73,16,62],[40,74,16,62,"default"],[40,81,16,62],[40,82,16,63,"isLoaded"],[40,90,16,71],[40,91,16,72,"fontFamily"],[40,101,16,82],[40,102,16,83],[41,4,17,4],[42,4,18,4],[42,11,18,11],[42,15,18,11,"isLoadedNative"],[42,22,18,25],[42,23,18,25,"isLoadedNative"],[42,37,18,25],[42,39,18,26,"fontFamily"],[42,49,18,36],[42,50,18,37],[43,2,19,0],[44,2,20,0],[45,0,21,0],[46,0,22,0],[47,0,23,0],[48,0,24,0],[49,0,25,0],[50,2,26,7],[50,11,26,16,"getLoadedFonts"],[50,25,26,30,"getLoadedFonts"],[50,26,26,30],[50,28,26,33],[51,4,27,4],[51,11,27,11,"ExpoFontLoader"],[51,25,27,25],[51,26,27,25,"default"],[51,33,27,25],[51,34,27,26,"getLoadedFonts"],[51,48,27,40],[51,49,27,41],[51,50,27,42],[52,2,28,0],[53,2,29,0],[54,2,30,0],[55,0,31,0],[56,0,32,0],[57,0,33,0],[58,0,34,0],[59,0,35,0],[60,2,36,7],[60,11,36,16,"isLoading"],[60,20,36,25,"isLoading"],[60,21,36,26,"fontFamily"],[60,31,36,36],[60,33,36,38],[61,4,37,4],[61,11,37,11,"fontFamily"],[61,21,37,21],[61,25,37,25,"loadPromises"],[61,32,37,37],[61,33,37,37,"loadPromises"],[61,45,37,37],[62,2,38,0],[63,2,39,0],[64,2,40,0],[65,0,41,0],[66,0,42,0],[67,0,43,0],[68,0,44,0],[69,0,45,0],[70,0,46,0],[71,0,47,0],[72,0,48,0],[73,0,49,0],[74,0,50,0],[75,0,51,0],[76,0,52,0],[77,0,53,0],[78,2,54,7],[78,11,54,16,"loadAsync"],[78,20,54,25,"loadAsync"],[78,21,54,26,"fontFamilyOrFontMap"],[78,40,54,45],[78,42,54,47,"source"],[78,48,54,53],[78,50,54,55],[79,4,55,4],[80,4,56,4],[81,4,57,4],[82,4,58,4],[82,10,58,10,"isServer"],[82,18,58,18],[82,21,58,21,"Platform"],[82,37,58,29],[82,38,58,29,"Platform"],[82,46,58,29],[82,47,58,30,"OS"],[82,49,58,32],[82,54,58,37],[82,59,58,42],[82,63,58,46],[82,70,58,53,"window"],[82,76,58,59],[82,81,58,64],[82,92,58,75],[83,4,59,4],[83,8,59,8],[83,15,59,15,"fontFamilyOrFontMap"],[83,34,59,34],[83,39,59,39],[83,47,59,47],[83,49,59,49],[84,6,60,8],[84,10,60,12,"source"],[84,16,60,18],[84,18,60,20],[85,8,61,12],[85,15,61,19,"Promise"],[85,22,61,26],[85,23,61,27,"reject"],[85,29,61,33],[85,30,61,34],[85,34,61,38,"CodedError"],[85,50,61,48],[85,51,61,48,"CodedError"],[85,61,61,48],[85,62,61,49],[85,76,61,63],[85,78,61,65],[85,132,61,119,"source"],[85,138,61,125],[85,244,61,231],[85,245,61,232],[85,246,61,233],[86,6,62,8],[87,6,63,8],[87,12,63,14,"fontMap"],[87,19,63,21],[87,22,63,24,"fontFamilyOrFontMap"],[87,41,63,43],[88,6,64,8],[88,12,64,14,"names"],[88,17,64,19],[88,20,64,22,"Object"],[88,26,64,28],[88,27,64,29,"keys"],[88,31,64,33],[88,32,64,34,"fontMap"],[88,39,64,41],[88,40,64,42],[89,6,65,8],[89,10,65,12,"isServer"],[89,18,65,20],[89,20,65,22],[90,8,66,12,"names"],[90,13,66,17],[90,14,66,18,"map"],[90,17,66,21],[90,18,66,23,"name"],[90,22,66,27],[90,26,66,32],[90,30,66,32,"registerStaticFont"],[90,37,66,50],[90,38,66,50,"registerStaticFont"],[90,56,66,50],[90,58,66,51,"name"],[90,62,66,55],[90,64,66,57,"fontMap"],[90,71,66,64],[90,72,66,65,"name"],[90,76,66,69],[90,77,66,70],[90,78,66,71],[90,79,66,72],[91,8,67,12],[91,15,67,19,"Promise"],[91,22,67,26],[91,23,67,27,"resolve"],[91,30,67,34],[91,31,67,35],[91,32,67,36],[92,6,68,8],[93,6,69,8],[93,13,69,15,"Promise"],[93,20,69,22],[93,21,69,23,"all"],[93,24,69,26],[93,25,69,27,"names"],[93,30,69,32],[93,31,69,33,"map"],[93,34,69,36],[93,35,69,38,"name"],[93,39,69,42],[93,43,69,47,"loadFontInNamespaceAsync"],[93,67,69,71],[93,68,69,72,"name"],[93,72,69,76],[93,74,69,78,"fontMap"],[93,81,69,85],[93,82,69,86,"name"],[93,86,69,90],[93,87,69,91],[93,88,69,92],[93,89,69,93],[93,90,69,94],[93,91,69,95,"then"],[93,95,69,99],[93,96,69,100],[93,102,69,106],[93,103,69,108],[93,104,69,109],[93,105,69,110],[94,4,70,4],[95,4,71,4],[95,8,71,8,"isServer"],[95,16,71,16],[95,18,71,18],[96,6,72,8],[96,10,72,8,"registerStaticFont"],[96,17,72,26],[96,18,72,26,"registerStaticFont"],[96,36,72,26],[96,38,72,27,"fontFamilyOrFontMap"],[96,57,72,46],[96,59,72,48,"source"],[96,65,72,54],[96,66,72,55],[97,6,73,8],[97,13,73,15,"Promise"],[97,20,73,22],[97,21,73,23,"resolve"],[97,28,73,30],[97,29,73,31],[97,30,73,32],[98,4,74,4],[99,4,75,4],[99,11,75,11,"loadFontInNamespaceAsync"],[99,35,75,35],[99,36,75,36,"fontFamilyOrFontMap"],[99,55,75,55],[99,57,75,57,"source"],[99,63,75,63],[99,64,75,64],[100,2,76,0],[101,2,77,0],[101,17,77,15,"loadFontInNamespaceAsync"],[101,41,77,39,"loadFontInNamespaceAsync"],[101,42,77,40,"fontFamily"],[101,52,77,50],[101,54,77,52,"source"],[101,60,77,58],[101,62,77,60],[102,4,78,4],[102,8,78,8],[102,9,78,9,"source"],[102,15,78,15],[102,17,78,17],[103,6,79,8],[103,12,79,14],[103,16,79,18,"CodedError"],[103,32,79,28],[103,33,79,28,"CodedError"],[103,43,79,28],[103,44,79,29],[103,61,79,46],[103,63,79,48],[103,112,79,97,"fontFamily"],[103,122,79,107],[103,128,79,113,"source"],[103,134,79,119],[103,204,79,189,"fontFamily"],[103,214,79,199],[103,217,79,202],[103,218,79,203],[104,4,80,4],[105,4,81,4],[106,4,82,4],[107,4,83,4],[107,8,83,8,"isLoaded"],[107,16,83,16],[107,17,83,17,"fontFamily"],[107,27,83,27],[107,28,83,28],[107,30,83,30],[108,6,84,8],[109,4,85,4],[110,4,86,4],[110,8,86,8,"loadPromises"],[110,15,86,20],[110,16,86,20,"loadPromises"],[110,28,86,20],[110,29,86,21,"hasOwnProperty"],[110,43,86,35],[110,44,86,36,"fontFamily"],[110,54,86,46],[110,55,86,47],[110,57,86,49],[111,6,87,8],[111,13,87,15,"loadPromises"],[111,20,87,27],[111,21,87,27,"loadPromises"],[111,33,87,27],[111,34,87,28,"fontFamily"],[111,44,87,38],[111,45,87,39],[112,4,88,4],[113,4,89,4],[114,4,90,4],[115,4,91,4],[116,4,92,4],[117,4,93,4],[117,10,93,10,"asset"],[117,15,93,15],[117,18,93,18],[117,22,93,18,"getAssetForSource"],[117,33,93,35],[117,34,93,35,"getAssetForSource"],[117,51,93,35],[117,53,93,36,"source"],[117,59,93,42],[117,60,93,43],[118,4,94,4,"loadPromises"],[118,11,94,16],[118,12,94,16,"loadPromises"],[118,24,94,16],[118,25,94,17,"fontFamily"],[118,35,94,27],[118,36,94,28],[118,39,94,31],[118,40,94,32],[118,52,94,44],[119,6,95,8],[119,10,95,12],[120,8,96,12],[120,14,96,18],[120,18,96,18,"loadSingleFontAsync"],[120,29,96,37],[120,30,96,37,"loadSingleFontAsync"],[120,49,96,37],[120,51,96,38,"fontFamily"],[120,61,96,48],[120,63,96,50,"asset"],[120,68,96,55],[120,69,96,56],[121,8,97,12],[121,12,97,12,"markLoaded"],[121,19,97,22],[121,20,97,22,"markLoaded"],[121,30,97,22],[121,32,97,23,"fontFamily"],[121,42,97,33],[121,43,97,34],[122,6,98,8],[122,7,98,9],[122,16,99,16],[123,8,100,12],[123,15,100,19,"loadPromises"],[123,22,100,31],[123,23,100,31,"loadPromises"],[123,35,100,31],[123,36,100,32,"fontFamily"],[123,46,100,42],[123,47,100,43],[124,6,101,8],[125,4,102,4],[125,5,102,5],[125,7,102,7],[125,8,102,8],[126,4,103,4],[126,10,103,10,"loadPromises"],[126,17,103,22],[126,18,103,22,"loadPromises"],[126,30,103,22],[126,31,103,23,"fontFamily"],[126,41,103,33],[126,42,103,34],[127,2,104,0],[128,2,105,0],[129,2,106,0],[130,0,107,0],[131,0,108,0],[132,0,109,0],[133,2,110,7],[133,17,110,22,"unloadAllAsync"],[133,31,110,36,"unloadAllAsync"],[133,32,110,36],[133,34,110,39],[134,4,111,4],[134,8,111,8],[134,9,111,9,"ExpoFontLoader"],[134,23,111,23],[134,24,111,23,"default"],[134,31,111,23],[134,32,111,24,"unloadAllAsync"],[134,46,111,38],[134,48,111,40],[135,6,112,8],[135,12,112,14],[135,16,112,18,"UnavailabilityError"],[135,32,112,37],[135,33,112,37,"UnavailabilityError"],[135,52,112,37],[135,53,112,38],[135,64,112,49],[135,66,112,51],[135,82,112,67],[135,83,112,68],[136,4,113,4],[137,4,114,4],[137,8,114,8,"Object"],[137,14,114,14],[137,15,114,15,"keys"],[137,19,114,19],[137,20,114,20,"loadPromises"],[137,27,114,32],[137,28,114,32,"loadPromises"],[137,40,114,32],[137,41,114,33],[137,42,114,34,"length"],[137,48,114,40],[137,50,114,42],[138,6,115,8],[138,12,115,14],[138,16,115,18,"CodedError"],[138,32,115,28],[138,33,115,28,"CodedError"],[138,43,115,28],[138,44,115,29],[138,56,115,41],[138,58,115,43],[138,110,115,95,"Object"],[138,116,115,101],[138,117,115,102,"keys"],[138,121,115,106],[138,122,115,107,"loadPromises"],[138,129,115,119],[138,130,115,119,"loadPromises"],[138,142,115,119],[138,143,115,120],[138,144,115,121,"join"],[138,148,115,125],[138,149,115,126],[138,153,115,130],[138,154,115,131],[138,156,115,133],[138,157,115,134],[139,4,116,4],[140,4,117,4],[140,8,117,4,"purgeCache"],[140,15,117,14],[140,16,117,14,"purgeCache"],[140,26,117,14],[140,28,117,15],[140,29,117,16],[141,4,118,4],[141,10,118,10,"ExpoFontLoader"],[141,24,118,24],[141,25,118,24,"default"],[141,32,118,24],[141,33,118,25,"unloadAllAsync"],[141,47,118,39],[141,48,118,40],[141,49,118,41],[142,2,119,0],[143,2,120,0],[144,2,121,0],[145,0,122,0],[146,0,123,0],[147,0,124,0],[148,0,125,0],[149,0,126,0],[150,0,127,0],[151,0,128,0],[152,0,129,0],[153,2,130,7],[153,17,130,22,"unloadAsync"],[153,28,130,33,"unloadAsync"],[153,29,130,34,"fontFamilyOrFontMap"],[153,48,130,53],[153,50,130,55,"options"],[153,57,130,62],[153,59,130,64],[154,4,131,4],[154,8,131,8],[154,9,131,9,"ExpoFontLoader"],[154,23,131,23],[154,24,131,23,"default"],[154,31,131,23],[154,32,131,24,"unloadAsync"],[154,43,131,35],[154,45,131,37],[155,6,132,8],[155,12,132,14],[155,16,132,18,"UnavailabilityError"],[155,32,132,37],[155,33,132,37,"UnavailabilityError"],[155,52,132,37],[155,53,132,38],[155,64,132,49],[155,66,132,51],[155,79,132,64],[155,80,132,65],[156,4,133,4],[157,4,134,4],[157,8,134,8],[157,15,134,15,"fontFamilyOrFontMap"],[157,34,134,34],[157,39,134,39],[157,47,134,47],[157,49,134,49],[158,6,135,8],[158,10,135,12,"options"],[158,17,135,19],[158,19,135,21],[159,8,136,12],[159,14,136,18],[159,18,136,22,"CodedError"],[159,34,136,32],[159,35,136,32,"CodedError"],[159,45,136,32],[159,46,136,33],[159,60,136,47],[159,62,136,49],[159,117,136,104,"options"],[159,124,136,111],[159,232,136,219],[159,233,136,220],[160,6,137,8],[161,6,138,8],[161,12,138,14,"fontMap"],[161,19,138,21],[161,22,138,24,"fontFamilyOrFontMap"],[161,41,138,43],[162,6,139,8],[162,12,139,14,"names"],[162,17,139,19],[162,20,139,22,"Object"],[162,26,139,28],[162,27,139,29,"keys"],[162,31,139,33],[162,32,139,34,"fontMap"],[162,39,139,41],[162,40,139,42],[163,6,140,8],[163,12,140,14,"Promise"],[163,19,140,21],[163,20,140,22,"all"],[163,23,140,25],[163,24,140,26,"names"],[163,29,140,31],[163,30,140,32,"map"],[163,33,140,35],[163,34,140,37,"name"],[163,38,140,41],[163,42,140,46,"unloadFontInNamespaceAsync"],[163,68,140,72],[163,69,140,73,"name"],[163,73,140,77],[163,75,140,79,"fontMap"],[163,82,140,86],[163,83,140,87,"name"],[163,87,140,91],[163,88,140,92],[163,89,140,93],[163,90,140,94],[163,91,140,95],[164,6,141,8],[165,4,142,4],[166,4,143,4],[166,11,143,11],[166,17,143,17,"unloadFontInNamespaceAsync"],[166,43,143,43],[166,44,143,44,"fontFamilyOrFontMap"],[166,63,143,63],[166,65,143,65,"options"],[166,72,143,72],[166,73,143,73],[167,2,144,0],[168,2,145,0],[168,17,145,15,"unloadFontInNamespaceAsync"],[168,43,145,41,"unloadFontInNamespaceAsync"],[168,44,145,42,"fontFamily"],[168,54,145,52],[168,56,145,54,"options"],[168,63,145,61],[168,65,145,63],[169,4,146,4],[169,8,146,8],[169,9,146,9,"isLoaded"],[169,17,146,17],[169,18,146,18,"fontFamily"],[169,28,146,28],[169,29,146,29],[169,31,146,31],[170,6,147,8],[171,4,148,4],[171,5,148,5],[171,11,149,9],[172,6,150,8],[172,10,150,8,"purgeFontFamilyFromCache"],[172,17,150,32],[172,18,150,32,"purgeFontFamilyFromCache"],[172,42,150,32],[172,44,150,33,"fontFamily"],[172,54,150,43],[172,55,150,44],[173,4,151,4],[174,4,152,4],[175,4,153,4],[176,4,154,4],[177,4,155,4],[178,4,156,4],[178,8,156,8],[178,9,156,9,"fontFamily"],[178,19,156,19],[178,21,156,21],[179,6,157,8],[179,12,157,14],[179,16,157,18,"CodedError"],[179,32,157,28],[179,33,157,28,"CodedError"],[179,43,157,28],[179,44,157,29],[179,61,157,46],[179,63,157,48],[179,92,157,77],[179,93,157,78],[180,4,158,4],[181,4,159,4],[181,10,159,10,"ExpoFontLoader"],[181,24,159,24],[181,25,159,24,"default"],[181,32,159,24],[181,33,159,25,"unloadAsync"],[181,44,159,36],[181,45,159,37,"fontFamily"],[181,55,159,47],[181,57,159,49,"options"],[181,64,159,56],[181,65,159,57],[182,2,160,0],[183,0,160,1],[183,3]],"functionMap":{"names":["<global>","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCa;CDK;OEO;CFE;OGQ;CHE;OIgB;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCiB;KDQ;CPE;OSM;CTS;OUW;oCLU,yDK;CVI;AWC;CXe"},"hasCjsExports":false},"type":"js/module"}]}