{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/objectSpread2","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":65,"index":65}}],"key":"SfRhzMj3Ex6qA89WTFEUm9Lj49A=","exportNames":["*"]}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":276},"end":{"line":12,"column":43,"index":319}}],"key":"bGUa+dDG2WEhPiIlobT3urS95UE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.CellRenderMask = void 0;\n  var _objectSpread2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/objectSpread2\"));\n  var _invariant = _interopRequireDefault(require(_dependencyMap[2], \"fbjs/lib/invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  class CellRenderMask {\n    constructor(numCells) {\n      (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n      this._numCells = numCells;\n      if (numCells === 0) {\n        this._regions = [];\n      } else {\n        this._regions = [{\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true\n        }];\n      }\n    }\n    enumerateRegions() {\n      return this._regions;\n    }\n    addCells(cells) {\n      (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n\n      // VirtualizedList uses inclusive ranges, where zero-count states are\n      // possible. E.g. [0, -1] for no cells, starting at 0.\n      if (cells.last < cells.first) {\n        return;\n      }\n      var _this$_findRegion = this._findRegion(cells.first),\n        firstIntersect = _this$_findRegion[0],\n        firstIntersectIdx = _this$_findRegion[1];\n      var _this$_findRegion2 = this._findRegion(cells.last),\n        lastIntersect = _this$_findRegion2[0],\n        lastIntersectIdx = _this$_findRegion2[1];\n\n      // Fast-path if the cells to add are already all present in the mask. We\n      // will otherwise need to do some mutation.\n      if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n        return;\n      }\n\n      // We need to replace the existing covered regions with 1-3 new regions\n      // depending whether we need to split spacers out of overlapping regions.\n      var newLeadRegion = [];\n      var newTailRegion = [];\n      var newMainRegion = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, cells), {}, {\n        isSpacer: false\n      });\n      if (firstIntersect.first < newMainRegion.first) {\n        if (firstIntersect.isSpacer) {\n          newLeadRegion.push({\n            first: firstIntersect.first,\n            last: newMainRegion.first - 1,\n            isSpacer: true\n          });\n        } else {\n          newMainRegion.first = firstIntersect.first;\n        }\n      }\n      if (lastIntersect.last > newMainRegion.last) {\n        if (lastIntersect.isSpacer) {\n          newTailRegion.push({\n            first: newMainRegion.last + 1,\n            last: lastIntersect.last,\n            isSpacer: true\n          });\n        } else {\n          newMainRegion.last = lastIntersect.last;\n        }\n      }\n      var replacementRegions = [...newLeadRegion, newMainRegion, ...newTailRegion];\n      var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n      this._regions.splice(firstIntersectIdx, numRegionsToDelete, ...replacementRegions);\n    }\n    numCells() {\n      return this._numCells;\n    }\n    equals(other) {\n      return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every((region, i) => region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer);\n    }\n    _findRegion(cellIdx) {\n      var firstIdx = 0;\n      var lastIdx = this._regions.length - 1;\n      while (firstIdx <= lastIdx) {\n        var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n        var middleRegion = this._regions[middleIdx];\n        if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n          return [middleRegion, middleIdx];\n        } else if (cellIdx < middleRegion.first) {\n          lastIdx = middleIdx - 1;\n        } else if (cellIdx > middleRegion.last) {\n          firstIdx = middleIdx + 1;\n        }\n      }\n      (0, _invariant.default)(false, \"A region was not found containing cellIdx \" + cellIdx);\n    }\n  }\n  exports.CellRenderMask = CellRenderMask;\n});","lineCount":114,"map":[[7,2,1,0],[7,6,1,0,"_objectSpread2"],[7,20,1,0],[7,23,1,0,"_interopRequireDefault"],[7,45,1,0],[7,46,1,0,"require"],[7,53,1,0],[7,54,1,0,"_dependencyMap"],[7,68,1,0],[8,2,12,0],[8,6,12,0,"_invariant"],[8,16,12,0],[8,19,12,0,"_interopRequireDefault"],[8,41,12,0],[8,42,12,0,"require"],[8,49,12,0],[8,50,12,0,"_dependencyMap"],[8,64,12,0],[9,2,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[19,2,13,7],[19,8,13,13,"CellRenderMask"],[19,22,13,27],[19,23,13,28],[20,4,14,2,"constructor"],[20,15,14,13,"constructor"],[20,16,14,14,"numCells"],[20,24,14,22],[20,26,14,24],[21,6,15,4],[21,10,15,4,"invariant"],[21,28,15,13],[21,30,15,14,"numCells"],[21,38,15,22],[21,42,15,26],[21,43,15,27],[21,45,15,29],[21,105,15,89],[21,106,15,90],[22,6,16,4],[22,10,16,8],[22,11,16,9,"_numCells"],[22,20,16,18],[22,23,16,21,"numCells"],[22,31,16,29],[23,6,17,4],[23,10,17,8,"numCells"],[23,18,17,16],[23,23,17,21],[23,24,17,22],[23,26,17,24],[24,8,18,6],[24,12,18,10],[24,13,18,11,"_regions"],[24,21,18,19],[24,24,18,22],[24,26,18,24],[25,6,19,4],[25,7,19,5],[25,13,19,11],[26,8,20,6],[26,12,20,10],[26,13,20,11,"_regions"],[26,21,20,19],[26,24,20,22],[26,25,20,23],[27,10,21,8,"first"],[27,15,21,13],[27,17,21,15],[27,18,21,16],[28,10,22,8,"last"],[28,14,22,12],[28,16,22,14,"numCells"],[28,24,22,22],[28,27,22,25],[28,28,22,26],[29,10,23,8,"isSpacer"],[29,18,23,16],[29,20,23,18],[30,8,24,6],[30,9,24,7],[30,10,24,8],[31,6,25,4],[32,4,26,2],[33,4,27,2,"enumerateRegions"],[33,20,27,18,"enumerateRegions"],[33,21,27,18],[33,23,27,21],[34,6,28,4],[34,13,28,11],[34,17,28,15],[34,18,28,16,"_regions"],[34,26,28,24],[35,4,29,2],[36,4,30,2,"addCells"],[36,12,30,10,"addCells"],[36,13,30,11,"cells"],[36,18,30,16],[36,20,30,18],[37,6,31,4],[37,10,31,4,"invariant"],[37,28,31,13],[37,30,31,14,"cells"],[37,35,31,19],[37,36,31,20,"first"],[37,41,31,25],[37,45,31,29],[37,46,31,30],[37,50,31,34,"cells"],[37,55,31,39],[37,56,31,40,"first"],[37,61,31,45],[37,64,31,48],[37,68,31,52],[37,69,31,53,"_numCells"],[37,78,31,62],[37,82,31,66,"cells"],[37,87,31,71],[37,88,31,72,"last"],[37,92,31,76],[37,96,31,80],[37,97,31,81],[37,98,31,82],[37,102,31,86,"cells"],[37,107,31,91],[37,108,31,92,"last"],[37,112,31,96],[37,115,31,99],[37,119,31,103],[37,120,31,104,"_numCells"],[37,129,31,113],[37,133,31,117,"cells"],[37,138,31,122],[37,139,31,123,"last"],[37,143,31,127],[37,147,31,131,"cells"],[37,152,31,136],[37,153,31,137,"first"],[37,158,31,142],[37,161,31,145],[37,162,31,146],[37,164,31,148],[37,220,31,204],[37,221,31,205],[39,6,33,4],[40,6,34,4],[41,6,35,4],[41,10,35,8,"cells"],[41,15,35,13],[41,16,35,14,"last"],[41,20,35,18],[41,23,35,21,"cells"],[41,28,35,26],[41,29,35,27,"first"],[41,34,35,32],[41,36,35,34],[42,8,36,6],[43,6,37,4],[44,6,38,4],[44,10,38,8,"_this$_findRegion"],[44,27,38,25],[44,30,38,28],[44,34,38,32],[44,35,38,33,"_findRegion"],[44,46,38,44],[44,47,38,45,"cells"],[44,52,38,50],[44,53,38,51,"first"],[44,58,38,56],[44,59,38,57],[45,8,39,6,"firstIntersect"],[45,22,39,20],[45,25,39,23,"_this$_findRegion"],[45,42,39,40],[45,43,39,41],[45,44,39,42],[45,45,39,43],[46,8,40,6,"firstIntersectIdx"],[46,25,40,23],[46,28,40,26,"_this$_findRegion"],[46,45,40,43],[46,46,40,44],[46,47,40,45],[46,48,40,46],[47,6,41,4],[47,10,41,8,"_this$_findRegion2"],[47,28,41,26],[47,31,41,29],[47,35,41,33],[47,36,41,34,"_findRegion"],[47,47,41,45],[47,48,41,46,"cells"],[47,53,41,51],[47,54,41,52,"last"],[47,58,41,56],[47,59,41,57],[48,8,42,6,"lastIntersect"],[48,21,42,19],[48,24,42,22,"_this$_findRegion2"],[48,42,42,40],[48,43,42,41],[48,44,42,42],[48,45,42,43],[49,8,43,6,"lastIntersectIdx"],[49,24,43,22],[49,27,43,25,"_this$_findRegion2"],[49,45,43,43],[49,46,43,44],[49,47,43,45],[49,48,43,46],[51,6,45,4],[52,6,46,4],[53,6,47,4],[53,10,47,8,"firstIntersectIdx"],[53,27,47,25],[53,32,47,30,"lastIntersectIdx"],[53,48,47,46],[53,52,47,50],[53,53,47,51,"firstIntersect"],[53,67,47,65],[53,68,47,66,"isSpacer"],[53,76,47,74],[53,78,47,76],[54,8,48,6],[55,6,49,4],[57,6,51,4],[58,6,52,4],[59,6,53,4],[59,10,53,8,"newLeadRegion"],[59,23,53,21],[59,26,53,24],[59,28,53,26],[60,6,54,4],[60,10,54,8,"newTailRegion"],[60,23,54,21],[60,26,54,24],[60,28,54,26],[61,6,55,4],[61,10,55,8,"newMainRegion"],[61,23,55,21],[61,26,55,24],[61,30,55,24,"_objectSpread"],[61,52,55,37],[61,54,55,38],[61,58,55,38,"_objectSpread"],[61,80,55,51],[61,82,55,52],[61,83,55,53],[61,84,55,54],[61,86,55,56,"cells"],[61,91,55,61],[61,92,55,62],[61,94,55,64],[61,95,55,65],[61,96,55,66],[61,98,55,68],[62,8,56,6,"isSpacer"],[62,16,56,14],[62,18,56,16],[63,6,57,4],[63,7,57,5],[63,8,57,6],[64,6,58,4],[64,10,58,8,"firstIntersect"],[64,24,58,22],[64,25,58,23,"first"],[64,30,58,28],[64,33,58,31,"newMainRegion"],[64,46,58,44],[64,47,58,45,"first"],[64,52,58,50],[64,54,58,52],[65,8,59,6],[65,12,59,10,"firstIntersect"],[65,26,59,24],[65,27,59,25,"isSpacer"],[65,35,59,33],[65,37,59,35],[66,10,60,8,"newLeadRegion"],[66,23,60,21],[66,24,60,22,"push"],[66,28,60,26],[66,29,60,27],[67,12,61,10,"first"],[67,17,61,15],[67,19,61,17,"firstIntersect"],[67,33,61,31],[67,34,61,32,"first"],[67,39,61,37],[68,12,62,10,"last"],[68,16,62,14],[68,18,62,16,"newMainRegion"],[68,31,62,29],[68,32,62,30,"first"],[68,37,62,35],[68,40,62,38],[68,41,62,39],[69,12,63,10,"isSpacer"],[69,20,63,18],[69,22,63,20],[70,10,64,8],[70,11,64,9],[70,12,64,10],[71,8,65,6],[71,9,65,7],[71,15,65,13],[72,10,66,8,"newMainRegion"],[72,23,66,21],[72,24,66,22,"first"],[72,29,66,27],[72,32,66,30,"firstIntersect"],[72,46,66,44],[72,47,66,45,"first"],[72,52,66,50],[73,8,67,6],[74,6,68,4],[75,6,69,4],[75,10,69,8,"lastIntersect"],[75,23,69,21],[75,24,69,22,"last"],[75,28,69,26],[75,31,69,29,"newMainRegion"],[75,44,69,42],[75,45,69,43,"last"],[75,49,69,47],[75,51,69,49],[76,8,70,6],[76,12,70,10,"lastIntersect"],[76,25,70,23],[76,26,70,24,"isSpacer"],[76,34,70,32],[76,36,70,34],[77,10,71,8,"newTailRegion"],[77,23,71,21],[77,24,71,22,"push"],[77,28,71,26],[77,29,71,27],[78,12,72,10,"first"],[78,17,72,15],[78,19,72,17,"newMainRegion"],[78,32,72,30],[78,33,72,31,"last"],[78,37,72,35],[78,40,72,38],[78,41,72,39],[79,12,73,10,"last"],[79,16,73,14],[79,18,73,16,"lastIntersect"],[79,31,73,29],[79,32,73,30,"last"],[79,36,73,34],[80,12,74,10,"isSpacer"],[80,20,74,18],[80,22,74,20],[81,10,75,8],[81,11,75,9],[81,12,75,10],[82,8,76,6],[82,9,76,7],[82,15,76,13],[83,10,77,8,"newMainRegion"],[83,23,77,21],[83,24,77,22,"last"],[83,28,77,26],[83,31,77,29,"lastIntersect"],[83,44,77,42],[83,45,77,43,"last"],[83,49,77,47],[84,8,78,6],[85,6,79,4],[86,6,80,4],[86,10,80,8,"replacementRegions"],[86,28,80,26],[86,31,80,29],[86,32,80,30],[86,35,80,33,"newLeadRegion"],[86,48,80,46],[86,50,80,48,"newMainRegion"],[86,63,80,61],[86,65,80,63],[86,68,80,66,"newTailRegion"],[86,81,80,79],[86,82,80,80],[87,6,81,4],[87,10,81,8,"numRegionsToDelete"],[87,28,81,26],[87,31,81,29,"lastIntersectIdx"],[87,47,81,45],[87,50,81,48,"firstIntersectIdx"],[87,67,81,65],[87,70,81,68],[87,71,81,69],[88,6,82,4],[88,10,82,8],[88,11,82,9,"_regions"],[88,19,82,17],[88,20,82,18,"splice"],[88,26,82,24],[88,27,82,25,"firstIntersectIdx"],[88,44,82,42],[88,46,82,44,"numRegionsToDelete"],[88,64,82,62],[88,66,82,64],[88,69,82,67,"replacementRegions"],[88,87,82,85],[88,88,82,86],[89,4,83,2],[90,4,84,2,"numCells"],[90,12,84,10,"numCells"],[90,13,84,10],[90,15,84,13],[91,6,85,4],[91,13,85,11],[91,17,85,15],[91,18,85,16,"_numCells"],[91,27,85,25],[92,4,86,2],[93,4,87,2,"equals"],[93,10,87,8,"equals"],[93,11,87,9,"other"],[93,16,87,14],[93,18,87,16],[94,6,88,4],[94,13,88,11],[94,17,88,15],[94,18,88,16,"_numCells"],[94,27,88,25],[94,32,88,30,"other"],[94,37,88,35],[94,38,88,36,"_numCells"],[94,47,88,45],[94,51,88,49],[94,55,88,53],[94,56,88,54,"_regions"],[94,64,88,62],[94,65,88,63,"length"],[94,71,88,69],[94,76,88,74,"other"],[94,81,88,79],[94,82,88,80,"_regions"],[94,90,88,88],[94,91,88,89,"length"],[94,97,88,95],[94,101,88,99],[94,105,88,103],[94,106,88,104,"_regions"],[94,114,88,112],[94,115,88,113,"every"],[94,120,88,118],[94,121,88,119],[94,122,88,120,"region"],[94,128,88,126],[94,130,88,128,"i"],[94,131,88,129],[94,136,88,134,"region"],[94,142,88,140],[94,143,88,141,"first"],[94,148,88,146],[94,153,88,151,"other"],[94,158,88,156],[94,159,88,157,"_regions"],[94,167,88,165],[94,168,88,166,"i"],[94,169,88,167],[94,170,88,168],[94,171,88,169,"first"],[94,176,88,174],[94,180,88,178,"region"],[94,186,88,184],[94,187,88,185,"last"],[94,191,88,189],[94,196,88,194,"other"],[94,201,88,199],[94,202,88,200,"_regions"],[94,210,88,208],[94,211,88,209,"i"],[94,212,88,210],[94,213,88,211],[94,214,88,212,"last"],[94,218,88,216],[94,222,88,220,"region"],[94,228,88,226],[94,229,88,227,"isSpacer"],[94,237,88,235],[94,242,88,240,"other"],[94,247,88,245],[94,248,88,246,"_regions"],[94,256,88,254],[94,257,88,255,"i"],[94,258,88,256],[94,259,88,257],[94,260,88,258,"isSpacer"],[94,268,88,266],[94,269,88,267],[95,4,89,2],[96,4,90,2,"_findRegion"],[96,15,90,13,"_findRegion"],[96,16,90,14,"cellIdx"],[96,23,90,21],[96,25,90,23],[97,6,91,4],[97,10,91,8,"firstIdx"],[97,18,91,16],[97,21,91,19],[97,22,91,20],[98,6,92,4],[98,10,92,8,"lastIdx"],[98,17,92,15],[98,20,92,18],[98,24,92,22],[98,25,92,23,"_regions"],[98,33,92,31],[98,34,92,32,"length"],[98,40,92,38],[98,43,92,41],[98,44,92,42],[99,6,93,4],[99,13,93,11,"firstIdx"],[99,21,93,19],[99,25,93,23,"lastIdx"],[99,32,93,30],[99,34,93,32],[100,8,94,6],[100,12,94,10,"middleIdx"],[100,21,94,19],[100,24,94,22,"Math"],[100,28,94,26],[100,29,94,27,"floor"],[100,34,94,32],[100,35,94,33],[100,36,94,34,"firstIdx"],[100,44,94,42],[100,47,94,45,"lastIdx"],[100,54,94,52],[100,58,94,56],[100,59,94,57],[100,60,94,58],[101,8,95,6],[101,12,95,10,"middleRegion"],[101,24,95,22],[101,27,95,25],[101,31,95,29],[101,32,95,30,"_regions"],[101,40,95,38],[101,41,95,39,"middleIdx"],[101,50,95,48],[101,51,95,49],[102,8,96,6],[102,12,96,10,"cellIdx"],[102,19,96,17],[102,23,96,21,"middleRegion"],[102,35,96,33],[102,36,96,34,"first"],[102,41,96,39],[102,45,96,43,"cellIdx"],[102,52,96,50],[102,56,96,54,"middleRegion"],[102,68,96,66],[102,69,96,67,"last"],[102,73,96,71],[102,75,96,73],[103,10,97,8],[103,17,97,15],[103,18,97,16,"middleRegion"],[103,30,97,28],[103,32,97,30,"middleIdx"],[103,41,97,39],[103,42,97,40],[104,8,98,6],[104,9,98,7],[104,15,98,13],[104,19,98,17,"cellIdx"],[104,26,98,24],[104,29,98,27,"middleRegion"],[104,41,98,39],[104,42,98,40,"first"],[104,47,98,45],[104,49,98,47],[105,10,99,8,"lastIdx"],[105,17,99,15],[105,20,99,18,"middleIdx"],[105,29,99,27],[105,32,99,30],[105,33,99,31],[106,8,100,6],[106,9,100,7],[106,15,100,13],[106,19,100,17,"cellIdx"],[106,26,100,24],[106,29,100,27,"middleRegion"],[106,41,100,39],[106,42,100,40,"last"],[106,46,100,44],[106,48,100,46],[107,10,101,8,"firstIdx"],[107,18,101,16],[107,21,101,19,"middleIdx"],[107,30,101,28],[107,33,101,31],[107,34,101,32],[108,8,102,6],[109,6,103,4],[110,6,104,4],[110,10,104,4,"invariant"],[110,28,104,13],[110,30,104,14],[110,35,104,19],[110,37,104,21],[110,81,104,65],[110,84,104,68,"cellIdx"],[110,91,104,75],[110,92,104,76],[111,4,105,2],[112,2,106,0],[113,2,106,1,"exports"],[113,9,106,1],[113,10,106,1,"CellRenderMask"],[113,24,106,1],[113,27,106,1,"CellRenderMask"],[113,41,106,1],[114,0,106,1],[114,3]],"functionMap":{"names":["<global>","CellRenderMask","constructor","enumerateRegions","addCells","numCells","equals","_regions.every$argument_0","_findRegion"],"mappings":"AAA;OCY;ECC;GDY;EEC;GFE;EGC;GHqD;EIC;GJE;EKC;uHCC,mJD;GLC;EOC;GPe"}},"type":"js/module"}]}