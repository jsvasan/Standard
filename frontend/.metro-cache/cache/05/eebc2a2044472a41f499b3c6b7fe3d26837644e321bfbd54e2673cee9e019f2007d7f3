{"dependencies":[{"name":"@react-navigation/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":227,"index":242}}],"key":"Wm75LgE4xYscVWo0KoLFlflJQCo=","exportNames":["*"],"imports":1}},{"name":"fast-deep-equal","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":243},"end":{"line":4,"column":38,"index":281}}],"key":"kmUMBZlZK8fLQ5NsiSOBIMofZVo=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":282},"end":{"line":5,"column":31,"index":313}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"./createMemoryHistory.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":314},"end":{"line":6,"column":63,"index":377}}],"key":"A5sfS3fG0SatnHOyroudNhe0KN0=","exportNames":["*"],"imports":1}},{"name":"./ServerContext.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":378},"end":{"line":7,"column":51,"index":429}}],"key":"+Hz1a4I7q6hCkPilSOm0KYt2/D0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"series\", {\n    enumerable: true,\n    get: function () {\n      return series;\n    }\n  });\n  exports.useLinking = useLinking;\n  var _reactNavigationCore = require(_dependencyMap[0], \"@react-navigation/core\");\n  var _fastDeepEqual = require(_dependencyMap[1], \"fast-deep-equal\");\n  var isEqual = _interopDefault(_fastDeepEqual);\n  var _react = require(_dependencyMap[2], \"react\");\n  var React = _interopNamespace(_react);\n  var _createMemoryHistoryJs = require(_dependencyMap[3], \"./createMemoryHistory.js\");\n  var _ServerContextJs = require(_dependencyMap[4], \"./ServerContext.js\");\n  /**\n   * Find the matching navigation state that changed between 2 navigation states\n   * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n   */\n  const findMatchingState = (a, b) => {\n    if (a === undefined || b === undefined || a.key !== b.key) {\n      return [undefined, undefined];\n    }\n\n    // Tab and drawer will have `history` property, but stack will have history in `routes`\n    const aHistoryLength = a.history ? a.history.length : a.routes.length;\n    const bHistoryLength = b.history ? b.history.length : b.routes.length;\n    const aRoute = a.routes[a.index];\n    const bRoute = b.routes[b.index];\n    const aChildState = aRoute.state;\n    const bChildState = bRoute.state;\n\n    // Stop here if this is the state object that changed:\n    // - history length is different\n    // - focused routes are different\n    // - one of them doesn't have child state\n    // - child state keys are different\n    if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n      return [a, b];\n    }\n    return findMatchingState(aChildState, bChildState);\n  };\n\n  /**\n   * Run async function in series as it's called.\n   */\n  const series = cb => {\n    let queue = Promise.resolve();\n    const callback = () => {\n      // eslint-disable-next-line promise/no-callback-in-promise\n      queue = queue.then(cb);\n    };\n    return callback;\n  };\n  const linkingHandlers = [];\n  function useLinking(ref, {\n    enabled = true,\n    config,\n    getStateFromPath = _reactNavigationCore.getStateFromPath,\n    getPathFromState = _reactNavigationCore.getPathFromState,\n    getActionFromState = _reactNavigationCore.getActionFromState\n  }, onUnhandledLinking) {\n    const independent = (0, _reactNavigationCore.useNavigationIndependentTree)();\n    React.useEffect(() => {\n      if (process.env.NODE_ENV === 'production') {\n        return undefined;\n      }\n      if (independent) {\n        return undefined;\n      }\n      if (enabled !== false && linkingHandlers.length) {\n        console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n      }\n      const handler = Symbol();\n      if (enabled !== false) {\n        linkingHandlers.push(handler);\n      }\n      return () => {\n        const index = linkingHandlers.indexOf(handler);\n        if (index > -1) {\n          linkingHandlers.splice(index, 1);\n        }\n      };\n    }, [enabled, independent]);\n    const [history] = React.useState(_createMemoryHistoryJs.createMemoryHistory);\n\n    // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n    // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n    // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n    const enabledRef = React.useRef(enabled);\n    const configRef = React.useRef(config);\n    const getStateFromPathRef = React.useRef(getStateFromPath);\n    const getPathFromStateRef = React.useRef(getPathFromState);\n    const getActionFromStateRef = React.useRef(getActionFromState);\n    React.useEffect(() => {\n      enabledRef.current = enabled;\n      configRef.current = config;\n      getStateFromPathRef.current = getStateFromPath;\n      getPathFromStateRef.current = getPathFromState;\n      getActionFromStateRef.current = getActionFromState;\n    });\n    const validateRoutesNotExistInRootState = React.useCallback(state => {\n      const navigation = ref.current;\n      const rootState = navigation?.getRootState();\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      return state?.routes.some(r => !rootState?.routeNames.includes(r.name));\n    }, [ref]);\n    const server = React.useContext(_ServerContextJs.ServerContext);\n    const getInitialState = React.useCallback(() => {\n      let value;\n      if (enabledRef.current) {\n        const location = server?.location ?? (false ? window.location : undefined);\n        const path = location ? location.pathname + location.search : undefined;\n        if (path) {\n          value = getStateFromPathRef.current(path, configRef.current);\n        }\n\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n      }\n      const thenable = {\n        then(onfulfilled) {\n          return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n        },\n        catch() {\n          return thenable;\n        }\n      };\n      return thenable;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const previousIndexRef = React.useRef(undefined);\n    const previousStateRef = React.useRef(undefined);\n    const pendingPopStatePathRef = React.useRef(undefined);\n    React.useEffect(() => {\n      previousIndexRef.current = history.index;\n      return history.listen(() => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const {\n          location\n        } = window;\n        const path = location.pathname + location.search;\n        const index = history.index;\n        const previousIndex = previousIndexRef.current ?? 0;\n        previousIndexRef.current = index;\n        pendingPopStatePathRef.current = path;\n\n        // When browser back/forward is clicked, we first need to check if state object for this index exists\n        // If it does we'll reset to that state object\n        // Otherwise, we'll handle it like a regular deep link\n        const record = history.get(index);\n        if (record?.path === path && record?.state) {\n          navigation.resetRoot(record.state);\n          return;\n        }\n        const state = getStateFromPathRef.current(path, configRef.current);\n\n        // We should only dispatch an action when going forward\n        // Otherwise the action will likely add items to history, which would mess things up\n        if (state) {\n          // If the link were handled, it gets cleared in NavigationContainer\n          onUnhandledLinking(path);\n          // Make sure that the routes in the state exist in the root navigator\n          // Otherwise there's an error in the linking configuration\n          if (validateRoutesNotExistInRootState(state)) {\n            return;\n          }\n          if (index > previousIndex) {\n            const action = getActionFromStateRef.current(state, configRef.current);\n            if (action !== undefined) {\n              try {\n                navigation.dispatch(action);\n              } catch (e) {\n                // Ignore any errors from deep linking.\n                // This could happen in case of malformed links, navigation object not being initialized etc.\n                console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n              }\n            } else {\n              navigation.resetRoot(state);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          // if current path didn't return any state, we should revert to initial state\n          navigation.resetRoot(state);\n        }\n      });\n    }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n    React.useEffect(() => {\n      if (!enabled) {\n        return;\n      }\n      const getPathForRoute = (route, state) => {\n        let path;\n\n        // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n        // This makes sure that we preserve the original URL for wildcard routes\n        if (route?.path) {\n          const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n          if (stateForPath) {\n            const focusedRoute = (0, _reactNavigationCore.findFocusedRoute)(stateForPath);\n            if (focusedRoute && focusedRoute.name === route.name && (0, isEqual.default)(focusedRoute.params, route.params)) {\n              path = route.path;\n            }\n          }\n        }\n        if (path == null) {\n          path = getPathFromStateRef.current(state, configRef.current);\n        }\n        const previousRoute = previousStateRef.current ? (0, _reactNavigationCore.findFocusedRoute)(previousStateRef.current) : undefined;\n\n        // Preserve the hash if the route didn't change\n        if (previousRoute && route && 'key' in previousRoute && 'key' in route && previousRoute.key === route.key) {\n          path = path + location.hash;\n        }\n        return path;\n      };\n      if (ref.current) {\n        // We need to record the current metadata on the first render if they aren't set\n        // This will allow the initial state to be in the history entry\n        const state = ref.current.getRootState();\n        if (state) {\n          const route = (0, _reactNavigationCore.findFocusedRoute)(state);\n          const path = getPathForRoute(route, state);\n          if (previousStateRef.current === undefined) {\n            previousStateRef.current = state;\n          }\n          history.replace({\n            path,\n            state\n          });\n        }\n      }\n      const onStateChange = async () => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const previousState = previousStateRef.current;\n        const state = navigation.getRootState();\n\n        // root state may not available, for example when root navigators switch inside the container\n        if (!state) {\n          return;\n        }\n        const pendingPath = pendingPopStatePathRef.current;\n        const route = (0, _reactNavigationCore.findFocusedRoute)(state);\n        const path = getPathForRoute(route, state);\n        previousStateRef.current = state;\n        pendingPopStatePathRef.current = undefined;\n\n        // To detect the kind of state change, we need to:\n        // - Find the common focused navigation state in previous and current state\n        // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n        // - If no common focused navigation state found, it's a replace\n        const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n        if (previousFocusedState && focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath) {\n          const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n          if (historyDelta > 0) {\n            // If history length is increased, we should pushState\n            // Note that path might not actually change here, for example, drawer open should pushState\n            history.push({\n              path,\n              state\n            });\n          } else if (historyDelta < 0) {\n            // If history length is decreased, i.e. entries were removed, we want to go back\n\n            const nextIndex = history.backIndex({\n              path\n            });\n            const currentIndex = history.index;\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex)) {\n                // An existing entry for this path exists and it's less than current index, go back to that\n                await history.go(nextIndex - currentIndex);\n              } else {\n                // We couldn't find an existing entry to go back to, so we'll go back by the delta\n                // This won't be correct if multiple routes were pushed in one go before\n                // Usually this shouldn't happen and this is a fallback for that\n                await history.go(historyDelta);\n              }\n\n              // Store the updated state as well as fix the path if incorrect\n              history.replace({\n                path,\n                state\n              });\n            } catch (e) {\n              // The navigation was interrupted\n            }\n          } else {\n            // If history length is unchanged, we want to replaceState\n            history.replace({\n              path,\n              state\n            });\n          }\n        } else {\n          // If no common navigation state was found, assume it's a replace\n          // This would happen if the user did a reset/conditionally changed navigators\n          history.replace({\n            path,\n            state\n          });\n        }\n      };\n\n      // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n      // This could happen since `history.go(n)` is asynchronous\n      // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n      return ref.current?.addListener('state', series(onStateChange));\n    }, [enabled, history, ref]);\n    return {\n      getInitialState\n    };\n  }\n});","lineCount":353,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,1,13],[12,11,1,13,"_interopNamespace"],[12,29,1,13,"e"],[12,30,1,13],[13,4,1,13],[13,8,1,13,"e"],[13,9,1,13],[13,13,1,13,"e"],[13,14,1,13],[13,15,1,13,"__esModule"],[13,25,1,13],[13,34,1,13,"e"],[13,35,1,13],[14,4,1,13],[14,8,1,13,"n"],[14,9,1,13],[15,4,1,13],[15,8,1,13,"e"],[15,9,1,13],[15,11,1,13,"Object"],[15,17,1,13],[15,18,1,13,"keys"],[15,22,1,13],[15,23,1,13,"e"],[15,24,1,13],[15,26,1,13,"forEach"],[15,33,1,13],[15,44,1,13,"k"],[15,45,1,13],[16,6,1,13],[16,10,1,13,"d"],[16,11,1,13],[16,14,1,13,"Object"],[16,20,1,13],[16,21,1,13,"getOwnPropertyDescriptor"],[16,45,1,13],[16,46,1,13,"e"],[16,47,1,13],[16,49,1,13,"k"],[16,50,1,13],[17,6,1,13,"Object"],[17,12,1,13],[17,13,1,13,"defineProperty"],[17,27,1,13],[17,28,1,13,"n"],[17,29,1,13],[17,31,1,13,"k"],[17,32,1,13],[17,34,1,13,"d"],[17,35,1,13],[17,36,1,13,"get"],[17,39,1,13],[17,42,1,13,"d"],[17,43,1,13],[18,8,1,13,"enumerable"],[18,18,1,13],[19,8,1,13,"get"],[19,11,1,13],[19,22,1,13,"get"],[19,23,1,13],[20,10,1,13],[20,17,1,13,"e"],[20,18,1,13],[20,19,1,13,"k"],[20,20,1,13],[21,8,1,13],[22,6,1,13],[23,4,1,13],[24,4,1,13,"n"],[24,5,1,13],[24,6,1,13,"default"],[24,13,1,13],[24,16,1,13,"e"],[24,17,1,13],[25,4,1,13],[25,11,1,13,"n"],[25,12,1,13],[26,2,1,13],[27,2,39,0,"Object"],[27,8,39,0],[27,9,39,0,"defineProperty"],[27,23,39,0],[27,24,39,0,"exports"],[27,31,39,0],[28,4,39,0,"enumerable"],[28,14,39,0],[29,4,39,0,"get"],[29,7,39,0],[29,18,39,0,"get"],[29,19,39,0],[30,6,39,0],[30,13,39,0,"series"],[30,19,39,0],[31,4,39,0],[32,2,39,0],[33,2,48,0,"exports"],[33,9,48,0],[33,10,48,0,"useLinking"],[33,20,48,0],[33,23,48,0,"useLinking"],[33,33,48,0],[34,2,3,0],[34,6,3,0,"_reactNavigationCore"],[34,26,3,0],[34,29,3,0,"require"],[34,36,3,0],[34,37,3,0,"_dependencyMap"],[34,51,3,0],[35,2,4,0],[35,6,4,0,"_fastDeepEqual"],[35,20,4,0],[35,23,4,0,"require"],[35,30,4,0],[35,31,4,0,"_dependencyMap"],[35,45,4,0],[36,2,4,0],[36,6,4,0,"isEqual"],[36,13,4,0],[36,16,4,0,"_interopDefault"],[36,31,4,0],[36,32,4,0,"_fastDeepEqual"],[36,46,4,0],[37,2,5,0],[37,6,5,0,"_react"],[37,12,5,0],[37,15,5,0,"require"],[37,22,5,0],[37,23,5,0,"_dependencyMap"],[37,37,5,0],[38,2,5,0],[38,6,5,0,"React"],[38,11,5,0],[38,14,5,0,"_interopNamespace"],[38,31,5,0],[38,32,5,0,"_react"],[38,38,5,0],[39,2,6,0],[39,6,6,0,"_createMemoryHistoryJs"],[39,28,6,0],[39,31,6,0,"require"],[39,38,6,0],[39,39,6,0,"_dependencyMap"],[39,53,6,0],[40,2,7,0],[40,6,7,0,"_ServerContextJs"],[40,22,7,0],[40,25,7,0,"require"],[40,32,7,0],[40,33,7,0,"_dependencyMap"],[40,47,7,0],[41,2,8,0],[42,0,9,0],[43,0,10,0],[44,0,11,0],[45,2,12,0],[45,8,12,6,"findMatchingState"],[45,25,12,23],[45,28,12,26,"findMatchingState"],[45,29,12,27,"a"],[45,30,12,28],[45,32,12,30,"b"],[45,33,12,31],[45,38,12,36],[46,4,13,2],[46,8,13,6,"a"],[46,9,13,7],[46,14,13,12,"undefined"],[46,23,13,21],[46,27,13,25,"b"],[46,28,13,26],[46,33,13,31,"undefined"],[46,42,13,40],[46,46,13,44,"a"],[46,47,13,45],[46,48,13,46,"key"],[46,51,13,49],[46,56,13,54,"b"],[46,57,13,55],[46,58,13,56,"key"],[46,61,13,59],[46,63,13,61],[47,6,14,4],[47,13,14,11],[47,14,14,12,"undefined"],[47,23,14,21],[47,25,14,23,"undefined"],[47,34,14,32],[47,35,14,33],[48,4,15,2],[50,4,17,2],[51,4,18,2],[51,10,18,8,"aHistoryLength"],[51,24,18,22],[51,27,18,25,"a"],[51,28,18,26],[51,29,18,27,"history"],[51,36,18,34],[51,39,18,37,"a"],[51,40,18,38],[51,41,18,39,"history"],[51,48,18,46],[51,49,18,47,"length"],[51,55,18,53],[51,58,18,56,"a"],[51,59,18,57],[51,60,18,58,"routes"],[51,66,18,64],[51,67,18,65,"length"],[51,73,18,71],[52,4,19,2],[52,10,19,8,"bHistoryLength"],[52,24,19,22],[52,27,19,25,"b"],[52,28,19,26],[52,29,19,27,"history"],[52,36,19,34],[52,39,19,37,"b"],[52,40,19,38],[52,41,19,39,"history"],[52,48,19,46],[52,49,19,47,"length"],[52,55,19,53],[52,58,19,56,"b"],[52,59,19,57],[52,60,19,58,"routes"],[52,66,19,64],[52,67,19,65,"length"],[52,73,19,71],[53,4,20,2],[53,10,20,8,"aRoute"],[53,16,20,14],[53,19,20,17,"a"],[53,20,20,18],[53,21,20,19,"routes"],[53,27,20,25],[53,28,20,26,"a"],[53,29,20,27],[53,30,20,28,"index"],[53,35,20,33],[53,36,20,34],[54,4,21,2],[54,10,21,8,"bRoute"],[54,16,21,14],[54,19,21,17,"b"],[54,20,21,18],[54,21,21,19,"routes"],[54,27,21,25],[54,28,21,26,"b"],[54,29,21,27],[54,30,21,28,"index"],[54,35,21,33],[54,36,21,34],[55,4,22,2],[55,10,22,8,"aChildState"],[55,21,22,19],[55,24,22,22,"aRoute"],[55,30,22,28],[55,31,22,29,"state"],[55,36,22,34],[56,4,23,2],[56,10,23,8,"bChildState"],[56,21,23,19],[56,24,23,22,"bRoute"],[56,30,23,28],[56,31,23,29,"state"],[56,36,23,34],[58,4,25,2],[59,4,26,2],[60,4,27,2],[61,4,28,2],[62,4,29,2],[63,4,30,2],[63,8,30,6,"aHistoryLength"],[63,22,30,20],[63,27,30,25,"bHistoryLength"],[63,41,30,39],[63,45,30,43,"aRoute"],[63,51,30,49],[63,52,30,50,"key"],[63,55,30,53],[63,60,30,58,"bRoute"],[63,66,30,64],[63,67,30,65,"key"],[63,70,30,68],[63,74,30,72,"aChildState"],[63,85,30,83],[63,90,30,88,"undefined"],[63,99,30,97],[63,103,30,101,"bChildState"],[63,114,30,112],[63,119,30,117,"undefined"],[63,128,30,126],[63,132,30,130,"aChildState"],[63,143,30,141],[63,144,30,142,"key"],[63,147,30,145],[63,152,30,150,"bChildState"],[63,163,30,161],[63,164,30,162,"key"],[63,167,30,165],[63,169,30,167],[64,6,31,4],[64,13,31,11],[64,14,31,12,"a"],[64,15,31,13],[64,17,31,15,"b"],[64,18,31,16],[64,19,31,17],[65,4,32,2],[66,4,33,2],[66,11,33,9,"findMatchingState"],[66,28,33,26],[66,29,33,27,"aChildState"],[66,40,33,38],[66,42,33,40,"bChildState"],[66,53,33,51],[66,54,33,52],[67,2,34,0],[67,3,34,1],[69,2,36,0],[70,0,37,0],[71,0,38,0],[72,2,39,7],[72,8,39,13,"series"],[72,14,39,19],[72,17,39,22,"cb"],[72,19,39,24],[72,23,39,28],[73,4,40,2],[73,8,40,6,"queue"],[73,13,40,11],[73,16,40,14,"Promise"],[73,23,40,21],[73,24,40,22,"resolve"],[73,31,40,29],[73,32,40,30],[73,33,40,31],[74,4,41,2],[74,10,41,8,"callback"],[74,18,41,16],[74,21,41,19,"callback"],[74,22,41,19],[74,27,41,25],[75,6,42,4],[76,6,43,4,"queue"],[76,11,43,9],[76,14,43,12,"queue"],[76,19,43,17],[76,20,43,18,"then"],[76,24,43,22],[76,25,43,23,"cb"],[76,27,43,25],[76,28,43,26],[77,4,44,2],[77,5,44,3],[78,4,45,2],[78,11,45,9,"callback"],[78,19,45,17],[79,2,46,0],[79,3,46,1],[80,2,47,0],[80,8,47,6,"linkingHandlers"],[80,23,47,21],[80,26,47,24],[80,28,47,26],[81,2,48,7],[81,11,48,16,"useLinking"],[81,21,48,26,"useLinking"],[81,22,48,27,"ref"],[81,25,48,30],[81,27,48,32],[82,4,49,2,"enabled"],[82,11,49,9],[82,14,49,12],[82,18,49,16],[83,4,50,2,"config"],[83,10,50,8],[84,4,51,2,"getStateFromPath"],[84,20,51,18],[84,23,51,21,"getStateFromPathDefault"],[84,43,51,44],[84,44,51,44,"getStateFromPath"],[84,60,51,44],[85,4,52,2,"getPathFromState"],[85,20,52,18],[85,23,52,21,"getPathFromStateDefault"],[85,43,52,44],[85,44,52,44,"getPathFromState"],[85,60,52,44],[86,4,53,2,"getActionFromState"],[86,22,53,20],[86,25,53,23,"getActionFromStateDefault"],[86,45,53,48],[86,46,53,48,"getActionFromState"],[87,2,54,0],[87,3,54,1],[87,5,54,3,"onUnhandledLinking"],[87,23,54,21],[87,25,54,23],[88,4,55,2],[88,10,55,8,"independent"],[88,21,55,19],[88,24,55,22],[88,28,55,22,"useNavigationIndependentTree"],[88,48,55,50],[88,49,55,50,"useNavigationIndependentTree"],[88,77,55,50],[88,79,55,51],[88,80,55,52],[89,4,56,2,"React"],[89,9,56,7],[89,10,56,8,"useEffect"],[89,19,56,17],[89,20,56,18],[89,26,56,24],[90,6,57,4],[90,10,57,8,"process"],[90,17,57,15],[90,18,57,16,"env"],[90,21,57,19],[90,22,57,20,"NODE_ENV"],[90,30,57,28],[90,35,57,33],[90,47,57,45],[90,49,57,47],[91,8,58,6],[91,15,58,13,"undefined"],[91,24,58,22],[92,6,59,4],[93,6,60,4],[93,10,60,8,"independent"],[93,21,60,19],[93,23,60,21],[94,8,61,6],[94,15,61,13,"undefined"],[94,24,61,22],[95,6,62,4],[96,6,63,4],[96,10,63,8,"enabled"],[96,17,63,15],[96,22,63,20],[96,27,63,25],[96,31,63,29,"linkingHandlers"],[96,46,63,44],[96,47,63,45,"length"],[96,53,63,51],[96,55,63,53],[97,8,64,6,"console"],[97,15,64,13],[97,16,64,14,"error"],[97,21,64,19],[97,22,64,20],[97,23,64,21],[97,196,64,194],[97,198,64,196],[97,285,64,283],[97,287,64,285],[97,347,64,345],[97,348,64,346],[97,349,64,347,"join"],[97,353,64,351],[97,354,64,352],[97,358,64,356],[97,359,64,357],[97,360,64,358,"trim"],[97,364,64,362],[97,365,64,363],[97,366,64,364],[97,367,64,365],[98,6,65,4],[99,6,66,4],[99,12,66,10,"handler"],[99,19,66,17],[99,22,66,20,"Symbol"],[99,28,66,26],[99,29,66,27],[99,30,66,28],[100,6,67,4],[100,10,67,8,"enabled"],[100,17,67,15],[100,22,67,20],[100,27,67,25],[100,29,67,27],[101,8,68,6,"linkingHandlers"],[101,23,68,21],[101,24,68,22,"push"],[101,28,68,26],[101,29,68,27,"handler"],[101,36,68,34],[101,37,68,35],[102,6,69,4],[103,6,70,4],[103,13,70,11],[103,19,70,17],[104,8,71,6],[104,14,71,12,"index"],[104,19,71,17],[104,22,71,20,"linkingHandlers"],[104,37,71,35],[104,38,71,36,"indexOf"],[104,45,71,43],[104,46,71,44,"handler"],[104,53,71,51],[104,54,71,52],[105,8,72,6],[105,12,72,10,"index"],[105,17,72,15],[105,20,72,18],[105,21,72,19],[105,22,72,20],[105,24,72,22],[106,10,73,8,"linkingHandlers"],[106,25,73,23],[106,26,73,24,"splice"],[106,32,73,30],[106,33,73,31,"index"],[106,38,73,36],[106,40,73,38],[106,41,73,39],[106,42,73,40],[107,8,74,6],[108,6,75,4],[108,7,75,5],[109,4,76,2],[109,5,76,3],[109,7,76,5],[109,8,76,6,"enabled"],[109,15,76,13],[109,17,76,15,"independent"],[109,28,76,26],[109,29,76,27],[109,30,76,28],[110,4,77,2],[110,10,77,8],[110,11,77,9,"history"],[110,18,77,16],[110,19,77,17],[110,22,77,20,"React"],[110,27,77,25],[110,28,77,26,"useState"],[110,36,77,34],[110,37,77,35,"createMemoryHistory"],[110,59,77,54],[110,60,77,54,"createMemoryHistory"],[110,79,77,54],[110,80,77,55],[112,4,79,2],[113,4,80,2],[114,4,81,2],[115,4,82,2],[115,10,82,8,"enabledRef"],[115,20,82,18],[115,23,82,21,"React"],[115,28,82,26],[115,29,82,27,"useRef"],[115,35,82,33],[115,36,82,34,"enabled"],[115,43,82,41],[115,44,82,42],[116,4,83,2],[116,10,83,8,"configRef"],[116,19,83,17],[116,22,83,20,"React"],[116,27,83,25],[116,28,83,26,"useRef"],[116,34,83,32],[116,35,83,33,"config"],[116,41,83,39],[116,42,83,40],[117,4,84,2],[117,10,84,8,"getStateFromPathRef"],[117,29,84,27],[117,32,84,30,"React"],[117,37,84,35],[117,38,84,36,"useRef"],[117,44,84,42],[117,45,84,43,"getStateFromPath"],[117,61,84,59],[117,62,84,60],[118,4,85,2],[118,10,85,8,"getPathFromStateRef"],[118,29,85,27],[118,32,85,30,"React"],[118,37,85,35],[118,38,85,36,"useRef"],[118,44,85,42],[118,45,85,43,"getPathFromState"],[118,61,85,59],[118,62,85,60],[119,4,86,2],[119,10,86,8,"getActionFromStateRef"],[119,31,86,29],[119,34,86,32,"React"],[119,39,86,37],[119,40,86,38,"useRef"],[119,46,86,44],[119,47,86,45,"getActionFromState"],[119,65,86,63],[119,66,86,64],[120,4,87,2,"React"],[120,9,87,7],[120,10,87,8,"useEffect"],[120,19,87,17],[120,20,87,18],[120,26,87,24],[121,6,88,4,"enabledRef"],[121,16,88,14],[121,17,88,15,"current"],[121,24,88,22],[121,27,88,25,"enabled"],[121,34,88,32],[122,6,89,4,"configRef"],[122,15,89,13],[122,16,89,14,"current"],[122,23,89,21],[122,26,89,24,"config"],[122,32,89,30],[123,6,90,4,"getStateFromPathRef"],[123,25,90,23],[123,26,90,24,"current"],[123,33,90,31],[123,36,90,34,"getStateFromPath"],[123,52,90,50],[124,6,91,4,"getPathFromStateRef"],[124,25,91,23],[124,26,91,24,"current"],[124,33,91,31],[124,36,91,34,"getPathFromState"],[124,52,91,50],[125,6,92,4,"getActionFromStateRef"],[125,27,92,25],[125,28,92,26,"current"],[125,35,92,33],[125,38,92,36,"getActionFromState"],[125,56,92,54],[126,4,93,2],[126,5,93,3],[126,6,93,4],[127,4,94,2],[127,10,94,8,"validateRoutesNotExistInRootState"],[127,43,94,41],[127,46,94,44,"React"],[127,51,94,49],[127,52,94,50,"useCallback"],[127,63,94,61],[127,64,94,62,"state"],[127,69,94,67],[127,73,94,71],[128,6,95,4],[128,12,95,10,"navigation"],[128,22,95,20],[128,25,95,23,"ref"],[128,28,95,26],[128,29,95,27,"current"],[128,36,95,34],[129,6,96,4],[129,12,96,10,"rootState"],[129,21,96,19],[129,24,96,22,"navigation"],[129,34,96,32],[129,36,96,34,"getRootState"],[129,48,96,46],[129,49,96,47],[129,50,96,48],[130,6,97,4],[131,6,98,4],[132,6,99,4],[132,13,99,11,"state"],[132,18,99,16],[132,20,99,18,"routes"],[132,26,99,24],[132,27,99,25,"some"],[132,31,99,29],[132,32,99,30,"r"],[132,33,99,31],[132,37,99,35],[132,38,99,36,"rootState"],[132,47,99,45],[132,49,99,47,"routeNames"],[132,59,99,57],[132,60,99,58,"includes"],[132,68,99,66],[132,69,99,67,"r"],[132,70,99,68],[132,71,99,69,"name"],[132,75,99,73],[132,76,99,74],[132,77,99,75],[133,4,100,2],[133,5,100,3],[133,7,100,5],[133,8,100,6,"ref"],[133,11,100,9],[133,12,100,10],[133,13,100,11],[134,4,101,2],[134,10,101,8,"server"],[134,16,101,14],[134,19,101,17,"React"],[134,24,101,22],[134,25,101,23,"useContext"],[134,35,101,33],[134,36,101,34,"ServerContext"],[134,52,101,47],[134,53,101,47,"ServerContext"],[134,66,101,47],[134,67,101,48],[135,4,102,2],[135,10,102,8,"getInitialState"],[135,25,102,23],[135,28,102,26,"React"],[135,33,102,31],[135,34,102,32,"useCallback"],[135,45,102,43],[135,46,102,44],[135,52,102,50],[136,6,103,4],[136,10,103,8,"value"],[136,15,103,13],[137,6,104,4],[137,10,104,8,"enabledRef"],[137,20,104,18],[137,21,104,19,"current"],[137,28,104,26],[137,30,104,28],[138,8,105,6],[138,14,105,12,"location"],[138,22,105,20],[138,25,105,23,"server"],[138,31,105,29],[138,33,105,31,"location"],[138,41,105,39],[138,46,105,44],[138,54,105,76,"window"],[138,60,105,82],[138,61,105,83,"location"],[138,69,105,91],[138,72,105,94,"undefined"],[138,81,105,103],[138,82,105,104],[139,8,106,6],[139,14,106,12,"path"],[139,18,106,16],[139,21,106,19,"location"],[139,29,106,27],[139,32,106,30,"location"],[139,40,106,38],[139,41,106,39,"pathname"],[139,49,106,47],[139,52,106,50,"location"],[139,60,106,58],[139,61,106,59,"search"],[139,67,106,65],[139,70,106,68,"undefined"],[139,79,106,77],[140,8,107,6],[140,12,107,10,"path"],[140,16,107,14],[140,18,107,16],[141,10,108,8,"value"],[141,15,108,13],[141,18,108,16,"getStateFromPathRef"],[141,37,108,35],[141,38,108,36,"current"],[141,45,108,43],[141,46,108,44,"path"],[141,50,108,48],[141,52,108,50,"configRef"],[141,61,108,59],[141,62,108,60,"current"],[141,69,108,67],[141,70,108,68],[142,8,109,6],[144,8,111,6],[145,8,112,6,"onUnhandledLinking"],[145,26,112,24],[145,27,112,25,"path"],[145,31,112,29],[145,32,112,30],[146,6,113,4],[147,6,114,4],[147,12,114,10,"thenable"],[147,20,114,18],[147,23,114,21],[148,8,115,6,"then"],[148,12,115,10,"then"],[148,13,115,11,"onfulfilled"],[148,24,115,22],[148,26,115,24],[149,10,116,8],[149,17,116,15,"Promise"],[149,24,116,22],[149,25,116,23,"resolve"],[149,32,116,30],[149,33,116,31,"onfulfilled"],[149,44,116,42],[149,47,116,45,"onfulfilled"],[149,58,116,56],[149,59,116,57,"value"],[149,64,116,62],[149,65,116,63],[149,68,116,66,"value"],[149,73,116,71],[149,74,116,72],[150,8,117,6],[150,9,117,7],[151,8,118,6,"catch"],[151,13,118,11,"catch"],[151,14,118,11],[151,16,118,14],[152,10,119,8],[152,17,119,15,"thenable"],[152,25,119,23],[153,8,120,6],[154,6,121,4],[154,7,121,5],[155,6,122,4],[155,13,122,11,"thenable"],[155,21,122,19],[156,6,123,4],[157,4,124,2],[157,5,124,3],[157,7,124,5],[157,9,124,7],[157,10,124,8],[158,4,125,2],[158,10,125,8,"previousIndexRef"],[158,26,125,24],[158,29,125,27,"React"],[158,34,125,32],[158,35,125,33,"useRef"],[158,41,125,39],[158,42,125,40,"undefined"],[158,51,125,49],[158,52,125,50],[159,4,126,2],[159,10,126,8,"previousStateRef"],[159,26,126,24],[159,29,126,27,"React"],[159,34,126,32],[159,35,126,33,"useRef"],[159,41,126,39],[159,42,126,40,"undefined"],[159,51,126,49],[159,52,126,50],[160,4,127,2],[160,10,127,8,"pendingPopStatePathRef"],[160,32,127,30],[160,35,127,33,"React"],[160,40,127,38],[160,41,127,39,"useRef"],[160,47,127,45],[160,48,127,46,"undefined"],[160,57,127,55],[160,58,127,56],[161,4,128,2,"React"],[161,9,128,7],[161,10,128,8,"useEffect"],[161,19,128,17],[161,20,128,18],[161,26,128,24],[162,6,129,4,"previousIndexRef"],[162,22,129,20],[162,23,129,21,"current"],[162,30,129,28],[162,33,129,31,"history"],[162,40,129,38],[162,41,129,39,"index"],[162,46,129,44],[163,6,130,4],[163,13,130,11,"history"],[163,20,130,18],[163,21,130,19,"listen"],[163,27,130,25],[163,28,130,26],[163,34,130,32],[164,8,131,6],[164,14,131,12,"navigation"],[164,24,131,22],[164,27,131,25,"ref"],[164,30,131,28],[164,31,131,29,"current"],[164,38,131,36],[165,8,132,6],[165,12,132,10],[165,13,132,11,"navigation"],[165,23,132,21],[165,27,132,25],[165,28,132,26,"enabled"],[165,35,132,33],[165,37,132,35],[166,10,133,8],[167,8,134,6],[168,8,135,6],[168,14,135,12],[169,10,136,8,"location"],[170,8,137,6],[170,9,137,7],[170,12,137,10,"window"],[170,18,137,16],[171,8,138,6],[171,14,138,12,"path"],[171,18,138,16],[171,21,138,19,"location"],[171,29,138,27],[171,30,138,28,"pathname"],[171,38,138,36],[171,41,138,39,"location"],[171,49,138,47],[171,50,138,48,"search"],[171,56,138,54],[172,8,139,6],[172,14,139,12,"index"],[172,19,139,17],[172,22,139,20,"history"],[172,29,139,27],[172,30,139,28,"index"],[172,35,139,33],[173,8,140,6],[173,14,140,12,"previousIndex"],[173,27,140,25],[173,30,140,28,"previousIndexRef"],[173,46,140,44],[173,47,140,45,"current"],[173,54,140,52],[173,58,140,56],[173,59,140,57],[174,8,141,6,"previousIndexRef"],[174,24,141,22],[174,25,141,23,"current"],[174,32,141,30],[174,35,141,33,"index"],[174,40,141,38],[175,8,142,6,"pendingPopStatePathRef"],[175,30,142,28],[175,31,142,29,"current"],[175,38,142,36],[175,41,142,39,"path"],[175,45,142,43],[177,8,144,6],[178,8,145,6],[179,8,146,6],[180,8,147,6],[180,14,147,12,"record"],[180,20,147,18],[180,23,147,21,"history"],[180,30,147,28],[180,31,147,29,"get"],[180,34,147,32],[180,35,147,33,"index"],[180,40,147,38],[180,41,147,39],[181,8,148,6],[181,12,148,10,"record"],[181,18,148,16],[181,20,148,18,"path"],[181,24,148,22],[181,29,148,27,"path"],[181,33,148,31],[181,37,148,35,"record"],[181,43,148,41],[181,45,148,43,"state"],[181,50,148,48],[181,52,148,50],[182,10,149,8,"navigation"],[182,20,149,18],[182,21,149,19,"resetRoot"],[182,30,149,28],[182,31,149,29,"record"],[182,37,149,35],[182,38,149,36,"state"],[182,43,149,41],[182,44,149,42],[183,10,150,8],[184,8,151,6],[185,8,152,6],[185,14,152,12,"state"],[185,19,152,17],[185,22,152,20,"getStateFromPathRef"],[185,41,152,39],[185,42,152,40,"current"],[185,49,152,47],[185,50,152,48,"path"],[185,54,152,52],[185,56,152,54,"configRef"],[185,65,152,63],[185,66,152,64,"current"],[185,73,152,71],[185,74,152,72],[187,8,154,6],[188,8,155,6],[189,8,156,6],[189,12,156,10,"state"],[189,17,156,15],[189,19,156,17],[190,10,157,8],[191,10,158,8,"onUnhandledLinking"],[191,28,158,26],[191,29,158,27,"path"],[191,33,158,31],[191,34,158,32],[192,10,159,8],[193,10,160,8],[194,10,161,8],[194,14,161,12,"validateRoutesNotExistInRootState"],[194,47,161,45],[194,48,161,46,"state"],[194,53,161,51],[194,54,161,52],[194,56,161,54],[195,12,162,10],[196,10,163,8],[197,10,164,8],[197,14,164,12,"index"],[197,19,164,17],[197,22,164,20,"previousIndex"],[197,35,164,33],[197,37,164,35],[198,12,165,10],[198,18,165,16,"action"],[198,24,165,22],[198,27,165,25,"getActionFromStateRef"],[198,48,165,46],[198,49,165,47,"current"],[198,56,165,54],[198,57,165,55,"state"],[198,62,165,60],[198,64,165,62,"configRef"],[198,73,165,71],[198,74,165,72,"current"],[198,81,165,79],[198,82,165,80],[199,12,166,10],[199,16,166,14,"action"],[199,22,166,20],[199,27,166,25,"undefined"],[199,36,166,34],[199,38,166,36],[200,14,167,12],[200,18,167,16],[201,16,168,14,"navigation"],[201,26,168,24],[201,27,168,25,"dispatch"],[201,35,168,33],[201,36,168,34,"action"],[201,42,168,40],[201,43,168,41],[202,14,169,12],[202,15,169,13],[202,16,169,14],[202,23,169,21,"e"],[202,24,169,22],[202,26,169,24],[203,16,170,14],[204,16,171,14],[205,16,172,14,"console"],[205,23,172,21],[205,24,172,22,"warn"],[205,28,172,26],[205,29,172,27],[205,82,172,80,"path"],[205,86,172,84],[205,92,172,90],[205,99,172,97,"e"],[205,100,172,98],[205,105,172,103],[205,113,172,111],[205,117,172,115,"e"],[205,118,172,116],[205,122,172,120],[205,126,172,124],[205,130,172,128],[205,139,172,137],[205,143,172,141,"e"],[205,144,172,142],[205,147,172,145,"e"],[205,148,172,146],[205,149,172,147,"message"],[205,156,172,154],[205,159,172,157,"e"],[205,160,172,158],[205,162,172,160],[205,163,172,161],[206,14,173,12],[207,12,174,10],[207,13,174,11],[207,19,174,17],[208,14,175,12,"navigation"],[208,24,175,22],[208,25,175,23,"resetRoot"],[208,34,175,32],[208,35,175,33,"state"],[208,40,175,38],[208,41,175,39],[209,12,176,10],[210,10,177,8],[210,11,177,9],[210,17,177,15],[211,12,178,10,"navigation"],[211,22,178,20],[211,23,178,21,"resetRoot"],[211,32,178,30],[211,33,178,31,"state"],[211,38,178,36],[211,39,178,37],[212,10,179,8],[213,8,180,6],[213,9,180,7],[213,15,180,13],[214,10,181,8],[215,10,182,8,"navigation"],[215,20,182,18],[215,21,182,19,"resetRoot"],[215,30,182,28],[215,31,182,29,"state"],[215,36,182,34],[215,37,182,35],[216,8,183,6],[217,6,184,4],[217,7,184,5],[217,8,184,6],[218,4,185,2],[218,5,185,3],[218,7,185,5],[218,8,185,6,"enabled"],[218,15,185,13],[218,17,185,15,"history"],[218,24,185,22],[218,26,185,24,"onUnhandledLinking"],[218,44,185,42],[218,46,185,44,"ref"],[218,49,185,47],[218,51,185,49,"validateRoutesNotExistInRootState"],[218,84,185,82],[218,85,185,83],[218,86,185,84],[219,4,186,2,"React"],[219,9,186,7],[219,10,186,8,"useEffect"],[219,19,186,17],[219,20,186,18],[219,26,186,24],[220,6,187,4],[220,10,187,8],[220,11,187,9,"enabled"],[220,18,187,16],[220,20,187,18],[221,8,188,6],[222,6,189,4],[223,6,190,4],[223,12,190,10,"getPathForRoute"],[223,27,190,25],[223,30,190,28,"getPathForRoute"],[223,31,190,29,"route"],[223,36,190,34],[223,38,190,36,"state"],[223,43,190,41],[223,48,190,46],[224,8,191,6],[224,12,191,10,"path"],[224,16,191,14],[226,8,193,6],[227,8,194,6],[228,8,195,6],[228,12,195,10,"route"],[228,17,195,15],[228,19,195,17,"path"],[228,23,195,21],[228,25,195,23],[229,10,196,8],[229,16,196,14,"stateForPath"],[229,28,196,26],[229,31,196,29,"getStateFromPathRef"],[229,50,196,48],[229,51,196,49,"current"],[229,58,196,56],[229,59,196,57,"route"],[229,64,196,62],[229,65,196,63,"path"],[229,69,196,67],[229,71,196,69,"configRef"],[229,80,196,78],[229,81,196,79,"current"],[229,88,196,86],[229,89,196,87],[230,10,197,8],[230,14,197,12,"stateForPath"],[230,26,197,24],[230,28,197,26],[231,12,198,10],[231,18,198,16,"focusedRoute"],[231,30,198,28],[231,33,198,31],[231,37,198,31,"findFocusedRoute"],[231,57,198,47],[231,58,198,47,"findFocusedRoute"],[231,74,198,47],[231,76,198,48,"stateForPath"],[231,88,198,60],[231,89,198,61],[232,12,199,10],[232,16,199,14,"focusedRoute"],[232,28,199,26],[232,32,199,30,"focusedRoute"],[232,44,199,42],[232,45,199,43,"name"],[232,49,199,47],[232,54,199,52,"route"],[232,59,199,57],[232,60,199,58,"name"],[232,64,199,62],[232,68,199,66],[232,72,199,66,"isEqual"],[232,79,199,73],[232,80,199,73,"default"],[232,87,199,73],[232,89,199,74,"focusedRoute"],[232,101,199,86],[232,102,199,87,"params"],[232,108,199,93],[232,110,199,95,"route"],[232,115,199,100],[232,116,199,101,"params"],[232,122,199,107],[232,123,199,108],[232,125,199,110],[233,14,200,12,"path"],[233,18,200,16],[233,21,200,19,"route"],[233,26,200,24],[233,27,200,25,"path"],[233,31,200,29],[234,12,201,10],[235,10,202,8],[236,8,203,6],[237,8,204,6],[237,12,204,10,"path"],[237,16,204,14],[237,20,204,18],[237,24,204,22],[237,26,204,24],[238,10,205,8,"path"],[238,14,205,12],[238,17,205,15,"getPathFromStateRef"],[238,36,205,34],[238,37,205,35,"current"],[238,44,205,42],[238,45,205,43,"state"],[238,50,205,48],[238,52,205,50,"configRef"],[238,61,205,59],[238,62,205,60,"current"],[238,69,205,67],[238,70,205,68],[239,8,206,6],[240,8,207,6],[240,14,207,12,"previousRoute"],[240,27,207,25],[240,30,207,28,"previousStateRef"],[240,46,207,44],[240,47,207,45,"current"],[240,54,207,52],[240,57,207,55],[240,61,207,55,"findFocusedRoute"],[240,81,207,71],[240,82,207,71,"findFocusedRoute"],[240,98,207,71],[240,100,207,72,"previousStateRef"],[240,116,207,88],[240,117,207,89,"current"],[240,124,207,96],[240,125,207,97],[240,128,207,100,"undefined"],[240,137,207,109],[242,8,209,6],[243,8,210,6],[243,12,210,10,"previousRoute"],[243,25,210,23],[243,29,210,27,"route"],[243,34,210,32],[243,38,210,36],[243,43,210,41],[243,47,210,45,"previousRoute"],[243,60,210,58],[243,64,210,62],[243,69,210,67],[243,73,210,71,"route"],[243,78,210,76],[243,82,210,80,"previousRoute"],[243,95,210,93],[243,96,210,94,"key"],[243,99,210,97],[243,104,210,102,"route"],[243,109,210,107],[243,110,210,108,"key"],[243,113,210,111],[243,115,210,113],[244,10,211,8,"path"],[244,14,211,12],[244,17,211,15,"path"],[244,21,211,19],[244,24,211,22,"location"],[244,32,211,30],[244,33,211,31,"hash"],[244,37,211,35],[245,8,212,6],[246,8,213,6],[246,15,213,13,"path"],[246,19,213,17],[247,6,214,4],[247,7,214,5],[248,6,215,4],[248,10,215,8,"ref"],[248,13,215,11],[248,14,215,12,"current"],[248,21,215,19],[248,23,215,21],[249,8,216,6],[250,8,217,6],[251,8,218,6],[251,14,218,12,"state"],[251,19,218,17],[251,22,218,20,"ref"],[251,25,218,23],[251,26,218,24,"current"],[251,33,218,31],[251,34,218,32,"getRootState"],[251,46,218,44],[251,47,218,45],[251,48,218,46],[252,8,219,6],[252,12,219,10,"state"],[252,17,219,15],[252,19,219,17],[253,10,220,8],[253,16,220,14,"route"],[253,21,220,19],[253,24,220,22],[253,28,220,22,"findFocusedRoute"],[253,48,220,38],[253,49,220,38,"findFocusedRoute"],[253,65,220,38],[253,67,220,39,"state"],[253,72,220,44],[253,73,220,45],[254,10,221,8],[254,16,221,14,"path"],[254,20,221,18],[254,23,221,21,"getPathForRoute"],[254,38,221,36],[254,39,221,37,"route"],[254,44,221,42],[254,46,221,44,"state"],[254,51,221,49],[254,52,221,50],[255,10,222,8],[255,14,222,12,"previousStateRef"],[255,30,222,28],[255,31,222,29,"current"],[255,38,222,36],[255,43,222,41,"undefined"],[255,52,222,50],[255,54,222,52],[256,12,223,10,"previousStateRef"],[256,28,223,26],[256,29,223,27,"current"],[256,36,223,34],[256,39,223,37,"state"],[256,44,223,42],[257,10,224,8],[258,10,225,8,"history"],[258,17,225,15],[258,18,225,16,"replace"],[258,25,225,23],[258,26,225,24],[259,12,226,10,"path"],[259,16,226,14],[260,12,227,10,"state"],[261,10,228,8],[261,11,228,9],[261,12,228,10],[262,8,229,6],[263,6,230,4],[264,6,231,4],[264,12,231,10,"onStateChange"],[264,25,231,23],[264,28,231,26],[264,34,231,26,"onStateChange"],[264,35,231,26],[264,40,231,38],[265,8,232,6],[265,14,232,12,"navigation"],[265,24,232,22],[265,27,232,25,"ref"],[265,30,232,28],[265,31,232,29,"current"],[265,38,232,36],[266,8,233,6],[266,12,233,10],[266,13,233,11,"navigation"],[266,23,233,21],[266,27,233,25],[266,28,233,26,"enabled"],[266,35,233,33],[266,37,233,35],[267,10,234,8],[268,8,235,6],[269,8,236,6],[269,14,236,12,"previousState"],[269,27,236,25],[269,30,236,28,"previousStateRef"],[269,46,236,44],[269,47,236,45,"current"],[269,54,236,52],[270,8,237,6],[270,14,237,12,"state"],[270,19,237,17],[270,22,237,20,"navigation"],[270,32,237,30],[270,33,237,31,"getRootState"],[270,45,237,43],[270,46,237,44],[270,47,237,45],[272,8,239,6],[273,8,240,6],[273,12,240,10],[273,13,240,11,"state"],[273,18,240,16],[273,20,240,18],[274,10,241,8],[275,8,242,6],[276,8,243,6],[276,14,243,12,"pendingPath"],[276,25,243,23],[276,28,243,26,"pendingPopStatePathRef"],[276,50,243,48],[276,51,243,49,"current"],[276,58,243,56],[277,8,244,6],[277,14,244,12,"route"],[277,19,244,17],[277,22,244,20],[277,26,244,20,"findFocusedRoute"],[277,46,244,36],[277,47,244,36,"findFocusedRoute"],[277,63,244,36],[277,65,244,37,"state"],[277,70,244,42],[277,71,244,43],[278,8,245,6],[278,14,245,12,"path"],[278,18,245,16],[278,21,245,19,"getPathForRoute"],[278,36,245,34],[278,37,245,35,"route"],[278,42,245,40],[278,44,245,42,"state"],[278,49,245,47],[278,50,245,48],[279,8,246,6,"previousStateRef"],[279,24,246,22],[279,25,246,23,"current"],[279,32,246,30],[279,35,246,33,"state"],[279,40,246,38],[280,8,247,6,"pendingPopStatePathRef"],[280,30,247,28],[280,31,247,29,"current"],[280,38,247,36],[280,41,247,39,"undefined"],[280,50,247,48],[282,8,249,6],[283,8,250,6],[284,8,251,6],[285,8,252,6],[286,8,253,6],[286,14,253,12],[286,15,253,13,"previousFocusedState"],[286,35,253,33],[286,37,253,35,"focusedState"],[286,49,253,47],[286,50,253,48],[286,53,253,51,"findMatchingState"],[286,70,253,68],[286,71,253,69,"previousState"],[286,84,253,82],[286,86,253,84,"state"],[286,91,253,89],[286,92,253,90],[287,8,254,6],[287,12,254,10,"previousFocusedState"],[287,32,254,30],[287,36,254,34,"focusedState"],[287,48,254,46],[288,8,255,6],[289,8,256,6],[290,8,257,6,"path"],[290,12,257,10],[290,17,257,15,"pendingPath"],[290,28,257,26],[290,30,257,28],[291,10,258,8],[291,16,258,14,"historyDelta"],[291,28,258,26],[291,31,258,29],[291,32,258,30,"focusedState"],[291,44,258,42],[291,45,258,43,"history"],[291,52,258,50],[291,55,258,53,"focusedState"],[291,67,258,65],[291,68,258,66,"history"],[291,75,258,73],[291,76,258,74,"length"],[291,82,258,80],[291,85,258,83,"focusedState"],[291,97,258,95],[291,98,258,96,"routes"],[291,104,258,102],[291,105,258,103,"length"],[291,111,258,109],[291,116,258,114,"previousFocusedState"],[291,136,258,134],[291,137,258,135,"history"],[291,144,258,142],[291,147,258,145,"previousFocusedState"],[291,167,258,165],[291,168,258,166,"history"],[291,175,258,173],[291,176,258,174,"length"],[291,182,258,180],[291,185,258,183,"previousFocusedState"],[291,205,258,203],[291,206,258,204,"routes"],[291,212,258,210],[291,213,258,211,"length"],[291,219,258,217],[291,220,258,218],[292,10,259,8],[292,14,259,12,"historyDelta"],[292,26,259,24],[292,29,259,27],[292,30,259,28],[292,32,259,30],[293,12,260,10],[294,12,261,10],[295,12,262,10,"history"],[295,19,262,17],[295,20,262,18,"push"],[295,24,262,22],[295,25,262,23],[296,14,263,12,"path"],[296,18,263,16],[297,14,264,12,"state"],[298,12,265,10],[298,13,265,11],[298,14,265,12],[299,10,266,8],[299,11,266,9],[299,17,266,15],[299,21,266,19,"historyDelta"],[299,33,266,31],[299,36,266,34],[299,37,266,35],[299,39,266,37],[300,12,267,10],[302,12,269,10],[302,18,269,16,"nextIndex"],[302,27,269,25],[302,30,269,28,"history"],[302,37,269,35],[302,38,269,36,"backIndex"],[302,47,269,45],[302,48,269,46],[303,14,270,12,"path"],[304,12,271,10],[304,13,271,11],[304,14,271,12],[305,12,272,10],[305,18,272,16,"currentIndex"],[305,30,272,28],[305,33,272,31,"history"],[305,40,272,38],[305,41,272,39,"index"],[305,46,272,44],[306,12,273,10],[306,16,273,14],[307,14,274,12],[307,18,274,16,"nextIndex"],[307,27,274,25],[307,32,274,30],[307,33,274,31],[307,34,274,32],[307,38,274,36,"nextIndex"],[307,47,274,45],[307,50,274,48,"currentIndex"],[307,62,274,60],[308,14,275,12],[309,14,276,12,"history"],[309,21,276,19],[309,22,276,20,"get"],[309,25,276,23],[309,26,276,24,"nextIndex"],[309,35,276,33],[309,36,276,34],[309,38,276,36],[310,16,277,14],[311,16,278,14],[311,22,278,20,"history"],[311,29,278,27],[311,30,278,28,"go"],[311,32,278,30],[311,33,278,31,"nextIndex"],[311,42,278,40],[311,45,278,43,"currentIndex"],[311,57,278,55],[311,58,278,56],[312,14,279,12],[312,15,279,13],[312,21,279,19],[313,16,280,14],[314,16,281,14],[315,16,282,14],[316,16,283,14],[316,22,283,20,"history"],[316,29,283,27],[316,30,283,28,"go"],[316,32,283,30],[316,33,283,31,"historyDelta"],[316,45,283,43],[316,46,283,44],[317,14,284,12],[319,14,286,12],[320,14,287,12,"history"],[320,21,287,19],[320,22,287,20,"replace"],[320,29,287,27],[320,30,287,28],[321,16,288,14,"path"],[321,20,288,18],[322,16,289,14,"state"],[323,14,290,12],[323,15,290,13],[323,16,290,14],[324,12,291,10],[324,13,291,11],[324,14,291,12],[324,21,291,19,"e"],[324,22,291,20],[324,24,291,22],[325,14,292,12],[326,12,292,12],[327,10,294,8],[327,11,294,9],[327,17,294,15],[328,12,295,10],[329,12,296,10,"history"],[329,19,296,17],[329,20,296,18,"replace"],[329,27,296,25],[329,28,296,26],[330,14,297,12,"path"],[330,18,297,16],[331,14,298,12,"state"],[332,12,299,10],[332,13,299,11],[332,14,299,12],[333,10,300,8],[334,8,301,6],[334,9,301,7],[334,15,301,13],[335,10,302,8],[336,10,303,8],[337,10,304,8,"history"],[337,17,304,15],[337,18,304,16,"replace"],[337,25,304,23],[337,26,304,24],[338,12,305,10,"path"],[338,16,305,14],[339,12,306,10,"state"],[340,10,307,8],[340,11,307,9],[340,12,307,10],[341,8,308,6],[342,6,309,4],[342,7,309,5],[344,6,311,4],[345,6,312,4],[346,6,313,4],[347,6,314,4],[347,13,314,11,"ref"],[347,16,314,14],[347,17,314,15,"current"],[347,24,314,22],[347,26,314,24,"addListener"],[347,37,314,35],[347,38,314,36],[347,45,314,43],[347,47,314,45,"series"],[347,53,314,51],[347,54,314,52,"onStateChange"],[347,67,314,65],[347,68,314,66],[347,69,314,67],[348,4,315,2],[348,5,315,3],[348,7,315,5],[348,8,315,6,"enabled"],[348,15,315,13],[348,17,315,15,"history"],[348,24,315,22],[348,26,315,24,"ref"],[348,29,315,27],[348,30,315,28],[348,31,315,29],[349,4,316,2],[349,11,316,9],[350,6,317,4,"getInitialState"],[351,4,318,2],[351,5,318,3],[352,2,319,0],[353,0,319,1],[353,3]],"functionMap":{"names":["<global>","findMatchingState","series","callback","useLinking","React.useEffect$argument_0","<anonymous>","validateRoutesNotExistInRootState","state.routes.some$argument_0","getInitialState","thenable.then","thenable._catch","history.listen$argument_0","getPathForRoute","onStateChange"],"mappings":"AAA;0BCW;CDsB;sBEK;mBCE;GDG;CFE;OIE;kBCQ;WCc;KDK;GDC;kBCW;GDM;8DGC;8BCK,4CD;GHC;4CKE;MCa;ODE;MEC;OFE;GLI;kBCI;0BOE;KPsD;GDC;kBCC;4BQI;KRwB;0BSiB;KT8E;GDM;CJI"},"hasCjsExports":false},"type":"js/module"}]}