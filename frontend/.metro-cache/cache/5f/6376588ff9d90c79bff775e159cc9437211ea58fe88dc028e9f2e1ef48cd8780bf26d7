{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.createStringifySafeWithLimits = createStringifySafeWithLimits;\n  /**\n   * Copyright (c) 650 Industries.\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  /**\n   * Tries to stringify with JSON.stringify and toString, but catches exceptions\n   * (e.g. from circular objects) and always returns a string and never throws.\n   */\n  function createStringifySafeWithLimits(limits) {\n    var _limits$maxDepth = limits.maxDepth,\n      maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,\n      _limits$maxStringLimi = limits.maxStringLimit,\n      maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,\n      _limits$maxArrayLimit = limits.maxArrayLimit,\n      maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,\n      _limits$maxObjectKeys = limits.maxObjectKeysLimit,\n      maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;\n    var stack = [];\n    function replacer(_key, value) {\n      while (stack.length && this !== stack[0]) {\n        stack.shift();\n      }\n      if (typeof value === 'string') {\n        var truncatedString = '...(truncated)...';\n        if (value.length > maxStringLimit + truncatedString.length) {\n          return value.substring(0, maxStringLimit) + truncatedString;\n        }\n        return value;\n      }\n      if (typeof value !== 'object' || value === null) {\n        return value;\n      }\n      var retval = value;\n      if (Array.isArray(value)) {\n        if (stack.length >= maxDepth) {\n          retval = `[ ... array with ${value.length} values ... ]`;\n        } else if (value.length > maxArrayLimit) {\n          retval = value.slice(0, maxArrayLimit).concat([`... extra ${value.length - maxArrayLimit} values truncated ...`]);\n        }\n      } else {\n        // Add refinement after Array.isArray call.\n        if (typeof value !== 'object') {\n          throw new Error('This was already found earlier');\n        }\n        var keys = Object.keys(value);\n        if (stack.length >= maxDepth) {\n          retval = `{ ... object with ${keys.length} keys ... }`;\n        } else if (keys.length > maxObjectKeysLimit) {\n          // Return a sample of the keys.\n          retval = {};\n          for (var k of keys.slice(0, maxObjectKeysLimit)) {\n            retval[k] = value[k];\n          }\n          var truncatedKey = '...(truncated keys)...';\n          retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n        }\n      }\n      stack.unshift(retval);\n      return retval;\n    }\n    return function stringifySafe(arg) {\n      if (arg === undefined) {\n        return 'undefined';\n      } else if (arg === null) {\n        return 'null';\n      } else if (typeof arg === 'function') {\n        try {\n          return arg.toString();\n        } catch {\n          return '[function unknown]';\n        }\n      } else if (arg instanceof Error) {\n        return arg.name + ': ' + arg.message;\n      } else {\n        // Perform a try catch, just in case the object has a circular\n        // reference or stringify throws for some other reason.\n        try {\n          var ret = JSON.stringify(arg, replacer);\n          if (ret === undefined) {\n            return '[\"' + typeof arg + '\" failed to stringify]';\n          }\n          return ret;\n        } catch {\n          if (typeof arg.toString === 'function') {\n            try {\n              // $FlowFixMe[incompatible-use] : toString shouldn't take any arguments in general.\n              return arg.toString();\n            } catch {}\n          }\n        }\n      }\n      return '[\"' + typeof arg + '\" failed to stringify]';\n    };\n  }\n  var stringifySafe = createStringifySafeWithLimits({\n    maxDepth: 10,\n    maxStringLimit: 100,\n    maxArrayLimit: 50,\n    maxObjectKeysLimit: 50\n  });\n  var _default = stringifySafe;\n});","lineCount":119,"map":[[7,2,115,0,"Object"],[7,8,115,0],[7,9,115,0,"defineProperty"],[7,23,115,0],[7,24,115,0,"exports"],[7,31,115,0],[8,4,115,0,"enumerable"],[8,14,115,0],[9,4,115,0,"get"],[9,7,115,0],[9,18,115,0,"get"],[9,19,115,0],[10,6,115,0],[10,13,115,0,"_default"],[10,21,115,0],[11,4,115,0],[12,2,115,0],[13,2,13,0,"exports"],[13,9,13,0],[13,10,13,0,"createStringifySafeWithLimits"],[13,39,13,0],[13,42,13,0,"createStringifySafeWithLimits"],[13,71,13,0],[14,2,1,0],[15,0,2,0],[16,0,3,0],[17,0,4,0],[18,0,5,0],[19,0,6,0],[20,0,7,0],[22,2,9,0],[23,0,10,0],[24,0,11,0],[25,0,12,0],[26,2,13,7],[26,11,13,16,"createStringifySafeWithLimits"],[26,40,13,45,"createStringifySafeWithLimits"],[26,41,13,46,"limits"],[26,47,18,1],[26,49,18,25],[27,4,19,2],[27,8,19,2,"_limits$maxDepth"],[27,24,19,2],[27,27,24,6,"limits"],[27,33,24,12],[27,34,20,4,"maxDepth"],[27,42,20,12],[28,6,20,4,"maxDepth"],[28,14,20,12],[28,17,20,12,"_limits$maxDepth"],[28,33,20,12],[28,47,20,15,"Number"],[28,53,20,21],[28,54,20,22,"POSITIVE_INFINITY"],[28,71,20,39],[28,74,20,39,"_limits$maxDepth"],[28,90,20,39],[29,6,20,39,"_limits$maxStringLimi"],[29,27,20,39],[29,30,24,6,"limits"],[29,36,24,12],[29,37,21,4,"maxStringLimit"],[29,51,21,18],[30,6,21,4,"maxStringLimit"],[30,20,21,18],[30,23,21,18,"_limits$maxStringLimi"],[30,44,21,18],[30,58,21,21,"Number"],[30,64,21,27],[30,65,21,28,"POSITIVE_INFINITY"],[30,82,21,45],[30,85,21,45,"_limits$maxStringLimi"],[30,106,21,45],[31,6,21,45,"_limits$maxArrayLimit"],[31,27,21,45],[31,30,24,6,"limits"],[31,36,24,12],[31,37,22,4,"maxArrayLimit"],[31,50,22,17],[32,6,22,4,"maxArrayLimit"],[32,19,22,17],[32,22,22,17,"_limits$maxArrayLimit"],[32,43,22,17],[32,57,22,20,"Number"],[32,63,22,26],[32,64,22,27,"POSITIVE_INFINITY"],[32,81,22,44],[32,84,22,44,"_limits$maxArrayLimit"],[32,105,22,44],[33,6,22,44,"_limits$maxObjectKeys"],[33,27,22,44],[33,30,24,6,"limits"],[33,36,24,12],[33,37,23,4,"maxObjectKeysLimit"],[33,55,23,22],[34,6,23,4,"maxObjectKeysLimit"],[34,24,23,22],[34,27,23,22,"_limits$maxObjectKeys"],[34,48,23,22],[34,62,23,25,"Number"],[34,68,23,31],[34,69,23,32,"POSITIVE_INFINITY"],[34,86,23,49],[34,89,23,49,"_limits$maxObjectKeys"],[34,110,23,49],[35,4,25,2],[35,8,25,8,"stack"],[35,13,25,20],[35,16,25,23],[35,18,25,25],[36,4,26,2],[36,13,26,11,"replacer"],[36,21,26,19,"replacer"],[36,22,26,35,"_key"],[36,26,26,47],[36,28,26,49,"value"],[36,33,26,59],[36,35,26,66],[37,6,27,4],[37,13,27,11,"stack"],[37,18,27,16],[37,19,27,17,"length"],[37,25,27,23],[37,29,27,27],[37,33,27,31],[37,38,27,36,"stack"],[37,43,27,41],[37,44,27,42],[37,45,27,43],[37,46,27,44],[37,48,27,46],[38,8,28,6,"stack"],[38,13,28,11],[38,14,28,12,"shift"],[38,19,28,17],[38,20,28,18],[38,21,28,19],[39,6,29,4],[40,6,31,4],[40,10,31,8],[40,17,31,15,"value"],[40,22,31,20],[40,27,31,25],[40,35,31,33],[40,37,31,35],[41,8,32,6],[41,12,32,12,"truncatedString"],[41,27,32,27],[41,30,32,30],[41,49,32,49],[42,8,33,6],[42,12,33,10,"value"],[42,17,33,15],[42,18,33,16,"length"],[42,24,33,22],[42,27,33,25,"maxStringLimit"],[42,41,33,39],[42,44,33,42,"truncatedString"],[42,59,33,57],[42,60,33,58,"length"],[42,66,33,64],[42,68,33,66],[43,10,34,8],[43,17,34,15,"value"],[43,22,34,20],[43,23,34,21,"substring"],[43,32,34,30],[43,33,34,31],[43,34,34,32],[43,36,34,34,"maxStringLimit"],[43,50,34,48],[43,51,34,49],[43,54,34,52,"truncatedString"],[43,69,34,67],[44,8,35,6],[45,8,36,6],[45,15,36,13,"value"],[45,20,36,18],[46,6,37,4],[47,6,38,4],[47,10,38,8],[47,17,38,15,"value"],[47,22,38,20],[47,27,38,25],[47,35,38,33],[47,39,38,37,"value"],[47,44,38,42],[47,49,38,47],[47,53,38,51],[47,55,38,53],[48,8,39,6],[48,15,39,13,"value"],[48,20,39,18],[49,6,40,4],[50,6,42,4],[50,10,42,8,"retval"],[50,16,42,14],[50,19,42,17,"value"],[50,24,42,22],[51,6,43,4],[51,10,43,8,"Array"],[51,15,43,13],[51,16,43,14,"isArray"],[51,23,43,21],[51,24,43,22,"value"],[51,29,43,27],[51,30,43,28],[51,32,43,30],[52,8,44,6],[52,12,44,10,"stack"],[52,17,44,15],[52,18,44,16,"length"],[52,24,44,22],[52,28,44,26,"maxDepth"],[52,36,44,34],[52,38,44,36],[53,10,45,8,"retval"],[53,16,45,14],[53,19,45,17],[53,39,45,37,"value"],[53,44,45,42],[53,45,45,43,"length"],[53,51,45,49],[53,66,45,64],[54,8,46,6],[54,9,46,7],[54,15,46,13],[54,19,46,17,"value"],[54,24,46,22],[54,25,46,23,"length"],[54,31,46,29],[54,34,46,32,"maxArrayLimit"],[54,47,46,45],[54,49,46,47],[55,10,47,8,"retval"],[55,16,47,14],[55,19,47,17,"value"],[55,24,47,22],[55,25,48,11,"slice"],[55,30,48,16],[55,31,48,17],[55,32,48,18],[55,34,48,20,"maxArrayLimit"],[55,47,48,33],[55,48,48,34],[55,49,49,11,"concat"],[55,55,49,17],[55,56,49,18],[55,57,49,19],[55,70,49,32,"value"],[55,75,49,37],[55,76,49,38,"length"],[55,82,49,44],[55,85,49,47,"maxArrayLimit"],[55,98,49,60],[55,121,49,83],[55,122,49,84],[55,123,49,85],[56,8,50,6],[57,6,51,4],[57,7,51,5],[57,13,51,11],[58,8,52,6],[59,8,53,6],[59,12,53,10],[59,19,53,17,"value"],[59,24,53,22],[59,29,53,27],[59,37,53,35],[59,39,53,37],[60,10,54,8],[60,16,54,14],[60,20,54,18,"Error"],[60,25,54,23],[60,26,54,24],[60,58,54,56],[60,59,54,57],[61,8,55,6],[62,8,56,6],[62,12,56,12,"keys"],[62,16,56,16],[62,19,56,19,"Object"],[62,25,56,25],[62,26,56,26,"keys"],[62,30,56,30],[62,31,56,31,"value"],[62,36,56,36],[62,37,56,37],[63,8,57,6],[63,12,57,10,"stack"],[63,17,57,15],[63,18,57,16,"length"],[63,24,57,22],[63,28,57,26,"maxDepth"],[63,36,57,34],[63,38,57,36],[64,10,58,8,"retval"],[64,16,58,14],[64,19,58,17],[64,40,58,38,"keys"],[64,44,58,42],[64,45,58,43,"length"],[64,51,58,49],[64,64,58,62],[65,8,59,6],[65,9,59,7],[65,15,59,13],[65,19,59,17,"keys"],[65,23,59,21],[65,24,59,22,"length"],[65,30,59,28],[65,33,59,31,"maxObjectKeysLimit"],[65,51,59,49],[65,53,59,51],[66,10,60,8],[67,10,61,8,"retval"],[67,16,61,14],[67,19,61,17],[67,20,61,18],[67,21,61,19],[68,10,62,8],[68,15,62,13],[68,19,62,19,"k"],[68,20,62,20],[68,24,62,24,"keys"],[68,28,62,28],[68,29,62,29,"slice"],[68,34,62,34],[68,35,62,35],[68,36,62,36],[68,38,62,38,"maxObjectKeysLimit"],[68,56,62,56],[68,57,62,57],[68,59,62,59],[69,12,63,10,"retval"],[69,18,63,16],[69,19,63,17,"k"],[69,20,63,18],[69,21,63,19],[69,24,63,22,"value"],[69,29,63,27],[69,30,63,28,"k"],[69,31,63,29],[69,32,63,30],[70,10,64,8],[71,10,65,8],[71,14,65,14,"truncatedKey"],[71,26,65,26],[71,29,65,29],[71,53,65,53],[72,10,66,8,"retval"],[72,16,66,14],[72,17,66,15,"truncatedKey"],[72,29,66,27],[72,30,66,28],[72,33,66,31,"keys"],[72,37,66,35],[72,38,66,36,"length"],[72,44,66,42],[72,47,66,45,"maxObjectKeysLimit"],[72,65,66,63],[73,8,67,6],[74,6,68,4],[75,6,69,4,"stack"],[75,11,69,9],[75,12,69,10,"unshift"],[75,19,69,17],[75,20,69,18,"retval"],[75,26,69,24],[75,27,69,25],[76,6,70,4],[76,13,70,11,"retval"],[76,19,70,17],[77,4,71,2],[78,4,73,2],[78,11,73,9],[78,20,73,18,"stringifySafe"],[78,33,73,31,"stringifySafe"],[78,34,73,32,"arg"],[78,37,73,40],[78,39,73,50],[79,6,74,4],[79,10,74,8,"arg"],[79,13,74,11],[79,18,74,16,"undefined"],[79,27,74,25],[79,29,74,27],[80,8,75,6],[80,15,75,13],[80,26,75,24],[81,6,76,4],[81,7,76,5],[81,13,76,11],[81,17,76,15,"arg"],[81,20,76,18],[81,25,76,23],[81,29,76,27],[81,31,76,29],[82,8,77,6],[82,15,77,13],[82,21,77,19],[83,6,78,4],[83,7,78,5],[83,13,78,11],[83,17,78,15],[83,24,78,22,"arg"],[83,27,78,25],[83,32,78,30],[83,42,78,40],[83,44,78,42],[84,8,79,6],[84,12,79,10],[85,10,80,8],[85,17,80,15,"arg"],[85,20,80,18],[85,21,80,19,"toString"],[85,29,80,27],[85,30,80,28],[85,31,80,29],[86,8,81,6],[86,9,81,7],[86,10,81,8],[86,16,81,14],[87,10,82,8],[87,17,82,15],[87,37,82,35],[88,8,83,6],[89,6,84,4],[89,7,84,5],[89,13,84,11],[89,17,84,15,"arg"],[89,20,84,18],[89,32,84,30,"Error"],[89,37,84,35],[89,39,84,37],[90,8,85,6],[90,15,85,13,"arg"],[90,18,85,16],[90,19,85,17,"name"],[90,23,85,21],[90,26,85,24],[90,30,85,28],[90,33,85,31,"arg"],[90,36,85,34],[90,37,85,35,"message"],[90,44,85,42],[91,6,86,4],[91,7,86,5],[91,13,86,11],[92,8,87,6],[93,8,88,6],[94,8,89,6],[94,12,89,10],[95,10,90,8],[95,14,90,14,"ret"],[95,17,90,17],[95,20,90,20,"JSON"],[95,24,90,24],[95,25,90,25,"stringify"],[95,34,90,34],[95,35,90,35,"arg"],[95,38,90,38],[95,40,90,40,"replacer"],[95,48,90,48],[95,49,90,49],[96,10,91,8],[96,14,91,12,"ret"],[96,17,91,15],[96,22,91,20,"undefined"],[96,31,91,29],[96,33,91,31],[97,12,92,10],[97,19,92,17],[97,23,92,21],[97,26,92,24],[97,33,92,31,"arg"],[97,36,92,34],[97,39,92,37],[97,63,92,61],[98,10,93,8],[99,10,94,8],[99,17,94,15,"ret"],[99,20,94,18],[100,8,95,6],[100,9,95,7],[100,10,95,8],[100,16,95,14],[101,10,96,8],[101,14,96,12],[101,21,96,19,"arg"],[101,24,96,22],[101,25,96,23,"toString"],[101,33,96,31],[101,38,96,36],[101,48,96,46],[101,50,96,48],[102,12,97,10],[102,16,97,14],[103,14,98,12],[104,14,99,12],[104,21,99,19,"arg"],[104,24,99,22],[104,25,99,23,"toString"],[104,33,99,31],[104,34,99,32],[104,35,99,33],[105,12,100,10],[105,13,100,11],[105,14,100,12],[105,20,100,18],[105,21,100,19],[106,10,101,8],[107,8,102,6],[108,6,103,4],[109,6,104,4],[109,13,104,11],[109,17,104,15],[109,20,104,18],[109,27,104,25,"arg"],[109,30,104,28],[109,33,104,31],[109,57,104,55],[110,4,105,2],[110,5,105,3],[111,2,106,0],[112,2,108,0],[112,6,108,6,"stringifySafe"],[112,19,108,19],[112,22,108,22,"createStringifySafeWithLimits"],[112,51,108,51],[112,52,108,52],[113,4,109,2,"maxDepth"],[113,12,109,10],[113,14,109,12],[113,16,109,14],[114,4,110,2,"maxStringLimit"],[114,18,110,16],[114,20,110,18],[114,23,110,21],[115,4,111,2,"maxArrayLimit"],[115,17,111,15],[115,19,111,17],[115,21,111,19],[116,4,112,2,"maxObjectKeysLimit"],[116,22,112,20],[116,24,112,22],[117,2,113,0],[117,3,113,1],[117,4,113,2],[118,2,115,0],[118,6,115,0,"_default"],[118,14,115,0],[118,17,115,15,"stringifySafe"],[118,30,115,28],[119,0,115,29],[119,3]],"functionMap":{"names":["<global>","createStringifySafeWithLimits","replacer","stringifySafe"],"mappings":"AAA;OCY;ECa;GD6C;SEE;GFgC;CDC"},"hasCjsExports":false},"type":"js/module"}]}