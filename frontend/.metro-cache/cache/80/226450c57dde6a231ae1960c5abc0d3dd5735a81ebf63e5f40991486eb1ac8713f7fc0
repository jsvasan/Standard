{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE=","exportNames":["*"],"imports":1}},{"name":"./Font.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"iwvcxaVgfIXdww6iPrKSgtcaZy8=","exportNames":["*"],"imports":1}},{"name":"./FontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}}],"key":"ubgLNxOkixzH8pVapAwap9wQ8XU=","exportNames":["*"],"imports":1}},{"name":"./memory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}}],"key":"wlrMBDc1MVhnZOig0xhYu83J328=","exportNames":["*"],"imports":1}},{"name":"./server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}}],"key":"QinwpQMs5c8GY+myVdgXEzx55Tw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.isLoaded = isLoaded;\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return _FontTypes.FontDisplay;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ExpoFontLoader = require(_dependencyMap[2], \"./ExpoFontLoader\");\n  var ExpoFontLoader = _interopDefault(_ExpoFontLoader);\n  var _FontTypes = require(_dependencyMap[3], \"./Font.types\");\n  var _FontLoader = require(_dependencyMap[4], \"./FontLoader\");\n  var _memory = require(_dependencyMap[5], \"./memory\");\n  var _server = require(_dependencyMap[6], \"./server\");\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      return (0, _memory.isLoadedInCache)(fontFamily) || !!ExpoFontLoader.default.isLoaded(fontFamily);\n    }\n    return (0, _memory.isLoadedNative)(fontFamily);\n  }\n  /**\n   * Synchronously get all the fonts that have been loaded.\n   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n   *\n   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n   */\n  function getLoadedFonts() {\n    return ExpoFontLoader.default.getLoadedFonts();\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  // @needsAudit\n  /**\n   * An efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * > **Note**: We recommend using the [config plugin](#configuration-in-appjsonappconfigjs) instead whenever possible.\n   *\n   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n   * with React Native `Text` elements.\n   * @param source The font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    var isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      if (isServer) {\n        names.map(name => (0, _server.registerStaticFont)(name, fontMap[name]));\n        return Promise.resolve();\n      }\n      return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});\n    }\n    if (isServer) {\n      (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n      return Promise.resolve();\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  function loadFontInNamespaceAsync(_x, _x2) {\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   * @hidden\n   */\n  function _loadFontInNamespaceAsync() {\n    _loadFontInNamespaceAsync = (0, _asyncToGenerator.default)(function* (fontFamily, source) {\n      if (!source) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n      }\n      // we consult the native module to see if the font is already loaded\n      // this is slower than checking the cache but can help avoid loading the same font n times\n      if (isLoaded(fontFamily)) {\n        return;\n      }\n      if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n        return _memory.loadPromises[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var asset = (0, _FontLoader.getAssetForSource)(source);\n      _memory.loadPromises[fontFamily] = (0, _asyncToGenerator.default)(function* () {\n        try {\n          yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n          (0, _memory.markLoaded)(fontFamily);\n        } finally {\n          delete _memory.loadPromises[fontFamily];\n        }\n      })();\n      yield _memory.loadPromises[fontFamily];\n    });\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function unloadAllAsync() {\n    return _unloadAllAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * This is used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   * @hidden\n   */\n  function _unloadAllAsync() {\n    _unloadAllAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoFontLoader.default.unloadAllAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n      }\n      if (Object.keys(_memory.loadPromises).length) {\n        throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n      }\n      (0, _memory.purgeCache)();\n      yield ExpoFontLoader.default.unloadAllAsync();\n    });\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function unloadAsync(_x3, _x4) {\n    return _unloadAsync.apply(this, arguments);\n  }\n  function _unloadAsync() {\n    _unloadAsync = (0, _asyncToGenerator.default)(function* (fontFamilyOrFontMap, options) {\n      if (!ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n        return;\n      }\n      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n    });\n    return _unloadAsync.apply(this, arguments);\n  }\n  function unloadFontInNamespaceAsync(_x5, _x6) {\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _unloadFontInNamespaceAsync() {\n    _unloadFontInNamespaceAsync = (0, _asyncToGenerator.default)(function* (fontFamily, options) {\n      if (!isLoaded(fontFamily)) {\n        return;\n      } else {\n        (0, _memory.purgeFontFamilyFromCache)(fontFamily);\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      if (!fontFamily) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n      }\n      yield ExpoFontLoader.default.unloadAsync(fontFamily, options);\n    });\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n});","lineCount":207,"map":[[12,2,14,0,"exports"],[12,9,14,0],[12,10,14,0,"isLoaded"],[12,18,14,0],[12,21,14,0,"isLoaded"],[12,29,14,0],[13,2,26,0,"exports"],[13,9,26,0],[13,10,26,0,"getLoadedFonts"],[13,24,26,0],[13,27,26,0,"getLoadedFonts"],[13,41,26,0],[14,2,36,0,"exports"],[14,9,36,0],[14,10,36,0,"isLoading"],[14,19,36,0],[14,22,36,0,"isLoading"],[14,31,36,0],[15,2,54,0,"exports"],[15,9,54,0],[15,10,54,0,"loadAsync"],[15,19,54,0],[15,22,54,0,"loadAsync"],[15,31,54,0],[16,2,110,0,"exports"],[16,9,110,0],[16,10,110,0,"unloadAllAsync"],[16,24,110,0],[16,27,110,0,"unloadAllAsync"],[16,41,110,0],[17,2,130,0,"exports"],[17,9,130,0],[17,10,130,0,"unloadAsync"],[17,21,130,0],[17,24,130,0,"unloadAsync"],[17,35,130,0],[18,2,161,0,"Object"],[18,8,161,0],[18,9,161,0,"defineProperty"],[18,23,161,0],[18,24,161,0,"exports"],[18,31,161,0],[19,4,161,0,"enumerable"],[19,14,161,0],[20,4,161,0,"get"],[20,7,161,0],[20,18,161,0,"get"],[20,19,161,0],[21,6,161,0],[21,13,161,9,"FontDisplay"],[21,23,161,20],[21,24,161,20,"FontDisplay"],[21,35,161,20],[22,4,161,20],[23,2,161,20],[24,2,161,23],[24,6,161,23,"_babelRuntimeHelpersAsyncToGenerator"],[24,42,161,23],[24,45,161,23,"require"],[24,52,161,23],[24,53,161,23,"_dependencyMap"],[24,67,161,23],[25,2,161,23],[25,6,161,23,"_asyncToGenerator"],[25,23,161,23],[25,26,161,23,"_interopDefault"],[25,41,161,23],[25,42,161,23,"_babelRuntimeHelpersAsyncToGenerator"],[25,78,161,23],[26,2,1,0],[26,6,1,0,"_expoModulesCore"],[26,22,1,0],[26,25,1,0,"require"],[26,32,1,0],[26,33,1,0,"_dependencyMap"],[26,47,1,0],[27,2,2,0],[27,6,2,0,"_ExpoFontLoader"],[27,21,2,0],[27,24,2,0,"require"],[27,31,2,0],[27,32,2,0,"_dependencyMap"],[27,46,2,0],[28,2,2,0],[28,6,2,0,"ExpoFontLoader"],[28,20,2,0],[28,23,2,0,"_interopDefault"],[28,38,2,0],[28,39,2,0,"_ExpoFontLoader"],[28,54,2,0],[29,2,3,0],[29,6,3,0,"_FontTypes"],[29,16,3,0],[29,19,3,0,"require"],[29,26,3,0],[29,27,3,0,"_dependencyMap"],[29,41,3,0],[30,2,4,0],[30,6,4,0,"_FontLoader"],[30,17,4,0],[30,20,4,0,"require"],[30,27,4,0],[30,28,4,0,"_dependencyMap"],[30,42,4,0],[31,2,5,0],[31,6,5,0,"_memory"],[31,13,5,0],[31,16,5,0,"require"],[31,23,5,0],[31,24,5,0,"_dependencyMap"],[31,38,5,0],[32,2,6,0],[32,6,6,0,"_server"],[32,13,6,0],[32,16,6,0,"require"],[32,23,6,0],[32,24,6,0,"_dependencyMap"],[32,38,6,0],[33,2,7,0],[34,2,8,0],[35,0,9,0],[36,0,10,0],[37,0,11,0],[38,0,12,0],[39,0,13,0],[40,2,14,7],[40,11,14,16,"isLoaded"],[40,19,14,24,"isLoaded"],[40,20,14,25,"fontFamily"],[40,30,14,35],[40,32,14,37],[41,4,15,4],[41,8,15,8,"Platform"],[41,24,15,16],[41,25,15,16,"Platform"],[41,33,15,16],[41,34,15,17,"OS"],[41,36,15,19],[41,41,15,24],[41,46,15,29],[41,48,15,31],[42,6,16,8],[42,13,16,15],[42,17,16,15,"isLoadedInCache"],[42,24,16,30],[42,25,16,30,"isLoadedInCache"],[42,40,16,30],[42,42,16,31,"fontFamily"],[42,52,16,41],[42,53,16,42],[42,57,16,46],[42,58,16,47],[42,59,16,48,"ExpoFontLoader"],[42,73,16,62],[42,74,16,62,"default"],[42,81,16,62],[42,82,16,63,"isLoaded"],[42,90,16,71],[42,91,16,72,"fontFamily"],[42,101,16,82],[42,102,16,83],[43,4,17,4],[44,4,18,4],[44,11,18,11],[44,15,18,11,"isLoadedNative"],[44,22,18,25],[44,23,18,25,"isLoadedNative"],[44,37,18,25],[44,39,18,26,"fontFamily"],[44,49,18,36],[44,50,18,37],[45,2,19,0],[46,2,20,0],[47,0,21,0],[48,0,22,0],[49,0,23,0],[50,0,24,0],[51,0,25,0],[52,2,26,7],[52,11,26,16,"getLoadedFonts"],[52,25,26,30,"getLoadedFonts"],[52,26,26,30],[52,28,26,33],[53,4,27,4],[53,11,27,11,"ExpoFontLoader"],[53,25,27,25],[53,26,27,25,"default"],[53,33,27,25],[53,34,27,26,"getLoadedFonts"],[53,48,27,40],[53,49,27,41],[53,50,27,42],[54,2,28,0],[55,2,29,0],[56,2,30,0],[57,0,31,0],[58,0,32,0],[59,0,33,0],[60,0,34,0],[61,0,35,0],[62,2,36,7],[62,11,36,16,"isLoading"],[62,20,36,25,"isLoading"],[62,21,36,26,"fontFamily"],[62,31,36,36],[62,33,36,38],[63,4,37,4],[63,11,37,11,"fontFamily"],[63,21,37,21],[63,25,37,25,"loadPromises"],[63,32,37,37],[63,33,37,37,"loadPromises"],[63,45,37,37],[64,2,38,0],[65,2,39,0],[66,2,40,0],[67,0,41,0],[68,0,42,0],[69,0,43,0],[70,0,44,0],[71,0,45,0],[72,0,46,0],[73,0,47,0],[74,0,48,0],[75,0,49,0],[76,0,50,0],[77,0,51,0],[78,0,52,0],[79,0,53,0],[80,2,54,7],[80,11,54,16,"loadAsync"],[80,20,54,25,"loadAsync"],[80,21,54,26,"fontFamilyOrFontMap"],[80,40,54,45],[80,42,54,47,"source"],[80,48,54,53],[80,50,54,55],[81,4,55,4],[82,4,56,4],[83,4,57,4],[84,4,58,4],[84,8,58,10,"isServer"],[84,16,58,18],[84,19,58,21,"Platform"],[84,35,58,29],[84,36,58,29,"Platform"],[84,44,58,29],[84,45,58,30,"OS"],[84,47,58,32],[84,52,58,37],[84,57,58,42],[84,61,58,46],[84,68,58,53,"window"],[84,74,58,59],[84,79,58,64],[84,90,58,75],[85,4,59,4],[85,8,59,8],[85,15,59,15,"fontFamilyOrFontMap"],[85,34,59,34],[85,39,59,39],[85,47,59,47],[85,49,59,49],[86,6,60,8],[86,10,60,12,"source"],[86,16,60,18],[86,18,60,20],[87,8,61,12],[87,15,61,19,"Promise"],[87,22,61,26],[87,23,61,27,"reject"],[87,29,61,33],[87,30,61,34],[87,34,61,38,"CodedError"],[87,50,61,48],[87,51,61,48,"CodedError"],[87,61,61,48],[87,62,61,49],[87,76,61,63],[87,78,61,65],[87,132,61,119,"source"],[87,138,61,125],[87,244,61,231],[87,245,61,232],[87,246,61,233],[88,6,62,8],[89,6,63,8],[89,10,63,14,"fontMap"],[89,17,63,21],[89,20,63,24,"fontFamilyOrFontMap"],[89,39,63,43],[90,6,64,8],[90,10,64,14,"names"],[90,15,64,19],[90,18,64,22,"Object"],[90,24,64,28],[90,25,64,29,"keys"],[90,29,64,33],[90,30,64,34,"fontMap"],[90,37,64,41],[90,38,64,42],[91,6,65,8],[91,10,65,12,"isServer"],[91,18,65,20],[91,20,65,22],[92,8,66,12,"names"],[92,13,66,17],[92,14,66,18,"map"],[92,17,66,21],[92,18,66,23,"name"],[92,22,66,27],[92,26,66,32],[92,30,66,32,"registerStaticFont"],[92,37,66,50],[92,38,66,50,"registerStaticFont"],[92,56,66,50],[92,58,66,51,"name"],[92,62,66,55],[92,64,66,57,"fontMap"],[92,71,66,64],[92,72,66,65,"name"],[92,76,66,69],[92,77,66,70],[92,78,66,71],[92,79,66,72],[93,8,67,12],[93,15,67,19,"Promise"],[93,22,67,26],[93,23,67,27,"resolve"],[93,30,67,34],[93,31,67,35],[93,32,67,36],[94,6,68,8],[95,6,69,8],[95,13,69,15,"Promise"],[95,20,69,22],[95,21,69,23,"all"],[95,24,69,26],[95,25,69,27,"names"],[95,30,69,32],[95,31,69,33,"map"],[95,34,69,36],[95,35,69,38,"name"],[95,39,69,42],[95,43,69,47,"loadFontInNamespaceAsync"],[95,67,69,71],[95,68,69,72,"name"],[95,72,69,76],[95,74,69,78,"fontMap"],[95,81,69,85],[95,82,69,86,"name"],[95,86,69,90],[95,87,69,91],[95,88,69,92],[95,89,69,93],[95,90,69,94],[95,91,69,95,"then"],[95,95,69,99],[95,96,69,100],[95,102,69,106],[95,103,69,108],[95,104,69,109],[95,105,69,110],[96,4,70,4],[97,4,71,4],[97,8,71,8,"isServer"],[97,16,71,16],[97,18,71,18],[98,6,72,8],[98,10,72,8,"registerStaticFont"],[98,17,72,26],[98,18,72,26,"registerStaticFont"],[98,36,72,26],[98,38,72,27,"fontFamilyOrFontMap"],[98,57,72,46],[98,59,72,48,"source"],[98,65,72,54],[98,66,72,55],[99,6,73,8],[99,13,73,15,"Promise"],[99,20,73,22],[99,21,73,23,"resolve"],[99,28,73,30],[99,29,73,31],[99,30,73,32],[100,4,74,4],[101,4,75,4],[101,11,75,11,"loadFontInNamespaceAsync"],[101,35,75,35],[101,36,75,36,"fontFamilyOrFontMap"],[101,55,75,55],[101,57,75,57,"source"],[101,63,75,63],[101,64,75,64],[102,2,76,0],[103,2,76,1],[103,11,77,15,"loadFontInNamespaceAsync"],[103,35,77,39,"loadFontInNamespaceAsync"],[103,36,77,39,"_x"],[103,38,77,39],[103,40,77,39,"_x2"],[103,43,77,39],[104,4,77,39],[104,11,77,39,"_loadFontInNamespaceAsync"],[104,36,77,39],[104,37,77,39,"apply"],[104,42,77,39],[104,49,77,39,"arguments"],[104,58,77,39],[105,2,77,39],[105,4,105,0],[106,2,106,0],[107,0,107,0],[108,0,108,0],[109,0,109,0],[110,2,106,0],[110,11,106,0,"_loadFontInNamespaceAsync"],[110,37,106,0],[111,4,106,0,"_loadFontInNamespaceAsync"],[111,29,106,0],[111,36,106,0,"_asyncToGenerator"],[111,53,106,0],[111,54,106,0,"default"],[111,61,106,0],[111,63,77,0],[111,74,77,40,"fontFamily"],[111,84,77,50],[111,86,77,52,"source"],[111,92,77,58],[111,94,77,60],[112,6,78,4],[112,10,78,8],[112,11,78,9,"source"],[112,17,78,15],[112,19,78,17],[113,8,79,8],[113,14,79,14],[113,18,79,18,"CodedError"],[113,34,79,28],[113,35,79,28,"CodedError"],[113,45,79,28],[113,46,79,29],[113,63,79,46],[113,65,79,48],[113,114,79,97,"fontFamily"],[113,124,79,107],[113,130,79,113,"source"],[113,136,79,119],[113,206,79,189,"fontFamily"],[113,216,79,199],[113,219,79,202],[113,220,79,203],[114,6,80,4],[115,6,81,4],[116,6,82,4],[117,6,83,4],[117,10,83,8,"isLoaded"],[117,18,83,16],[117,19,83,17,"fontFamily"],[117,29,83,27],[117,30,83,28],[117,32,83,30],[118,8,84,8],[119,6,85,4],[120,6,86,4],[120,10,86,8,"loadPromises"],[120,17,86,20],[120,18,86,20,"loadPromises"],[120,30,86,20],[120,31,86,21,"hasOwnProperty"],[120,45,86,35],[120,46,86,36,"fontFamily"],[120,56,86,46],[120,57,86,47],[120,59,86,49],[121,8,87,8],[121,15,87,15,"loadPromises"],[121,22,87,27],[121,23,87,27,"loadPromises"],[121,35,87,27],[121,36,87,28,"fontFamily"],[121,46,87,38],[121,47,87,39],[122,6,88,4],[123,6,89,4],[124,6,90,4],[125,6,91,4],[126,6,92,4],[127,6,93,4],[127,10,93,10,"asset"],[127,15,93,15],[127,18,93,18],[127,22,93,18,"getAssetForSource"],[127,33,93,35],[127,34,93,35,"getAssetForSource"],[127,51,93,35],[127,53,93,36,"source"],[127,59,93,42],[127,60,93,43],[128,6,94,4,"loadPromises"],[128,13,94,16],[128,14,94,16,"loadPromises"],[128,26,94,16],[128,27,94,17,"fontFamily"],[128,37,94,27],[128,38,94,28],[128,41,94,31],[128,45,94,31,"_asyncToGenerator"],[128,62,94,31],[128,63,94,31,"default"],[128,70,94,31],[128,72,94,32],[128,85,94,44],[129,8,95,8],[129,12,95,12],[130,10,96,12],[130,16,96,18],[130,20,96,18,"loadSingleFontAsync"],[130,31,96,37],[130,32,96,37,"loadSingleFontAsync"],[130,51,96,37],[130,53,96,38,"fontFamily"],[130,63,96,48],[130,65,96,50,"asset"],[130,70,96,55],[130,71,96,56],[131,10,97,12],[131,14,97,12,"markLoaded"],[131,21,97,22],[131,22,97,22,"markLoaded"],[131,32,97,22],[131,34,97,23,"fontFamily"],[131,44,97,33],[131,45,97,34],[132,8,98,8],[132,9,98,9],[132,18,99,16],[133,10,100,12],[133,17,100,19,"loadPromises"],[133,24,100,31],[133,25,100,31,"loadPromises"],[133,37,100,31],[133,38,100,32,"fontFamily"],[133,48,100,42],[133,49,100,43],[134,8,101,8],[135,6,102,4],[135,7,102,5],[135,9,102,7],[135,10,102,8],[136,6,103,4],[136,12,103,10,"loadPromises"],[136,19,103,22],[136,20,103,22,"loadPromises"],[136,32,103,22],[136,33,103,23,"fontFamily"],[136,43,103,33],[136,44,103,34],[137,4,104,0],[137,5,104,1],[138,4,104,1],[138,11,104,1,"_loadFontInNamespaceAsync"],[138,36,104,1],[138,37,104,1,"apply"],[138,42,104,1],[138,49,104,1,"arguments"],[138,58,104,1],[139,2,104,1],[140,2,104,1],[140,11,110,22,"unloadAllAsync"],[140,25,110,36,"unloadAllAsync"],[140,26,110,36],[141,4,110,36],[141,11,110,36,"_unloadAllAsync"],[141,26,110,36],[141,27,110,36,"apply"],[141,32,110,36],[141,39,110,36,"arguments"],[141,48,110,36],[142,2,110,36],[142,4,120,0],[143,2,121,0],[144,0,122,0],[145,0,123,0],[146,0,124,0],[147,0,125,0],[148,0,126,0],[149,0,127,0],[150,0,128,0],[151,0,129,0],[152,2,121,0],[152,11,121,0,"_unloadAllAsync"],[152,27,121,0],[153,4,121,0,"_unloadAllAsync"],[153,19,121,0],[153,26,121,0,"_asyncToGenerator"],[153,43,121,0],[153,44,121,0,"default"],[153,51,121,0],[153,53,110,7],[153,66,110,39],[154,6,111,4],[154,10,111,8],[154,11,111,9,"ExpoFontLoader"],[154,25,111,23],[154,26,111,23,"default"],[154,33,111,23],[154,34,111,24,"unloadAllAsync"],[154,48,111,38],[154,50,111,40],[155,8,112,8],[155,14,112,14],[155,18,112,18,"UnavailabilityError"],[155,34,112,37],[155,35,112,37,"UnavailabilityError"],[155,54,112,37],[155,55,112,38],[155,66,112,49],[155,68,112,51],[155,84,112,67],[155,85,112,68],[156,6,113,4],[157,6,114,4],[157,10,114,8,"Object"],[157,16,114,14],[157,17,114,15,"keys"],[157,21,114,19],[157,22,114,20,"loadPromises"],[157,29,114,32],[157,30,114,32,"loadPromises"],[157,42,114,32],[157,43,114,33],[157,44,114,34,"length"],[157,50,114,40],[157,52,114,42],[158,8,115,8],[158,14,115,14],[158,18,115,18,"CodedError"],[158,34,115,28],[158,35,115,28,"CodedError"],[158,45,115,28],[158,46,115,29],[158,58,115,41],[158,60,115,43],[158,112,115,95,"Object"],[158,118,115,101],[158,119,115,102,"keys"],[158,123,115,106],[158,124,115,107,"loadPromises"],[158,131,115,119],[158,132,115,119,"loadPromises"],[158,144,115,119],[158,145,115,120],[158,146,115,121,"join"],[158,150,115,125],[158,151,115,126],[158,155,115,130],[158,156,115,131],[158,158,115,133],[158,159,115,134],[159,6,116,4],[160,6,117,4],[160,10,117,4,"purgeCache"],[160,17,117,14],[160,18,117,14,"purgeCache"],[160,28,117,14],[160,30,117,15],[160,31,117,16],[161,6,118,4],[161,12,118,10,"ExpoFontLoader"],[161,26,118,24],[161,27,118,24,"default"],[161,34,118,24],[161,35,118,25,"unloadAllAsync"],[161,49,118,39],[161,50,118,40],[161,51,118,41],[162,4,119,0],[162,5,119,1],[163,4,119,1],[163,11,119,1,"_unloadAllAsync"],[163,26,119,1],[163,27,119,1,"apply"],[163,32,119,1],[163,39,119,1,"arguments"],[163,48,119,1],[164,2,119,1],[165,2,119,1],[165,11,130,22,"unloadAsync"],[165,22,130,33,"unloadAsync"],[165,23,130,33,"_x3"],[165,26,130,33],[165,28,130,33,"_x4"],[165,31,130,33],[166,4,130,33],[166,11,130,33,"_unloadAsync"],[166,23,130,33],[166,24,130,33,"apply"],[166,29,130,33],[166,36,130,33,"arguments"],[166,45,130,33],[167,2,130,33],[168,2,130,33],[168,11,130,33,"_unloadAsync"],[168,24,130,33],[169,4,130,33,"_unloadAsync"],[169,16,130,33],[169,23,130,33,"_asyncToGenerator"],[169,40,130,33],[169,41,130,33,"default"],[169,48,130,33],[169,50,130,7],[169,61,130,34,"fontFamilyOrFontMap"],[169,80,130,53],[169,82,130,55,"options"],[169,89,130,62],[169,91,130,64],[170,6,131,4],[170,10,131,8],[170,11,131,9,"ExpoFontLoader"],[170,25,131,23],[170,26,131,23,"default"],[170,33,131,23],[170,34,131,24,"unloadAsync"],[170,45,131,35],[170,47,131,37],[171,8,132,8],[171,14,132,14],[171,18,132,18,"UnavailabilityError"],[171,34,132,37],[171,35,132,37,"UnavailabilityError"],[171,54,132,37],[171,55,132,38],[171,66,132,49],[171,68,132,51],[171,81,132,64],[171,82,132,65],[172,6,133,4],[173,6,134,4],[173,10,134,8],[173,17,134,15,"fontFamilyOrFontMap"],[173,36,134,34],[173,41,134,39],[173,49,134,47],[173,51,134,49],[174,8,135,8],[174,12,135,12,"options"],[174,19,135,19],[174,21,135,21],[175,10,136,12],[175,16,136,18],[175,20,136,22,"CodedError"],[175,36,136,32],[175,37,136,32,"CodedError"],[175,47,136,32],[175,48,136,33],[175,62,136,47],[175,64,136,49],[175,119,136,104,"options"],[175,126,136,111],[175,234,136,219],[175,235,136,220],[176,8,137,8],[177,8,138,8],[177,12,138,14,"fontMap"],[177,19,138,21],[177,22,138,24,"fontFamilyOrFontMap"],[177,41,138,43],[178,8,139,8],[178,12,139,14,"names"],[178,17,139,19],[178,20,139,22,"Object"],[178,26,139,28],[178,27,139,29,"keys"],[178,31,139,33],[178,32,139,34,"fontMap"],[178,39,139,41],[178,40,139,42],[179,8,140,8],[179,14,140,14,"Promise"],[179,21,140,21],[179,22,140,22,"all"],[179,25,140,25],[179,26,140,26,"names"],[179,31,140,31],[179,32,140,32,"map"],[179,35,140,35],[179,36,140,37,"name"],[179,40,140,41],[179,44,140,46,"unloadFontInNamespaceAsync"],[179,70,140,72],[179,71,140,73,"name"],[179,75,140,77],[179,77,140,79,"fontMap"],[179,84,140,86],[179,85,140,87,"name"],[179,89,140,91],[179,90,140,92],[179,91,140,93],[179,92,140,94],[179,93,140,95],[180,8,141,8],[181,6,142,4],[182,6,143,4],[182,19,143,17,"unloadFontInNamespaceAsync"],[182,45,143,43],[182,46,143,44,"fontFamilyOrFontMap"],[182,65,143,63],[182,67,143,65,"options"],[182,74,143,72],[182,75,143,73],[183,4,144,0],[183,5,144,1],[184,4,144,1],[184,11,144,1,"_unloadAsync"],[184,23,144,1],[184,24,144,1,"apply"],[184,29,144,1],[184,36,144,1,"arguments"],[184,45,144,1],[185,2,144,1],[186,2,144,1],[186,11,145,15,"unloadFontInNamespaceAsync"],[186,37,145,41,"unloadFontInNamespaceAsync"],[186,38,145,41,"_x5"],[186,41,145,41],[186,43,145,41,"_x6"],[186,46,145,41],[187,4,145,41],[187,11,145,41,"_unloadFontInNamespaceAsync"],[187,38,145,41],[187,39,145,41,"apply"],[187,44,145,41],[187,51,145,41,"arguments"],[187,60,145,41],[188,2,145,41],[189,2,145,41],[189,11,145,41,"_unloadFontInNamespaceAsync"],[189,39,145,41],[190,4,145,41,"_unloadFontInNamespaceAsync"],[190,31,145,41],[190,38,145,41,"_asyncToGenerator"],[190,55,145,41],[190,56,145,41,"default"],[190,63,145,41],[190,65,145,0],[190,76,145,42,"fontFamily"],[190,86,145,52],[190,88,145,54,"options"],[190,95,145,61],[190,97,145,63],[191,6,146,4],[191,10,146,8],[191,11,146,9,"isLoaded"],[191,19,146,17],[191,20,146,18,"fontFamily"],[191,30,146,28],[191,31,146,29],[191,33,146,31],[192,8,147,8],[193,6,148,4],[193,7,148,5],[193,13,149,9],[194,8,150,8],[194,12,150,8,"purgeFontFamilyFromCache"],[194,19,150,32],[194,20,150,32,"purgeFontFamilyFromCache"],[194,44,150,32],[194,46,150,33,"fontFamily"],[194,56,150,43],[194,57,150,44],[195,6,151,4],[196,6,152,4],[197,6,153,4],[198,6,154,4],[199,6,155,4],[200,6,156,4],[200,10,156,8],[200,11,156,9,"fontFamily"],[200,21,156,19],[200,23,156,21],[201,8,157,8],[201,14,157,14],[201,18,157,18,"CodedError"],[201,34,157,28],[201,35,157,28,"CodedError"],[201,45,157,28],[201,46,157,29],[201,63,157,46],[201,65,157,48],[201,94,157,77],[201,95,157,78],[202,6,158,4],[203,6,159,4],[203,12,159,10,"ExpoFontLoader"],[203,26,159,24],[203,27,159,24,"default"],[203,34,159,24],[203,35,159,25,"unloadAsync"],[203,46,159,36],[203,47,159,37,"fontFamily"],[203,57,159,47],[203,59,159,49,"options"],[203,66,159,56],[203,67,159,57],[204,4,160,0],[204,5,160,1],[205,4,160,1],[205,11,160,1,"_unloadFontInNamespaceAsync"],[205,38,160,1],[205,39,160,1,"apply"],[205,44,160,1],[205,51,160,1,"arguments"],[205,60,160,1],[206,2,160,1],[207,0,160,1],[207,3]],"functionMap":{"names":["<global>","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCa;CDK;OEO;CFE;OGQ;CHE;OIgB;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCiB;KDQ;CPE;OSM;CTS;OUW;oCLU,yDK;CVI;AWC;CXe"},"hasCjsExports":false},"type":"js/module"}]}