{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = memoizeOne;\n  var safeIsNaN = Number.isNaN || function ponyfill(value) {\n    return typeof value === 'number' && value !== value;\n  };\n  function isEqual(first, second) {\n    if (first === second) {\n      return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n      return true;\n    }\n    return false;\n  }\n  function areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n      return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n      if (!isEqual(newInputs[i], lastInputs[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) {\n      isEqual = areInputsEqual;\n    }\n    var cache = null;\n    function memoized() {\n      var newArgs = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        newArgs[_i] = arguments[_i];\n      }\n      if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n        return cache.lastResult;\n      }\n      var lastResult = resultFn.apply(this, newArgs);\n      cache = {\n        lastResult: lastResult,\n        lastArgs: newArgs,\n        lastThis: this\n      };\n      return lastResult;\n    }\n    memoized.clear = function clear() {\n      cache = null;\n    };\n    return memoized;\n  }\n});","lineCount":55,"map":[[6,2,1,0],[6,6,1,4,"safeIsNaN"],[6,15,1,13],[6,18,1,16,"Number"],[6,24,1,22],[6,25,1,23,"isNaN"],[6,30,1,28],[6,34,2,4],[6,43,2,13,"ponyfill"],[6,51,2,21,"ponyfill"],[6,52,2,22,"value"],[6,57,2,27],[6,59,2,29],[7,4,3,8],[7,11,3,15],[7,18,3,22,"value"],[7,23,3,27],[7,28,3,32],[7,36,3,40],[7,40,3,44,"value"],[7,45,3,49],[7,50,3,54,"value"],[7,55,3,59],[8,2,4,4],[8,3,4,5],[9,2,5,0],[9,11,5,9,"isEqual"],[9,18,5,16,"isEqual"],[9,19,5,17,"first"],[9,24,5,22],[9,26,5,24,"second"],[9,32,5,30],[9,34,5,32],[10,4,6,4],[10,8,6,8,"first"],[10,13,6,13],[10,18,6,18,"second"],[10,24,6,24],[10,26,6,26],[11,6,7,8],[11,13,7,15],[11,17,7,19],[12,4,8,4],[13,4,9,4],[13,8,9,8,"safeIsNaN"],[13,17,9,17],[13,18,9,18,"first"],[13,23,9,23],[13,24,9,24],[13,28,9,28,"safeIsNaN"],[13,37,9,37],[13,38,9,38,"second"],[13,44,9,44],[13,45,9,45],[13,47,9,47],[14,6,10,8],[14,13,10,15],[14,17,10,19],[15,4,11,4],[16,4,12,4],[16,11,12,11],[16,16,12,16],[17,2,13,0],[18,2,14,0],[18,11,14,9,"areInputsEqual"],[18,25,14,23,"areInputsEqual"],[18,26,14,24,"newInputs"],[18,35,14,33],[18,37,14,35,"lastInputs"],[18,47,14,45],[18,49,14,47],[19,4,15,4],[19,8,15,8,"newInputs"],[19,17,15,17],[19,18,15,18,"length"],[19,24,15,24],[19,29,15,29,"lastInputs"],[19,39,15,39],[19,40,15,40,"length"],[19,46,15,46],[19,48,15,48],[20,6,16,8],[20,13,16,15],[20,18,16,20],[21,4,17,4],[22,4,18,4],[22,9,18,9],[22,13,18,13,"i"],[22,14,18,14],[22,17,18,17],[22,18,18,18],[22,20,18,20,"i"],[22,21,18,21],[22,24,18,24,"newInputs"],[22,33,18,33],[22,34,18,34,"length"],[22,40,18,40],[22,42,18,42,"i"],[22,43,18,43],[22,45,18,45],[22,47,18,47],[23,6,19,8],[23,10,19,12],[23,11,19,13,"isEqual"],[23,18,19,20],[23,19,19,21,"newInputs"],[23,28,19,30],[23,29,19,31,"i"],[23,30,19,32],[23,31,19,33],[23,33,19,35,"lastInputs"],[23,43,19,45],[23,44,19,46,"i"],[23,45,19,47],[23,46,19,48],[23,47,19,49],[23,49,19,51],[24,8,20,12],[24,15,20,19],[24,20,20,24],[25,6,21,8],[26,4,22,4],[27,4,23,4],[27,11,23,11],[27,15,23,15],[28,2,24,0],[29,2,26,0],[29,11,26,9,"memoizeOne"],[29,21,26,19,"memoizeOne"],[29,22,26,20,"resultFn"],[29,30,26,28],[29,32,26,30,"isEqual"],[29,39,26,37],[29,41,26,39],[30,4,27,4],[30,8,27,8,"isEqual"],[30,15,27,15],[30,20,27,20],[30,25,27,25],[30,26,27,26],[30,28,27,28],[31,6,27,30,"isEqual"],[31,13,27,37],[31,16,27,40,"areInputsEqual"],[31,30,27,54],[32,4,27,56],[33,4,28,4],[33,8,28,8,"cache"],[33,13,28,13],[33,16,28,16],[33,20,28,20],[34,4,29,4],[34,13,29,13,"memoized"],[34,21,29,21,"memoized"],[34,22,29,21],[34,24,29,24],[35,6,30,8],[35,10,30,12,"newArgs"],[35,17,30,19],[35,20,30,22],[35,22,30,24],[36,6,31,8],[36,11,31,13],[36,15,31,17,"_i"],[36,17,31,19],[36,20,31,22],[36,21,31,23],[36,23,31,25,"_i"],[36,25,31,27],[36,28,31,30,"arguments"],[36,37,31,39],[36,38,31,40,"length"],[36,44,31,46],[36,46,31,48,"_i"],[36,48,31,50],[36,50,31,52],[36,52,31,54],[37,8,32,12,"newArgs"],[37,15,32,19],[37,16,32,20,"_i"],[37,18,32,22],[37,19,32,23],[37,22,32,26,"arguments"],[37,31,32,35],[37,32,32,36,"_i"],[37,34,32,38],[37,35,32,39],[38,6,33,8],[39,6,34,8],[39,10,34,12,"cache"],[39,15,34,17],[39,19,34,21,"cache"],[39,24,34,26],[39,25,34,27,"lastThis"],[39,33,34,35],[39,38,34,40],[39,42,34,44],[39,46,34,48,"isEqual"],[39,53,34,55],[39,54,34,56,"newArgs"],[39,61,34,63],[39,63,34,65,"cache"],[39,68,34,70],[39,69,34,71,"lastArgs"],[39,77,34,79],[39,78,34,80],[39,80,34,82],[40,8,35,12],[40,15,35,19,"cache"],[40,20,35,24],[40,21,35,25,"lastResult"],[40,31,35,35],[41,6,36,8],[42,6,37,8],[42,10,37,12,"lastResult"],[42,20,37,22],[42,23,37,25,"resultFn"],[42,31,37,33],[42,32,37,34,"apply"],[42,37,37,39],[42,38,37,40],[42,42,37,44],[42,44,37,46,"newArgs"],[42,51,37,53],[42,52,37,54],[43,6,38,8,"cache"],[43,11,38,13],[43,14,38,16],[44,8,39,12,"lastResult"],[44,18,39,22],[44,20,39,24,"lastResult"],[44,30,39,34],[45,8,40,12,"lastArgs"],[45,16,40,20],[45,18,40,22,"newArgs"],[45,25,40,29],[46,8,41,12,"lastThis"],[46,16,41,20],[46,18,41,22],[47,6,42,8],[47,7,42,9],[48,6,43,8],[48,13,43,15,"lastResult"],[48,23,43,25],[49,4,44,4],[50,4,45,4,"memoized"],[50,12,45,12],[50,13,45,13,"clear"],[50,18,45,18],[50,21,45,21],[50,30,45,30,"clear"],[50,35,45,35,"clear"],[50,36,45,35],[50,38,45,38],[51,6,46,8,"cache"],[51,11,46,13],[51,14,46,16],[51,18,46,20],[52,4,47,4],[52,5,47,5],[53,4,48,4],[53,11,48,11,"memoized"],[53,19,48,19],[54,2,49,0],[55,0,49,1],[55,3]],"functionMap":{"names":["<global>","ponyfill","isEqual","areInputsEqual","memoizeOne","memoized","clear"],"mappings":"AAA;ICC;KDE;AEC;CFQ;AGC;CHU;AIE;ICG;KDe;qBEC;KFE;CJE"}},"type":"js/module"}]}