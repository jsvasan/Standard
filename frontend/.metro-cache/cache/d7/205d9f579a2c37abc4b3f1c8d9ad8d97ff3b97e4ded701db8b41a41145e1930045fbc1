{"dependencies":[{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"]}},{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":168},"end":{"line":5,"column":52,"index":203}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"]}},{"name":"@react-navigation/native-stack","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":23,"index":228},"end":{"line":6,"column":64,"index":269}}],"key":"Tw1dyZPdNt5nhNu5CoB7YZxWQjI=","exportNames":["*"]}},{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":21,"index":292},"end":{"line":7,"column":49,"index":320}}],"key":"JdWyQHWvvi7kws4n0MhZWUpiB2c=","exportNames":["*"]}},{"name":"./withLayoutContext","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":28,"index":350},"end":{"line":8,"column":58,"index":380}}],"key":"uI8DQ+0pBl5vWiQx60egJpSWI0Q=","exportNames":["*"]}},{"name":"../useScreens","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":21,"index":403},"end":{"line":9,"column":45,"index":427}}],"key":"8gimF/GgYNRJ+ojtiVDaShLJVrk=","exportNames":["*"]}},{"name":"../views/Protected","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":20,"index":449},"end":{"line":10,"column":49,"index":478}}],"key":"k1+uDYZ/MvJqE4WVPvI1cbQswMs=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n  'use client';\n\n  var _reactJsxDevRuntime = require(_dependencyMap[0], \"react/jsx-dev-runtime\");\n  var _jsxFileName = \"/app/frontend/node_modules/expo-router/build/layouts/StackClient.js\";\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.StackRouter = exports.stackRouterOverride = void 0;\n  var native_1 = require(_dependencyMap[1], \"@react-navigation/native\");\n  var native_stack_1 = require(_dependencyMap[2], \"@react-navigation/native-stack\");\n  var non_secure_1 = require(_dependencyMap[3], \"nanoid/non-secure\");\n  var withLayoutContext_1 = require(_dependencyMap[4], \"./withLayoutContext\");\n  var useScreens_1 = require(_dependencyMap[5], \"../useScreens\");\n  var Protected_1 = require(_dependencyMap[6], \"../views/Protected\");\n  var NativeStackNavigator = (0, native_stack_1.createNativeStackNavigator)().Navigator;\n  var RNStack = (0, withLayoutContext_1.withLayoutContext)(NativeStackNavigator);\n  function isStackAction(action) {\n    return action.type === 'PUSH' || action.type === 'NAVIGATE' || action.type === 'POP' || action.type === 'POP_TO_TOP' || action.type === 'REPLACE';\n  }\n  /**\n   * React Navigation matches a screen by its name or a 'getID' function that uniquely identifies a screen.\n   * When a screen has been uniquely identified, the Stack can only have one instance of that screen.\n   *\n   * Expo Router allows for a screen to be matched by name and path params, a 'getID' function or a singular id.\n   *\n   * Instead of reimplementing the entire StackRouter, we can override the getStateForAction method to handle the singular screen logic.\n   *\n   */\n  var stackRouterOverride = original => {\n    return {\n      getStateForAction: (state, action, options) => {\n        if (action.target && action.target !== state.key) {\n          return null;\n        }\n        if (!isStackAction(action)) {\n          return original.getStateForAction(state, action, options);\n        }\n        // The dynamic getId added to an action, `router.push('screen', { singular: true })`\n        var actionSingularOptions = action.payload && 'singular' in action.payload ? action.payload.singular : undefined;\n        // Handle if 'getID' or 'singular' is set.\n        function getIdFunction() {\n          // Actions can be fired by the user, so we do need to validate their structure.\n          if (!('payload' in action) || !action.payload || !('name' in action.payload) || typeof action.payload.name !== 'string') {\n            return;\n          }\n          var actionName = action.payload.name;\n          return (\n            // The dynamic singular added to an action, `router.push('screen', { singular: () => 'id' })`\n            getActionSingularIdFn(actionSingularOptions, actionName) ||\n            // The static getId added as a prop to `<Screen singular />` or `<Screen getId={} />`\n            options.routeGetIdList[actionName]\n          );\n        }\n        var routeParamList = options.routeParamList;\n        switch (action.type) {\n          case 'PUSH':\n          case 'NAVIGATE':\n            {\n              if (!state.routeNames.includes(action.payload.name)) {\n                return null;\n              }\n              // START FORK\n              var getId = getIdFunction();\n              // const getId = options.routeGetIdList[action.payload.name];\n              // END FORK\n              var id = getId?.({\n                params: action.payload.params\n              });\n              var route;\n              if (id !== undefined) {\n                route = state.routes.findLast(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              } else if (action.type === 'NAVIGATE') {\n                var currentRoute = state.routes[state.index];\n                // If the route matches the current one, then navigate to it\n                if (action.payload.name === currentRoute.name) {\n                  route = currentRoute;\n                } else if (action.payload.pop) {\n                  route = state.routes.findLast(route => route.name === action.payload.name);\n                }\n              }\n              if (!route) {\n                route = state.preloadedRoutes.find(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              }\n              var params;\n              if (action.type === 'NAVIGATE' && action.payload.merge && route) {\n                params = action.payload.params !== undefined || routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...route.params,\n                  ...action.payload.params\n                } : route.params;\n              } else {\n                params = routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params;\n              }\n              var routes;\n              if (route) {\n                if (action.type === 'NAVIGATE' && action.payload.pop) {\n                  routes = [];\n                  // Get all routes until the matching one\n                  for (var r of state.routes) {\n                    if (r.key === route.key) {\n                      routes.push({\n                        ...route,\n                        path: action.payload.path !== undefined ? action.payload.path : route.path,\n                        params\n                      });\n                      break;\n                    }\n                    routes.push(r);\n                  }\n                } else {\n                  // START FORK\n                  // If there is an id, then filter out the existing route with the same id.\n                  // THIS ACTION IS DANGEROUS. This can cause React Native Screens to freeze\n                  if (id !== undefined) {\n                    routes = state.routes.filter(r => r.key !== route.key);\n                  } else if (action.type === 'NAVIGATE' && state.routes.length > 0) {\n                    // The navigation action should only replace the last route if it has the same name and path params.\n                    var lastRoute = state.routes[state.routes.length - 1];\n                    if ((0, useScreens_1.getSingularId)(lastRoute.name, {\n                      params: lastRoute.params\n                    }) === (0, useScreens_1.getSingularId)(route.name, {\n                      params\n                    })) {\n                      routes = state.routes.slice(0, -1);\n                    } else {\n                      routes = [...state.routes];\n                    }\n                  } else {\n                    routes = [...state.routes];\n                  }\n                  // If the routes length is the same as the state routes length, then we are navigating to a new route.\n                  // Otherwise we are replacing an existing route.\n                  var key = routes.length === state.routes.length ? `${action.payload.name}-${(0, non_secure_1.nanoid)()}` : route.key;\n                  routes.push({\n                    ...route,\n                    key,\n                    path: action.type === 'NAVIGATE' && action.payload.path !== undefined ? action.payload.path : route.path,\n                    params\n                  });\n                  // routes = state.routes.filter((r) => r.key !== route.key);\n                  // routes.push({\n                  //   ...route,\n                  //   path:\n                  //     action.type === 'NAVIGATE' && action.payload.path !== undefined\n                  //       ? action.payload.path\n                  //       : route.path,\n                  //   params,\n                  // });\n                  // END FORK\n                }\n              } else {\n                routes = [...state.routes, {\n                  key: `${action.payload.name}-${(0, non_secure_1.nanoid)()}`,\n                  name: action.payload.name,\n                  path: action.type === 'NAVIGATE' ? action.payload.path : undefined,\n                  params\n                }];\n              }\n              // START FORK\n              // return filterSingular(\n              var result = {\n                ...state,\n                index: routes.length - 1,\n                preloadedRoutes: state.preloadedRoutes.filter(route => routes[routes.length - 1].key !== route.key),\n                routes\n              };\n              if (actionSingularOptions) {\n                return filterSingular(result, getId);\n              }\n              return result;\n              // return {\n              //   ...state,\n              //   index: routes.length - 1,\n              //   preloadedRoutes: state.preloadedRoutes.filter(\n              //     (route) => routes[routes.length - 1].key !== route.key\n              //   ),\n              //   routes,\n              // };\n              // END FORK\n            }\n          default:\n            {\n              return original.getStateForAction(state, action, options);\n            }\n        }\n      }\n    };\n  };\n  exports.stackRouterOverride = stackRouterOverride;\n  function getActionSingularIdFn(actionGetId, name) {\n    if (typeof actionGetId === 'function') {\n      return options => actionGetId(name, options.params ?? {});\n    } else if (actionGetId === true) {\n      return options => (0, useScreens_1.getSingularId)(name, options);\n    }\n    return undefined;\n  }\n  /**\n   * If there is a dynamic singular on an action, then we need to filter the state to only have singular screens.\n   * As multiples may have been added before we did the singular navigation.\n   */\n  function filterSingular(state, getId) {\n    if (!state) {\n      return state;\n    }\n    if (!state.routes) {\n      return state;\n    }\n    var currentIndex = state.index || state.routes.length - 1;\n    var current = state.routes[currentIndex];\n    var name = current.name;\n    var id = getId?.({\n      params: current.params\n    });\n    if (!id) {\n      return state;\n    }\n    // TypeScript needs a type assertion here for the filter to work.\n    var routes = state.routes;\n    routes = routes.filter((route, index) => {\n      // If the route is the current route, keep it.\n      if (index === currentIndex) {\n        return true;\n      }\n      // Remove all other routes with the same name and id.\n      return name !== route.name || id !== getId?.({\n        params: route.params\n      });\n    });\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes\n    };\n  }\n  var Stack = Object.assign(props => {\n    return /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(RNStack, {\n      ...props,\n      UNSTABLE_router: exports.stackRouterOverride\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 12\n    }, this);\n  }, {\n    Screen: RNStack.Screen,\n    Protected: Protected_1.Protected\n  });\n  exports.default = Stack;\n  var StackRouter = options => {\n    var router = (0, native_1.StackRouter)(options);\n    return {\n      ...router,\n      ...(0, exports.stackRouterOverride)(router)\n    };\n  };\n  exports.StackRouter = StackRouter;\n});","lineCount":267,"map":[[2,2,1,0],[2,14,1,12],[3,2,2,0],[3,14,2,12],[5,2,2,13],[5,6,2,13,"_reactJsxDevRuntime"],[5,25,2,13],[5,28,2,13,"require"],[5,35,2,13],[5,36,2,13,"_dependencyMap"],[5,50,2,13],[6,2,2,13],[6,6,2,13,"_jsxFileName"],[6,18,2,13],[7,2,3,0,"Object"],[7,8,3,6],[7,9,3,7,"defineProperty"],[7,23,3,21],[7,24,3,22,"exports"],[7,31,3,29],[7,33,3,31],[7,45,3,43],[7,47,3,45],[8,4,3,47,"value"],[8,9,3,52],[8,11,3,54],[9,2,3,59],[9,3,3,60],[9,4,3,61],[10,2,4,0,"exports"],[10,9,4,7],[10,10,4,8,"StackRouter"],[10,21,4,19],[10,24,4,22,"exports"],[10,31,4,29],[10,32,4,30,"stackRouterOverride"],[10,51,4,49],[10,54,4,52],[10,59,4,57],[10,60,4,58],[11,2,5,0],[11,6,5,6,"native_1"],[11,14,5,14],[11,17,5,17,"require"],[11,24,5,24],[11,25,5,24,"_dependencyMap"],[11,39,5,24],[11,70,5,51],[11,71,5,52],[12,2,6,0],[12,6,6,6,"native_stack_1"],[12,20,6,20],[12,23,6,23,"require"],[12,30,6,30],[12,31,6,30,"_dependencyMap"],[12,45,6,30],[12,82,6,63],[12,83,6,64],[13,2,7,0],[13,6,7,6,"non_secure_1"],[13,18,7,18],[13,21,7,21,"require"],[13,28,7,28],[13,29,7,28,"_dependencyMap"],[13,43,7,28],[13,67,7,48],[13,68,7,49],[14,2,8,0],[14,6,8,6,"withLayoutContext_1"],[14,25,8,25],[14,28,8,28,"require"],[14,35,8,35],[14,36,8,35,"_dependencyMap"],[14,50,8,35],[14,76,8,57],[14,77,8,58],[15,2,9,0],[15,6,9,6,"useScreens_1"],[15,18,9,18],[15,21,9,21,"require"],[15,28,9,28],[15,29,9,28,"_dependencyMap"],[15,43,9,28],[15,63,9,44],[15,64,9,45],[16,2,10,0],[16,6,10,6,"Protected_1"],[16,17,10,17],[16,20,10,20,"require"],[16,27,10,27],[16,28,10,27,"_dependencyMap"],[16,42,10,27],[16,67,10,48],[16,68,10,49],[17,2,11,0],[17,6,11,6,"NativeStackNavigator"],[17,26,11,26],[17,29,11,29],[17,30,11,30],[17,31,11,31],[17,33,11,33,"native_stack_1"],[17,47,11,47],[17,48,11,48,"createNativeStackNavigator"],[17,74,11,74],[17,76,11,76],[17,77,11,77],[17,78,11,78,"Navigator"],[17,87,11,87],[18,2,12,0],[18,6,12,6,"RNStack"],[18,13,12,13],[18,16,12,16],[18,17,12,17],[18,18,12,18],[18,20,12,20,"withLayoutContext_1"],[18,39,12,39],[18,40,12,40,"withLayoutContext"],[18,57,12,57],[18,59,12,59,"NativeStackNavigator"],[18,79,12,79],[18,80,12,80],[19,2,13,0],[19,11,13,9,"isStackAction"],[19,24,13,22,"isStackAction"],[19,25,13,23,"action"],[19,31,13,29],[19,33,13,31],[20,4,14,4],[20,11,14,12,"action"],[20,17,14,18],[20,18,14,19,"type"],[20,22,14,23],[20,27,14,28],[20,33,14,34],[20,37,15,8,"action"],[20,43,15,14],[20,44,15,15,"type"],[20,48,15,19],[20,53,15,24],[20,63,15,34],[20,67,16,8,"action"],[20,73,16,14],[20,74,16,15,"type"],[20,78,16,19],[20,83,16,24],[20,88,16,29],[20,92,17,8,"action"],[20,98,17,14],[20,99,17,15,"type"],[20,103,17,19],[20,108,17,24],[20,120,17,36],[20,124,18,8,"action"],[20,130,18,14],[20,131,18,15,"type"],[20,135,18,19],[20,140,18,24],[20,149,18,33],[21,2,19,0],[22,2,20,0],[23,0,21,0],[24,0,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,0,28,0],[31,2,29,0],[31,6,29,6,"stackRouterOverride"],[31,25,29,25],[31,28,29,29,"original"],[31,36,29,37],[31,40,29,42],[32,4,30,4],[32,11,30,11],[33,6,31,8,"getStateForAction"],[33,23,31,25],[33,25,31,27,"getStateForAction"],[33,26,31,28,"state"],[33,31,31,33],[33,33,31,35,"action"],[33,39,31,41],[33,41,31,43,"options"],[33,48,31,50],[33,53,31,55],[34,8,32,12],[34,12,32,16,"action"],[34,18,32,22],[34,19,32,23,"target"],[34,25,32,29],[34,29,32,33,"action"],[34,35,32,39],[34,36,32,40,"target"],[34,42,32,46],[34,47,32,51,"state"],[34,52,32,56],[34,53,32,57,"key"],[34,56,32,60],[34,58,32,62],[35,10,33,16],[35,17,33,23],[35,21,33,27],[36,8,34,12],[37,8,35,12],[37,12,35,16],[37,13,35,17,"isStackAction"],[37,26,35,30],[37,27,35,31,"action"],[37,33,35,37],[37,34,35,38],[37,36,35,40],[38,10,36,16],[38,17,36,23,"original"],[38,25,36,31],[38,26,36,32,"getStateForAction"],[38,43,36,49],[38,44,36,50,"state"],[38,49,36,55],[38,51,36,57,"action"],[38,57,36,63],[38,59,36,65,"options"],[38,66,36,72],[38,67,36,73],[39,8,37,12],[40,8,38,12],[41,8,39,12],[41,12,39,18,"actionSingularOptions"],[41,33,39,39],[41,36,39,42,"action"],[41,42,39,48],[41,43,39,49,"payload"],[41,50,39,56],[41,54,39,60],[41,64,39,70],[41,68,39,74,"action"],[41,74,39,80],[41,75,39,81,"payload"],[41,82,39,88],[41,85,40,18,"action"],[41,91,40,24],[41,92,40,25,"payload"],[41,99,40,32],[41,100,40,33,"singular"],[41,108,40,41],[41,111,41,18,"undefined"],[41,120,41,27],[42,8,42,12],[43,8,43,12],[43,17,43,21,"getIdFunction"],[43,30,43,34,"getIdFunction"],[43,31,43,34],[43,33,43,37],[44,10,44,16],[45,10,45,16],[45,14,45,20],[45,16,45,22],[45,25,45,31],[45,29,45,35,"action"],[45,35,45,41],[45,36,45,42],[45,40,46,20],[45,41,46,21,"action"],[45,47,46,27],[45,48,46,28,"payload"],[45,55,46,35],[45,59,47,20],[45,61,47,22],[45,67,47,28],[45,71,47,32,"action"],[45,77,47,38],[45,78,47,39,"payload"],[45,85,47,46],[45,86,47,47],[45,90,48,20],[45,97,48,27,"action"],[45,103,48,33],[45,104,48,34,"payload"],[45,111,48,41],[45,112,48,42,"name"],[45,116,48,46],[45,121,48,51],[45,129,48,59],[45,131,48,61],[46,12,49,20],[47,10,50,16],[48,10,51,16],[48,14,51,22,"actionName"],[48,24,51,32],[48,27,51,35,"action"],[48,33,51,41],[48,34,51,42,"payload"],[48,41,51,49],[48,42,51,50,"name"],[48,46,51,54],[49,10,52,16],[50,12,53,16],[51,12,54,16,"getActionSingularIdFn"],[51,33,54,37],[51,34,54,38,"actionSingularOptions"],[51,55,54,59],[51,57,54,61,"actionName"],[51,67,54,71],[51,68,54,72],[52,12,55,20],[53,12,56,20,"options"],[53,19,56,27],[53,20,56,28,"routeGetIdList"],[53,34,56,42],[53,35,56,43,"actionName"],[53,45,56,53],[54,10,56,54],[55,8,57,12],[56,8,58,12],[56,12,58,20,"routeParamList"],[56,26,58,34],[56,29,58,39,"options"],[56,36,58,46],[56,37,58,20,"routeParamList"],[56,51,58,34],[57,8,59,12],[57,16,59,20,"action"],[57,22,59,26],[57,23,59,27,"type"],[57,27,59,31],[58,10,60,16],[58,15,60,21],[58,21,60,27],[59,10,61,16],[59,15,61,21],[59,25,61,31],[60,12,61,33],[61,14,62,20],[61,18,62,24],[61,19,62,25,"state"],[61,24,62,30],[61,25,62,31,"routeNames"],[61,35,62,41],[61,36,62,42,"includes"],[61,44,62,50],[61,45,62,51,"action"],[61,51,62,57],[61,52,62,58,"payload"],[61,59,62,65],[61,60,62,66,"name"],[61,64,62,70],[61,65,62,71],[61,67,62,73],[62,16,63,24],[62,23,63,31],[62,27,63,35],[63,14,64,20],[64,14,65,20],[65,14,66,20],[65,18,66,26,"getId"],[65,23,66,31],[65,26,66,34,"getIdFunction"],[65,39,66,47],[65,40,66,48],[65,41,66,49],[66,14,67,20],[67,14,68,20],[68,14,69,20],[68,18,69,26,"id"],[68,20,69,28],[68,23,69,31,"getId"],[68,28,69,36],[68,31,69,39],[69,16,69,41,"params"],[69,22,69,47],[69,24,69,49,"action"],[69,30,69,55],[69,31,69,56,"payload"],[69,38,69,63],[69,39,69,64,"params"],[70,14,69,71],[70,15,69,72],[70,16,69,73],[71,14,70,20],[71,18,70,24,"route"],[71,23,70,29],[72,14,71,20],[72,18,71,24,"id"],[72,20,71,26],[72,25,71,31,"undefined"],[72,34,71,40],[72,36,71,42],[73,16,72,24,"route"],[73,21,72,29],[73,24,72,32,"state"],[73,29,72,37],[73,30,72,38,"routes"],[73,36,72,44],[73,37,72,45,"findLast"],[73,45,72,53],[73,46,72,55,"route"],[73,51,72,60],[73,55,72,65,"route"],[73,60,72,70],[73,61,72,71,"name"],[73,65,72,75],[73,70,72,80,"action"],[73,76,72,86],[73,77,72,87,"payload"],[73,84,72,94],[73,85,72,95,"name"],[73,89,72,99],[73,93,72,103,"id"],[73,95,72,105],[73,100,72,110,"getId"],[73,105,72,115],[73,108,72,118],[74,18,72,120,"params"],[74,24,72,126],[74,26,72,128,"route"],[74,31,72,133],[74,32,72,134,"params"],[75,16,72,141],[75,17,72,142],[75,18,72,143],[75,19,72,144],[76,14,73,20],[76,15,73,21],[76,21,74,25],[76,25,74,29,"action"],[76,31,74,35],[76,32,74,36,"type"],[76,36,74,40],[76,41,74,45],[76,51,74,55],[76,53,74,57],[77,16,75,24],[77,20,75,30,"currentRoute"],[77,32,75,42],[77,35,75,45,"state"],[77,40,75,50],[77,41,75,51,"routes"],[77,47,75,57],[77,48,75,58,"state"],[77,53,75,63],[77,54,75,64,"index"],[77,59,75,69],[77,60,75,70],[78,16,76,24],[79,16,77,24],[79,20,77,28,"action"],[79,26,77,34],[79,27,77,35,"payload"],[79,34,77,42],[79,35,77,43,"name"],[79,39,77,47],[79,44,77,52,"currentRoute"],[79,56,77,64],[79,57,77,65,"name"],[79,61,77,69],[79,63,77,71],[80,18,78,28,"route"],[80,23,78,33],[80,26,78,36,"currentRoute"],[80,38,78,48],[81,16,79,24],[81,17,79,25],[81,23,80,29],[81,27,80,33,"action"],[81,33,80,39],[81,34,80,40,"payload"],[81,41,80,47],[81,42,80,48,"pop"],[81,45,80,51],[81,47,80,53],[82,18,81,28,"route"],[82,23,81,33],[82,26,81,36,"state"],[82,31,81,41],[82,32,81,42,"routes"],[82,38,81,48],[82,39,81,49,"findLast"],[82,47,81,57],[82,48,81,59,"route"],[82,53,81,64],[82,57,81,69,"route"],[82,62,81,74],[82,63,81,75,"name"],[82,67,81,79],[82,72,81,84,"action"],[82,78,81,90],[82,79,81,91,"payload"],[82,86,81,98],[82,87,81,99,"name"],[82,91,81,103],[82,92,81,104],[83,16,82,24],[84,14,83,20],[85,14,84,20],[85,18,84,24],[85,19,84,25,"route"],[85,24,84,30],[85,26,84,32],[86,16,85,24,"route"],[86,21,85,29],[86,24,85,32,"state"],[86,29,85,37],[86,30,85,38,"preloadedRoutes"],[86,45,85,53],[86,46,85,54,"find"],[86,50,85,58],[86,51,85,60,"route"],[86,56,85,65],[86,60,85,70,"route"],[86,65,85,75],[86,66,85,76,"name"],[86,70,85,80],[86,75,85,85,"action"],[86,81,85,91],[86,82,85,92,"payload"],[86,89,85,99],[86,90,85,100,"name"],[86,94,85,104],[86,98,85,108,"id"],[86,100,85,110],[86,105,85,115,"getId"],[86,110,85,120],[86,113,85,123],[87,18,85,125,"params"],[87,24,85,131],[87,26,85,133,"route"],[87,31,85,138],[87,32,85,139,"params"],[88,16,85,146],[88,17,85,147],[88,18,85,148],[88,19,85,149],[89,14,86,20],[90,14,87,20],[90,18,87,24,"params"],[90,24,87,30],[91,14,88,20],[91,18,88,24,"action"],[91,24,88,30],[91,25,88,31,"type"],[91,29,88,35],[91,34,88,40],[91,44,88,50],[91,48,88,54,"action"],[91,54,88,60],[91,55,88,61,"payload"],[91,62,88,68],[91,63,88,69,"merge"],[91,68,88,74],[91,72,88,78,"route"],[91,77,88,83],[91,79,88,85],[92,16,89,24,"params"],[92,22,89,30],[92,25,90,28,"action"],[92,31,90,34],[92,32,90,35,"payload"],[92,39,90,42],[92,40,90,43,"params"],[92,46,90,49],[92,51,90,54,"undefined"],[92,60,90,63],[92,64,91,32,"routeParamList"],[92,78,91,46],[92,79,91,47,"action"],[92,85,91,53],[92,86,91,54,"payload"],[92,93,91,61],[92,94,91,62,"name"],[92,98,91,66],[92,99,91,67],[92,104,91,72,"undefined"],[92,113,91,81],[92,116,92,34],[93,18,93,36],[93,21,93,39,"routeParamList"],[93,35,93,53],[93,36,93,54,"action"],[93,42,93,60],[93,43,93,61,"payload"],[93,50,93,68],[93,51,93,69,"name"],[93,55,93,73],[93,56,93,74],[94,18,94,36],[94,21,94,39,"route"],[94,26,94,44],[94,27,94,45,"params"],[94,33,94,51],[95,18,95,36],[95,21,95,39,"action"],[95,27,95,45],[95,28,95,46,"payload"],[95,35,95,53],[95,36,95,54,"params"],[96,16,96,32],[96,17,96,33],[96,20,97,34,"route"],[96,25,97,39],[96,26,97,40,"params"],[96,32,97,46],[97,14,98,20],[97,15,98,21],[97,21,99,25],[98,16,100,24,"params"],[98,22,100,30],[98,25,101,28,"routeParamList"],[98,39,101,42],[98,40,101,43,"action"],[98,46,101,49],[98,47,101,50,"payload"],[98,54,101,57],[98,55,101,58,"name"],[98,59,101,62],[98,60,101,63],[98,65,101,68,"undefined"],[98,74,101,77],[98,77,102,34],[99,18,103,36],[99,21,103,39,"routeParamList"],[99,35,103,53],[99,36,103,54,"action"],[99,42,103,60],[99,43,103,61,"payload"],[99,50,103,68],[99,51,103,69,"name"],[99,55,103,73],[99,56,103,74],[100,18,104,36],[100,21,104,39,"action"],[100,27,104,45],[100,28,104,46,"payload"],[100,35,104,53],[100,36,104,54,"params"],[101,16,105,32],[101,17,105,33],[101,20,106,34,"action"],[101,26,106,40],[101,27,106,41,"payload"],[101,34,106,48],[101,35,106,49,"params"],[101,41,106,55],[102,14,107,20],[103,14,108,20],[103,18,108,24,"routes"],[103,24,108,30],[104,14,109,20],[104,18,109,24,"route"],[104,23,109,29],[104,25,109,31],[105,16,110,24],[105,20,110,28,"action"],[105,26,110,34],[105,27,110,35,"type"],[105,31,110,39],[105,36,110,44],[105,46,110,54],[105,50,110,58,"action"],[105,56,110,64],[105,57,110,65,"payload"],[105,64,110,72],[105,65,110,73,"pop"],[105,68,110,76],[105,70,110,78],[106,18,111,28,"routes"],[106,24,111,34],[106,27,111,37],[106,29,111,39],[107,18,112,28],[108,18,113,28],[108,23,113,33],[108,27,113,39,"r"],[108,28,113,40],[108,32,113,44,"state"],[108,37,113,49],[108,38,113,50,"routes"],[108,44,113,56],[108,46,113,58],[109,20,114,32],[109,24,114,36,"r"],[109,25,114,37],[109,26,114,38,"key"],[109,29,114,41],[109,34,114,46,"route"],[109,39,114,51],[109,40,114,52,"key"],[109,43,114,55],[109,45,114,57],[110,22,115,36,"routes"],[110,28,115,42],[110,29,115,43,"push"],[110,33,115,47],[110,34,115,48],[111,24,116,40],[111,27,116,43,"route"],[111,32,116,48],[112,24,117,40,"path"],[112,28,117,44],[112,30,117,46,"action"],[112,36,117,52],[112,37,117,53,"payload"],[112,44,117,60],[112,45,117,61,"path"],[112,49,117,65],[112,54,117,70,"undefined"],[112,63,117,79],[112,66,117,82,"action"],[112,72,117,88],[112,73,117,89,"payload"],[112,80,117,96],[112,81,117,97,"path"],[112,85,117,101],[112,88,117,104,"route"],[112,93,117,109],[112,94,117,110,"path"],[112,98,117,114],[113,24,118,40,"params"],[114,22,119,36],[114,23,119,37],[114,24,119,38],[115,22,120,36],[116,20,121,32],[117,20,122,32,"routes"],[117,26,122,38],[117,27,122,39,"push"],[117,31,122,43],[117,32,122,44,"r"],[117,33,122,45],[117,34,122,46],[118,18,123,28],[119,16,124,24],[119,17,124,25],[119,23,125,29],[120,18,126,28],[121,18,127,28],[122,18,128,28],[123,18,129,28],[123,22,129,32,"id"],[123,24,129,34],[123,29,129,39,"undefined"],[123,38,129,48],[123,40,129,50],[124,20,130,32,"routes"],[124,26,130,38],[124,29,130,41,"state"],[124,34,130,46],[124,35,130,47,"routes"],[124,41,130,53],[124,42,130,54,"filter"],[124,48,130,60],[124,49,130,62,"r"],[124,50,130,63],[124,54,130,68,"r"],[124,55,130,69],[124,56,130,70,"key"],[124,59,130,73],[124,64,130,78,"route"],[124,69,130,83],[124,70,130,84,"key"],[124,73,130,87],[124,74,130,88],[125,18,131,28],[125,19,131,29],[125,25,132,33],[125,29,132,37,"action"],[125,35,132,43],[125,36,132,44,"type"],[125,40,132,48],[125,45,132,53],[125,55,132,63],[125,59,132,67,"state"],[125,64,132,72],[125,65,132,73,"routes"],[125,71,132,79],[125,72,132,80,"length"],[125,78,132,86],[125,81,132,89],[125,82,132,90],[125,84,132,92],[126,20,133,32],[127,20,134,32],[127,24,134,38,"lastRoute"],[127,33,134,47],[127,36,134,50,"state"],[127,41,134,55],[127,42,134,56,"routes"],[127,48,134,62],[127,49,134,63,"state"],[127,54,134,68],[127,55,134,69,"routes"],[127,61,134,75],[127,62,134,76,"length"],[127,68,134,82],[127,71,134,85],[127,72,134,86],[127,73,134,87],[128,20,135,32],[128,24,135,36],[128,25,135,37],[128,26,135,38],[128,28,135,40,"useScreens_1"],[128,40,135,52],[128,41,135,53,"getSingularId"],[128,54,135,66],[128,56,135,68,"lastRoute"],[128,65,135,77],[128,66,135,78,"name"],[128,70,135,82],[128,72,135,84],[129,22,135,86,"params"],[129,28,135,92],[129,30,135,94,"lastRoute"],[129,39,135,103],[129,40,135,104,"params"],[130,20,135,111],[130,21,135,112],[130,22,135,113],[130,27,136,36],[130,28,136,37],[130,29,136,38],[130,31,136,40,"useScreens_1"],[130,43,136,52],[130,44,136,53,"getSingularId"],[130,57,136,66],[130,59,136,68,"route"],[130,64,136,73],[130,65,136,74,"name"],[130,69,136,78],[130,71,136,80],[131,22,136,82,"params"],[132,20,136,89],[132,21,136,90],[132,22,136,91],[132,24,136,93],[133,22,137,36,"routes"],[133,28,137,42],[133,31,137,45,"state"],[133,36,137,50],[133,37,137,51,"routes"],[133,43,137,57],[133,44,137,58,"slice"],[133,49,137,63],[133,50,137,64],[133,51,137,65],[133,53,137,67],[133,54,137,68],[133,55,137,69],[133,56,137,70],[134,20,138,32],[134,21,138,33],[134,27,139,37],[135,22,140,36,"routes"],[135,28,140,42],[135,31,140,45],[135,32,140,46],[135,35,140,49,"state"],[135,40,140,54],[135,41,140,55,"routes"],[135,47,140,61],[135,48,140,62],[136,20,141,32],[137,18,142,28],[137,19,142,29],[137,25,143,33],[138,20,144,32,"routes"],[138,26,144,38],[138,29,144,41],[138,30,144,42],[138,33,144,45,"state"],[138,38,144,50],[138,39,144,51,"routes"],[138,45,144,57],[138,46,144,58],[139,18,145,28],[140,18,146,28],[141,18,147,28],[142,18,148,28],[142,22,148,34,"key"],[142,25,148,37],[142,28,148,40,"routes"],[142,34,148,46],[142,35,148,47,"length"],[142,41,148,53],[142,46,148,58,"state"],[142,51,148,63],[142,52,148,64,"routes"],[142,58,148,70],[142,59,148,71,"length"],[142,65,148,77],[142,68,149,34],[142,71,149,37,"action"],[142,77,149,43],[142,78,149,44,"payload"],[142,85,149,51],[142,86,149,52,"name"],[142,90,149,56],[142,94,149,60],[142,95,149,61],[142,96,149,62],[142,98,149,64,"non_secure_1"],[142,110,149,76],[142,111,149,77,"nanoid"],[142,117,149,83],[142,119,149,85],[142,120,149,86],[142,122,149,88],[142,125,150,34,"route"],[142,130,150,39],[142,131,150,40,"key"],[142,134,150,43],[143,18,151,28,"routes"],[143,24,151,34],[143,25,151,35,"push"],[143,29,151,39],[143,30,151,40],[144,20,152,32],[144,23,152,35,"route"],[144,28,152,40],[145,20,153,32,"key"],[145,23,153,35],[146,20,154,32,"path"],[146,24,154,36],[146,26,154,38,"action"],[146,32,154,44],[146,33,154,45,"type"],[146,37,154,49],[146,42,154,54],[146,52,154,64],[146,56,154,68,"action"],[146,62,154,74],[146,63,154,75,"payload"],[146,70,154,82],[146,71,154,83,"path"],[146,75,154,87],[146,80,154,92,"undefined"],[146,89,154,101],[146,92,155,38,"action"],[146,98,155,44],[146,99,155,45,"payload"],[146,106,155,52],[146,107,155,53,"path"],[146,111,155,57],[146,114,156,38,"route"],[146,119,156,43],[146,120,156,44,"path"],[146,124,156,48],[147,20,157,32,"params"],[148,18,158,28],[148,19,158,29],[148,20,158,30],[149,18,159,28],[150,18,160,28],[151,18,161,28],[152,18,162,28],[153,18,163,28],[154,18,164,28],[155,18,165,28],[156,18,166,28],[157,18,167,28],[158,18,168,28],[159,16,169,24],[160,14,170,20],[160,15,170,21],[160,21,171,25],[161,16,172,24,"routes"],[161,22,172,30],[161,25,172,33],[161,26,173,28],[161,29,173,31,"state"],[161,34,173,36],[161,35,173,37,"routes"],[161,41,173,43],[161,43,174,28],[162,18,175,32,"key"],[162,21,175,35],[162,23,175,37],[162,26,175,40,"action"],[162,32,175,46],[162,33,175,47,"payload"],[162,40,175,54],[162,41,175,55,"name"],[162,45,175,59],[162,49,175,63],[162,50,175,64],[162,51,175,65],[162,53,175,67,"non_secure_1"],[162,65,175,79],[162,66,175,80,"nanoid"],[162,72,175,86],[162,74,175,88],[162,75,175,89],[162,77,175,91],[163,18,176,32,"name"],[163,22,176,36],[163,24,176,38,"action"],[163,30,176,44],[163,31,176,45,"payload"],[163,38,176,52],[163,39,176,53,"name"],[163,43,176,57],[164,18,177,32,"path"],[164,22,177,36],[164,24,177,38,"action"],[164,30,177,44],[164,31,177,45,"type"],[164,35,177,49],[164,40,177,54],[164,50,177,64],[164,53,177,67,"action"],[164,59,177,73],[164,60,177,74,"payload"],[164,67,177,81],[164,68,177,82,"path"],[164,72,177,86],[164,75,177,89,"undefined"],[164,84,177,98],[165,18,178,32,"params"],[166,16,179,28],[166,17,179,29],[166,18,180,25],[167,14,181,20],[168,14,182,20],[169,14,183,20],[170,14,184,20],[170,18,184,26,"result"],[170,24,184,32],[170,27,184,35],[171,16,185,24],[171,19,185,27,"state"],[171,24,185,32],[172,16,186,24,"index"],[172,21,186,29],[172,23,186,31,"routes"],[172,29,186,37],[172,30,186,38,"length"],[172,36,186,44],[172,39,186,47],[172,40,186,48],[173,16,187,24,"preloadedRoutes"],[173,31,187,39],[173,33,187,41,"state"],[173,38,187,46],[173,39,187,47,"preloadedRoutes"],[173,54,187,62],[173,55,187,63,"filter"],[173,61,187,69],[173,62,187,71,"route"],[173,67,187,76],[173,71,187,81,"routes"],[173,77,187,87],[173,78,187,88,"routes"],[173,84,187,94],[173,85,187,95,"length"],[173,91,187,101],[173,94,187,104],[173,95,187,105],[173,96,187,106],[173,97,187,107,"key"],[173,100,187,110],[173,105,187,115,"route"],[173,110,187,120],[173,111,187,121,"key"],[173,114,187,124],[173,115,187,125],[174,16,188,24,"routes"],[175,14,189,20],[175,15,189,21],[176,14,190,20],[176,18,190,24,"actionSingularOptions"],[176,39,190,45],[176,41,190,47],[177,16,191,24],[177,23,191,31,"filterSingular"],[177,37,191,45],[177,38,191,46,"result"],[177,44,191,52],[177,46,191,54,"getId"],[177,51,191,59],[177,52,191,60],[178,14,192,20],[179,14,193,20],[179,21,193,27,"result"],[179,27,193,33],[180,14,194,20],[181,14,195,20],[182,14,196,20],[183,14,197,20],[184,14,198,20],[185,14,199,20],[186,14,200,20],[187,14,201,20],[188,14,202,20],[189,12,203,16],[190,10,204,16],[191,12,204,25],[192,14,205,20],[192,21,205,27,"original"],[192,29,205,35],[192,30,205,36,"getStateForAction"],[192,47,205,53],[192,48,205,54,"state"],[192,53,205,59],[192,55,205,61,"action"],[192,61,205,67],[192,63,205,69,"options"],[192,70,205,76],[192,71,205,77],[193,12,206,16],[194,8,207,12],[195,6,208,8],[196,4,209,4],[196,5,209,5],[197,2,210,0],[197,3,210,1],[198,2,211,0,"exports"],[198,9,211,7],[198,10,211,8,"stackRouterOverride"],[198,29,211,27],[198,32,211,30,"stackRouterOverride"],[198,51,211,49],[199,2,212,0],[199,11,212,9,"getActionSingularIdFn"],[199,32,212,30,"getActionSingularIdFn"],[199,33,212,31,"actionGetId"],[199,44,212,42],[199,46,212,44,"name"],[199,50,212,48],[199,52,212,50],[200,4,213,4],[200,8,213,8],[200,15,213,15,"actionGetId"],[200,26,213,26],[200,31,213,31],[200,41,213,41],[200,43,213,43],[201,6,214,8],[201,13,214,16,"options"],[201,20,214,23],[201,24,214,28,"actionGetId"],[201,35,214,39],[201,36,214,40,"name"],[201,40,214,44],[201,42,214,46,"options"],[201,49,214,53],[201,50,214,54,"params"],[201,56,214,60],[201,60,214,64],[201,61,214,65],[201,62,214,66],[201,63,214,67],[202,4,215,4],[202,5,215,5],[202,11,216,9],[202,15,216,13,"actionGetId"],[202,26,216,24],[202,31,216,29],[202,35,216,33],[202,37,216,35],[203,6,217,8],[203,13,217,16,"options"],[203,20,217,23],[203,24,217,28],[203,25,217,29],[203,26,217,30],[203,28,217,32,"useScreens_1"],[203,40,217,44],[203,41,217,45,"getSingularId"],[203,54,217,58],[203,56,217,60,"name"],[203,60,217,64],[203,62,217,66,"options"],[203,69,217,73],[203,70,217,74],[204,4,218,4],[205,4,219,4],[205,11,219,11,"undefined"],[205,20,219,20],[206,2,220,0],[207,2,221,0],[208,0,222,0],[209,0,223,0],[210,0,224,0],[211,2,225,0],[211,11,225,9,"filterSingular"],[211,25,225,23,"filterSingular"],[211,26,225,24,"state"],[211,31,225,29],[211,33,225,31,"getId"],[211,38,225,36],[211,40,225,38],[212,4,226,4],[212,8,226,8],[212,9,226,9,"state"],[212,14,226,14],[212,16,226,16],[213,6,227,8],[213,13,227,15,"state"],[213,18,227,20],[214,4,228,4],[215,4,229,4],[215,8,229,8],[215,9,229,9,"state"],[215,14,229,14],[215,15,229,15,"routes"],[215,21,229,21],[215,23,229,23],[216,6,230,8],[216,13,230,15,"state"],[216,18,230,20],[217,4,231,4],[218,4,232,4],[218,8,232,10,"currentIndex"],[218,20,232,22],[218,23,232,25,"state"],[218,28,232,30],[218,29,232,31,"index"],[218,34,232,36],[218,38,232,40,"state"],[218,43,232,45],[218,44,232,46,"routes"],[218,50,232,52],[218,51,232,53,"length"],[218,57,232,59],[218,60,232,62],[218,61,232,63],[219,4,233,4],[219,8,233,10,"current"],[219,15,233,17],[219,18,233,20,"state"],[219,23,233,25],[219,24,233,26,"routes"],[219,30,233,32],[219,31,233,33,"currentIndex"],[219,43,233,45],[219,44,233,46],[220,4,234,4],[220,8,234,10,"name"],[220,12,234,14],[220,15,234,17,"current"],[220,22,234,24],[220,23,234,25,"name"],[220,27,234,29],[221,4,235,4],[221,8,235,10,"id"],[221,10,235,12],[221,13,235,15,"getId"],[221,18,235,20],[221,21,235,23],[222,6,235,25,"params"],[222,12,235,31],[222,14,235,33,"current"],[222,21,235,40],[222,22,235,41,"params"],[223,4,235,48],[223,5,235,49],[223,6,235,50],[224,4,236,4],[224,8,236,8],[224,9,236,9,"id"],[224,11,236,11],[224,13,236,13],[225,6,237,8],[225,13,237,15,"state"],[225,18,237,20],[226,4,238,4],[227,4,239,4],[228,4,240,4],[228,8,240,8,"routes"],[228,14,240,14],[228,17,240,17,"state"],[228,22,240,22],[228,23,240,23,"routes"],[228,29,240,29],[229,4,241,4,"routes"],[229,10,241,10],[229,13,241,13,"routes"],[229,19,241,19],[229,20,241,20,"filter"],[229,26,241,26],[229,27,241,27],[229,28,241,28,"route"],[229,33,241,33],[229,35,241,35,"index"],[229,40,241,40],[229,45,241,45],[230,6,242,8],[231,6,243,8],[231,10,243,12,"index"],[231,15,243,17],[231,20,243,22,"currentIndex"],[231,32,243,34],[231,34,243,36],[232,8,244,12],[232,15,244,19],[232,19,244,23],[233,6,245,8],[234,6,246,8],[235,6,247,8],[235,13,247,15,"name"],[235,17,247,19],[235,22,247,24,"route"],[235,27,247,29],[235,28,247,30,"name"],[235,32,247,34],[235,36,247,38,"id"],[235,38,247,40],[235,43,247,45,"getId"],[235,48,247,50],[235,51,247,53],[236,8,247,55,"params"],[236,14,247,61],[236,16,247,63,"route"],[236,21,247,68],[236,22,247,69,"params"],[237,6,247,76],[237,7,247,77],[237,8,247,78],[238,4,248,4],[238,5,248,5],[238,6,248,6],[239,4,249,4],[239,11,249,11],[240,6,250,8],[240,9,250,11,"state"],[240,14,250,16],[241,6,251,8,"index"],[241,11,251,13],[241,13,251,15,"routes"],[241,19,251,21],[241,20,251,22,"length"],[241,26,251,28],[241,29,251,31],[241,30,251,32],[242,6,252,8,"routes"],[243,4,253,4],[243,5,253,5],[244,2,254,0],[245,2,255,0],[245,6,255,6,"Stack"],[245,11,255,11],[245,14,255,14,"Object"],[245,20,255,20],[245,21,255,21,"assign"],[245,27,255,27],[245,28,255,29,"props"],[245,33,255,34],[245,37,255,39],[246,4,256,4],[246,24,256,11,"_reactJsxDevRuntime"],[246,43,256,11],[246,44,256,11,"jsxDEV"],[246,50,256,11],[246,51,256,12,"RNStack"],[246,58,256,19],[247,6,256,19],[247,9,256,24,"props"],[247,14,256,29],[248,6,256,31,"UNSTABLE_router"],[248,21,256,46],[248,23,256,48,"exports"],[248,30,256,55],[248,31,256,56,"stackRouterOverride"],[249,4,256,76],[250,6,256,76,"fileName"],[250,14,256,76],[250,16,256,76,"_jsxFileName"],[250,28,256,76],[251,6,256,76,"lineNumber"],[251,16,256,76],[252,6,256,76,"columnNumber"],[252,18,256,76],[253,4,256,76],[253,11,256,77],[253,12,256,78],[254,2,257,0],[254,3,257,1],[254,5,257,3],[255,4,258,4,"Screen"],[255,10,258,10],[255,12,258,12,"RNStack"],[255,19,258,19],[255,20,258,20,"Screen"],[255,26,258,26],[256,4,259,4,"Protected"],[256,13,259,13],[256,15,259,15,"Protected_1"],[256,26,259,26],[256,27,259,27,"Protected"],[257,2,260,0],[257,3,260,1],[257,4,260,2],[258,2,261,0,"exports"],[258,9,261,7],[258,10,261,8,"default"],[258,17,261,15],[258,20,261,18,"Stack"],[258,25,261,23],[259,2,262,0],[259,6,262,6,"StackRouter"],[259,17,262,17],[259,20,262,21,"options"],[259,27,262,28],[259,31,262,33],[260,4,263,4],[260,8,263,10,"router"],[260,14,263,16],[260,17,263,19],[260,18,263,20],[260,19,263,21],[260,21,263,23,"native_1"],[260,29,263,31],[260,30,263,32,"StackRouter"],[260,41,263,43],[260,43,263,45,"options"],[260,50,263,52],[260,51,263,53],[261,4,264,4],[261,11,264,11],[262,6,265,8],[262,9,265,11,"router"],[262,15,265,17],[263,6,266,8],[263,9,266,11],[263,10,266,12],[263,11,266,13],[263,13,266,15,"exports"],[263,20,266,22],[263,21,266,23,"stackRouterOverride"],[263,40,266,42],[263,42,266,44,"router"],[263,48,266,50],[264,4,267,4],[264,5,267,5],[265,2,268,0],[265,3,268,1],[266,2,269,0,"exports"],[266,9,269,7],[266,10,269,8,"StackRouter"],[266,21,269,19],[266,24,269,22,"StackRouter"],[266,35,269,33],[267,0,269,34],[267,3]],"functionMap":{"names":["<global>","isStackAction","stackRouterOverride","getStateForAction","getIdFunction","state.routes.findLast$argument_0","state.preloadedRoutes.find$argument_0","state.routes.filter$argument_0","state.preloadedRoutes.filter$argument_0","getActionSingularIdFn","<anonymous>","filterSingular","routes.filter$argument_0","Object.assign$argument_0","StackRouter"],"mappings":"AAA;ACY;CDM;4BEU;2BCE;YCY;aDc;sDEe,yFF;0DES,6CF;2DGI,yFH;6DI6C,0BJ;sEKyD,sDL;SDqB;CFE;ASE;eCE,oDD;eCG,2DD;CTG;AWK;2BCgB;KDO;CXM;4BaC;CbE;oBcK;CdM"}},"type":"js/module"}]}