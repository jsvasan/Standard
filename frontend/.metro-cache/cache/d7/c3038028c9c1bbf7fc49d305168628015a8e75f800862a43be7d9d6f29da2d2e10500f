{"dependencies":[{"name":"./parseHermesStack","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":25},"end":{"line":16,"column":54}}],"key":"g2H8jHpfFDqRqQesJZl7YucB+lo=","exportNames":["*"]}},{"name":"stacktrace-parser","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":48,"column":27},"end":{"line":48,"column":55}}],"key":"3r9LnSX2gWMcqYH/F2aaJpiC6Uw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = parseErrorStack;\n  var parseHermesStack = require(_dependencyMap[0], \"./parseHermesStack\").default;\n  function convertHermesStack(stack) {\n    var frames = [];\n    for (var entry of stack.entries) {\n      if (entry.type !== 'FRAME') {\n        continue;\n      }\n      var location = entry.location,\n        functionName = entry.functionName;\n      if (location.type === 'NATIVE' || location.type === 'INTERNAL_BYTECODE') {\n        continue;\n      }\n      frames.push({\n        methodName: functionName,\n        file: location.sourceUrl,\n        lineNumber: location.line1Based,\n        column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based\n      });\n    }\n    return frames;\n  }\n  function parseErrorStack(errorStack) {\n    if (errorStack == null) {\n      return [];\n    }\n    var stacktraceParser = require(_dependencyMap[1], \"stacktrace-parser\");\n    var parsedStack = Array.isArray(errorStack) ? errorStack : global.HermesInternal ? convertHermesStack(parseHermesStack(errorStack)) : stacktraceParser.parse(errorStack).map(frame => ({\n      ...frame,\n      column: frame.column != null ? frame.column - 1 : null\n    }));\n    return parsedStack;\n  }\n});","lineCount":40,"map":[[2,2,11,0],[2,14,11,12],[4,2,11,13,"Object"],[4,8,11,13],[4,9,11,13,"defineProperty"],[4,23,11,13],[4,24,11,13,"exports"],[4,31,11,13],[5,4,11,13,"value"],[5,9,11,13],[6,2,11,13],[7,2,11,13,"exports"],[7,9,11,13],[7,10,11,13,"default"],[7,17,11,13],[7,20,11,13,"parseErrorStack"],[7,35,11,13],[8,2,16,0],[8,6,16,6,"parseHermesStack"],[8,22,16,22],[8,25,16,25,"require"],[8,32,16,32],[8,33,16,32,"_dependencyMap"],[8,47,16,32],[8,72,16,53],[8,73,16,54],[8,74,16,55,"default"],[8,81,16,62],[9,2,18,0],[9,11,18,9,"convertHermesStack"],[9,29,18,27,"convertHermesStack"],[9,30,18,28,"stack"],[9,35,18,52],[9,37,18,73],[10,4,19,2],[10,8,19,8,"frames"],[10,14,19,33],[10,17,19,36],[10,19,19,38],[11,4,20,2],[11,9,20,7],[11,13,20,13,"entry"],[11,18,20,18],[11,22,20,22,"stack"],[11,27,20,27],[11,28,20,28,"entries"],[11,35,20,35],[11,37,20,37],[12,6,21,4],[12,10,21,8,"entry"],[12,15,21,13],[12,16,21,14,"type"],[12,20,21,18],[12,25,21,23],[12,32,21,30],[12,34,21,32],[13,8,22,6],[14,6,23,4],[15,6,24,4],[15,10,24,11,"location"],[15,18,24,19],[15,21,24,37,"entry"],[15,26,24,42],[15,27,24,11,"location"],[15,35,24,19],[16,8,24,21,"functionName"],[16,20,24,33],[16,23,24,37,"entry"],[16,28,24,42],[16,29,24,21,"functionName"],[16,41,24,33],[17,6,25,4],[17,10,25,8,"location"],[17,18,25,16],[17,19,25,17,"type"],[17,23,25,21],[17,28,25,26],[17,36,25,34],[17,40,25,38,"location"],[17,48,25,46],[17,49,25,47,"type"],[17,53,25,51],[17,58,25,56],[17,77,25,75],[17,79,25,77],[18,8,26,6],[19,6,27,4],[20,6,28,4,"frames"],[20,12,28,10],[20,13,28,11,"push"],[20,17,28,15],[20,18,28,16],[21,8,29,6,"methodName"],[21,18,29,16],[21,20,29,18,"functionName"],[21,32,29,30],[22,8,30,6,"file"],[22,12,30,10],[22,14,30,12,"location"],[22,22,30,20],[22,23,30,21,"sourceUrl"],[22,32,30,30],[23,8,31,6,"lineNumber"],[23,18,31,16],[23,20,31,18,"location"],[23,28,31,26],[23,29,31,27,"line1Based"],[23,39,31,37],[24,8,32,6,"column"],[24,14,32,12],[24,16,33,8,"location"],[24,24,33,16],[24,25,33,17,"type"],[24,29,33,21],[24,34,33,26],[24,42,33,34],[24,45,34,12,"location"],[24,53,34,20],[24,54,34,21,"column1Based"],[24,66,34,33],[24,69,34,36],[24,70,34,37],[24,73,35,12,"location"],[24,81,35,20],[24,82,35,21,"virtualOffset0Based"],[25,6,36,4],[25,7,36,5],[25,8,36,6],[26,4,37,2],[27,4,38,2],[27,11,38,9,"frames"],[27,17,38,15],[28,2,39,0],[29,2,41,15],[29,11,41,24,"parseErrorStack"],[29,26,41,39,"parseErrorStack"],[29,27,42,2,"errorStack"],[29,37,42,21],[29,39,43,21],[30,4,44,2],[30,8,44,6,"errorStack"],[30,18,44,16],[30,22,44,20],[30,26,44,24],[30,28,44,26],[31,6,45,4],[31,13,45,11],[31,15,45,13],[32,4,46,2],[33,4,48,2],[33,8,48,8,"stacktraceParser"],[33,24,48,24],[33,27,48,27,"require"],[33,34,48,34],[33,35,48,34,"_dependencyMap"],[33,49,48,34],[33,73,48,54],[33,74,48,55],[34,4,49,2],[34,8,49,8,"parsedStack"],[34,19,49,19],[34,22,49,22,"Array"],[34,27,49,27],[34,28,49,28,"isArray"],[34,35,49,35],[34,36,49,36,"errorStack"],[34,46,49,46],[34,47,49,47],[34,50,50,6,"errorStack"],[34,60,50,16],[34,63,51,6,"global"],[34,69,51,12],[34,70,51,13,"HermesInternal"],[34,84,51,27],[34,87,52,8,"convertHermesStack"],[34,105,52,26],[34,106,52,27,"parseHermesStack"],[34,122,52,43],[34,123,52,44,"errorStack"],[34,133,52,54],[34,134,52,55],[34,135,52,56],[34,138,53,8,"stacktraceParser"],[34,154,53,24],[34,155,53,25,"parse"],[34,160,53,30],[34,161,53,31,"errorStack"],[34,171,53,41],[34,172,53,42],[34,173,53,43,"map"],[34,176,53,46],[34,177,53,48,"frame"],[34,182,53,53],[34,187,53,71],[35,6,54,10],[35,9,54,13,"frame"],[35,14,54,18],[36,6,55,10,"column"],[36,12,55,16],[36,14,55,18,"frame"],[36,19,55,23],[36,20,55,24,"column"],[36,26,55,30],[36,30,55,34],[36,34,55,38],[36,37,55,41,"frame"],[36,42,55,46],[36,43,55,47,"column"],[36,49,55,53],[36,52,55,56],[36,53,55,57],[36,56,55,60],[37,4,56,8],[37,5,56,9],[37,6,56,10],[37,7,56,11],[38,4,58,2],[38,11,58,9,"parsedStack"],[38,22,58,20],[39,2,59,0],[40,0,59,1],[40,3]],"functionMap":{"names":["<global>","convertHermesStack","parseErrorStack","stacktraceParser.parse.map$argument_0"],"mappings":"AAA;ACiB;CDqB;eEE;+CCY;UDG"}},"type":"js/module"}]}