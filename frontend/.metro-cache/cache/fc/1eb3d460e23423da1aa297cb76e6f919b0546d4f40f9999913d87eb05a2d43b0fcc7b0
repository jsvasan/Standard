{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"../modules/symbolicateStackTrace","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":296},"end":{"line":11,"column":69,"index":365}}],"key":"YdkqoDMIPdxOnCsE0E8rzpWj034=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.deleteStack = deleteStack;\n  exports.symbolicate = symbolicate;\n  var _symbolicateStackTrace = _interopRequireDefault(require(_dependencyMap[1], \"../modules/symbolicateStackTrace\"));\n  /**\n   * Copyright (c) 650 Industries.\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  const cache = new Map();\n\n  /**\n   * Sanitize because sometimes, `symbolicateStackTrace` gives us invalid values.\n   */\n  const sanitize = ({\n    stack: maybeStack,\n    codeFrame\n  }) => {\n    if (!Array.isArray(maybeStack)) {\n      throw new Error('Expected stack to be an array.');\n    }\n    const stack = [];\n    for (const maybeFrame of maybeStack) {\n      let collapse = false;\n      if ('collapse' in maybeFrame) {\n        if (typeof maybeFrame.collapse !== 'boolean') {\n          throw new Error('Expected stack frame `collapse` to be a boolean.');\n        }\n        collapse = maybeFrame.collapse;\n      }\n      stack.push({\n        arguments: [],\n        column: maybeFrame.column,\n        file: maybeFrame.file,\n        lineNumber: maybeFrame.lineNumber,\n        methodName: maybeFrame.methodName,\n        collapse\n      });\n    }\n    return {\n      stack,\n      codeFrame\n    };\n  };\n  function deleteStack(stack) {\n    cache.delete(stack);\n  }\n  function symbolicate(stack) {\n    let promise = cache.get(stack);\n    if (promise == null) {\n      promise = (0, _symbolicateStackTrace.default)(stack).then(sanitize);\n      cache.set(stack, promise);\n    }\n    return promise;\n  }\n});","lineCount":63,"map":[[8,2,11,0],[8,6,11,0,"_symbolicateStackTrace"],[8,28,11,0],[8,31,11,0,"_interopRequireDefault"],[8,53,11,0],[8,54,11,0,"require"],[8,61,11,0],[8,62,11,0,"_dependencyMap"],[8,76,11,0],[9,2,1,0],[10,0,2,0],[11,0,3,0],[12,0,4,0],[13,0,5,0],[14,0,6,0],[15,0,7,0],[17,2,19,0],[17,8,19,6,"cache"],[17,13,19,56],[17,16,19,59],[17,20,19,63,"Map"],[17,23,19,66],[17,24,19,67],[17,25,19,68],[19,2,21,0],[20,0,22,0],[21,0,23,0],[22,2,24,0],[22,8,24,6,"sanitize"],[22,16,24,14],[22,19,24,17,"sanitize"],[22,20,24,18],[23,4,25,2,"stack"],[23,9,25,7],[23,11,25,9,"maybeStack"],[23,21,25,19],[24,4,26,2,"codeFrame"],[25,2,27,24],[25,3,27,25],[25,8,27,54],[26,4,28,2],[26,8,28,6],[26,9,28,7,"Array"],[26,14,28,12],[26,15,28,13,"isArray"],[26,22,28,20],[26,23,28,21,"maybeStack"],[26,33,28,31],[26,34,28,32],[26,36,28,34],[27,6,29,4],[27,12,29,10],[27,16,29,14,"Error"],[27,21,29,19],[27,22,29,20],[27,54,29,52],[27,55,29,53],[28,4,30,2],[29,4,31,2],[29,10,31,8,"stack"],[29,15,31,27],[29,18,31,30],[29,20,31,32],[30,4,32,2],[30,9,32,7],[30,15,32,13,"maybeFrame"],[30,25,32,23],[30,29,32,27,"maybeStack"],[30,39,32,37],[30,41,32,39],[31,6,33,4],[31,10,33,8,"collapse"],[31,18,33,16],[31,21,33,19],[31,26,33,24],[32,6,34,4],[32,10,34,8],[32,20,34,18],[32,24,34,22,"maybeFrame"],[32,34,34,32],[32,36,34,34],[33,8,35,6],[33,12,35,10],[33,19,35,17,"maybeFrame"],[33,29,35,27],[33,30,35,28,"collapse"],[33,38,35,36],[33,43,35,41],[33,52,35,50],[33,54,35,52],[34,10,36,8],[34,16,36,14],[34,20,36,18,"Error"],[34,25,36,23],[34,26,36,24],[34,76,36,74],[34,77,36,75],[35,8,37,6],[36,8,38,6,"collapse"],[36,16,38,14],[36,19,38,17,"maybeFrame"],[36,29,38,27],[36,30,38,28,"collapse"],[36,38,38,36],[37,6,39,4],[38,6,40,4,"stack"],[38,11,40,9],[38,12,40,10,"push"],[38,16,40,14],[38,17,40,15],[39,8,41,6,"arguments"],[39,17,41,15],[39,19,41,17],[39,21,41,19],[40,8,42,6,"column"],[40,14,42,12],[40,16,42,14,"maybeFrame"],[40,26,42,24],[40,27,42,25,"column"],[40,33,42,31],[41,8,43,6,"file"],[41,12,43,10],[41,14,43,12,"maybeFrame"],[41,24,43,22],[41,25,43,23,"file"],[41,29,43,27],[42,8,44,6,"lineNumber"],[42,18,44,16],[42,20,44,18,"maybeFrame"],[42,30,44,28],[42,31,44,29,"lineNumber"],[42,41,44,39],[43,8,45,6,"methodName"],[43,18,45,16],[43,20,45,18,"maybeFrame"],[43,30,45,28],[43,31,45,29,"methodName"],[43,41,45,39],[44,8,46,6,"collapse"],[45,6,47,4],[45,7,47,5],[45,8,47,6],[46,4,48,2],[47,4,49,2],[47,11,49,9],[48,6,49,11,"stack"],[48,11,49,16],[49,6,49,18,"codeFrame"],[50,4,49,28],[50,5,49,29],[51,2,50,0],[51,3,50,1],[52,2,52,7],[52,11,52,16,"deleteStack"],[52,22,52,27,"deleteStack"],[52,23,52,28,"stack"],[52,28,52,40],[52,30,52,48],[53,4,53,2,"cache"],[53,9,53,7],[53,10,53,8,"delete"],[53,16,53,14],[53,17,53,15,"stack"],[53,22,53,20],[53,23,53,21],[54,2,54,0],[55,2,56,7],[55,11,56,16,"symbolicate"],[55,22,56,27,"symbolicate"],[55,23,56,28,"stack"],[55,28,56,40],[55,30,56,75],[56,4,57,2],[56,8,57,6,"promise"],[56,15,57,13],[56,18,57,16,"cache"],[56,23,57,21],[56,24,57,22,"get"],[56,27,57,25],[56,28,57,26,"stack"],[56,33,57,31],[56,34,57,32],[57,4,58,2],[57,8,58,6,"promise"],[57,15,58,13],[57,19,58,17],[57,23,58,21],[57,25,58,23],[58,6,59,4,"promise"],[58,13,59,11],[58,16,59,14],[58,20,59,14,"symbolicateStackTrace"],[58,50,59,35],[58,52,59,36,"stack"],[58,57,59,41],[58,58,59,42],[58,59,59,43,"then"],[58,63,59,47],[58,64,59,48,"sanitize"],[58,72,59,56],[58,73,59,57],[59,6,60,4,"cache"],[59,11,60,9],[59,12,60,10,"set"],[59,15,60,13],[59,16,60,14,"stack"],[59,21,60,19],[59,23,60,21,"promise"],[59,30,60,28],[59,31,60,29],[60,4,61,2],[61,4,63,2],[61,11,63,9,"promise"],[61,18,63,16],[62,2,64,0],[63,0,64,1],[63,3]],"functionMap":{"names":["<global>","sanitize","deleteStack","symbolicate"],"mappings":"AAA;iBCuB;CD0B;OEE;CFE;OGE;CHQ"}},"type":"js/module"}]}