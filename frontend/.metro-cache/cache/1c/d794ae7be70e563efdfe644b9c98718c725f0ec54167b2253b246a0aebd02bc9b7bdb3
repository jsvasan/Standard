{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.resolveHref = void 0;\n  exports.resolveHrefStringWithSegments = resolveHrefStringWithSegments;\n  /** Resolve an href object into a fully qualified, relative href. */\n  const resolveHref = href => {\n    if (typeof href === 'string') {\n      return (0, exports.resolveHref)({\n        pathname: href\n      });\n    }\n    const path = href.pathname ?? '';\n    if (!href?.params) {\n      return path;\n    }\n    const {\n      pathname,\n      params\n    } = createQualifiedPathname(path, Object.assign({}, href.params));\n    const paramsString = createQueryParams(params);\n    return pathname + (paramsString ? `?${paramsString}` : '');\n  };\n  exports.resolveHref = resolveHref;\n  function resolveHrefStringWithSegments(href, {\n    segments = [],\n    params = {}\n  } = {}, {\n    relativeToDirectory\n  } = {}) {\n    if (href.startsWith('.')) {\n      // Resolve base path by merging the current segments with the params\n      let base = segments?.map(segment => {\n        if (!segment.startsWith('[')) return segment;\n        if (segment.startsWith('[...')) {\n          segment = segment.slice(4, -1);\n          const param = params[segment];\n          if (Array.isArray(param)) {\n            return param.join('/');\n          } else {\n            return param?.split(',')?.join('/') ?? '';\n          }\n        } else {\n          segment = segment.slice(1, -1);\n          return params[segment];\n        }\n      }).filter(Boolean).join('/') ?? '/';\n      if (relativeToDirectory) {\n        base = `${base}/`;\n      }\n      const url = new URL(href, `http://hostname/${base}`);\n      href = `${url.pathname}${url.search}`;\n    }\n    return href;\n  }\n  function createQualifiedPathname(pathname, params) {\n    for (const [key, value = ''] of Object.entries(params)) {\n      const dynamicKey = `[${key}]`;\n      const deepDynamicKey = `[...${key}]`;\n      if (pathname.includes(dynamicKey)) {\n        pathname = pathname.replace(dynamicKey, encodeParam(value));\n      } else if (pathname.includes(deepDynamicKey)) {\n        pathname = pathname.replace(deepDynamicKey, encodeParam(value));\n      } else {\n        continue;\n      }\n      delete params[key];\n    }\n    return {\n      pathname,\n      params\n    };\n  }\n  function encodeParam(param) {\n    if (Array.isArray(param)) {\n      return param.map(p => encodeParam(p)).join('/');\n    }\n    return encodeURIComponent(param.toString());\n  }\n  function createQueryParams(params) {\n    return Object.entries(params)\n    // Allow nullish params\n    .filter(([, value]) => value != null).map(([key, value]) => `${key}=${encodeURIComponent(value.toString())}`).join('&');\n  }\n});","lineCount":88,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"resolveHref"],[7,21,3,19],[7,24,3,22],[7,29,3,27],[7,30,3,28],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"resolveHrefStringWithSegments"],[8,39,4,37],[8,42,4,40,"resolveHrefStringWithSegments"],[8,71,4,69],[9,2,5,0],[10,2,6,0],[10,8,6,6,"resolveHref"],[10,19,6,17],[10,22,6,21,"href"],[10,26,6,25],[10,30,6,30],[11,4,7,4],[11,8,7,8],[11,15,7,15,"href"],[11,19,7,19],[11,24,7,24],[11,32,7,32],[11,34,7,34],[12,6,8,8],[12,13,8,15],[12,14,8,16],[12,15,8,17],[12,17,8,19,"exports"],[12,24,8,26],[12,25,8,27,"resolveHref"],[12,36,8,38],[12,38,8,40],[13,8,8,42,"pathname"],[13,16,8,50],[13,18,8,52,"href"],[14,6,8,57],[14,7,8,58],[14,8,8,59],[15,4,9,4],[16,4,10,4],[16,10,10,10,"path"],[16,14,10,14],[16,17,10,17,"href"],[16,21,10,21],[16,22,10,22,"pathname"],[16,30,10,30],[16,34,10,34],[16,36,10,36],[17,4,11,4],[17,8,11,8],[17,9,11,9,"href"],[17,13,11,13],[17,15,11,15,"params"],[17,21,11,21],[17,23,11,23],[18,6,12,8],[18,13,12,15,"path"],[18,17,12,19],[19,4,13,4],[20,4,14,4],[20,10,14,10],[21,6,14,12,"pathname"],[21,14,14,20],[22,6,14,22,"params"],[23,4,14,29],[23,5,14,30],[23,8,14,33,"createQualifiedPathname"],[23,31,14,56],[23,32,14,57,"path"],[23,36,14,61],[23,38,14,61,"Object"],[23,44,14,61],[23,45,14,61,"assign"],[23,51,14,61],[23,56,15,11,"href"],[23,60,15,15],[23,61,15,16,"params"],[23,67,15,22],[23,68,16,5],[23,69,16,6],[24,4,17,4],[24,10,17,10,"paramsString"],[24,22,17,22],[24,25,17,25,"createQueryParams"],[24,42,17,42],[24,43,17,43,"params"],[24,49,17,49],[24,50,17,50],[25,4,18,4],[25,11,18,11,"pathname"],[25,19,18,19],[25,23,18,23,"paramsString"],[25,35,18,35],[25,38,18,38],[25,42,18,42,"paramsString"],[25,54,18,54],[25,56,18,56],[25,59,18,59],[25,61,18,61],[25,62,18,62],[26,2,19,0],[26,3,19,1],[27,2,20,0,"exports"],[27,9,20,7],[27,10,20,8,"resolveHref"],[27,21,20,19],[27,24,20,22,"resolveHref"],[27,35,20,33],[28,2,21,0],[28,11,21,9,"resolveHrefStringWithSegments"],[28,40,21,38,"resolveHrefStringWithSegments"],[28,41,21,39,"href"],[28,45,21,43],[28,47,21,45],[29,4,21,47,"segments"],[29,12,21,55],[29,15,21,58],[29,17,21,60],[30,4,21,62,"params"],[30,10,21,68],[30,13,21,71],[30,14,21,72],[31,2,21,74],[31,3,21,75],[31,6,21,78],[31,7,21,79],[31,8,21,80],[31,10,21,82],[32,4,21,84,"relativeToDirectory"],[33,2,21,104],[33,3,21,105],[33,6,21,108],[33,7,21,109],[33,8,21,110],[33,10,21,112],[34,4,22,4],[34,8,22,8,"href"],[34,12,22,12],[34,13,22,13,"startsWith"],[34,23,22,23],[34,24,22,24],[34,27,22,27],[34,28,22,28],[34,30,22,30],[35,6,23,8],[36,6,24,8],[36,10,24,12,"base"],[36,14,24,16],[36,17,24,19,"segments"],[36,25,24,27],[36,27,25,14,"map"],[36,30,25,17],[36,31,25,19,"segment"],[36,38,25,26],[36,42,25,31],[37,8,26,12],[37,12,26,16],[37,13,26,17,"segment"],[37,20,26,24],[37,21,26,25,"startsWith"],[37,31,26,35],[37,32,26,36],[37,35,26,39],[37,36,26,40],[37,38,27,16],[37,45,27,23,"segment"],[37,52,27,30],[38,8,28,12],[38,12,28,16,"segment"],[38,19,28,23],[38,20,28,24,"startsWith"],[38,30,28,34],[38,31,28,35],[38,37,28,41],[38,38,28,42],[38,40,28,44],[39,10,29,16,"segment"],[39,17,29,23],[39,20,29,26,"segment"],[39,27,29,33],[39,28,29,34,"slice"],[39,33,29,39],[39,34,29,40],[39,35,29,41],[39,37,29,43],[39,38,29,44],[39,39,29,45],[39,40,29,46],[40,10,30,16],[40,16,30,22,"param"],[40,21,30,27],[40,24,30,30,"params"],[40,30,30,36],[40,31,30,37,"segment"],[40,38,30,44],[40,39,30,45],[41,10,31,16],[41,14,31,20,"Array"],[41,19,31,25],[41,20,31,26,"isArray"],[41,27,31,33],[41,28,31,34,"param"],[41,33,31,39],[41,34,31,40],[41,36,31,42],[42,12,32,20],[42,19,32,27,"param"],[42,24,32,32],[42,25,32,33,"join"],[42,29,32,37],[42,30,32,38],[42,33,32,41],[42,34,32,42],[43,10,33,16],[43,11,33,17],[43,17,34,21],[44,12,35,20],[44,19,35,27,"param"],[44,24,35,32],[44,26,35,34,"split"],[44,31,35,39],[44,32,35,40],[44,35,35,43],[44,36,35,44],[44,38,35,46,"join"],[44,42,35,50],[44,43,35,51],[44,46,35,54],[44,47,35,55],[44,51,35,59],[44,53,35,61],[45,10,36,16],[46,8,37,12],[46,9,37,13],[46,15,38,17],[47,10,39,16,"segment"],[47,17,39,23],[47,20,39,26,"segment"],[47,27,39,33],[47,28,39,34,"slice"],[47,33,39,39],[47,34,39,40],[47,35,39,41],[47,37,39,43],[47,38,39,44],[47,39,39,45],[47,40,39,46],[48,10,40,16],[48,17,40,23,"params"],[48,23,40,29],[48,24,40,30,"segment"],[48,31,40,37],[48,32,40,38],[49,8,41,12],[50,6,42,8],[50,7,42,9],[50,8,42,10],[50,9,43,13,"filter"],[50,15,43,19],[50,16,43,20,"Boolean"],[50,23,43,27],[50,24,43,28],[50,25,44,13,"join"],[50,29,44,17],[50,30,44,18],[50,33,44,21],[50,34,44,22],[50,38,44,26],[50,41,44,29],[51,6,45,8],[51,10,45,12,"relativeToDirectory"],[51,29,45,31],[51,31,45,33],[52,8,46,12,"base"],[52,12,46,16],[52,15,46,19],[52,18,46,22,"base"],[52,22,46,26],[52,25,46,29],[53,6,47,8],[54,6,48,8],[54,12,48,14,"url"],[54,15,48,17],[54,18,48,20],[54,22,48,24,"URL"],[54,25,48,27],[54,26,48,28,"href"],[54,30,48,32],[54,32,48,34],[54,51,48,53,"base"],[54,55,48,57],[54,57,48,59],[54,58,48,60],[55,6,49,8,"href"],[55,10,49,12],[55,13,49,15],[55,16,49,18,"url"],[55,19,49,21],[55,20,49,22,"pathname"],[55,28,49,30],[55,31,49,33,"url"],[55,34,49,36],[55,35,49,37,"search"],[55,41,49,43],[55,43,49,45],[56,4,50,4],[57,4,51,4],[57,11,51,11,"href"],[57,15,51,15],[58,2,52,0],[59,2,53,0],[59,11,53,9,"createQualifiedPathname"],[59,34,53,32,"createQualifiedPathname"],[59,35,53,33,"pathname"],[59,43,53,41],[59,45,53,43,"params"],[59,51,53,49],[59,53,53,51],[60,4,54,4],[60,9,54,9],[60,15,54,15],[60,16,54,16,"key"],[60,19,54,19],[60,21,54,21,"value"],[60,26,54,26],[60,29,54,29],[60,31,54,31],[60,32,54,32],[60,36,54,36,"Object"],[60,42,54,42],[60,43,54,43,"entries"],[60,50,54,50],[60,51,54,51,"params"],[60,57,54,57],[60,58,54,58],[60,60,54,60],[61,6,55,8],[61,12,55,14,"dynamicKey"],[61,22,55,24],[61,25,55,27],[61,29,55,31,"key"],[61,32,55,34],[61,35,55,37],[62,6,56,8],[62,12,56,14,"deepDynamicKey"],[62,26,56,28],[62,29,56,31],[62,36,56,38,"key"],[62,39,56,41],[62,42,56,44],[63,6,57,8],[63,10,57,12,"pathname"],[63,18,57,20],[63,19,57,21,"includes"],[63,27,57,29],[63,28,57,30,"dynamicKey"],[63,38,57,40],[63,39,57,41],[63,41,57,43],[64,8,58,12,"pathname"],[64,16,58,20],[64,19,58,23,"pathname"],[64,27,58,31],[64,28,58,32,"replace"],[64,35,58,39],[64,36,58,40,"dynamicKey"],[64,46,58,50],[64,48,58,52,"encodeParam"],[64,59,58,63],[64,60,58,64,"value"],[64,65,58,69],[64,66,58,70],[64,67,58,71],[65,6,59,8],[65,7,59,9],[65,13,60,13],[65,17,60,17,"pathname"],[65,25,60,25],[65,26,60,26,"includes"],[65,34,60,34],[65,35,60,35,"deepDynamicKey"],[65,49,60,49],[65,50,60,50],[65,52,60,52],[66,8,61,12,"pathname"],[66,16,61,20],[66,19,61,23,"pathname"],[66,27,61,31],[66,28,61,32,"replace"],[66,35,61,39],[66,36,61,40,"deepDynamicKey"],[66,50,61,54],[66,52,61,56,"encodeParam"],[66,63,61,67],[66,64,61,68,"value"],[66,69,61,73],[66,70,61,74],[66,71,61,75],[67,6,62,8],[67,7,62,9],[67,13,63,13],[68,8,64,12],[69,6,65,8],[70,6,66,8],[70,13,66,15,"params"],[70,19,66,21],[70,20,66,22,"key"],[70,23,66,25],[70,24,66,26],[71,4,67,4],[72,4,68,4],[72,11,68,11],[73,6,68,13,"pathname"],[73,14,68,21],[74,6,68,23,"params"],[75,4,68,30],[75,5,68,31],[76,2,69,0],[77,2,70,0],[77,11,70,9,"encodeParam"],[77,22,70,20,"encodeParam"],[77,23,70,21,"param"],[77,28,70,26],[77,30,70,28],[78,4,71,4],[78,8,71,8,"Array"],[78,13,71,13],[78,14,71,14,"isArray"],[78,21,71,21],[78,22,71,22,"param"],[78,27,71,27],[78,28,71,28],[78,30,71,30],[79,6,72,8],[79,13,72,15,"param"],[79,18,72,20],[79,19,72,21,"map"],[79,22,72,24],[79,23,72,26,"p"],[79,24,72,27],[79,28,72,32,"encodeParam"],[79,39,72,43],[79,40,72,44,"p"],[79,41,72,45],[79,42,72,46],[79,43,72,47],[79,44,72,48,"join"],[79,48,72,52],[79,49,72,53],[79,52,72,56],[79,53,72,57],[80,4,73,4],[81,4,74,4],[81,11,74,11,"encodeURIComponent"],[81,29,74,29],[81,30,74,30,"param"],[81,35,74,35],[81,36,74,36,"toString"],[81,44,74,44],[81,45,74,45],[81,46,74,46],[81,47,74,47],[82,2,75,0],[83,2,76,0],[83,11,76,9,"createQueryParams"],[83,28,76,26,"createQueryParams"],[83,29,76,27,"params"],[83,35,76,33],[83,37,76,35],[84,4,77,4],[84,11,77,12,"Object"],[84,17,77,18],[84,18,77,19,"entries"],[84,25,77,26],[84,26,77,27,"params"],[84,32,77,33],[85,4,78,8],[86,4,78,8],[86,5,79,9,"filter"],[86,11,79,15],[86,12,79,16],[86,13,79,17],[86,16,79,20,"value"],[86,21,79,25],[86,22,79,26],[86,27,79,31,"value"],[86,32,79,36],[86,36,79,40],[86,40,79,44],[86,41,79,45],[86,42,80,9,"map"],[86,45,80,12],[86,46,80,13],[86,47,80,14],[86,48,80,15,"key"],[86,51,80,18],[86,53,80,20,"value"],[86,58,80,25],[86,59,80,26],[86,64,80,31],[86,67,80,34,"key"],[86,70,80,37],[86,74,80,41,"encodeURIComponent"],[86,92,80,59],[86,93,80,60,"value"],[86,98,80,65],[86,99,80,66,"toString"],[86,107,80,74],[86,108,80,75],[86,109,80,76],[86,110,80,77],[86,112,80,79],[86,113,80,80],[86,114,81,9,"join"],[86,118,81,13],[86,119,81,14],[86,122,81,17],[86,123,81,18],[87,2,82,0],[88,0,82,1],[88,3]],"functionMap":{"names":["<global>","resolveHref","resolveHrefStringWithSegments","segments.map$argument_0","createQualifiedPathname","encodeParam","param.map$argument_0","createQueryParams","Object.entries.filter$argument_0","Object.entries.filter.map$argument_0"],"mappings":"AAA;oBCK;CDa;AEE;kBCI;SDiB;CFU;AIC;CJgB;AKC;yBCE,qBD;CLG;AOC;gBCG,4BD;aEC,kEF;CPE"},"hasCjsExports":true},"type":"js/module"}]}