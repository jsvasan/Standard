{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"query-string","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":39,"column":33,"index":1606},"end":{"line":39,"column":56,"index":1629}}],"key":"CQ4f6+ZdkmuRCkqw6zIINc/cka0=","exportNames":["*"]}},{"name":"./getPathFromState-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":40,"column":26,"index":1658},"end":{"line":40,"column":61,"index":1693}}],"key":"t0FyaMgwHS2Lt2mTiJkOs7AsCtY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var ownKeys = function (o) {\n      ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getPathFromState = getPathFromState;\n  exports.getPathDataFromState = getPathDataFromState;\n  exports.appendBaseUrl = appendBaseUrl;\n  var queryString = __importStar(require(_dependencyMap[1], \"query-string\"));\n  var expo = __importStar(require(_dependencyMap[2], \"./getPathFromState-forks\"));\n  // END FORK\n  var getActiveRoute = state => {\n    var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    return route;\n  };\n  var cachedNormalizedConfigs = [undefined, {}];\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, options) {\n    return getPathDataFromState(state, options).path;\n  }\n  function getPathDataFromState(state, options) {\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n    if (options) {\n      // START FORK\n      expo.validatePathConfig(options);\n      // validatePathConfig(options);\n      // END FORK\n    }\n    // Create a normalized configs object which will be easier to use\n    if (cachedNormalizedConfigs[0] !== options?.screens) {\n      cachedNormalizedConfigs = [options?.screens, options?.screens ? createNormalizedConfigs(options.screens) : {}];\n    }\n    var configs = cachedNormalizedConfigs[1];\n    var path = '/';\n    var current = state;\n    var allParams = {};\n    var _loop = function () {\n      var index = typeof current.index === 'number' ? current.index : 0;\n      var route = current.routes[index];\n      var pattern;\n      var focusedParams;\n      var focusedRoute = getActiveRoute(state);\n      var currentOptions = configs;\n      // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n      var nestedRouteNames = [];\n      var hasNext = true;\n      while (route.name in currentOptions && hasNext) {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          var stringify = currentOptions[route.name]?.stringify;\n          // START FORK\n          // This mutates allParams\n          var currentParams = expo.fixCurrentParams(allParams, route, stringify);\n          // const currentParams = Object.fromEntries(\n          //   Object.entries(route.params).map(([key, value]) => [\n          //     key,\n          //     stringify?.[key] ? stringify[key](value) : String(value),\n          //   ])\n          // );\n          // if (pattern) {\n          //   Object.assign(allParams, currentParams);\n          // }\n          // END FORK\n          if (focusedRoute === route) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = {\n              ...currentParams\n            };\n            pattern?.split('/').filter(p => expo.isDynamicPart(p))\n            // eslint-disable-next-line no-loop-func\n            .forEach(p => {\n              var name = expo.getParamName(p);\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n          }\n        }\n        // If there is no `screens` property or no nested state, we return pattern\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          // START FORK\n          // Expo Router allows you to navigate to a (group) and not specify a target screen\n          // This is different from React Navigation, which requires a target screen\n          // We need to handle this case here, by selecting either the index screen or the first screen of the group\n          // IMPORTANT: This does not affect groups that use _layout files with initialRouteNames\n          // Layout files create a new route config. This only affects groups without layouts that have their screens\n          // hoisted.\n          // Example:\n          // - /home/_layout\n          // - /home/(a|b|c)/index          --> Hoisted to /home/_layout navigator\n          // - /home/(a|b|c)/other          --> Hoisted to /home/_layout navigator\n          // - /home/(profile)/me           --> Hoisted to /home/_layout navigator\n          //\n          // route.push('/home/(a)')        --> This should navigate to /home/(a)/index\n          // route.push('/home/(profile)')  --> This should navigate to /home/(profile)/me\n          var screens = currentOptions[route.name].screens;\n          // Determine what screen the user wants to navigate to. If no screen is specified, assume there is an index screen\n          // In the examples above, this ensures that /home/(a) navigates to /home/(a)/index\n          var targetScreen =\n          // This is typed as unknown, so we need to add these extra assertions\n          route.params && 'screen' in route.params && typeof route.params.screen === 'string' ? route.params.screen : 'index';\n          // If the target screen is not in the screens object, default to the first screen\n          // In the examples above, this ensures that /home/(profile) navigates to /home/(profile)/me\n          // As there is no index screen in the group\n          var screen = screens ? screens[targetScreen] ? targetScreen : Object.keys(screens)[0] : undefined;\n          if (screen && screens && currentOptions[route.name].screens?.[screen]) {\n            route = {\n              ...screens[screen],\n              name: screen,\n              key: screen\n            };\n            currentOptions = screens;\n          } else {\n            hasNext = false;\n          }\n          // hasNext = false;\n          // END FORK\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          var nextRoute = route.state.routes[index];\n          var nestedConfig = currentOptions[route.name].screens;\n          // if there is config for next route name, we go deeper\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            // If not, there is no sense in going deeper in config\n            hasNext = false;\n          }\n        }\n      }\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n      if (currentOptions[route.name] !== undefined) {\n        // START FORK\n        path += expo.getPathWithConventionsCollapsed({\n          ...options,\n          pattern,\n          route,\n          params: allParams,\n          initialRouteName: configs[route.name]?.initialRouteName\n        });\n        // path += pattern\n        //   .split('/')\n        //   .map((p) => {\n        //     const name = getParamName(p);\n        //     // We don't know what to show for wildcard patterns\n        //     // Showing the route name seems ok, though whatever we show here will be incorrect\n        //     // Since the page doesn't actually exist\n        //     if (p === '*') {\n        //       return route.name;\n        //     }\n        //     // If the path has a pattern for a param, put the param in the path\n        //     if (p.startsWith(':')) {\n        //       const value = allParams[name];\n        //       if (value === undefined && p.endsWith('?')) {\n        //         // Optional params without value assigned in route.params should be ignored\n        //         return '';\n        //       }\n        //       // Valid characters according to\n        //       // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n        //       return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, (char) =>\n        //         encodeURIComponent(char)\n        //       );\n        //     }\n        //     return encodeURIComponent(p);\n        //   })\n        //   .join('/');\n        // } else {\n      } else if (!route.name.startsWith('+')) {\n        path += encodeURIComponent(route.name);\n      }\n      // END FORK\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (var param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n        // START FORK\n        delete focusedParams['#'];\n        // END FORK\n        var query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      current = route.state;\n    };\n    while (current) {\n      _loop();\n    }\n    // Remove multiple as well as trailing slashes\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n    // Include the root path if specified\n    if (options?.path) {\n      path = joinPaths(options.path, path);\n    }\n    // START FORK\n    path = expo.appendBaseUrl(path);\n    if (allParams['#']) {\n      path += `#${allParams['#']}`;\n    }\n    // END FORK\n    // START FORK\n    return {\n      path,\n      params: allParams\n    };\n    // END FORK\n  }\n  // const getParamName = (pattern: string) => pattern.replace(/^:/, '').replace(/\\?$/, '');\n  var joinPaths = function () {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  };\n  var createConfigItem = (config, parentPattern) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var _pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      return {\n        pattern: _pattern\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    var pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n    return {\n      // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n      pattern: pattern?.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens\n    };\n  };\n  var createNormalizedConfigs = (options, pattern) => Object.fromEntries(Object.entries(options).map(_ref => {\n    var _ref2 = _slicedToArray(_ref, 2),\n      name = _ref2[0],\n      c = _ref2[1];\n    var result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n  function appendBaseUrl(path) {\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (process.env.NODE_ENV !== 'development') {\n      if (baseUrl) {\n        return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n      }\n    }\n    return path;\n  }\n});","lineCount":347,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[5,2,2,0],[5,6,2,4,"__createBinding"],[5,21,2,19],[5,24,2,23],[5,28,2,27],[5,32,2,31],[5,36,2,35],[5,37,2,36,"__createBinding"],[5,52,2,51],[5,57,2,57,"Object"],[5,63,2,63],[5,64,2,64,"create"],[5,70,2,70],[5,73,2,74],[5,83,2,83,"o"],[5,84,2,84],[5,86,2,86,"m"],[5,87,2,87],[5,89,2,89,"k"],[5,90,2,90],[5,92,2,92,"k2"],[5,94,2,94],[5,96,2,96],[6,4,3,4],[6,8,3,8,"k2"],[6,10,3,10],[6,15,3,15,"undefined"],[6,24,3,24],[6,26,3,26,"k2"],[6,28,3,28],[6,31,3,31,"k"],[6,32,3,32],[7,4,4,4],[7,8,4,8,"desc"],[7,12,4,12],[7,15,4,15,"Object"],[7,21,4,21],[7,22,4,22,"getOwnPropertyDescriptor"],[7,46,4,46],[7,47,4,47,"m"],[7,48,4,48],[7,50,4,50,"k"],[7,51,4,51],[7,52,4,52],[8,4,5,4],[8,8,5,8],[8,9,5,9,"desc"],[8,13,5,13],[8,18,5,18],[8,23,5,23],[8,27,5,27,"desc"],[8,31,5,31],[8,34,5,34],[8,35,5,35,"m"],[8,36,5,36],[8,37,5,37,"__esModule"],[8,47,5,47],[8,50,5,50,"desc"],[8,54,5,54],[8,55,5,55,"writable"],[8,63,5,63],[8,67,5,67,"desc"],[8,71,5,71],[8,72,5,72,"configurable"],[8,84,5,84],[8,85,5,85],[8,87,5,87],[9,6,6,6,"desc"],[9,10,6,10],[9,13,6,13],[10,8,6,15,"enumerable"],[10,18,6,25],[10,20,6,27],[10,24,6,31],[11,8,6,33,"get"],[11,11,6,36],[11,13,6,38],[11,22,6,38,"get"],[11,23,6,38],[11,25,6,49],[12,10,6,51],[12,17,6,58,"m"],[12,18,6,59],[12,19,6,60,"k"],[12,20,6,61],[12,21,6,62],[13,8,6,64],[14,6,6,66],[14,7,6,67],[15,4,7,4],[16,4,8,4,"Object"],[16,10,8,10],[16,11,8,11,"defineProperty"],[16,25,8,25],[16,26,8,26,"o"],[16,27,8,27],[16,29,8,29,"k2"],[16,31,8,31],[16,33,8,33,"desc"],[16,37,8,37],[16,38,8,38],[17,2,9,0],[17,3,9,1],[17,6,9,6],[17,16,9,15,"o"],[17,17,9,16],[17,19,9,18,"m"],[17,20,9,19],[17,22,9,21,"k"],[17,23,9,22],[17,25,9,24,"k2"],[17,27,9,26],[17,29,9,28],[18,4,10,4],[18,8,10,8,"k2"],[18,10,10,10],[18,15,10,15,"undefined"],[18,24,10,24],[18,26,10,26,"k2"],[18,28,10,28],[18,31,10,31,"k"],[18,32,10,32],[19,4,11,4,"o"],[19,5,11,5],[19,6,11,6,"k2"],[19,8,11,8],[19,9,11,9],[19,12,11,12,"m"],[19,13,11,13],[19,14,11,14,"k"],[19,15,11,15],[19,16,11,16],[20,2,12,0],[20,3,12,2],[20,4,12,3],[21,2,13,0],[21,6,13,4,"__setModuleDefault"],[21,24,13,22],[21,27,13,26],[21,31,13,30],[21,35,13,34],[21,39,13,38],[21,40,13,39,"__setModuleDefault"],[21,58,13,57],[21,63,13,63,"Object"],[21,69,13,69],[21,70,13,70,"create"],[21,76,13,76],[21,79,13,80],[21,89,13,89,"o"],[21,90,13,90],[21,92,13,92,"v"],[21,93,13,93],[21,95,13,95],[22,4,14,4,"Object"],[22,10,14,10],[22,11,14,11,"defineProperty"],[22,25,14,25],[22,26,14,26,"o"],[22,27,14,27],[22,29,14,29],[22,38,14,38],[22,40,14,40],[23,6,14,42,"enumerable"],[23,16,14,52],[23,18,14,54],[23,22,14,58],[24,6,14,60,"value"],[24,11,14,65],[24,13,14,67,"v"],[25,4,14,69],[25,5,14,70],[25,6,14,71],[26,2,15,0],[26,3,15,1],[26,6,15,5],[26,16,15,14,"o"],[26,17,15,15],[26,19,15,17,"v"],[26,20,15,18],[26,22,15,20],[27,4,16,4,"o"],[27,5,16,5],[27,6,16,6],[27,15,16,15],[27,16,16,16],[27,19,16,19,"v"],[27,20,16,20],[28,2,17,0],[28,3,17,1],[28,4,17,2],[29,2,18,0],[29,6,18,4,"__importStar"],[29,18,18,16],[29,21,18,20],[29,25,18,24],[29,29,18,28],[29,33,18,32],[29,34,18,33,"__importStar"],[29,46,18,45],[29,50,18,51],[29,62,18,63],[30,4,19,4],[30,8,19,8,"ownKeys"],[30,15,19,15],[30,18,19,18],[30,27,19,18,"ownKeys"],[30,28,19,27,"o"],[30,29,19,28],[30,31,19,30],[31,6,20,8,"ownKeys"],[31,13,20,15],[31,16,20,18,"Object"],[31,22,20,24],[31,23,20,25,"getOwnPropertyNames"],[31,42,20,44],[31,46,20,48],[31,56,20,58,"o"],[31,57,20,59],[31,59,20,61],[32,8,21,12],[32,12,21,16,"ar"],[32,14,21,18],[32,17,21,21],[32,19,21,23],[33,8,22,12],[33,13,22,17],[33,17,22,21,"k"],[33,18,22,22],[33,22,22,26,"o"],[33,23,22,27],[33,25,22,29],[33,29,22,33,"Object"],[33,35,22,39],[33,36,22,40,"prototype"],[33,45,22,49],[33,46,22,50,"hasOwnProperty"],[33,60,22,64],[33,61,22,65,"call"],[33,65,22,69],[33,66,22,70,"o"],[33,67,22,71],[33,69,22,73,"k"],[33,70,22,74],[33,71,22,75],[33,73,22,77,"ar"],[33,75,22,79],[33,76,22,80,"ar"],[33,78,22,82],[33,79,22,83,"length"],[33,85,22,89],[33,86,22,90],[33,89,22,93,"k"],[33,90,22,94],[34,8,23,12],[34,15,23,19,"ar"],[34,17,23,21],[35,6,24,8],[35,7,24,9],[36,6,25,8],[36,13,25,15,"ownKeys"],[36,20,25,22],[36,21,25,23,"o"],[36,22,25,24],[36,23,25,25],[37,4,26,4],[37,5,26,5],[38,4,27,4],[38,11,27,11],[38,21,27,21,"mod"],[38,24,27,24],[38,26,27,26],[39,6,28,8],[39,10,28,12,"mod"],[39,13,28,15],[39,17,28,19,"mod"],[39,20,28,22],[39,21,28,23,"__esModule"],[39,31,28,33],[39,33,28,35],[39,40,28,42,"mod"],[39,43,28,45],[40,6,29,8],[40,10,29,12,"result"],[40,16,29,18],[40,19,29,21],[40,20,29,22],[40,21,29,23],[41,6,30,8],[41,10,30,12,"mod"],[41,13,30,15],[41,17,30,19],[41,21,30,23],[41,23,30,25],[41,28,30,30],[41,32,30,34,"k"],[41,33,30,35],[41,36,30,38,"ownKeys"],[41,43,30,45],[41,44,30,46,"mod"],[41,47,30,49],[41,48,30,50],[41,50,30,52,"i"],[41,51,30,53],[41,54,30,56],[41,55,30,57],[41,57,30,59,"i"],[41,58,30,60],[41,61,30,63,"k"],[41,62,30,64],[41,63,30,65,"length"],[41,69,30,71],[41,71,30,73,"i"],[41,72,30,74],[41,74,30,76],[41,76,30,78],[41,80,30,82,"k"],[41,81,30,83],[41,82,30,84,"i"],[41,83,30,85],[41,84,30,86],[41,89,30,91],[41,98,30,100],[41,100,30,102,"__createBinding"],[41,115,30,117],[41,116,30,118,"result"],[41,122,30,124],[41,124,30,126,"mod"],[41,127,30,129],[41,129,30,131,"k"],[41,130,30,132],[41,131,30,133,"i"],[41,132,30,134],[41,133,30,135],[41,134,30,136],[42,6,31,8,"__setModuleDefault"],[42,24,31,26],[42,25,31,27,"result"],[42,31,31,33],[42,33,31,35,"mod"],[42,36,31,38],[42,37,31,39],[43,6,32,8],[43,13,32,15,"result"],[43,19,32,21],[44,4,33,4],[44,5,33,5],[45,2,34,0],[45,3,34,1],[45,4,34,3],[45,5,34,4],[46,2,35,0,"Object"],[46,8,35,6],[46,9,35,7,"defineProperty"],[46,23,35,21],[46,24,35,22,"exports"],[46,31,35,29],[46,33,35,31],[46,45,35,43],[46,47,35,45],[47,4,35,47,"value"],[47,9,35,52],[47,11,35,54],[48,2,35,59],[48,3,35,60],[48,4,35,61],[49,2,36,0,"exports"],[49,9,36,7],[49,10,36,8,"getPathFromState"],[49,26,36,24],[49,29,36,27,"getPathFromState"],[49,45,36,43],[50,2,37,0,"exports"],[50,9,37,7],[50,10,37,8,"getPathDataFromState"],[50,30,37,28],[50,33,37,31,"getPathDataFromState"],[50,53,37,51],[51,2,38,0,"exports"],[51,9,38,7],[51,10,38,8,"appendBaseUrl"],[51,23,38,21],[51,26,38,24,"appendBaseUrl"],[51,39,38,37],[52,2,39,0],[52,6,39,6,"queryString"],[52,17,39,17],[52,20,39,20,"__importStar"],[52,32,39,32],[52,33,39,33,"require"],[52,40,39,40],[52,41,39,40,"_dependencyMap"],[52,55,39,40],[52,74,39,55],[52,75,39,56],[52,76,39,57],[53,2,40,0],[53,6,40,6,"expo"],[53,10,40,10],[53,13,40,13,"__importStar"],[53,25,40,25],[53,26,40,26,"require"],[53,33,40,33],[53,34,40,33,"_dependencyMap"],[53,48,40,33],[53,79,40,60],[53,80,40,61],[53,81,40,62],[54,2,41,0],[55,2,42,0],[55,6,42,6,"getActiveRoute"],[55,20,42,20],[55,23,42,24,"state"],[55,28,42,29],[55,32,42,34],[56,4,43,4],[56,8,43,10,"route"],[56,13,43,15],[56,16,43,18],[56,23,43,25,"state"],[56,28,43,30],[56,29,43,31,"index"],[56,34,43,36],[56,39,43,41],[56,47,43,49],[56,50,44,10,"state"],[56,55,44,15],[56,56,44,16,"routes"],[56,62,44,22],[56,63,44,23,"state"],[56,68,44,28],[56,69,44,29,"index"],[56,74,44,34],[56,75,44,35],[56,78,45,10,"state"],[56,83,45,15],[56,84,45,16,"routes"],[56,90,45,22],[56,91,45,23,"state"],[56,96,45,28],[56,97,45,29,"routes"],[56,103,45,35],[56,104,45,36,"length"],[56,110,45,42],[56,113,45,45],[56,114,45,46],[56,115,45,47],[57,4,46,4],[57,8,46,8,"route"],[57,13,46,13],[57,14,46,14,"state"],[57,19,46,19],[57,21,46,21],[58,6,47,8],[58,13,47,15,"getActiveRoute"],[58,27,47,29],[58,28,47,30,"route"],[58,33,47,35],[58,34,47,36,"state"],[58,39,47,41],[58,40,47,42],[59,4,48,4],[60,4,49,4],[60,11,49,11,"route"],[60,16,49,16],[61,2,50,0],[61,3,50,1],[62,2,51,0],[62,6,51,4,"cachedNormalizedConfigs"],[62,29,51,27],[62,32,51,30],[62,33,52,4,"undefined"],[62,42,52,13],[62,44,53,4],[62,45,53,5],[62,46,53,6],[62,47,54,1],[63,2,55,0],[64,0,56,0],[65,0,57,0],[66,0,58,0],[67,0,59,0],[68,0,60,0],[69,0,61,0],[70,0,62,0],[71,0,63,0],[72,0,64,0],[73,0,65,0],[74,0,66,0],[75,0,67,0],[76,0,68,0],[77,0,69,0],[78,0,70,0],[79,0,71,0],[80,0,72,0],[81,0,73,0],[82,0,74,0],[83,0,75,0],[84,0,76,0],[85,0,77,0],[86,0,78,0],[87,0,79,0],[88,0,80,0],[89,0,81,0],[90,0,82,0],[91,0,83,0],[92,2,84,0],[92,11,84,9,"getPathFromState"],[92,27,84,25,"getPathFromState"],[92,28,84,26,"state"],[92,33,84,31],[92,35,84,33,"options"],[92,42,84,40],[92,44,84,42],[93,4,85,4],[93,11,85,11,"getPathDataFromState"],[93,31,85,31],[93,32,85,32,"state"],[93,37,85,37],[93,39,85,39,"options"],[93,46,85,46],[93,47,85,47],[93,48,85,48,"path"],[93,52,85,52],[94,2,86,0],[95,2,87,0],[95,11,87,9,"getPathDataFromState"],[95,31,87,29,"getPathDataFromState"],[95,32,87,30,"state"],[95,37,87,35],[95,39,87,37,"options"],[95,46,87,44],[95,48,87,46],[96,4,88,4],[96,8,88,8,"state"],[96,13,88,13],[96,17,88,17],[96,21,88,21],[96,23,88,23],[97,6,89,8],[97,12,89,14,"Error"],[97,17,89,19],[97,18,89,20],[97,97,89,99],[97,98,89,100],[98,4,90,4],[99,4,91,4],[99,8,91,8,"options"],[99,15,91,15],[99,17,91,17],[100,6,92,8],[101,6,93,8,"expo"],[101,10,93,12],[101,11,93,13,"validatePathConfig"],[101,29,93,31],[101,30,93,32,"options"],[101,37,93,39],[101,38,93,40],[102,6,94,8],[103,6,95,8],[104,4,96,4],[105,4,97,4],[106,4,98,4],[106,8,98,8,"cachedNormalizedConfigs"],[106,31,98,31],[106,32,98,32],[106,33,98,33],[106,34,98,34],[106,39,98,39,"options"],[106,46,98,46],[106,48,98,48,"screens"],[106,55,98,55],[106,57,98,57],[107,6,99,8,"cachedNormalizedConfigs"],[107,29,99,31],[107,32,99,34],[107,33,100,12,"options"],[107,40,100,19],[107,42,100,21,"screens"],[107,49,100,28],[107,51,101,12,"options"],[107,58,101,19],[107,60,101,21,"screens"],[107,67,101,28],[107,70,101,31,"createNormalizedConfigs"],[107,93,101,54],[107,94,101,55,"options"],[107,101,101,62],[107,102,101,63,"screens"],[107,109,101,70],[107,110,101,71],[107,113,101,74],[107,114,101,75],[107,115,101,76],[107,116,102,9],[108,4,103,4],[109,4,104,4],[109,8,104,10,"configs"],[109,15,104,17],[109,18,104,20,"cachedNormalizedConfigs"],[109,41,104,43],[109,42,104,44],[109,43,104,45],[109,44,104,46],[110,4,105,4],[110,8,105,8,"path"],[110,12,105,12],[110,15,105,15],[110,18,105,18],[111,4,106,4],[111,8,106,8,"current"],[111,15,106,15],[111,18,106,18,"state"],[111,23,106,23],[112,4,107,4],[112,8,107,10,"allParams"],[112,17,107,19],[112,20,107,22],[112,21,107,23],[112,22,107,24],[113,4,107,25],[113,8,107,25,"_loop"],[113,13,107,25],[113,25,107,25,"_loop"],[113,26,107,25],[113,28,108,20],[114,6,109,8],[114,10,109,12,"index"],[114,15,109,17],[114,18,109,20],[114,25,109,27,"current"],[114,32,109,34],[114,33,109,35,"index"],[114,38,109,40],[114,43,109,45],[114,51,109,53],[114,54,109,56,"current"],[114,61,109,63],[114,62,109,64,"index"],[114,67,109,69],[114,70,109,72],[114,71,109,73],[115,6,110,8],[115,10,110,12,"route"],[115,15,110,17],[115,18,110,20,"current"],[115,25,110,27],[115,26,110,28,"routes"],[115,32,110,34],[115,33,110,35,"index"],[115,38,110,40],[115,39,110,41],[116,6,111,8],[116,10,111,12,"pattern"],[116,17,111,19],[117,6,112,8],[117,10,112,12,"focusedParams"],[117,23,112,25],[118,6,113,8],[118,10,113,14,"focusedRoute"],[118,22,113,26],[118,25,113,29,"getActiveRoute"],[118,39,113,43],[118,40,113,44,"state"],[118,45,113,49],[118,46,113,50],[119,6,114,8],[119,10,114,12,"currentOptions"],[119,24,114,26],[119,27,114,29,"configs"],[119,34,114,36],[120,6,115,8],[121,6,116,8],[121,10,116,14,"nestedRouteNames"],[121,26,116,30],[121,29,116,33],[121,31,116,35],[122,6,117,8],[122,10,117,12,"hasNext"],[122,17,117,19],[122,20,117,22],[122,24,117,26],[123,6,118,8],[123,13,118,15,"route"],[123,18,118,20],[123,19,118,21,"name"],[123,23,118,25],[123,27,118,29,"currentOptions"],[123,41,118,43],[123,45,118,47,"hasNext"],[123,52,118,54],[123,54,118,56],[124,8,119,12,"pattern"],[124,15,119,19],[124,18,119,22,"currentOptions"],[124,32,119,36],[124,33,119,37,"route"],[124,38,119,42],[124,39,119,43,"name"],[124,43,119,47],[124,44,119,48],[124,45,119,49,"pattern"],[124,52,119,56],[125,8,120,12,"nestedRouteNames"],[125,24,120,28],[125,25,120,29,"push"],[125,29,120,33],[125,30,120,34,"route"],[125,35,120,39],[125,36,120,40,"name"],[125,40,120,44],[125,41,120,45],[126,8,121,12],[126,12,121,16,"route"],[126,17,121,21],[126,18,121,22,"params"],[126,24,121,28],[126,26,121,30],[127,10,122,16],[127,14,122,22,"stringify"],[127,23,122,31],[127,26,122,34,"currentOptions"],[127,40,122,48],[127,41,122,49,"route"],[127,46,122,54],[127,47,122,55,"name"],[127,51,122,59],[127,52,122,60],[127,54,122,62,"stringify"],[127,63,122,71],[128,10,123,16],[129,10,124,16],[130,10,125,16],[130,14,125,22,"currentParams"],[130,27,125,35],[130,30,125,38,"expo"],[130,34,125,42],[130,35,125,43,"fixCurrentParams"],[130,51,125,59],[130,52,125,60,"allParams"],[130,61,125,69],[130,63,125,71,"route"],[130,68,125,76],[130,70,125,78,"stringify"],[130,79,125,87],[130,80,125,88],[131,10,126,16],[132,10,127,16],[133,10,128,16],[134,10,129,16],[135,10,130,16],[136,10,131,16],[137,10,132,16],[138,10,133,16],[139,10,134,16],[140,10,135,16],[141,10,136,16],[141,14,136,20,"focusedRoute"],[141,26,136,32],[141,31,136,37,"route"],[141,36,136,42],[141,38,136,44],[142,12,137,20],[143,12,138,20],[144,12,139,20,"focusedParams"],[144,25,139,33],[144,28,139,36],[145,14,139,38],[145,17,139,41,"currentParams"],[146,12,139,55],[146,13,139,56],[147,12,140,20,"pattern"],[147,19,140,27],[147,21,141,26,"split"],[147,26,141,31],[147,27,141,32],[147,30,141,35],[147,31,141,36],[147,32,142,25,"filter"],[147,38,142,31],[147,39,142,33,"p"],[147,40,142,34],[147,44,142,39,"expo"],[147,48,142,43],[147,49,142,44,"isDynamicPart"],[147,62,142,57],[147,63,142,58,"p"],[147,64,142,59],[147,65,142,60],[148,12,143,24],[149,12,143,24],[149,13,144,25,"forEach"],[149,20,144,32],[149,21,144,34,"p"],[149,22,144,35],[149,26,144,40],[150,14,145,24],[150,18,145,30,"name"],[150,22,145,34],[150,25,145,37,"expo"],[150,29,145,41],[150,30,145,42,"getParamName"],[150,42,145,54],[150,43,145,55,"p"],[150,44,145,56],[150,45,145,57],[151,14,146,24],[152,14,147,24],[152,18,147,28,"focusedParams"],[152,31,147,41],[152,33,147,43],[153,16,148,28],[154,16,149,28],[154,23,149,35,"focusedParams"],[154,36,149,48],[154,37,149,49,"name"],[154,41,149,53],[154,42,149,54],[155,14,150,24],[156,12,151,20],[156,13,151,21],[156,14,151,22],[157,10,152,16],[158,8,153,12],[159,8,154,12],[160,8,155,12],[160,12,155,16],[160,13,155,17,"currentOptions"],[160,27,155,31],[160,28,155,32,"route"],[160,33,155,37],[160,34,155,38,"name"],[160,38,155,42],[160,39,155,43],[160,40,155,44,"screens"],[160,47,155,51],[160,51,155,55,"route"],[160,56,155,60],[160,57,155,61,"state"],[160,62,155,66],[160,67,155,71,"undefined"],[160,76,155,80],[160,78,155,82],[161,10,156,16],[162,10,157,16],[163,10,158,16],[164,10,159,16],[165,10,160,16],[166,10,161,16],[167,10,162,16],[168,10,163,16],[169,10,164,16],[170,10,165,16],[171,10,166,16],[172,10,167,16],[173,10,168,16],[174,10,169,16],[175,10,170,16],[176,10,171,16],[176,14,171,22,"screens"],[176,21,171,29],[176,24,171,32,"currentOptions"],[176,38,171,46],[176,39,171,47,"route"],[176,44,171,52],[176,45,171,53,"name"],[176,49,171,57],[176,50,171,58],[176,51,171,59,"screens"],[176,58,171,66],[177,10,172,16],[178,10,173,16],[179,10,174,16],[179,14,174,22,"targetScreen"],[179,26,174,34],[180,10,175,16],[181,10,176,16,"route"],[181,15,176,21],[181,16,176,22,"params"],[181,22,176,28],[181,26,176,32],[181,34,176,40],[181,38,176,44,"route"],[181,43,176,49],[181,44,176,50,"params"],[181,50,176,56],[181,54,176,60],[181,61,176,67,"route"],[181,66,176,72],[181,67,176,73,"params"],[181,73,176,79],[181,74,176,80,"screen"],[181,80,176,86],[181,85,176,91],[181,93,176,99],[181,96,177,22,"route"],[181,101,177,27],[181,102,177,28,"params"],[181,108,177,34],[181,109,177,35,"screen"],[181,115,177,41],[181,118,178,22],[181,125,178,29],[182,10,179,16],[183,10,180,16],[184,10,181,16],[185,10,182,16],[185,14,182,22,"screen"],[185,20,182,28],[185,23,182,31,"screens"],[185,30,182,38],[185,33,183,22,"screens"],[185,40,183,29],[185,41,183,30,"targetScreen"],[185,53,183,42],[185,54,183,43],[185,57,184,26,"targetScreen"],[185,69,184,38],[185,72,185,26,"Object"],[185,78,185,32],[185,79,185,33,"keys"],[185,83,185,37],[185,84,185,38,"screens"],[185,91,185,45],[185,92,185,46],[185,93,185,47],[185,94,185,48],[185,95,185,49],[185,98,186,22,"undefined"],[185,107,186,31],[186,10,187,16],[186,14,187,20,"screen"],[186,20,187,26],[186,24,187,30,"screens"],[186,31,187,37],[186,35,187,41,"currentOptions"],[186,49,187,55],[186,50,187,56,"route"],[186,55,187,61],[186,56,187,62,"name"],[186,60,187,66],[186,61,187,67],[186,62,187,68,"screens"],[186,69,187,75],[186,72,187,78,"screen"],[186,78,187,84],[186,79,187,85],[186,81,187,87],[187,12,188,20,"route"],[187,17,188,25],[187,20,188,28],[188,14,188,30],[188,17,188,33,"screens"],[188,24,188,40],[188,25,188,41,"screen"],[188,31,188,47],[188,32,188,48],[189,14,188,50,"name"],[189,18,188,54],[189,20,188,56,"screen"],[189,26,188,62],[190,14,188,64,"key"],[190,17,188,67],[190,19,188,69,"screen"],[191,12,188,76],[191,13,188,77],[192,12,189,20,"currentOptions"],[192,26,189,34],[192,29,189,37,"screens"],[192,36,189,44],[193,10,190,16],[193,11,190,17],[193,17,191,21],[194,12,192,20,"hasNext"],[194,19,192,27],[194,22,192,30],[194,27,192,35],[195,10,193,16],[196,10,194,16],[197,10,195,16],[198,8,196,12],[198,9,196,13],[198,15,197,17],[199,10,198,16,"index"],[199,15,198,21],[199,18,199,20],[199,25,199,27,"route"],[199,30,199,32],[199,31,199,33,"state"],[199,36,199,38],[199,37,199,39,"index"],[199,42,199,44],[199,47,199,49],[199,55,199,57],[199,58,199,60,"route"],[199,63,199,65],[199,64,199,66,"state"],[199,69,199,71],[199,70,199,72,"index"],[199,75,199,77],[199,78,199,80,"route"],[199,83,199,85],[199,84,199,86,"state"],[199,89,199,91],[199,90,199,92,"routes"],[199,96,199,98],[199,97,199,99,"length"],[199,103,199,105],[199,106,199,108],[199,107,199,109],[200,10,200,16],[200,14,200,22,"nextRoute"],[200,23,200,31],[200,26,200,34,"route"],[200,31,200,39],[200,32,200,40,"state"],[200,37,200,45],[200,38,200,46,"routes"],[200,44,200,52],[200,45,200,53,"index"],[200,50,200,58],[200,51,200,59],[201,10,201,16],[201,14,201,22,"nestedConfig"],[201,26,201,34],[201,29,201,37,"currentOptions"],[201,43,201,51],[201,44,201,52,"route"],[201,49,201,57],[201,50,201,58,"name"],[201,54,201,62],[201,55,201,63],[201,56,201,64,"screens"],[201,63,201,71],[202,10,202,16],[203,10,203,16],[203,14,203,20,"nestedConfig"],[203,26,203,32],[203,30,203,36,"nextRoute"],[203,39,203,45],[203,40,203,46,"name"],[203,44,203,50],[203,48,203,54,"nestedConfig"],[203,60,203,66],[203,62,203,68],[204,12,204,20,"route"],[204,17,204,25],[204,20,204,28,"nextRoute"],[204,29,204,37],[205,12,205,20,"currentOptions"],[205,26,205,34],[205,29,205,37,"nestedConfig"],[205,41,205,49],[206,10,206,16],[206,11,206,17],[206,17,207,21],[207,12,208,20],[208,12,209,20,"hasNext"],[208,19,209,27],[208,22,209,30],[208,27,209,35],[209,10,210,16],[210,8,211,12],[211,6,212,8],[212,6,213,8],[212,10,213,12,"pattern"],[212,17,213,19],[212,22,213,24,"undefined"],[212,31,213,33],[212,33,213,35],[213,8,214,12,"pattern"],[213,15,214,19],[213,18,214,22,"nestedRouteNames"],[213,34,214,38],[213,35,214,39,"join"],[213,39,214,43],[213,40,214,44],[213,43,214,47],[213,44,214,48],[214,6,215,8],[215,6,216,8],[215,10,216,12,"currentOptions"],[215,24,216,26],[215,25,216,27,"route"],[215,30,216,32],[215,31,216,33,"name"],[215,35,216,37],[215,36,216,38],[215,41,216,43,"undefined"],[215,50,216,52],[215,52,216,54],[216,8,217,12],[217,8,218,12,"path"],[217,12,218,16],[217,16,218,20,"expo"],[217,20,218,24],[217,21,218,25,"getPathWithConventionsCollapsed"],[217,52,218,56],[217,53,218,57],[218,10,219,16],[218,13,219,19,"options"],[218,20,219,26],[219,10,220,16,"pattern"],[219,17,220,23],[220,10,221,16,"route"],[220,15,221,21],[221,10,222,16,"params"],[221,16,222,22],[221,18,222,24,"allParams"],[221,27,222,33],[222,10,223,16,"initialRouteName"],[222,26,223,32],[222,28,223,34,"configs"],[222,35,223,41],[222,36,223,42,"route"],[222,41,223,47],[222,42,223,48,"name"],[222,46,223,52],[222,47,223,53],[222,49,223,55,"initialRouteName"],[223,8,224,12],[223,9,224,13],[223,10,224,14],[224,8,225,12],[225,8,226,12],[226,8,227,12],[227,8,228,12],[228,8,229,12],[229,8,230,12],[230,8,231,12],[231,8,232,12],[232,8,233,12],[233,8,234,12],[234,8,235,12],[235,8,236,12],[236,8,237,12],[237,8,238,12],[238,8,239,12],[239,8,240,12],[240,8,241,12],[241,8,242,12],[242,8,243,12],[243,8,244,12],[244,8,245,12],[245,8,246,12],[246,8,247,12],[247,8,248,12],[248,8,249,12],[249,8,250,12],[250,8,251,12],[251,6,252,8],[251,7,252,9],[251,13,253,13],[251,17,253,17],[251,18,253,18,"route"],[251,23,253,23],[251,24,253,24,"name"],[251,28,253,28],[251,29,253,29,"startsWith"],[251,39,253,39],[251,40,253,40],[251,43,253,43],[251,44,253,44],[251,46,253,46],[252,8,254,12,"path"],[252,12,254,16],[252,16,254,20,"encodeURIComponent"],[252,34,254,38],[252,35,254,39,"route"],[252,40,254,44],[252,41,254,45,"name"],[252,45,254,49],[252,46,254,50],[253,6,255,8],[254,6,256,8],[255,6,257,8],[255,10,257,12],[255,11,257,13,"focusedParams"],[255,24,257,26],[255,26,257,28],[256,8,258,12,"focusedParams"],[256,21,258,25],[256,24,258,28,"focusedRoute"],[256,36,258,40],[256,37,258,41,"params"],[256,43,258,47],[257,6,259,8],[258,6,260,8],[258,10,260,12,"route"],[258,15,260,17],[258,16,260,18,"state"],[258,21,260,23],[258,23,260,25],[259,8,261,12,"path"],[259,12,261,16],[259,16,261,20],[259,19,261,23],[260,6,262,8],[260,7,262,9],[260,13,263,13],[260,17,263,17,"focusedParams"],[260,30,263,30],[260,32,263,32],[261,8,264,12],[261,13,264,17],[261,17,264,23,"param"],[261,22,264,28],[261,26,264,32,"focusedParams"],[261,39,264,45],[261,41,264,47],[262,10,265,16],[262,14,265,20,"focusedParams"],[262,27,265,33],[262,28,265,34,"param"],[262,33,265,39],[262,34,265,40],[262,39,265,45],[262,50,265,56],[262,52,265,58],[263,12,266,20],[264,12,267,20],[264,19,267,27,"focusedParams"],[264,32,267,40],[264,33,267,41,"param"],[264,38,267,46],[264,39,267,47],[265,10,268,16],[266,8,269,12],[267,8,270,12],[268,8,271,12],[268,15,271,19,"focusedParams"],[268,28,271,32],[268,29,271,33],[268,32,271,36],[268,33,271,37],[269,8,272,12],[270,8,273,12],[270,12,273,18,"query"],[270,17,273,23],[270,20,273,26,"queryString"],[270,31,273,37],[270,32,273,38,"stringify"],[270,41,273,47],[270,42,273,48,"focusedParams"],[270,55,273,61],[270,57,273,63],[271,10,273,65,"sort"],[271,14,273,69],[271,16,273,71],[272,8,273,77],[272,9,273,78],[272,10,273,79],[273,8,274,12],[273,12,274,16,"query"],[273,17,274,21],[273,19,274,23],[274,10,275,16,"path"],[274,14,275,20],[274,18,275,24],[274,22,275,28,"query"],[274,27,275,33],[274,29,275,35],[275,8,276,12],[276,6,277,8],[277,6,278,8,"current"],[277,13,278,15],[277,16,278,18,"route"],[277,21,278,23],[277,22,278,24,"state"],[277,27,278,29],[278,4,279,4],[278,5,279,5],[279,4,108,4],[279,11,108,11,"current"],[279,18,108,18],[280,6,108,18,"_loop"],[280,11,108,18],[281,4,108,18],[282,4,280,4],[283,4,281,4,"path"],[283,8,281,8],[283,11,281,11,"path"],[283,15,281,15],[283,16,281,16,"replace"],[283,23,281,23],[283,24,281,24],[283,30,281,30],[283,32,281,32],[283,35,281,35],[283,36,281,36],[284,4,282,4,"path"],[284,8,282,8],[284,11,282,11,"path"],[284,15,282,15],[284,16,282,16,"length"],[284,22,282,22],[284,25,282,25],[284,26,282,26],[284,29,282,29,"path"],[284,33,282,33],[284,34,282,34,"replace"],[284,41,282,41],[284,42,282,42],[284,47,282,47],[284,49,282,49],[284,51,282,51],[284,52,282,52],[284,55,282,55,"path"],[284,59,282,59],[285,4,283,4],[286,4,284,4],[286,8,284,8,"options"],[286,15,284,15],[286,17,284,17,"path"],[286,21,284,21],[286,23,284,23],[287,6,285,8,"path"],[287,10,285,12],[287,13,285,15,"joinPaths"],[287,22,285,24],[287,23,285,25,"options"],[287,30,285,32],[287,31,285,33,"path"],[287,35,285,37],[287,37,285,39,"path"],[287,41,285,43],[287,42,285,44],[288,4,286,4],[289,4,287,4],[290,4,288,4,"path"],[290,8,288,8],[290,11,288,11,"expo"],[290,15,288,15],[290,16,288,16,"appendBaseUrl"],[290,29,288,29],[290,30,288,30,"path"],[290,34,288,34],[290,35,288,35],[291,4,289,4],[291,8,289,8,"allParams"],[291,17,289,17],[291,18,289,18],[291,21,289,21],[291,22,289,22],[291,24,289,24],[292,6,290,8,"path"],[292,10,290,12],[292,14,290,16],[292,18,290,20,"allParams"],[292,27,290,29],[292,28,290,30],[292,31,290,33],[292,32,290,34],[292,34,290,36],[293,4,291,4],[294,4,292,4],[295,4,293,4],[296,4,294,4],[296,11,294,11],[297,6,294,13,"path"],[297,10,294,17],[298,6,294,19,"params"],[298,12,294,25],[298,14,294,27,"allParams"],[299,4,294,37],[299,5,294,38],[300,4,295,4],[301,2,296,0],[302,2,297,0],[303,2,298,0],[303,6,298,6,"joinPaths"],[303,15,298,15],[303,18,298,18],[303,27,298,18,"joinPaths"],[303,28,298,18],[304,4,298,18],[304,13,298,18,"_len"],[304,17,298,18],[304,20,298,18,"arguments"],[304,29,298,18],[304,30,298,18,"length"],[304,36,298,18],[304,38,298,22,"paths"],[304,43,298,27],[304,50,298,27,"Array"],[304,55,298,27],[304,56,298,27,"_len"],[304,60,298,27],[304,63,298,27,"_key"],[304,67,298,27],[304,73,298,27,"_key"],[304,77,298,27],[304,80,298,27,"_len"],[304,84,298,27],[304,86,298,27,"_key"],[304,90,298,27],[305,6,298,22,"paths"],[305,11,298,27],[305,12,298,27,"_key"],[305,16,298,27],[305,20,298,27,"arguments"],[305,29,298,27],[305,30,298,27,"_key"],[305,34,298,27],[306,4,298,27],[307,4,298,27],[307,11,298,32],[307,13,298,34],[307,14,299,5,"concat"],[307,20,299,11],[307,21,299,12],[307,24,299,15,"paths"],[307,29,299,20],[307,30,299,21,"map"],[307,33,299,24],[307,34,299,26,"p"],[307,35,299,27],[307,39,299,32,"p"],[307,40,299,33],[307,41,299,34,"split"],[307,46,299,39],[307,47,299,40],[307,50,299,43],[307,51,299,44],[307,52,299,45],[307,53,299,46],[307,54,300,5,"filter"],[307,60,300,11],[307,61,300,12,"Boolean"],[307,68,300,19],[307,69,300,20],[307,70,301,5,"join"],[307,74,301,9],[307,75,301,10],[307,78,301,13],[307,79,301,14],[308,2,301,14],[309,2,302,0],[309,6,302,6,"createConfigItem"],[309,22,302,22],[309,25,302,25,"createConfigItem"],[309,26,302,26,"config"],[309,32,302,32],[309,34,302,34,"parentPattern"],[309,47,302,47],[309,52,302,52],[310,4,303,4],[310,8,303,8],[310,15,303,15,"config"],[310,21,303,21],[310,26,303,26],[310,34,303,34],[310,36,303,36],[311,6,304,8],[312,6,305,8],[312,10,305,14,"pattern"],[312,18,305,21],[312,21,305,24,"parentPattern"],[312,34,305,37],[312,37,305,40,"joinPaths"],[312,46,305,49],[312,47,305,50,"parentPattern"],[312,60,305,63],[312,62,305,65,"config"],[312,68,305,71],[312,69,305,72],[312,72,305,75,"config"],[312,78,305,81],[313,6,306,8],[313,13,306,15],[314,8,306,17,"pattern"],[314,15,306,24],[314,17,306,17,"pattern"],[315,6,306,25],[315,7,306,26],[316,4,307,4],[317,4,308,4],[317,8,308,8,"config"],[317,14,308,14],[317,15,308,15,"exact"],[317,20,308,20],[317,24,308,24,"config"],[317,30,308,30],[317,31,308,31,"path"],[317,35,308,35],[317,40,308,40,"undefined"],[317,49,308,49],[317,51,308,51],[318,6,309,8],[318,12,309,14],[318,16,309,18,"Error"],[318,21,309,23],[318,22,309,24],[318,172,309,174],[318,173,309,175],[319,4,310,4],[320,4,311,4],[321,4,312,4],[322,4,313,4],[322,8,313,10,"pattern"],[322,15,313,17],[322,18,313,20,"config"],[322,24,313,26],[322,25,313,27,"exact"],[322,30,313,32],[322,35,313,37],[322,39,313,41],[322,42,313,44,"joinPaths"],[322,51,313,53],[322,52,313,54,"parentPattern"],[322,65,313,67],[322,69,313,71],[322,71,313,73],[322,73,313,75,"config"],[322,79,313,81],[322,80,313,82,"path"],[322,84,313,86],[322,88,313,90],[322,90,313,92],[322,91,313,93],[322,94,313,96,"config"],[322,100,313,102],[322,101,313,103,"path"],[322,105,313,107],[322,109,313,111],[322,111,313,113],[323,4,314,4],[323,8,314,10,"screens"],[323,15,314,17],[323,18,314,20,"config"],[323,24,314,26],[323,25,314,27,"screens"],[323,32,314,34],[323,35,314,37,"createNormalizedConfigs"],[323,58,314,60],[323,59,314,61,"config"],[323,65,314,67],[323,66,314,68,"screens"],[323,73,314,75],[323,75,314,77,"pattern"],[323,82,314,84],[323,83,314,85],[323,86,314,88,"undefined"],[323,95,314,97],[324,4,315,4],[324,11,315,11],[325,6,316,8],[326,6,317,8,"pattern"],[326,13,317,15],[326,15,317,17,"pattern"],[326,22,317,24],[326,24,317,26,"split"],[326,29,317,31],[326,30,317,32],[326,33,317,35],[326,34,317,36],[326,35,317,37,"filter"],[326,41,317,43],[326,42,317,44,"Boolean"],[326,49,317,51],[326,50,317,52],[326,51,317,53,"join"],[326,55,317,57],[326,56,317,58],[326,59,317,61],[326,60,317,62],[327,6,318,8,"stringify"],[327,15,318,17],[327,17,318,19,"config"],[327,23,318,25],[327,24,318,26,"stringify"],[327,33,318,35],[328,6,319,8,"screens"],[329,4,320,4],[329,5,320,5],[330,2,321,0],[330,3,321,1],[331,2,322,0],[331,6,322,6,"createNormalizedConfigs"],[331,29,322,29],[331,32,322,32,"createNormalizedConfigs"],[331,33,322,33,"options"],[331,40,322,40],[331,42,322,42,"pattern"],[331,49,322,49],[331,54,322,54,"Object"],[331,60,322,60],[331,61,322,61,"fromEntries"],[331,72,322,72],[331,73,322,73,"Object"],[331,79,322,79],[331,80,322,80,"entries"],[331,87,322,87],[331,88,322,88,"options"],[331,95,322,95],[331,96,322,96],[331,97,322,97,"map"],[331,100,322,100],[331,101,322,101,"_ref"],[331,105,322,101],[331,109,322,116],[332,4,322,116],[332,8,322,116,"_ref2"],[332,13,322,116],[332,16,322,116,"_slicedToArray"],[332,30,322,116],[332,31,322,116,"_ref"],[332,35,322,116],[333,6,322,103,"name"],[333,10,322,107],[333,13,322,107,"_ref2"],[333,18,322,107],[334,6,322,109,"c"],[334,7,322,110],[334,10,322,110,"_ref2"],[334,15,322,110],[335,4,323,4],[335,8,323,10,"result"],[335,14,323,16],[335,17,323,19,"createConfigItem"],[335,33,323,35],[335,34,323,36,"c"],[335,35,323,37],[335,37,323,39,"pattern"],[335,44,323,46],[335,45,323,47],[336,4,324,4],[336,11,324,11],[336,12,324,12,"name"],[336,16,324,16],[336,18,324,18,"result"],[336,24,324,24],[336,25,324,25],[337,2,325,0],[337,3,325,1],[337,4,325,2],[337,5,325,3],[338,2,326,0],[338,11,326,9,"appendBaseUrl"],[338,24,326,22,"appendBaseUrl"],[338,25,326,23,"path"],[338,29,326,27],[338,31,326,66],[339,4,326,66],[339,8,326,29,"baseUrl"],[339,15,326,36],[339,18,326,36,"arguments"],[339,27,326,36],[339,28,326,36,"length"],[339,34,326,36],[339,42,326,36,"arguments"],[339,51,326,36],[339,59,326,36,"undefined"],[339,68,326,36],[339,71,326,36,"arguments"],[339,80,326,36],[340,4,327,4],[340,8,327,8,"process"],[340,15,327,15],[340,16,327,16,"env"],[340,19,327,19],[340,20,327,20,"NODE_ENV"],[340,28,327,28],[340,33,327,33],[340,46,327,46],[340,48,327,48],[341,6,328,8],[341,10,328,12,"baseUrl"],[341,17,328,19],[341,19,328,21],[342,8,329,12],[342,15,329,19],[342,19,329,23,"baseUrl"],[342,26,329,30],[342,27,329,31,"replace"],[342,34,329,38],[342,35,329,39],[342,41,329,45],[342,43,329,47],[342,45,329,49],[342,46,329,50],[342,47,329,51,"replace"],[342,54,329,58],[342,55,329,59],[342,60,329,64],[342,62,329,66],[342,64,329,68],[342,65,329,69],[342,68,329,72,"path"],[342,72,329,76],[342,74,329,78],[343,6,330,8],[344,4,331,4],[345,4,332,4],[345,11,332,11,"path"],[345,15,332,15],[346,2,333,0],[347,0,333,1],[347,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","getActiveRoute","getPathFromState","getPathDataFromState","pattern.split.filter$argument_0","pattern.split.filter.forEach$argument_0","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs","Object.entries.map$argument_0","appendBaseUrl"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;uBIQ;CJQ;AKkC;CLE;AMC;gCCuD,4BD;iCEE;qBFO;CNiJ;kBSE;yBCC,mBD;cTE;yBWC;CXmB;gCYC,qEC;CDG,EZ;AcC;CdO"}},"type":"js/module"}]}