{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":45,"index":45}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"react-native","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":46},"end":{"line":2,"column":57,"index":103}}],"key":"KyzuX10g6ixS9UfynhmjlvCIG3g=","exportNames":["*"]}},{"name":"./AssetSourceResolver","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":104},"end":{"line":3,"column":56,"index":160}}],"key":"1XREZLfiB40YsGJEOFyn6rrYKeQ=","exportNames":["*"]}},{"name":"./PlatformUtils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":161},"end":{"line":4,"column":64,"index":225}}],"key":"vk5TSZJTws6vRpll7frKCvmMWgw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.resolveUri = resolveUri;\n  exports.selectAssetSource = selectAssetSource;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _reactNative = require(_dependencyMap[2], \"react-native\");\n  var _AssetSourceResolver = _interopRequireDefault(require(_dependencyMap[3], \"./AssetSourceResolver\"));\n  var _PlatformUtils = require(_dependencyMap[4], \"./PlatformUtils\");\n  /**\n   * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n   * a { uri, hash } pair for the specific asset file.\n   *\n   * If the asset isn't an image with multiple scales, the first file is selected.\n   */\n  function selectAssetSource(meta) {\n    // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n    // explicitly provided URIs\n    var scale = _AssetSourceResolver.default.pickScale(meta.scales, _reactNative.PixelRatio.get());\n    var index = meta.scales.findIndex(s => s === scale);\n    var hash = meta.fileHashes ? meta.fileHashes[index] ?? meta.fileHashes[0] : meta.hash;\n    // Allow asset processors to directly provide the URL to load\n    var uri = meta.fileUris ? meta.fileUris[index] ?? meta.fileUris[0] : meta.uri;\n    if (uri) {\n      return {\n        uri: resolveUri(uri),\n        hash\n      };\n    }\n    var fileScale = scale === 1 ? '' : `@${scale}x`;\n    var fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n    var suffix = `/${encodeURIComponent(meta.name)}${fileScale}${fileExtension}`;\n    var params = new URLSearchParams({\n      platform: _expoModulesCore.Platform.OS,\n      hash: meta.hash\n    });\n    // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n    // development server or production CDN URL origin\n    if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n      var _uri = meta.httpServerLocation + suffix + '?' + params;\n      return {\n        uri: _uri,\n        hash\n      };\n    }\n    // For assets during development using manifest2, we use the development server's URL origin\n    var manifest2 = (0, _PlatformUtils.getManifest2)();\n    var devServerUrl = manifest2?.extra?.expoGo?.developer ? 'http://' + manifest2.extra.expoGo.debuggerHost : null;\n    if (devServerUrl) {\n      var baseUrl = new URL(meta.httpServerLocation + suffix, devServerUrl);\n      baseUrl.searchParams.set('platform', _expoModulesCore.Platform.OS);\n      baseUrl.searchParams.set('hash', meta.hash);\n      return {\n        uri: baseUrl.href,\n        hash\n      };\n    }\n    // Temporary fallback for loading assets in Expo Go home\n    if (_reactNative.NativeModules['ExponentKernel']) {\n      return {\n        uri: `https://classic-assets.eascdn.net/~assets/${encodeURIComponent(hash)}`,\n        hash\n      };\n    }\n    // In correctly configured apps, we arrive here if the asset is locally available on disk due to\n    // being managed by expo-updates, and `getLocalAssetUri(hash)` must return a local URI for this\n    // hash. Since the asset is local, we don't have a remote URL and specify an invalid URL (an empty\n    // string) as a placeholder.\n    return {\n      uri: '',\n      hash\n    };\n  }\n  /**\n   * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n   * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n   * base URI.\n   */\n  function resolveUri(uri) {\n    // `manifestBaseUrl` is always an absolute URL or `null`.\n    return _PlatformUtils.manifestBaseUrl ? new URL(uri, _PlatformUtils.manifestBaseUrl).href : uri;\n  }\n});","lineCount":85,"map":[[8,2,1,0],[8,6,1,0,"_expoModulesCore"],[8,22,1,0],[8,25,1,0,"require"],[8,32,1,0],[8,33,1,0,"_dependencyMap"],[8,47,1,0],[9,2,2,0],[9,6,2,0,"_reactNative"],[9,18,2,0],[9,21,2,0,"require"],[9,28,2,0],[9,29,2,0,"_dependencyMap"],[9,43,2,0],[10,2,3,0],[10,6,3,0,"_AssetSourceResolver"],[10,26,3,0],[10,29,3,0,"_interopRequireDefault"],[10,51,3,0],[10,52,3,0,"require"],[10,59,3,0],[10,60,3,0,"_dependencyMap"],[10,74,3,0],[11,2,4,0],[11,6,4,0,"_PlatformUtils"],[11,20,4,0],[11,23,4,0,"require"],[11,30,4,0],[11,31,4,0,"_dependencyMap"],[11,45,4,0],[12,2,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[18,2,11,7],[18,11,11,16,"selectAssetSource"],[18,28,11,33,"selectAssetSource"],[18,29,11,34,"meta"],[18,33,11,38],[18,35,11,40],[19,4,12,4],[20,4,13,4],[21,4,14,4],[21,8,14,10,"scale"],[21,13,14,15],[21,16,14,18,"AssetSourceResolver"],[21,44,14,37],[21,45,14,38,"pickScale"],[21,54,14,47],[21,55,14,48,"meta"],[21,59,14,52],[21,60,14,53,"scales"],[21,66,14,59],[21,68,14,61,"PixelRatio"],[21,91,14,71],[21,92,14,72,"get"],[21,95,14,75],[21,96,14,76],[21,97,14,77],[21,98,14,78],[22,4,15,4],[22,8,15,10,"index"],[22,13,15,15],[22,16,15,18,"meta"],[22,20,15,22],[22,21,15,23,"scales"],[22,27,15,29],[22,28,15,30,"findIndex"],[22,37,15,39],[22,38,15,41,"s"],[22,39,15,42],[22,43,15,47,"s"],[22,44,15,48],[22,49,15,53,"scale"],[22,54,15,58],[22,55,15,59],[23,4,16,4],[23,8,16,10,"hash"],[23,12,16,14],[23,15,16,17,"meta"],[23,19,16,21],[23,20,16,22,"fileHashes"],[23,30,16,32],[23,33,16,36,"meta"],[23,37,16,40],[23,38,16,41,"fileHashes"],[23,48,16,51],[23,49,16,52,"index"],[23,54,16,57],[23,55,16,58],[23,59,16,62,"meta"],[23,63,16,66],[23,64,16,67,"fileHashes"],[23,74,16,77],[23,75,16,78],[23,76,16,79],[23,77,16,80],[23,80,16,84,"meta"],[23,84,16,88],[23,85,16,89,"hash"],[23,89,16,93],[24,4,17,4],[25,4,18,4],[25,8,18,10,"uri"],[25,11,18,13],[25,14,18,16,"meta"],[25,18,18,20],[25,19,18,21,"fileUris"],[25,27,18,29],[25,30,18,33,"meta"],[25,34,18,37],[25,35,18,38,"fileUris"],[25,43,18,46],[25,44,18,47,"index"],[25,49,18,52],[25,50,18,53],[25,54,18,57,"meta"],[25,58,18,61],[25,59,18,62,"fileUris"],[25,67,18,70],[25,68,18,71],[25,69,18,72],[25,70,18,73],[25,73,18,77,"meta"],[25,77,18,81],[25,78,18,82,"uri"],[25,81,18,85],[26,4,19,4],[26,8,19,8,"uri"],[26,11,19,11],[26,13,19,13],[27,6,20,8],[27,13,20,15],[28,8,20,17,"uri"],[28,11,20,20],[28,13,20,22,"resolveUri"],[28,23,20,32],[28,24,20,33,"uri"],[28,27,20,36],[28,28,20,37],[29,8,20,39,"hash"],[30,6,20,44],[30,7,20,45],[31,4,21,4],[32,4,22,4],[32,8,22,10,"fileScale"],[32,17,22,19],[32,20,22,22,"scale"],[32,25,22,27],[32,30,22,32],[32,31,22,33],[32,34,22,36],[32,36,22,38],[32,39,22,41],[32,43,22,45,"scale"],[32,48,22,50],[32,51,22,53],[33,4,23,4],[33,8,23,10,"fileExtension"],[33,21,23,23],[33,24,23,26,"meta"],[33,28,23,30],[33,29,23,31,"type"],[33,33,23,35],[33,36,23,38],[33,40,23,42,"encodeURIComponent"],[33,58,23,60],[33,59,23,61,"meta"],[33,63,23,65],[33,64,23,66,"type"],[33,68,23,70],[33,69,23,71],[33,71,23,73],[33,74,23,76],[33,76,23,78],[34,4,24,4],[34,8,24,10,"suffix"],[34,14,24,16],[34,17,24,19],[34,21,24,23,"encodeURIComponent"],[34,39,24,41],[34,40,24,42,"meta"],[34,44,24,46],[34,45,24,47,"name"],[34,49,24,51],[34,50,24,52],[34,53,24,55,"fileScale"],[34,62,24,64],[34,65,24,67,"fileExtension"],[34,78,24,80],[34,80,24,82],[35,4,25,4],[35,8,25,10,"params"],[35,14,25,16],[35,17,25,19],[35,21,25,23,"URLSearchParams"],[35,36,25,38],[35,37,25,39],[36,6,26,8,"platform"],[36,14,26,16],[36,16,26,18,"Platform"],[36,41,26,26],[36,42,26,27,"OS"],[36,44,26,29],[37,6,27,8,"hash"],[37,10,27,12],[37,12,27,14,"meta"],[37,16,27,18],[37,17,27,19,"hash"],[38,4,28,4],[38,5,28,5],[38,6,28,6],[39,4,29,4],[40,4,30,4],[41,4,31,4],[41,8,31,8],[41,22,31,22],[41,23,31,23,"test"],[41,27,31,27],[41,28,31,28,"meta"],[41,32,31,32],[41,33,31,33,"httpServerLocation"],[41,51,31,51],[41,52,31,52],[41,54,31,54],[42,6,32,8],[42,10,32,14,"uri"],[42,14,32,17],[42,17,32,20,"meta"],[42,21,32,24],[42,22,32,25,"httpServerLocation"],[42,40,32,43],[42,43,32,46,"suffix"],[42,49,32,52],[42,52,32,55],[42,55,32,58],[42,58,32,61,"params"],[42,64,32,67],[43,6,33,8],[43,13,33,15],[44,8,33,17,"uri"],[44,11,33,20],[44,13,33,17,"uri"],[44,17,33,20],[45,8,33,22,"hash"],[46,6,33,27],[46,7,33,28],[47,4,34,4],[48,4,35,4],[49,4,36,4],[49,8,36,10,"manifest2"],[49,17,36,19],[49,20,36,22],[49,24,36,22,"getManifest2"],[49,51,36,34],[49,53,36,35],[49,54,36,36],[50,4,37,4],[50,8,37,10,"devServerUrl"],[50,20,37,22],[50,23,37,25,"manifest2"],[50,32,37,34],[50,34,37,36,"extra"],[50,39,37,41],[50,41,37,43,"expoGo"],[50,47,37,49],[50,49,37,51,"developer"],[50,58,37,60],[50,61,38,10],[50,70,38,19],[50,73,38,22,"manifest2"],[50,82,38,31],[50,83,38,32,"extra"],[50,88,38,37],[50,89,38,38,"expoGo"],[50,95,38,44],[50,96,38,45,"debuggerHost"],[50,108,38,57],[50,111,39,10],[50,115,39,14],[51,4,40,4],[51,8,40,8,"devServerUrl"],[51,20,40,20],[51,22,40,22],[52,6,41,8],[52,10,41,14,"baseUrl"],[52,17,41,21],[52,20,41,24],[52,24,41,28,"URL"],[52,27,41,31],[52,28,41,32,"meta"],[52,32,41,36],[52,33,41,37,"httpServerLocation"],[52,51,41,55],[52,54,41,58,"suffix"],[52,60,41,64],[52,62,41,66,"devServerUrl"],[52,74,41,78],[52,75,41,79],[53,6,42,8,"baseUrl"],[53,13,42,15],[53,14,42,16,"searchParams"],[53,26,42,28],[53,27,42,29,"set"],[53,30,42,32],[53,31,42,33],[53,41,42,43],[53,43,42,45,"Platform"],[53,68,42,53],[53,69,42,54,"OS"],[53,71,42,56],[53,72,42,57],[54,6,43,8,"baseUrl"],[54,13,43,15],[54,14,43,16,"searchParams"],[54,26,43,28],[54,27,43,29,"set"],[54,30,43,32],[54,31,43,33],[54,37,43,39],[54,39,43,41,"meta"],[54,43,43,45],[54,44,43,46,"hash"],[54,48,43,50],[54,49,43,51],[55,6,44,8],[55,13,44,15],[56,8,45,12,"uri"],[56,11,45,15],[56,13,45,17,"baseUrl"],[56,20,45,24],[56,21,45,25,"href"],[56,25,45,29],[57,8,46,12,"hash"],[58,6,47,8],[58,7,47,9],[59,4,48,4],[60,4,49,4],[61,4,50,4],[61,8,50,8,"NativeModules"],[61,34,50,21],[61,35,50,22],[61,51,50,38],[61,52,50,39],[61,54,50,41],[62,6,51,8],[62,13,51,15],[63,8,51,17,"uri"],[63,11,51,20],[63,13,51,22],[63,58,51,67,"encodeURIComponent"],[63,76,51,85],[63,77,51,86,"hash"],[63,81,51,90],[63,82,51,91],[63,84,51,93],[64,8,51,95,"hash"],[65,6,51,100],[65,7,51,101],[66,4,52,4],[67,4,53,4],[68,4,54,4],[69,4,55,4],[70,4,56,4],[71,4,57,4],[71,11,57,11],[72,6,57,13,"uri"],[72,9,57,16],[72,11,57,18],[72,13,57,20],[73,6,57,22,"hash"],[74,4,57,27],[74,5,57,28],[75,2,58,0],[76,2,59,0],[77,0,60,0],[78,0,61,0],[79,0,62,0],[80,0,63,0],[81,2,64,7],[81,11,64,16,"resolveUri"],[81,21,64,26,"resolveUri"],[81,22,64,27,"uri"],[81,25,64,30],[81,27,64,32],[82,4,65,4],[83,4,66,4],[83,11,66,11,"manifestBaseUrl"],[83,41,66,26],[83,44,66,29],[83,48,66,33,"URL"],[83,51,66,36],[83,52,66,37,"uri"],[83,55,66,40],[83,57,66,42,"manifestBaseUrl"],[83,87,66,57],[83,88,66,58],[83,89,66,59,"href"],[83,93,66,63],[83,96,66,66,"uri"],[83,99,66,69],[84,2,67,0],[85,0,67,1],[85,3]],"functionMap":{"names":["<global>","selectAssetSource","meta.scales.findIndex$argument_0","resolveUri"],"mappings":"AAA;OCU;wCCI,kBD;CD2C;OGM;CHG"}},"type":"js/module"}]}