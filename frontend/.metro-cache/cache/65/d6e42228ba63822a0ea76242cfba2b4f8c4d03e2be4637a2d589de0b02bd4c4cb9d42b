{"dependencies":[{"name":"./bytesToUuid","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"xaWt6Yz4UoVWhmPSw/5J6OHvgNE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _ref;\n    }\n  });\n  var _bytesToUuid = require(_dependencyMap[0], \"./bytesToUuid\");\n  var bytesToUuid = _interopDefault(_bytesToUuid);\n  function uuidToBytes(uuid) {\n    // Note: We assume we're being passed a valid uuid string\n    const bytes = [];\n    uuid.replace(/[a-fA-F0-9]{2}/g, hex => {\n      bytes.push(parseInt(hex, 16));\n      return '';\n    });\n    return bytes;\n  }\n  function stringToBytes(str) {\n    str = unescape(encodeURIComponent(str)); // UTF8 escape\n    const bytes = new Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      bytes[i] = str.charCodeAt(i);\n    }\n    return bytes;\n  }\n  function _ref(name, version, hashfunc) {\n    const generateUUID = function (value, namespace, buf, offset) {\n      const off = buf && offset || 0;\n      if (typeof value == 'string') value = stringToBytes(value);\n      if (typeof namespace == 'string') namespace = uuidToBytes(namespace);\n      if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');\n      if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n\n      // Per 4.3\n      const bytes = hashfunc(namespace.concat(value));\n      bytes[6] = bytes[6] & 0x0f | version;\n      bytes[8] = bytes[8] & 0x3f | 0x80;\n      if (buf) {\n        for (let idx = 0; idx < 16; ++idx) {\n          buf[off + idx] = bytes[idx];\n        }\n      }\n      return (0, bytesToUuid.default)(bytes);\n    };\n\n    // Function#name is not settable on some platforms (#270)\n    try {\n      generateUUID.name = name;\n    } catch {}\n\n    // Pre-defined namespaces, per Appendix C\n    generateUUID.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\n    generateUUID.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n    return generateUUID;\n  }\n});","lineCount":67,"map":[[12,2,23,15,"Object"],[12,8,23,15],[12,9,23,15,"defineProperty"],[12,23,23,15],[12,24,23,15,"exports"],[12,31,23,15],[13,4,23,15,"enumerable"],[13,14,23,15],[14,4,23,15,"get"],[14,7,23,15],[14,18,23,15,"get"],[14,19,23,15],[15,6,23,15],[15,13,23,15,"_ref"],[15,17,23,15],[16,4,23,15],[17,2,23,15],[18,2,1,0],[18,6,1,0,"_bytesToUuid"],[18,18,1,0],[18,21,1,0,"require"],[18,28,1,0],[18,29,1,0,"_dependencyMap"],[18,43,1,0],[19,2,1,0],[19,6,1,0,"bytesToUuid"],[19,17,1,0],[19,20,1,0,"_interopDefault"],[19,35,1,0],[19,36,1,0,"_bytesToUuid"],[19,48,1,0],[20,2,3,0],[20,11,3,9,"uuidToBytes"],[20,22,3,20,"uuidToBytes"],[20,23,3,21,"uuid"],[20,27,3,33],[20,29,3,35],[21,4,4,2],[22,4,5,2],[22,10,5,8,"bytes"],[22,15,5,23],[22,18,5,26],[22,20,5,28],[23,4,6,2,"uuid"],[23,8,6,6],[23,9,6,7,"replace"],[23,16,6,14],[23,17,6,15],[23,34,6,32],[23,36,6,35,"hex"],[23,39,6,46],[23,43,6,51],[24,6,7,4,"bytes"],[24,11,7,9],[24,12,7,10,"push"],[24,16,7,14],[24,17,7,15,"parseInt"],[24,25,7,23],[24,26,7,24,"hex"],[24,29,7,27],[24,31,7,29],[24,33,7,31],[24,34,7,32],[24,35,7,33],[25,6,8,4],[25,13,8,11],[25,15,8,13],[26,4,9,2],[26,5,9,3],[26,6,9,4],[27,4,11,2],[27,11,11,9,"bytes"],[27,16,11,14],[28,2,12,0],[29,2,14,0],[29,11,14,9,"stringToBytes"],[29,24,14,22,"stringToBytes"],[29,25,14,23,"str"],[29,28,14,34],[29,30,14,36],[30,4,15,2,"str"],[30,7,15,5],[30,10,15,8,"unescape"],[30,18,15,16],[30,19,15,17,"encodeURIComponent"],[30,37,15,35],[30,38,15,36,"str"],[30,41,15,39],[30,42,15,40],[30,43,15,41],[30,44,15,42],[30,45,15,43],[31,4,16,2],[31,10,16,8,"bytes"],[31,15,16,23],[31,18,16,26],[31,22,16,30,"Array"],[31,27,16,35],[31,28,16,36,"str"],[31,31,16,39],[31,32,16,40,"length"],[31,38,16,46],[31,39,16,47],[32,4,17,2],[32,9,17,7],[32,13,17,11,"i"],[32,14,17,12],[32,17,17,15],[32,18,17,16],[32,20,17,18,"i"],[32,21,17,19],[32,24,17,22,"str"],[32,27,17,25],[32,28,17,26,"length"],[32,34,17,32],[32,36,17,34,"i"],[32,37,17,35],[32,39,17,37],[32,41,17,39],[33,6,18,4,"bytes"],[33,11,18,9],[33,12,18,10,"i"],[33,13,18,11],[33,14,18,12],[33,17,18,15,"str"],[33,20,18,18],[33,21,18,19,"charCodeAt"],[33,31,18,29],[33,32,18,30,"i"],[33,33,18,31],[33,34,18,32],[34,4,19,2],[35,4,20,2],[35,11,20,9,"bytes"],[35,16,20,14],[36,2,21,0],[37,2,23,15],[37,11,23,15,"_ref"],[37,16,24,2,"name"],[37,20,24,14],[37,22,25,2,"version"],[37,29,25,17],[37,31,26,2,"hashfunc"],[37,39,26,50],[37,41,27,2],[38,4,28,2],[38,10,28,8,"generateUUID"],[38,22,28,20],[38,25,28,23],[38,34,28,23,"generateUUID"],[38,35,29,4,"value"],[38,40,29,28],[38,42,30,4,"namespace"],[38,51,30,32],[38,53,31,4,"buf"],[38,56,31,18],[38,58,32,4,"offset"],[38,64,32,19],[38,66,33,12],[39,6,34,4],[39,12,34,10,"off"],[39,15,34,13],[39,18,34,17,"buf"],[39,21,34,20],[39,25,34,24,"offset"],[39,31,34,30],[39,35,34,35],[39,36,34,36],[40,6,36,4],[40,10,36,8],[40,17,36,15,"value"],[40,22,36,20],[40,26,36,24],[40,34,36,32],[40,36,36,34,"value"],[40,41,36,39],[40,44,36,42,"stringToBytes"],[40,57,36,55],[40,58,36,56,"value"],[40,63,36,61],[40,64,36,62],[41,6,37,4],[41,10,37,8],[41,17,37,15,"namespace"],[41,26,37,24],[41,30,37,28],[41,38,37,36],[41,40,37,38,"namespace"],[41,49,37,47],[41,52,37,50,"uuidToBytes"],[41,63,37,61],[41,64,37,62,"namespace"],[41,73,37,71],[41,74,37,72],[42,6,39,4],[42,10,39,8],[42,11,39,9,"Array"],[42,16,39,14],[42,17,39,15,"isArray"],[42,24,39,22],[42,25,39,23,"value"],[42,30,39,28],[42,31,39,29],[42,33,39,31],[42,39,39,37,"TypeError"],[42,48,39,46],[42,49,39,47],[42,82,39,80],[42,83,39,81],[43,6,40,4],[43,10,40,8],[43,11,40,9,"Array"],[43,16,40,14],[43,17,40,15,"isArray"],[43,24,40,22],[43,25,40,23,"namespace"],[43,34,40,32],[43,35,40,33],[43,39,40,37,"namespace"],[43,48,40,46],[43,49,40,47,"length"],[43,55,40,53],[43,60,40,58],[43,62,40,60],[43,64,41,6],[43,70,41,12,"TypeError"],[43,79,41,21],[43,80,41,22],[43,141,41,83],[43,142,41,84],[45,6,43,4],[46,6,44,4],[46,12,44,10,"bytes"],[46,17,44,15],[46,20,44,18,"hashfunc"],[46,28,44,26],[46,29,44,27,"namespace"],[46,38,44,36],[46,39,44,37,"concat"],[46,45,44,43],[46,46,44,44,"value"],[46,51,44,49],[46,52,44,50],[46,53,44,51],[47,6,45,4,"bytes"],[47,11,45,9],[47,12,45,10],[47,13,45,11],[47,14,45,12],[47,17,45,16,"bytes"],[47,22,45,21],[47,23,45,22],[47,24,45,23],[47,25,45,24],[47,28,45,27],[47,32,45,31],[47,35,45,35,"version"],[47,42,45,42],[48,6,46,4,"bytes"],[48,11,46,9],[48,12,46,10],[48,13,46,11],[48,14,46,12],[48,17,46,16,"bytes"],[48,22,46,21],[48,23,46,22],[48,24,46,23],[48,25,46,24],[48,28,46,27],[48,32,46,31],[48,35,46,35],[48,39,46,39],[49,6,48,4],[49,10,48,8,"buf"],[49,13,48,11],[49,15,48,13],[50,8,49,6],[50,13,49,11],[50,17,49,15,"idx"],[50,20,49,18],[50,23,49,21],[50,24,49,22],[50,26,49,24,"idx"],[50,29,49,27],[50,32,49,30],[50,34,49,32],[50,36,49,34],[50,38,49,36,"idx"],[50,41,49,39],[50,43,49,41],[51,10,50,8,"buf"],[51,13,50,11],[51,14,50,12,"off"],[51,17,50,15],[51,20,50,18,"idx"],[51,23,50,21],[51,24,50,22],[51,27,50,25,"bytes"],[51,32,50,30],[51,33,50,31,"idx"],[51,36,50,34],[51,37,50,35],[52,8,51,6],[53,6,52,4],[54,6,54,4],[54,13,54,11],[54,17,54,11,"bytesToUuid"],[54,28,54,22],[54,29,54,22,"default"],[54,36,54,22],[54,38,54,23,"bytes"],[54,43,54,28],[54,44,54,29],[55,4,55,2],[55,5,55,3],[57,4,57,2],[58,4,58,2],[58,8,58,6],[59,6,59,4,"generateUUID"],[59,18,59,16],[59,19,59,17,"name"],[59,23,59,21],[59,26,59,24,"name"],[59,30,59,28],[60,4,60,2],[60,5,60,3],[60,6,60,4],[60,12,60,10],[60,13,60,11],[62,4,62,2],[63,4,63,2,"generateUUID"],[63,16,63,14],[63,17,63,15,"DNS"],[63,20,63,18],[63,23,63,21],[63,61,63,59],[64,4,64,2,"generateUUID"],[64,16,64,14],[64,17,64,15,"URL"],[64,20,64,18],[64,23,64,21],[64,61,64,59],[65,4,66,2],[65,11,66,9,"generateUUID"],[65,23,66,21],[66,2,67,0],[67,0,67,1],[67,3]],"functionMap":{"names":["<global>","uuidToBytes","uuid.replace$argument_1","stringToBytes","default","generateUUID"],"mappings":"AAA;ACE;kCCG;GDG;CDG;AGE;CHO;eIE;uBCK;GD2B;CJY"},"hasCjsExports":false},"type":"js/module"}]}