{"dependencies":[{"name":"../modules/symbolicateStackTrace","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":296},"end":{"line":11,"column":69,"index":365}}],"key":"YdkqoDMIPdxOnCsE0E8rzpWj034=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.deleteStack = deleteStack;\n  exports.symbolicate = symbolicate;\n  var _modulesSymbolicateStackTrace = require(_dependencyMap[0], \"../modules/symbolicateStackTrace\");\n  var symbolicateStackTrace = _interopDefault(_modulesSymbolicateStackTrace);\n  /**\n   * Copyright (c) 650 Industries.\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  const cache = new Map();\n\n  /**\n   * Sanitize because sometimes, `symbolicateStackTrace` gives us invalid values.\n   */\n  const sanitize = ({\n    stack: maybeStack,\n    codeFrame\n  }) => {\n    if (!Array.isArray(maybeStack)) {\n      throw new Error('Expected stack to be an array.');\n    }\n    const stack = [];\n    for (const maybeFrame of maybeStack) {\n      let collapse = false;\n      if ('collapse' in maybeFrame) {\n        if (typeof maybeFrame.collapse !== 'boolean') {\n          throw new Error('Expected stack frame `collapse` to be a boolean.');\n        }\n        collapse = maybeFrame.collapse;\n      }\n      stack.push({\n        arguments: [],\n        column: maybeFrame.column,\n        file: maybeFrame.file,\n        lineNumber: maybeFrame.lineNumber,\n        methodName: maybeFrame.methodName,\n        collapse\n      });\n    }\n    return {\n      stack,\n      codeFrame\n    };\n  };\n  function deleteStack(stack) {\n    cache.delete(stack);\n  }\n  function symbolicate(stack) {\n    let promise = cache.get(stack);\n    if (promise == null) {\n      promise = (0, symbolicateStackTrace.default)(stack).then(sanitize);\n      cache.set(stack, promise);\n    }\n    return promise;\n  }\n});","lineCount":70,"map":[[12,2,52,0,"exports"],[12,9,52,0],[12,10,52,0,"deleteStack"],[12,21,52,0],[12,24,52,0,"deleteStack"],[12,35,52,0],[13,2,56,0,"exports"],[13,9,56,0],[13,10,56,0,"symbolicate"],[13,21,56,0],[13,24,56,0,"symbolicate"],[13,35,56,0],[14,2,11,0],[14,6,11,0,"_modulesSymbolicateStackTrace"],[14,35,11,0],[14,38,11,0,"require"],[14,45,11,0],[14,46,11,0,"_dependencyMap"],[14,60,11,0],[15,2,11,0],[15,6,11,0,"symbolicateStackTrace"],[15,27,11,0],[15,30,11,0,"_interopDefault"],[15,45,11,0],[15,46,11,0,"_modulesSymbolicateStackTrace"],[15,75,11,0],[16,2,1,0],[17,0,2,0],[18,0,3,0],[19,0,4,0],[20,0,5,0],[21,0,6,0],[22,0,7,0],[24,2,19,0],[24,8,19,6,"cache"],[24,13,19,56],[24,16,19,59],[24,20,19,63,"Map"],[24,23,19,66],[24,24,19,67],[24,25,19,68],[26,2,21,0],[27,0,22,0],[28,0,23,0],[29,2,24,0],[29,8,24,6,"sanitize"],[29,16,24,14],[29,19,24,17,"sanitize"],[29,20,24,18],[30,4,25,2,"stack"],[30,9,25,7],[30,11,25,9,"maybeStack"],[30,21,25,19],[31,4,26,2,"codeFrame"],[32,2,27,24],[32,3,27,25],[32,8,27,54],[33,4,28,2],[33,8,28,6],[33,9,28,7,"Array"],[33,14,28,12],[33,15,28,13,"isArray"],[33,22,28,20],[33,23,28,21,"maybeStack"],[33,33,28,31],[33,34,28,32],[33,36,28,34],[34,6,29,4],[34,12,29,10],[34,16,29,14,"Error"],[34,21,29,19],[34,22,29,20],[34,54,29,52],[34,55,29,53],[35,4,30,2],[36,4,31,2],[36,10,31,8,"stack"],[36,15,31,27],[36,18,31,30],[36,20,31,32],[37,4,32,2],[37,9,32,7],[37,15,32,13,"maybeFrame"],[37,25,32,23],[37,29,32,27,"maybeStack"],[37,39,32,37],[37,41,32,39],[38,6,33,4],[38,10,33,8,"collapse"],[38,18,33,16],[38,21,33,19],[38,26,33,24],[39,6,34,4],[39,10,34,8],[39,20,34,18],[39,24,34,22,"maybeFrame"],[39,34,34,32],[39,36,34,34],[40,8,35,6],[40,12,35,10],[40,19,35,17,"maybeFrame"],[40,29,35,27],[40,30,35,28,"collapse"],[40,38,35,36],[40,43,35,41],[40,52,35,50],[40,54,35,52],[41,10,36,8],[41,16,36,14],[41,20,36,18,"Error"],[41,25,36,23],[41,26,36,24],[41,76,36,74],[41,77,36,75],[42,8,37,6],[43,8,38,6,"collapse"],[43,16,38,14],[43,19,38,17,"maybeFrame"],[43,29,38,27],[43,30,38,28,"collapse"],[43,38,38,36],[44,6,39,4],[45,6,40,4,"stack"],[45,11,40,9],[45,12,40,10,"push"],[45,16,40,14],[45,17,40,15],[46,8,41,6,"arguments"],[46,17,41,15],[46,19,41,17],[46,21,41,19],[47,8,42,6,"column"],[47,14,42,12],[47,16,42,14,"maybeFrame"],[47,26,42,24],[47,27,42,25,"column"],[47,33,42,31],[48,8,43,6,"file"],[48,12,43,10],[48,14,43,12,"maybeFrame"],[48,24,43,22],[48,25,43,23,"file"],[48,29,43,27],[49,8,44,6,"lineNumber"],[49,18,44,16],[49,20,44,18,"maybeFrame"],[49,30,44,28],[49,31,44,29,"lineNumber"],[49,41,44,39],[50,8,45,6,"methodName"],[50,18,45,16],[50,20,45,18,"maybeFrame"],[50,30,45,28],[50,31,45,29,"methodName"],[50,41,45,39],[51,8,46,6,"collapse"],[52,6,47,4],[52,7,47,5],[52,8,47,6],[53,4,48,2],[54,4,49,2],[54,11,49,9],[55,6,49,11,"stack"],[55,11,49,16],[56,6,49,18,"codeFrame"],[57,4,49,28],[57,5,49,29],[58,2,50,0],[58,3,50,1],[59,2,52,7],[59,11,52,16,"deleteStack"],[59,22,52,27,"deleteStack"],[59,23,52,28,"stack"],[59,28,52,40],[59,30,52,48],[60,4,53,2,"cache"],[60,9,53,7],[60,10,53,8,"delete"],[60,16,53,14],[60,17,53,15,"stack"],[60,22,53,20],[60,23,53,21],[61,2,54,0],[62,2,56,7],[62,11,56,16,"symbolicate"],[62,22,56,27,"symbolicate"],[62,23,56,28,"stack"],[62,28,56,40],[62,30,56,75],[63,4,57,2],[63,8,57,6,"promise"],[63,15,57,13],[63,18,57,16,"cache"],[63,23,57,21],[63,24,57,22,"get"],[63,27,57,25],[63,28,57,26,"stack"],[63,33,57,31],[63,34,57,32],[64,4,58,2],[64,8,58,6,"promise"],[64,15,58,13],[64,19,58,17],[64,23,58,21],[64,25,58,23],[65,6,59,4,"promise"],[65,13,59,11],[65,16,59,14],[65,20,59,14,"symbolicateStackTrace"],[65,41,59,35],[65,42,59,35,"default"],[65,49,59,35],[65,51,59,36,"stack"],[65,56,59,41],[65,57,59,42],[65,58,59,43,"then"],[65,62,59,47],[65,63,59,48,"sanitize"],[65,71,59,56],[65,72,59,57],[66,6,60,4,"cache"],[66,11,60,9],[66,12,60,10,"set"],[66,15,60,13],[66,16,60,14,"stack"],[66,21,60,19],[66,23,60,21,"promise"],[66,30,60,28],[66,31,60,29],[67,4,61,2],[68,4,63,2],[68,11,63,9,"promise"],[68,18,63,16],[69,2,64,0],[70,0,64,1],[70,3]],"functionMap":{"names":["<global>","sanitize","deleteStack","symbolicate"],"mappings":"AAA;iBCuB;CD0B;OEE;CFE;OGE;CHQ"},"hasCjsExports":false},"type":"js/module"}]}