{"dependencies":[{"name":"@babel/runtime/helpers/objectSpread2","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":65,"index":65}}],"key":"SfRhzMj3Ex6qA89WTFEUm9Lj49A=","exportNames":["*"],"imports":1}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":276},"end":{"line":12,"column":43,"index":319}}],"key":"bGUa+dDG2WEhPiIlobT3urS95UE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"CellRenderMask\", {\n    enumerable: true,\n    get: function () {\n      return CellRenderMask;\n    }\n  });\n  var _babelRuntimeHelpersObjectSpread = require(_dependencyMap[0], \"@babel/runtime/helpers/objectSpread2\");\n  var _objectSpread = _interopDefault(_babelRuntimeHelpersObjectSpread);\n  var _fbjsLibInvariant = require(_dependencyMap[1], \"fbjs/lib/invariant\");\n  var invariant = _interopDefault(_fbjsLibInvariant);\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  class CellRenderMask {\n    constructor(numCells) {\n      (0, invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n      this._numCells = numCells;\n      if (numCells === 0) {\n        this._regions = [];\n      } else {\n        this._regions = [{\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true\n        }];\n      }\n    }\n    enumerateRegions() {\n      return this._regions;\n    }\n    addCells(cells) {\n      (0, invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n\n      // VirtualizedList uses inclusive ranges, where zero-count states are\n      // possible. E.g. [0, -1] for no cells, starting at 0.\n      if (cells.last < cells.first) {\n        return;\n      }\n      var _this$_findRegion = this._findRegion(cells.first),\n        firstIntersect = _this$_findRegion[0],\n        firstIntersectIdx = _this$_findRegion[1];\n      var _this$_findRegion2 = this._findRegion(cells.last),\n        lastIntersect = _this$_findRegion2[0],\n        lastIntersectIdx = _this$_findRegion2[1];\n\n      // Fast-path if the cells to add are already all present in the mask. We\n      // will otherwise need to do some mutation.\n      if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n        return;\n      }\n\n      // We need to replace the existing covered regions with 1-3 new regions\n      // depending whether we need to split spacers out of overlapping regions.\n      var newLeadRegion = [];\n      var newTailRegion = [];\n      var newMainRegion = (0, _objectSpread.default)((0, _objectSpread.default)({}, cells), {}, {\n        isSpacer: false\n      });\n      if (firstIntersect.first < newMainRegion.first) {\n        if (firstIntersect.isSpacer) {\n          newLeadRegion.push({\n            first: firstIntersect.first,\n            last: newMainRegion.first - 1,\n            isSpacer: true\n          });\n        } else {\n          newMainRegion.first = firstIntersect.first;\n        }\n      }\n      if (lastIntersect.last > newMainRegion.last) {\n        if (lastIntersect.isSpacer) {\n          newTailRegion.push({\n            first: newMainRegion.last + 1,\n            last: lastIntersect.last,\n            isSpacer: true\n          });\n        } else {\n          newMainRegion.last = lastIntersect.last;\n        }\n      }\n      var replacementRegions = [...newLeadRegion, newMainRegion, ...newTailRegion];\n      var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n      this._regions.splice(firstIntersectIdx, numRegionsToDelete, ...replacementRegions);\n    }\n    numCells() {\n      return this._numCells;\n    }\n    equals(other) {\n      return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every((region, i) => region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer);\n    }\n    _findRegion(cellIdx) {\n      var firstIdx = 0;\n      var lastIdx = this._regions.length - 1;\n      while (firstIdx <= lastIdx) {\n        var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n        var middleRegion = this._regions[middleIdx];\n        if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n          return [middleRegion, middleIdx];\n        } else if (cellIdx < middleRegion.first) {\n          lastIdx = middleIdx - 1;\n        } else if (cellIdx > middleRegion.last) {\n          firstIdx = middleIdx + 1;\n        }\n      }\n      (0, invariant.default)(false, \"A region was not found containing cellIdx \" + cellIdx);\n    }\n  }\n});","lineCount":126,"map":[[12,2,13,0,"Object"],[12,8,13,0],[12,9,13,0,"defineProperty"],[12,23,13,0],[12,24,13,0,"exports"],[12,31,13,0],[13,4,13,0,"enumerable"],[13,14,13,0],[14,4,13,0,"get"],[14,7,13,0],[14,18,13,0,"get"],[14,19,13,0],[15,6,13,0],[15,13,13,0,"CellRenderMask"],[15,27,13,0],[16,4,13,0],[17,2,13,0],[18,2,1,0],[18,6,1,0,"_babelRuntimeHelpersObjectSpread"],[18,38,1,0],[18,41,1,0,"require"],[18,48,1,0],[18,49,1,0,"_dependencyMap"],[18,63,1,0],[19,2,1,0],[19,6,1,0,"_objectSpread"],[19,19,1,0],[19,22,1,0,"_interopDefault"],[19,37,1,0],[19,38,1,0,"_babelRuntimeHelpersObjectSpread"],[19,70,1,0],[20,2,12,0],[20,6,12,0,"_fbjsLibInvariant"],[20,23,12,0],[20,26,12,0,"require"],[20,33,12,0],[20,34,12,0,"_dependencyMap"],[20,48,12,0],[21,2,12,0],[21,6,12,0,"invariant"],[21,15,12,0],[21,18,12,0,"_interopDefault"],[21,33,12,0],[21,34,12,0,"_fbjsLibInvariant"],[21,51,12,0],[22,2,2,0],[23,0,3,0],[24,0,4,0],[25,0,5,0],[26,0,6,0],[27,0,7,0],[28,0,8,0],[29,0,9,0],[30,0,10,0],[32,2,13,7],[32,8,13,13,"CellRenderMask"],[32,22,13,27],[32,23,13,28],[33,4,14,2,"constructor"],[33,15,14,13,"constructor"],[33,16,14,14,"numCells"],[33,24,14,22],[33,26,14,24],[34,6,15,4],[34,10,15,4,"invariant"],[34,19,15,13],[34,20,15,13,"default"],[34,27,15,13],[34,29,15,14,"numCells"],[34,37,15,22],[34,41,15,26],[34,42,15,27],[34,44,15,29],[34,104,15,89],[34,105,15,90],[35,6,16,4],[35,10,16,8],[35,11,16,9,"_numCells"],[35,20,16,18],[35,23,16,21,"numCells"],[35,31,16,29],[36,6,17,4],[36,10,17,8,"numCells"],[36,18,17,16],[36,23,17,21],[36,24,17,22],[36,26,17,24],[37,8,18,6],[37,12,18,10],[37,13,18,11,"_regions"],[37,21,18,19],[37,24,18,22],[37,26,18,24],[38,6,19,4],[38,7,19,5],[38,13,19,11],[39,8,20,6],[39,12,20,10],[39,13,20,11,"_regions"],[39,21,20,19],[39,24,20,22],[39,25,20,23],[40,10,21,8,"first"],[40,15,21,13],[40,17,21,15],[40,18,21,16],[41,10,22,8,"last"],[41,14,22,12],[41,16,22,14,"numCells"],[41,24,22,22],[41,27,22,25],[41,28,22,26],[42,10,23,8,"isSpacer"],[42,18,23,16],[42,20,23,18],[43,8,24,6],[43,9,24,7],[43,10,24,8],[44,6,25,4],[45,4,26,2],[46,4,27,2,"enumerateRegions"],[46,20,27,18,"enumerateRegions"],[46,21,27,18],[46,23,27,21],[47,6,28,4],[47,13,28,11],[47,17,28,15],[47,18,28,16,"_regions"],[47,26,28,24],[48,4,29,2],[49,4,30,2,"addCells"],[49,12,30,10,"addCells"],[49,13,30,11,"cells"],[49,18,30,16],[49,20,30,18],[50,6,31,4],[50,10,31,4,"invariant"],[50,19,31,13],[50,20,31,13,"default"],[50,27,31,13],[50,29,31,14,"cells"],[50,34,31,19],[50,35,31,20,"first"],[50,40,31,25],[50,44,31,29],[50,45,31,30],[50,49,31,34,"cells"],[50,54,31,39],[50,55,31,40,"first"],[50,60,31,45],[50,63,31,48],[50,67,31,52],[50,68,31,53,"_numCells"],[50,77,31,62],[50,81,31,66,"cells"],[50,86,31,71],[50,87,31,72,"last"],[50,91,31,76],[50,95,31,80],[50,96,31,81],[50,97,31,82],[50,101,31,86,"cells"],[50,106,31,91],[50,107,31,92,"last"],[50,111,31,96],[50,114,31,99],[50,118,31,103],[50,119,31,104,"_numCells"],[50,128,31,113],[50,132,31,117,"cells"],[50,137,31,122],[50,138,31,123,"last"],[50,142,31,127],[50,146,31,131,"cells"],[50,151,31,136],[50,152,31,137,"first"],[50,157,31,142],[50,160,31,145],[50,161,31,146],[50,163,31,148],[50,219,31,204],[50,220,31,205],[52,6,33,4],[53,6,34,4],[54,6,35,4],[54,10,35,8,"cells"],[54,15,35,13],[54,16,35,14,"last"],[54,20,35,18],[54,23,35,21,"cells"],[54,28,35,26],[54,29,35,27,"first"],[54,34,35,32],[54,36,35,34],[55,8,36,6],[56,6,37,4],[57,6,38,4],[57,10,38,8,"_this$_findRegion"],[57,27,38,25],[57,30,38,28],[57,34,38,32],[57,35,38,33,"_findRegion"],[57,46,38,44],[57,47,38,45,"cells"],[57,52,38,50],[57,53,38,51,"first"],[57,58,38,56],[57,59,38,57],[58,8,39,6,"firstIntersect"],[58,22,39,20],[58,25,39,23,"_this$_findRegion"],[58,42,39,40],[58,43,39,41],[58,44,39,42],[58,45,39,43],[59,8,40,6,"firstIntersectIdx"],[59,25,40,23],[59,28,40,26,"_this$_findRegion"],[59,45,40,43],[59,46,40,44],[59,47,40,45],[59,48,40,46],[60,6,41,4],[60,10,41,8,"_this$_findRegion2"],[60,28,41,26],[60,31,41,29],[60,35,41,33],[60,36,41,34,"_findRegion"],[60,47,41,45],[60,48,41,46,"cells"],[60,53,41,51],[60,54,41,52,"last"],[60,58,41,56],[60,59,41,57],[61,8,42,6,"lastIntersect"],[61,21,42,19],[61,24,42,22,"_this$_findRegion2"],[61,42,42,40],[61,43,42,41],[61,44,42,42],[61,45,42,43],[62,8,43,6,"lastIntersectIdx"],[62,24,43,22],[62,27,43,25,"_this$_findRegion2"],[62,45,43,43],[62,46,43,44],[62,47,43,45],[62,48,43,46],[64,6,45,4],[65,6,46,4],[66,6,47,4],[66,10,47,8,"firstIntersectIdx"],[66,27,47,25],[66,32,47,30,"lastIntersectIdx"],[66,48,47,46],[66,52,47,50],[66,53,47,51,"firstIntersect"],[66,67,47,65],[66,68,47,66,"isSpacer"],[66,76,47,74],[66,78,47,76],[67,8,48,6],[68,6,49,4],[70,6,51,4],[71,6,52,4],[72,6,53,4],[72,10,53,8,"newLeadRegion"],[72,23,53,21],[72,26,53,24],[72,28,53,26],[73,6,54,4],[73,10,54,8,"newTailRegion"],[73,23,54,21],[73,26,54,24],[73,28,54,26],[74,6,55,4],[74,10,55,8,"newMainRegion"],[74,23,55,21],[74,26,55,24],[74,30,55,24,"_objectSpread"],[74,43,55,37],[74,44,55,37,"default"],[74,51,55,37],[74,53,55,38],[74,57,55,38,"_objectSpread"],[74,70,55,51],[74,71,55,51,"default"],[74,78,55,51],[74,80,55,52],[74,81,55,53],[74,82,55,54],[74,84,55,56,"cells"],[74,89,55,61],[74,90,55,62],[74,92,55,64],[74,93,55,65],[74,94,55,66],[74,96,55,68],[75,8,56,6,"isSpacer"],[75,16,56,14],[75,18,56,16],[76,6,57,4],[76,7,57,5],[76,8,57,6],[77,6,58,4],[77,10,58,8,"firstIntersect"],[77,24,58,22],[77,25,58,23,"first"],[77,30,58,28],[77,33,58,31,"newMainRegion"],[77,46,58,44],[77,47,58,45,"first"],[77,52,58,50],[77,54,58,52],[78,8,59,6],[78,12,59,10,"firstIntersect"],[78,26,59,24],[78,27,59,25,"isSpacer"],[78,35,59,33],[78,37,59,35],[79,10,60,8,"newLeadRegion"],[79,23,60,21],[79,24,60,22,"push"],[79,28,60,26],[79,29,60,27],[80,12,61,10,"first"],[80,17,61,15],[80,19,61,17,"firstIntersect"],[80,33,61,31],[80,34,61,32,"first"],[80,39,61,37],[81,12,62,10,"last"],[81,16,62,14],[81,18,62,16,"newMainRegion"],[81,31,62,29],[81,32,62,30,"first"],[81,37,62,35],[81,40,62,38],[81,41,62,39],[82,12,63,10,"isSpacer"],[82,20,63,18],[82,22,63,20],[83,10,64,8],[83,11,64,9],[83,12,64,10],[84,8,65,6],[84,9,65,7],[84,15,65,13],[85,10,66,8,"newMainRegion"],[85,23,66,21],[85,24,66,22,"first"],[85,29,66,27],[85,32,66,30,"firstIntersect"],[85,46,66,44],[85,47,66,45,"first"],[85,52,66,50],[86,8,67,6],[87,6,68,4],[88,6,69,4],[88,10,69,8,"lastIntersect"],[88,23,69,21],[88,24,69,22,"last"],[88,28,69,26],[88,31,69,29,"newMainRegion"],[88,44,69,42],[88,45,69,43,"last"],[88,49,69,47],[88,51,69,49],[89,8,70,6],[89,12,70,10,"lastIntersect"],[89,25,70,23],[89,26,70,24,"isSpacer"],[89,34,70,32],[89,36,70,34],[90,10,71,8,"newTailRegion"],[90,23,71,21],[90,24,71,22,"push"],[90,28,71,26],[90,29,71,27],[91,12,72,10,"first"],[91,17,72,15],[91,19,72,17,"newMainRegion"],[91,32,72,30],[91,33,72,31,"last"],[91,37,72,35],[91,40,72,38],[91,41,72,39],[92,12,73,10,"last"],[92,16,73,14],[92,18,73,16,"lastIntersect"],[92,31,73,29],[92,32,73,30,"last"],[92,36,73,34],[93,12,74,10,"isSpacer"],[93,20,74,18],[93,22,74,20],[94,10,75,8],[94,11,75,9],[94,12,75,10],[95,8,76,6],[95,9,76,7],[95,15,76,13],[96,10,77,8,"newMainRegion"],[96,23,77,21],[96,24,77,22,"last"],[96,28,77,26],[96,31,77,29,"lastIntersect"],[96,44,77,42],[96,45,77,43,"last"],[96,49,77,47],[97,8,78,6],[98,6,79,4],[99,6,80,4],[99,10,80,8,"replacementRegions"],[99,28,80,26],[99,31,80,29],[99,32,80,30],[99,35,80,33,"newLeadRegion"],[99,48,80,46],[99,50,80,48,"newMainRegion"],[99,63,80,61],[99,65,80,63],[99,68,80,66,"newTailRegion"],[99,81,80,79],[99,82,80,80],[100,6,81,4],[100,10,81,8,"numRegionsToDelete"],[100,28,81,26],[100,31,81,29,"lastIntersectIdx"],[100,47,81,45],[100,50,81,48,"firstIntersectIdx"],[100,67,81,65],[100,70,81,68],[100,71,81,69],[101,6,82,4],[101,10,82,8],[101,11,82,9,"_regions"],[101,19,82,17],[101,20,82,18,"splice"],[101,26,82,24],[101,27,82,25,"firstIntersectIdx"],[101,44,82,42],[101,46,82,44,"numRegionsToDelete"],[101,64,82,62],[101,66,82,64],[101,69,82,67,"replacementRegions"],[101,87,82,85],[101,88,82,86],[102,4,83,2],[103,4,84,2,"numCells"],[103,12,84,10,"numCells"],[103,13,84,10],[103,15,84,13],[104,6,85,4],[104,13,85,11],[104,17,85,15],[104,18,85,16,"_numCells"],[104,27,85,25],[105,4,86,2],[106,4,87,2,"equals"],[106,10,87,8,"equals"],[106,11,87,9,"other"],[106,16,87,14],[106,18,87,16],[107,6,88,4],[107,13,88,11],[107,17,88,15],[107,18,88,16,"_numCells"],[107,27,88,25],[107,32,88,30,"other"],[107,37,88,35],[107,38,88,36,"_numCells"],[107,47,88,45],[107,51,88,49],[107,55,88,53],[107,56,88,54,"_regions"],[107,64,88,62],[107,65,88,63,"length"],[107,71,88,69],[107,76,88,74,"other"],[107,81,88,79],[107,82,88,80,"_regions"],[107,90,88,88],[107,91,88,89,"length"],[107,97,88,95],[107,101,88,99],[107,105,88,103],[107,106,88,104,"_regions"],[107,114,88,112],[107,115,88,113,"every"],[107,120,88,118],[107,121,88,119],[107,122,88,120,"region"],[107,128,88,126],[107,130,88,128,"i"],[107,131,88,129],[107,136,88,134,"region"],[107,142,88,140],[107,143,88,141,"first"],[107,148,88,146],[107,153,88,151,"other"],[107,158,88,156],[107,159,88,157,"_regions"],[107,167,88,165],[107,168,88,166,"i"],[107,169,88,167],[107,170,88,168],[107,171,88,169,"first"],[107,176,88,174],[107,180,88,178,"region"],[107,186,88,184],[107,187,88,185,"last"],[107,191,88,189],[107,196,88,194,"other"],[107,201,88,199],[107,202,88,200,"_regions"],[107,210,88,208],[107,211,88,209,"i"],[107,212,88,210],[107,213,88,211],[107,214,88,212,"last"],[107,218,88,216],[107,222,88,220,"region"],[107,228,88,226],[107,229,88,227,"isSpacer"],[107,237,88,235],[107,242,88,240,"other"],[107,247,88,245],[107,248,88,246,"_regions"],[107,256,88,254],[107,257,88,255,"i"],[107,258,88,256],[107,259,88,257],[107,260,88,258,"isSpacer"],[107,268,88,266],[107,269,88,267],[108,4,89,2],[109,4,90,2,"_findRegion"],[109,15,90,13,"_findRegion"],[109,16,90,14,"cellIdx"],[109,23,90,21],[109,25,90,23],[110,6,91,4],[110,10,91,8,"firstIdx"],[110,18,91,16],[110,21,91,19],[110,22,91,20],[111,6,92,4],[111,10,92,8,"lastIdx"],[111,17,92,15],[111,20,92,18],[111,24,92,22],[111,25,92,23,"_regions"],[111,33,92,31],[111,34,92,32,"length"],[111,40,92,38],[111,43,92,41],[111,44,92,42],[112,6,93,4],[112,13,93,11,"firstIdx"],[112,21,93,19],[112,25,93,23,"lastIdx"],[112,32,93,30],[112,34,93,32],[113,8,94,6],[113,12,94,10,"middleIdx"],[113,21,94,19],[113,24,94,22,"Math"],[113,28,94,26],[113,29,94,27,"floor"],[113,34,94,32],[113,35,94,33],[113,36,94,34,"firstIdx"],[113,44,94,42],[113,47,94,45,"lastIdx"],[113,54,94,52],[113,58,94,56],[113,59,94,57],[113,60,94,58],[114,8,95,6],[114,12,95,10,"middleRegion"],[114,24,95,22],[114,27,95,25],[114,31,95,29],[114,32,95,30,"_regions"],[114,40,95,38],[114,41,95,39,"middleIdx"],[114,50,95,48],[114,51,95,49],[115,8,96,6],[115,12,96,10,"cellIdx"],[115,19,96,17],[115,23,96,21,"middleRegion"],[115,35,96,33],[115,36,96,34,"first"],[115,41,96,39],[115,45,96,43,"cellIdx"],[115,52,96,50],[115,56,96,54,"middleRegion"],[115,68,96,66],[115,69,96,67,"last"],[115,73,96,71],[115,75,96,73],[116,10,97,8],[116,17,97,15],[116,18,97,16,"middleRegion"],[116,30,97,28],[116,32,97,30,"middleIdx"],[116,41,97,39],[116,42,97,40],[117,8,98,6],[117,9,98,7],[117,15,98,13],[117,19,98,17,"cellIdx"],[117,26,98,24],[117,29,98,27,"middleRegion"],[117,41,98,39],[117,42,98,40,"first"],[117,47,98,45],[117,49,98,47],[118,10,99,8,"lastIdx"],[118,17,99,15],[118,20,99,18,"middleIdx"],[118,29,99,27],[118,32,99,30],[118,33,99,31],[119,8,100,6],[119,9,100,7],[119,15,100,13],[119,19,100,17,"cellIdx"],[119,26,100,24],[119,29,100,27,"middleRegion"],[119,41,100,39],[119,42,100,40,"last"],[119,46,100,44],[119,48,100,46],[120,10,101,8,"firstIdx"],[120,18,101,16],[120,21,101,19,"middleIdx"],[120,30,101,28],[120,33,101,31],[120,34,101,32],[121,8,102,6],[122,6,103,4],[123,6,104,4],[123,10,104,4,"invariant"],[123,19,104,13],[123,20,104,13,"default"],[123,27,104,13],[123,29,104,14],[123,34,104,19],[123,36,104,21],[123,80,104,65],[123,83,104,68,"cellIdx"],[123,90,104,75],[123,91,104,76],[124,4,105,2],[125,2,106,0],[126,0,106,1],[126,3]],"functionMap":{"names":["<global>","CellRenderMask","constructor","enumerateRegions","addCells","numCells","equals","_regions.every$argument_0","_findRegion"],"mappings":"AAA;OCY;ECC;GDY;EEC;GFE;EGC;GHqD;EIC;GJE;EKC;uHCC,mJD;GLC;EOC;GPe"},"hasCjsExports":false},"type":"js/module"}]}