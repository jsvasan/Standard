{"dependencies":[{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"]}},{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":168},"end":{"line":5,"column":52,"index":203}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"]}},{"name":"@react-navigation/native-stack","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":23,"index":228},"end":{"line":6,"column":64,"index":269}}],"key":"Tw1dyZPdNt5nhNu5CoB7YZxWQjI=","exportNames":["*"]}},{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":21,"index":292},"end":{"line":7,"column":49,"index":320}}],"key":"JdWyQHWvvi7kws4n0MhZWUpiB2c=","exportNames":["*"]}},{"name":"./withLayoutContext","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":28,"index":350},"end":{"line":8,"column":58,"index":380}}],"key":"uI8DQ+0pBl5vWiQx60egJpSWI0Q=","exportNames":["*"]}},{"name":"../useScreens","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":21,"index":403},"end":{"line":9,"column":45,"index":427}}],"key":"8gimF/GgYNRJ+ojtiVDaShLJVrk=","exportNames":["*"]}},{"name":"../views/Protected","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":20,"index":449},"end":{"line":10,"column":49,"index":478}}],"key":"k1+uDYZ/MvJqE4WVPvI1cbQswMs=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n  'use client';\n\n  var _reactJsxDevRuntime = require(_dependencyMap[0], \"react/jsx-dev-runtime\");\n  var _jsxFileName = \"/app/frontend/node_modules/expo-router/build/layouts/StackClient.js\";\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.StackRouter = exports.stackRouterOverride = void 0;\n  const native_1 = require(_dependencyMap[1], \"@react-navigation/native\");\n  const native_stack_1 = require(_dependencyMap[2], \"@react-navigation/native-stack\");\n  const non_secure_1 = require(_dependencyMap[3], \"nanoid/non-secure\");\n  const withLayoutContext_1 = require(_dependencyMap[4], \"./withLayoutContext\");\n  const useScreens_1 = require(_dependencyMap[5], \"../useScreens\");\n  const Protected_1 = require(_dependencyMap[6], \"../views/Protected\");\n  const NativeStackNavigator = (0, native_stack_1.createNativeStackNavigator)().Navigator;\n  const RNStack = (0, withLayoutContext_1.withLayoutContext)(NativeStackNavigator);\n  function isStackAction(action) {\n    return action.type === 'PUSH' || action.type === 'NAVIGATE' || action.type === 'POP' || action.type === 'POP_TO_TOP' || action.type === 'REPLACE';\n  }\n  /**\n   * React Navigation matches a screen by its name or a 'getID' function that uniquely identifies a screen.\n   * When a screen has been uniquely identified, the Stack can only have one instance of that screen.\n   *\n   * Expo Router allows for a screen to be matched by name and path params, a 'getID' function or a singular id.\n   *\n   * Instead of reimplementing the entire StackRouter, we can override the getStateForAction method to handle the singular screen logic.\n   *\n   */\n  const stackRouterOverride = original => {\n    return {\n      getStateForAction: (state, action, options) => {\n        if (action.target && action.target !== state.key) {\n          return null;\n        }\n        if (!isStackAction(action)) {\n          return original.getStateForAction(state, action, options);\n        }\n        // The dynamic getId added to an action, `router.push('screen', { singular: true })`\n        const actionSingularOptions = action.payload && 'singular' in action.payload ? action.payload.singular : undefined;\n        // Handle if 'getID' or 'singular' is set.\n        function getIdFunction() {\n          // Actions can be fired by the user, so we do need to validate their structure.\n          if (!('payload' in action) || !action.payload || !('name' in action.payload) || typeof action.payload.name !== 'string') {\n            return;\n          }\n          const actionName = action.payload.name;\n          return (\n            // The dynamic singular added to an action, `router.push('screen', { singular: () => 'id' })`\n            getActionSingularIdFn(actionSingularOptions, actionName) ||\n            // The static getId added as a prop to `<Screen singular />` or `<Screen getId={} />`\n            options.routeGetIdList[actionName]\n          );\n        }\n        const {\n          routeParamList\n        } = options;\n        switch (action.type) {\n          case 'PUSH':\n          case 'NAVIGATE':\n            {\n              if (!state.routeNames.includes(action.payload.name)) {\n                return null;\n              }\n              // START FORK\n              const getId = getIdFunction();\n              // const getId = options.routeGetIdList[action.payload.name];\n              // END FORK\n              const id = getId?.({\n                params: action.payload.params\n              });\n              let route;\n              if (id !== undefined) {\n                route = state.routes.findLast(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              } else if (action.type === 'NAVIGATE') {\n                const currentRoute = state.routes[state.index];\n                // If the route matches the current one, then navigate to it\n                if (action.payload.name === currentRoute.name) {\n                  route = currentRoute;\n                } else if (action.payload.pop) {\n                  route = state.routes.findLast(route => route.name === action.payload.name);\n                }\n              }\n              if (!route) {\n                route = state.preloadedRoutes.find(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              }\n              let params;\n              if (action.type === 'NAVIGATE' && action.payload.merge && route) {\n                params = action.payload.params !== undefined || routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...route.params,\n                  ...action.payload.params\n                } : route.params;\n              } else {\n                params = routeParamList[action.payload.name] !== undefined ? {\n                  ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params;\n              }\n              let routes;\n              if (route) {\n                if (action.type === 'NAVIGATE' && action.payload.pop) {\n                  routes = [];\n                  // Get all routes until the matching one\n                  for (const r of state.routes) {\n                    if (r.key === route.key) {\n                      routes.push({\n                        ...route,\n                        path: action.payload.path !== undefined ? action.payload.path : route.path,\n                        params\n                      });\n                      break;\n                    }\n                    routes.push(r);\n                  }\n                } else {\n                  // START FORK\n                  // If there is an id, then filter out the existing route with the same id.\n                  // THIS ACTION IS DANGEROUS. This can cause React Native Screens to freeze\n                  if (id !== undefined) {\n                    routes = state.routes.filter(r => r.key !== route.key);\n                  } else if (action.type === 'NAVIGATE' && state.routes.length > 0) {\n                    // The navigation action should only replace the last route if it has the same name and path params.\n                    const lastRoute = state.routes[state.routes.length - 1];\n                    if ((0, useScreens_1.getSingularId)(lastRoute.name, {\n                      params: lastRoute.params\n                    }) === (0, useScreens_1.getSingularId)(route.name, {\n                      params\n                    })) {\n                      routes = state.routes.slice(0, -1);\n                    } else {\n                      routes = [...state.routes];\n                    }\n                  } else {\n                    routes = [...state.routes];\n                  }\n                  // If the routes length is the same as the state routes length, then we are navigating to a new route.\n                  // Otherwise we are replacing an existing route.\n                  const key = routes.length === state.routes.length ? `${action.payload.name}-${(0, non_secure_1.nanoid)()}` : route.key;\n                  routes.push({\n                    ...route,\n                    key,\n                    path: action.type === 'NAVIGATE' && action.payload.path !== undefined ? action.payload.path : route.path,\n                    params\n                  });\n                  // routes = state.routes.filter((r) => r.key !== route.key);\n                  // routes.push({\n                  //   ...route,\n                  //   path:\n                  //     action.type === 'NAVIGATE' && action.payload.path !== undefined\n                  //       ? action.payload.path\n                  //       : route.path,\n                  //   params,\n                  // });\n                  // END FORK\n                }\n              } else {\n                routes = [...state.routes, {\n                  key: `${action.payload.name}-${(0, non_secure_1.nanoid)()}`,\n                  name: action.payload.name,\n                  path: action.type === 'NAVIGATE' ? action.payload.path : undefined,\n                  params\n                }];\n              }\n              // START FORK\n              // return filterSingular(\n              const result = {\n                ...state,\n                index: routes.length - 1,\n                preloadedRoutes: state.preloadedRoutes.filter(route => routes[routes.length - 1].key !== route.key),\n                routes\n              };\n              if (actionSingularOptions) {\n                return filterSingular(result, getId);\n              }\n              return result;\n              // return {\n              //   ...state,\n              //   index: routes.length - 1,\n              //   preloadedRoutes: state.preloadedRoutes.filter(\n              //     (route) => routes[routes.length - 1].key !== route.key\n              //   ),\n              //   routes,\n              // };\n              // END FORK\n            }\n          default:\n            {\n              return original.getStateForAction(state, action, options);\n            }\n        }\n      }\n    };\n  };\n  exports.stackRouterOverride = stackRouterOverride;\n  function getActionSingularIdFn(actionGetId, name) {\n    if (typeof actionGetId === 'function') {\n      return options => actionGetId(name, options.params ?? {});\n    } else if (actionGetId === true) {\n      return options => (0, useScreens_1.getSingularId)(name, options);\n    }\n    return undefined;\n  }\n  /**\n   * If there is a dynamic singular on an action, then we need to filter the state to only have singular screens.\n   * As multiples may have been added before we did the singular navigation.\n   */\n  function filterSingular(state, getId) {\n    if (!state) {\n      return state;\n    }\n    if (!state.routes) {\n      return state;\n    }\n    const currentIndex = state.index || state.routes.length - 1;\n    const current = state.routes[currentIndex];\n    const name = current.name;\n    const id = getId?.({\n      params: current.params\n    });\n    if (!id) {\n      return state;\n    }\n    // TypeScript needs a type assertion here for the filter to work.\n    let routes = state.routes;\n    routes = routes.filter((route, index) => {\n      // If the route is the current route, keep it.\n      if (index === currentIndex) {\n        return true;\n      }\n      // Remove all other routes with the same name and id.\n      return name !== route.name || id !== getId?.({\n        params: route.params\n      });\n    });\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes\n    };\n  }\n  const Stack = Object.assign(props => {\n    return /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(RNStack, {\n      ...props,\n      UNSTABLE_router: exports.stackRouterOverride\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 12\n    }, this);\n  }, {\n    Screen: RNStack.Screen,\n    Protected: Protected_1.Protected\n  });\n  exports.default = Stack;\n  const StackRouter = options => {\n    const router = (0, native_1.StackRouter)(options);\n    return {\n      ...router,\n      ...(0, exports.stackRouterOverride)(router)\n    };\n  };\n  exports.StackRouter = StackRouter;\n});","lineCount":269,"map":[[2,2,1,0],[2,14,1,12],[3,2,2,0],[3,14,2,12],[5,2,2,13],[5,6,2,13,"_reactJsxDevRuntime"],[5,25,2,13],[5,28,2,13,"require"],[5,35,2,13],[5,36,2,13,"_dependencyMap"],[5,50,2,13],[6,2,2,13],[6,6,2,13,"_jsxFileName"],[6,18,2,13],[7,2,3,0,"Object"],[7,8,3,6],[7,9,3,7,"defineProperty"],[7,23,3,21],[7,24,3,22,"exports"],[7,31,3,29],[7,33,3,31],[7,45,3,43],[7,47,3,45],[8,4,3,47,"value"],[8,9,3,52],[8,11,3,54],[9,2,3,59],[9,3,3,60],[9,4,3,61],[10,2,4,0,"exports"],[10,9,4,7],[10,10,4,8,"StackRouter"],[10,21,4,19],[10,24,4,22,"exports"],[10,31,4,29],[10,32,4,30,"stackRouterOverride"],[10,51,4,49],[10,54,4,52],[10,59,4,57],[10,60,4,58],[11,2,5,0],[11,8,5,6,"native_1"],[11,16,5,14],[11,19,5,17,"require"],[11,26,5,24],[11,27,5,24,"_dependencyMap"],[11,41,5,24],[11,72,5,51],[11,73,5,52],[12,2,6,0],[12,8,6,6,"native_stack_1"],[12,22,6,20],[12,25,6,23,"require"],[12,32,6,30],[12,33,6,30,"_dependencyMap"],[12,47,6,30],[12,84,6,63],[12,85,6,64],[13,2,7,0],[13,8,7,6,"non_secure_1"],[13,20,7,18],[13,23,7,21,"require"],[13,30,7,28],[13,31,7,28,"_dependencyMap"],[13,45,7,28],[13,69,7,48],[13,70,7,49],[14,2,8,0],[14,8,8,6,"withLayoutContext_1"],[14,27,8,25],[14,30,8,28,"require"],[14,37,8,35],[14,38,8,35,"_dependencyMap"],[14,52,8,35],[14,78,8,57],[14,79,8,58],[15,2,9,0],[15,8,9,6,"useScreens_1"],[15,20,9,18],[15,23,9,21,"require"],[15,30,9,28],[15,31,9,28,"_dependencyMap"],[15,45,9,28],[15,65,9,44],[15,66,9,45],[16,2,10,0],[16,8,10,6,"Protected_1"],[16,19,10,17],[16,22,10,20,"require"],[16,29,10,27],[16,30,10,27,"_dependencyMap"],[16,44,10,27],[16,69,10,48],[16,70,10,49],[17,2,11,0],[17,8,11,6,"NativeStackNavigator"],[17,28,11,26],[17,31,11,29],[17,32,11,30],[17,33,11,31],[17,35,11,33,"native_stack_1"],[17,49,11,47],[17,50,11,48,"createNativeStackNavigator"],[17,76,11,74],[17,78,11,76],[17,79,11,77],[17,80,11,78,"Navigator"],[17,89,11,87],[18,2,12,0],[18,8,12,6,"RNStack"],[18,15,12,13],[18,18,12,16],[18,19,12,17],[18,20,12,18],[18,22,12,20,"withLayoutContext_1"],[18,41,12,39],[18,42,12,40,"withLayoutContext"],[18,59,12,57],[18,61,12,59,"NativeStackNavigator"],[18,81,12,79],[18,82,12,80],[19,2,13,0],[19,11,13,9,"isStackAction"],[19,24,13,22,"isStackAction"],[19,25,13,23,"action"],[19,31,13,29],[19,33,13,31],[20,4,14,4],[20,11,14,12,"action"],[20,17,14,18],[20,18,14,19,"type"],[20,22,14,23],[20,27,14,28],[20,33,14,34],[20,37,15,8,"action"],[20,43,15,14],[20,44,15,15,"type"],[20,48,15,19],[20,53,15,24],[20,63,15,34],[20,67,16,8,"action"],[20,73,16,14],[20,74,16,15,"type"],[20,78,16,19],[20,83,16,24],[20,88,16,29],[20,92,17,8,"action"],[20,98,17,14],[20,99,17,15,"type"],[20,103,17,19],[20,108,17,24],[20,120,17,36],[20,124,18,8,"action"],[20,130,18,14],[20,131,18,15,"type"],[20,135,18,19],[20,140,18,24],[20,149,18,33],[21,2,19,0],[22,2,20,0],[23,0,21,0],[24,0,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,0,28,0],[31,2,29,0],[31,8,29,6,"stackRouterOverride"],[31,27,29,25],[31,30,29,29,"original"],[31,38,29,37],[31,42,29,42],[32,4,30,4],[32,11,30,11],[33,6,31,8,"getStateForAction"],[33,23,31,25],[33,25,31,27,"getStateForAction"],[33,26,31,28,"state"],[33,31,31,33],[33,33,31,35,"action"],[33,39,31,41],[33,41,31,43,"options"],[33,48,31,50],[33,53,31,55],[34,8,32,12],[34,12,32,16,"action"],[34,18,32,22],[34,19,32,23,"target"],[34,25,32,29],[34,29,32,33,"action"],[34,35,32,39],[34,36,32,40,"target"],[34,42,32,46],[34,47,32,51,"state"],[34,52,32,56],[34,53,32,57,"key"],[34,56,32,60],[34,58,32,62],[35,10,33,16],[35,17,33,23],[35,21,33,27],[36,8,34,12],[37,8,35,12],[37,12,35,16],[37,13,35,17,"isStackAction"],[37,26,35,30],[37,27,35,31,"action"],[37,33,35,37],[37,34,35,38],[37,36,35,40],[38,10,36,16],[38,17,36,23,"original"],[38,25,36,31],[38,26,36,32,"getStateForAction"],[38,43,36,49],[38,44,36,50,"state"],[38,49,36,55],[38,51,36,57,"action"],[38,57,36,63],[38,59,36,65,"options"],[38,66,36,72],[38,67,36,73],[39,8,37,12],[40,8,38,12],[41,8,39,12],[41,14,39,18,"actionSingularOptions"],[41,35,39,39],[41,38,39,42,"action"],[41,44,39,48],[41,45,39,49,"payload"],[41,52,39,56],[41,56,39,60],[41,66,39,70],[41,70,39,74,"action"],[41,76,39,80],[41,77,39,81,"payload"],[41,84,39,88],[41,87,40,18,"action"],[41,93,40,24],[41,94,40,25,"payload"],[41,101,40,32],[41,102,40,33,"singular"],[41,110,40,41],[41,113,41,18,"undefined"],[41,122,41,27],[42,8,42,12],[43,8,43,12],[43,17,43,21,"getIdFunction"],[43,30,43,34,"getIdFunction"],[43,31,43,34],[43,33,43,37],[44,10,44,16],[45,10,45,16],[45,14,45,20],[45,16,45,22],[45,25,45,31],[45,29,45,35,"action"],[45,35,45,41],[45,36,45,42],[45,40,46,20],[45,41,46,21,"action"],[45,47,46,27],[45,48,46,28,"payload"],[45,55,46,35],[45,59,47,20],[45,61,47,22],[45,67,47,28],[45,71,47,32,"action"],[45,77,47,38],[45,78,47,39,"payload"],[45,85,47,46],[45,86,47,47],[45,90,48,20],[45,97,48,27,"action"],[45,103,48,33],[45,104,48,34,"payload"],[45,111,48,41],[45,112,48,42,"name"],[45,116,48,46],[45,121,48,51],[45,129,48,59],[45,131,48,61],[46,12,49,20],[47,10,50,16],[48,10,51,16],[48,16,51,22,"actionName"],[48,26,51,32],[48,29,51,35,"action"],[48,35,51,41],[48,36,51,42,"payload"],[48,43,51,49],[48,44,51,50,"name"],[48,48,51,54],[49,10,52,16],[50,12,53,16],[51,12,54,16,"getActionSingularIdFn"],[51,33,54,37],[51,34,54,38,"actionSingularOptions"],[51,55,54,59],[51,57,54,61,"actionName"],[51,67,54,71],[51,68,54,72],[52,12,55,20],[53,12,56,20,"options"],[53,19,56,27],[53,20,56,28,"routeGetIdList"],[53,34,56,42],[53,35,56,43,"actionName"],[53,45,56,53],[54,10,56,54],[55,8,57,12],[56,8,58,12],[56,14,58,18],[57,10,58,20,"routeParamList"],[58,8,58,35],[58,9,58,36],[58,12,58,39,"options"],[58,19,58,46],[59,8,59,12],[59,16,59,20,"action"],[59,22,59,26],[59,23,59,27,"type"],[59,27,59,31],[60,10,60,16],[60,15,60,21],[60,21,60,27],[61,10,61,16],[61,15,61,21],[61,25,61,31],[62,12,61,33],[63,14,62,20],[63,18,62,24],[63,19,62,25,"state"],[63,24,62,30],[63,25,62,31,"routeNames"],[63,35,62,41],[63,36,62,42,"includes"],[63,44,62,50],[63,45,62,51,"action"],[63,51,62,57],[63,52,62,58,"payload"],[63,59,62,65],[63,60,62,66,"name"],[63,64,62,70],[63,65,62,71],[63,67,62,73],[64,16,63,24],[64,23,63,31],[64,27,63,35],[65,14,64,20],[66,14,65,20],[67,14,66,20],[67,20,66,26,"getId"],[67,25,66,31],[67,28,66,34,"getIdFunction"],[67,41,66,47],[67,42,66,48],[67,43,66,49],[68,14,67,20],[69,14,68,20],[70,14,69,20],[70,20,69,26,"id"],[70,22,69,28],[70,25,69,31,"getId"],[70,30,69,36],[70,33,69,39],[71,16,69,41,"params"],[71,22,69,47],[71,24,69,49,"action"],[71,30,69,55],[71,31,69,56,"payload"],[71,38,69,63],[71,39,69,64,"params"],[72,14,69,71],[72,15,69,72],[72,16,69,73],[73,14,70,20],[73,18,70,24,"route"],[73,23,70,29],[74,14,71,20],[74,18,71,24,"id"],[74,20,71,26],[74,25,71,31,"undefined"],[74,34,71,40],[74,36,71,42],[75,16,72,24,"route"],[75,21,72,29],[75,24,72,32,"state"],[75,29,72,37],[75,30,72,38,"routes"],[75,36,72,44],[75,37,72,45,"findLast"],[75,45,72,53],[75,46,72,55,"route"],[75,51,72,60],[75,55,72,65,"route"],[75,60,72,70],[75,61,72,71,"name"],[75,65,72,75],[75,70,72,80,"action"],[75,76,72,86],[75,77,72,87,"payload"],[75,84,72,94],[75,85,72,95,"name"],[75,89,72,99],[75,93,72,103,"id"],[75,95,72,105],[75,100,72,110,"getId"],[75,105,72,115],[75,108,72,118],[76,18,72,120,"params"],[76,24,72,126],[76,26,72,128,"route"],[76,31,72,133],[76,32,72,134,"params"],[77,16,72,141],[77,17,72,142],[77,18,72,143],[77,19,72,144],[78,14,73,20],[78,15,73,21],[78,21,74,25],[78,25,74,29,"action"],[78,31,74,35],[78,32,74,36,"type"],[78,36,74,40],[78,41,74,45],[78,51,74,55],[78,53,74,57],[79,16,75,24],[79,22,75,30,"currentRoute"],[79,34,75,42],[79,37,75,45,"state"],[79,42,75,50],[79,43,75,51,"routes"],[79,49,75,57],[79,50,75,58,"state"],[79,55,75,63],[79,56,75,64,"index"],[79,61,75,69],[79,62,75,70],[80,16,76,24],[81,16,77,24],[81,20,77,28,"action"],[81,26,77,34],[81,27,77,35,"payload"],[81,34,77,42],[81,35,77,43,"name"],[81,39,77,47],[81,44,77,52,"currentRoute"],[81,56,77,64],[81,57,77,65,"name"],[81,61,77,69],[81,63,77,71],[82,18,78,28,"route"],[82,23,78,33],[82,26,78,36,"currentRoute"],[82,38,78,48],[83,16,79,24],[83,17,79,25],[83,23,80,29],[83,27,80,33,"action"],[83,33,80,39],[83,34,80,40,"payload"],[83,41,80,47],[83,42,80,48,"pop"],[83,45,80,51],[83,47,80,53],[84,18,81,28,"route"],[84,23,81,33],[84,26,81,36,"state"],[84,31,81,41],[84,32,81,42,"routes"],[84,38,81,48],[84,39,81,49,"findLast"],[84,47,81,57],[84,48,81,59,"route"],[84,53,81,64],[84,57,81,69,"route"],[84,62,81,74],[84,63,81,75,"name"],[84,67,81,79],[84,72,81,84,"action"],[84,78,81,90],[84,79,81,91,"payload"],[84,86,81,98],[84,87,81,99,"name"],[84,91,81,103],[84,92,81,104],[85,16,82,24],[86,14,83,20],[87,14,84,20],[87,18,84,24],[87,19,84,25,"route"],[87,24,84,30],[87,26,84,32],[88,16,85,24,"route"],[88,21,85,29],[88,24,85,32,"state"],[88,29,85,37],[88,30,85,38,"preloadedRoutes"],[88,45,85,53],[88,46,85,54,"find"],[88,50,85,58],[88,51,85,60,"route"],[88,56,85,65],[88,60,85,70,"route"],[88,65,85,75],[88,66,85,76,"name"],[88,70,85,80],[88,75,85,85,"action"],[88,81,85,91],[88,82,85,92,"payload"],[88,89,85,99],[88,90,85,100,"name"],[88,94,85,104],[88,98,85,108,"id"],[88,100,85,110],[88,105,85,115,"getId"],[88,110,85,120],[88,113,85,123],[89,18,85,125,"params"],[89,24,85,131],[89,26,85,133,"route"],[89,31,85,138],[89,32,85,139,"params"],[90,16,85,146],[90,17,85,147],[90,18,85,148],[90,19,85,149],[91,14,86,20],[92,14,87,20],[92,18,87,24,"params"],[92,24,87,30],[93,14,88,20],[93,18,88,24,"action"],[93,24,88,30],[93,25,88,31,"type"],[93,29,88,35],[93,34,88,40],[93,44,88,50],[93,48,88,54,"action"],[93,54,88,60],[93,55,88,61,"payload"],[93,62,88,68],[93,63,88,69,"merge"],[93,68,88,74],[93,72,88,78,"route"],[93,77,88,83],[93,79,88,85],[94,16,89,24,"params"],[94,22,89,30],[94,25,90,28,"action"],[94,31,90,34],[94,32,90,35,"payload"],[94,39,90,42],[94,40,90,43,"params"],[94,46,90,49],[94,51,90,54,"undefined"],[94,60,90,63],[94,64,91,32,"routeParamList"],[94,78,91,46],[94,79,91,47,"action"],[94,85,91,53],[94,86,91,54,"payload"],[94,93,91,61],[94,94,91,62,"name"],[94,98,91,66],[94,99,91,67],[94,104,91,72,"undefined"],[94,113,91,81],[94,116,92,34],[95,18,93,36],[95,21,93,39,"routeParamList"],[95,35,93,53],[95,36,93,54,"action"],[95,42,93,60],[95,43,93,61,"payload"],[95,50,93,68],[95,51,93,69,"name"],[95,55,93,73],[95,56,93,74],[96,18,94,36],[96,21,94,39,"route"],[96,26,94,44],[96,27,94,45,"params"],[96,33,94,51],[97,18,95,36],[97,21,95,39,"action"],[97,27,95,45],[97,28,95,46,"payload"],[97,35,95,53],[97,36,95,54,"params"],[98,16,96,32],[98,17,96,33],[98,20,97,34,"route"],[98,25,97,39],[98,26,97,40,"params"],[98,32,97,46],[99,14,98,20],[99,15,98,21],[99,21,99,25],[100,16,100,24,"params"],[100,22,100,30],[100,25,101,28,"routeParamList"],[100,39,101,42],[100,40,101,43,"action"],[100,46,101,49],[100,47,101,50,"payload"],[100,54,101,57],[100,55,101,58,"name"],[100,59,101,62],[100,60,101,63],[100,65,101,68,"undefined"],[100,74,101,77],[100,77,102,34],[101,18,103,36],[101,21,103,39,"routeParamList"],[101,35,103,53],[101,36,103,54,"action"],[101,42,103,60],[101,43,103,61,"payload"],[101,50,103,68],[101,51,103,69,"name"],[101,55,103,73],[101,56,103,74],[102,18,104,36],[102,21,104,39,"action"],[102,27,104,45],[102,28,104,46,"payload"],[102,35,104,53],[102,36,104,54,"params"],[103,16,105,32],[103,17,105,33],[103,20,106,34,"action"],[103,26,106,40],[103,27,106,41,"payload"],[103,34,106,48],[103,35,106,49,"params"],[103,41,106,55],[104,14,107,20],[105,14,108,20],[105,18,108,24,"routes"],[105,24,108,30],[106,14,109,20],[106,18,109,24,"route"],[106,23,109,29],[106,25,109,31],[107,16,110,24],[107,20,110,28,"action"],[107,26,110,34],[107,27,110,35,"type"],[107,31,110,39],[107,36,110,44],[107,46,110,54],[107,50,110,58,"action"],[107,56,110,64],[107,57,110,65,"payload"],[107,64,110,72],[107,65,110,73,"pop"],[107,68,110,76],[107,70,110,78],[108,18,111,28,"routes"],[108,24,111,34],[108,27,111,37],[108,29,111,39],[109,18,112,28],[110,18,113,28],[110,23,113,33],[110,29,113,39,"r"],[110,30,113,40],[110,34,113,44,"state"],[110,39,113,49],[110,40,113,50,"routes"],[110,46,113,56],[110,48,113,58],[111,20,114,32],[111,24,114,36,"r"],[111,25,114,37],[111,26,114,38,"key"],[111,29,114,41],[111,34,114,46,"route"],[111,39,114,51],[111,40,114,52,"key"],[111,43,114,55],[111,45,114,57],[112,22,115,36,"routes"],[112,28,115,42],[112,29,115,43,"push"],[112,33,115,47],[112,34,115,48],[113,24,116,40],[113,27,116,43,"route"],[113,32,116,48],[114,24,117,40,"path"],[114,28,117,44],[114,30,117,46,"action"],[114,36,117,52],[114,37,117,53,"payload"],[114,44,117,60],[114,45,117,61,"path"],[114,49,117,65],[114,54,117,70,"undefined"],[114,63,117,79],[114,66,117,82,"action"],[114,72,117,88],[114,73,117,89,"payload"],[114,80,117,96],[114,81,117,97,"path"],[114,85,117,101],[114,88,117,104,"route"],[114,93,117,109],[114,94,117,110,"path"],[114,98,117,114],[115,24,118,40,"params"],[116,22,119,36],[116,23,119,37],[116,24,119,38],[117,22,120,36],[118,20,121,32],[119,20,122,32,"routes"],[119,26,122,38],[119,27,122,39,"push"],[119,31,122,43],[119,32,122,44,"r"],[119,33,122,45],[119,34,122,46],[120,18,123,28],[121,16,124,24],[121,17,124,25],[121,23,125,29],[122,18,126,28],[123,18,127,28],[124,18,128,28],[125,18,129,28],[125,22,129,32,"id"],[125,24,129,34],[125,29,129,39,"undefined"],[125,38,129,48],[125,40,129,50],[126,20,130,32,"routes"],[126,26,130,38],[126,29,130,41,"state"],[126,34,130,46],[126,35,130,47,"routes"],[126,41,130,53],[126,42,130,54,"filter"],[126,48,130,60],[126,49,130,62,"r"],[126,50,130,63],[126,54,130,68,"r"],[126,55,130,69],[126,56,130,70,"key"],[126,59,130,73],[126,64,130,78,"route"],[126,69,130,83],[126,70,130,84,"key"],[126,73,130,87],[126,74,130,88],[127,18,131,28],[127,19,131,29],[127,25,132,33],[127,29,132,37,"action"],[127,35,132,43],[127,36,132,44,"type"],[127,40,132,48],[127,45,132,53],[127,55,132,63],[127,59,132,67,"state"],[127,64,132,72],[127,65,132,73,"routes"],[127,71,132,79],[127,72,132,80,"length"],[127,78,132,86],[127,81,132,89],[127,82,132,90],[127,84,132,92],[128,20,133,32],[129,20,134,32],[129,26,134,38,"lastRoute"],[129,35,134,47],[129,38,134,50,"state"],[129,43,134,55],[129,44,134,56,"routes"],[129,50,134,62],[129,51,134,63,"state"],[129,56,134,68],[129,57,134,69,"routes"],[129,63,134,75],[129,64,134,76,"length"],[129,70,134,82],[129,73,134,85],[129,74,134,86],[129,75,134,87],[130,20,135,32],[130,24,135,36],[130,25,135,37],[130,26,135,38],[130,28,135,40,"useScreens_1"],[130,40,135,52],[130,41,135,53,"getSingularId"],[130,54,135,66],[130,56,135,68,"lastRoute"],[130,65,135,77],[130,66,135,78,"name"],[130,70,135,82],[130,72,135,84],[131,22,135,86,"params"],[131,28,135,92],[131,30,135,94,"lastRoute"],[131,39,135,103],[131,40,135,104,"params"],[132,20,135,111],[132,21,135,112],[132,22,135,113],[132,27,136,36],[132,28,136,37],[132,29,136,38],[132,31,136,40,"useScreens_1"],[132,43,136,52],[132,44,136,53,"getSingularId"],[132,57,136,66],[132,59,136,68,"route"],[132,64,136,73],[132,65,136,74,"name"],[132,69,136,78],[132,71,136,80],[133,22,136,82,"params"],[134,20,136,89],[134,21,136,90],[134,22,136,91],[134,24,136,93],[135,22,137,36,"routes"],[135,28,137,42],[135,31,137,45,"state"],[135,36,137,50],[135,37,137,51,"routes"],[135,43,137,57],[135,44,137,58,"slice"],[135,49,137,63],[135,50,137,64],[135,51,137,65],[135,53,137,67],[135,54,137,68],[135,55,137,69],[135,56,137,70],[136,20,138,32],[136,21,138,33],[136,27,139,37],[137,22,140,36,"routes"],[137,28,140,42],[137,31,140,45],[137,32,140,46],[137,35,140,49,"state"],[137,40,140,54],[137,41,140,55,"routes"],[137,47,140,61],[137,48,140,62],[138,20,141,32],[139,18,142,28],[139,19,142,29],[139,25,143,33],[140,20,144,32,"routes"],[140,26,144,38],[140,29,144,41],[140,30,144,42],[140,33,144,45,"state"],[140,38,144,50],[140,39,144,51,"routes"],[140,45,144,57],[140,46,144,58],[141,18,145,28],[142,18,146,28],[143,18,147,28],[144,18,148,28],[144,24,148,34,"key"],[144,27,148,37],[144,30,148,40,"routes"],[144,36,148,46],[144,37,148,47,"length"],[144,43,148,53],[144,48,148,58,"state"],[144,53,148,63],[144,54,148,64,"routes"],[144,60,148,70],[144,61,148,71,"length"],[144,67,148,77],[144,70,149,34],[144,73,149,37,"action"],[144,79,149,43],[144,80,149,44,"payload"],[144,87,149,51],[144,88,149,52,"name"],[144,92,149,56],[144,96,149,60],[144,97,149,61],[144,98,149,62],[144,100,149,64,"non_secure_1"],[144,112,149,76],[144,113,149,77,"nanoid"],[144,119,149,83],[144,121,149,85],[144,122,149,86],[144,124,149,88],[144,127,150,34,"route"],[144,132,150,39],[144,133,150,40,"key"],[144,136,150,43],[145,18,151,28,"routes"],[145,24,151,34],[145,25,151,35,"push"],[145,29,151,39],[145,30,151,40],[146,20,152,32],[146,23,152,35,"route"],[146,28,152,40],[147,20,153,32,"key"],[147,23,153,35],[148,20,154,32,"path"],[148,24,154,36],[148,26,154,38,"action"],[148,32,154,44],[148,33,154,45,"type"],[148,37,154,49],[148,42,154,54],[148,52,154,64],[148,56,154,68,"action"],[148,62,154,74],[148,63,154,75,"payload"],[148,70,154,82],[148,71,154,83,"path"],[148,75,154,87],[148,80,154,92,"undefined"],[148,89,154,101],[148,92,155,38,"action"],[148,98,155,44],[148,99,155,45,"payload"],[148,106,155,52],[148,107,155,53,"path"],[148,111,155,57],[148,114,156,38,"route"],[148,119,156,43],[148,120,156,44,"path"],[148,124,156,48],[149,20,157,32,"params"],[150,18,158,28],[150,19,158,29],[150,20,158,30],[151,18,159,28],[152,18,160,28],[153,18,161,28],[154,18,162,28],[155,18,163,28],[156,18,164,28],[157,18,165,28],[158,18,166,28],[159,18,167,28],[160,18,168,28],[161,16,169,24],[162,14,170,20],[162,15,170,21],[162,21,171,25],[163,16,172,24,"routes"],[163,22,172,30],[163,25,172,33],[163,26,173,28],[163,29,173,31,"state"],[163,34,173,36],[163,35,173,37,"routes"],[163,41,173,43],[163,43,174,28],[164,18,175,32,"key"],[164,21,175,35],[164,23,175,37],[164,26,175,40,"action"],[164,32,175,46],[164,33,175,47,"payload"],[164,40,175,54],[164,41,175,55,"name"],[164,45,175,59],[164,49,175,63],[164,50,175,64],[164,51,175,65],[164,53,175,67,"non_secure_1"],[164,65,175,79],[164,66,175,80,"nanoid"],[164,72,175,86],[164,74,175,88],[164,75,175,89],[164,77,175,91],[165,18,176,32,"name"],[165,22,176,36],[165,24,176,38,"action"],[165,30,176,44],[165,31,176,45,"payload"],[165,38,176,52],[165,39,176,53,"name"],[165,43,176,57],[166,18,177,32,"path"],[166,22,177,36],[166,24,177,38,"action"],[166,30,177,44],[166,31,177,45,"type"],[166,35,177,49],[166,40,177,54],[166,50,177,64],[166,53,177,67,"action"],[166,59,177,73],[166,60,177,74,"payload"],[166,67,177,81],[166,68,177,82,"path"],[166,72,177,86],[166,75,177,89,"undefined"],[166,84,177,98],[167,18,178,32,"params"],[168,16,179,28],[168,17,179,29],[168,18,180,25],[169,14,181,20],[170,14,182,20],[171,14,183,20],[172,14,184,20],[172,20,184,26,"result"],[172,26,184,32],[172,29,184,35],[173,16,185,24],[173,19,185,27,"state"],[173,24,185,32],[174,16,186,24,"index"],[174,21,186,29],[174,23,186,31,"routes"],[174,29,186,37],[174,30,186,38,"length"],[174,36,186,44],[174,39,186,47],[174,40,186,48],[175,16,187,24,"preloadedRoutes"],[175,31,187,39],[175,33,187,41,"state"],[175,38,187,46],[175,39,187,47,"preloadedRoutes"],[175,54,187,62],[175,55,187,63,"filter"],[175,61,187,69],[175,62,187,71,"route"],[175,67,187,76],[175,71,187,81,"routes"],[175,77,187,87],[175,78,187,88,"routes"],[175,84,187,94],[175,85,187,95,"length"],[175,91,187,101],[175,94,187,104],[175,95,187,105],[175,96,187,106],[175,97,187,107,"key"],[175,100,187,110],[175,105,187,115,"route"],[175,110,187,120],[175,111,187,121,"key"],[175,114,187,124],[175,115,187,125],[176,16,188,24,"routes"],[177,14,189,20],[177,15,189,21],[178,14,190,20],[178,18,190,24,"actionSingularOptions"],[178,39,190,45],[178,41,190,47],[179,16,191,24],[179,23,191,31,"filterSingular"],[179,37,191,45],[179,38,191,46,"result"],[179,44,191,52],[179,46,191,54,"getId"],[179,51,191,59],[179,52,191,60],[180,14,192,20],[181,14,193,20],[181,21,193,27,"result"],[181,27,193,33],[182,14,194,20],[183,14,195,20],[184,14,196,20],[185,14,197,20],[186,14,198,20],[187,14,199,20],[188,14,200,20],[189,14,201,20],[190,14,202,20],[191,12,203,16],[192,10,204,16],[193,12,204,25],[194,14,205,20],[194,21,205,27,"original"],[194,29,205,35],[194,30,205,36,"getStateForAction"],[194,47,205,53],[194,48,205,54,"state"],[194,53,205,59],[194,55,205,61,"action"],[194,61,205,67],[194,63,205,69,"options"],[194,70,205,76],[194,71,205,77],[195,12,206,16],[196,8,207,12],[197,6,208,8],[198,4,209,4],[198,5,209,5],[199,2,210,0],[199,3,210,1],[200,2,211,0,"exports"],[200,9,211,7],[200,10,211,8,"stackRouterOverride"],[200,29,211,27],[200,32,211,30,"stackRouterOverride"],[200,51,211,49],[201,2,212,0],[201,11,212,9,"getActionSingularIdFn"],[201,32,212,30,"getActionSingularIdFn"],[201,33,212,31,"actionGetId"],[201,44,212,42],[201,46,212,44,"name"],[201,50,212,48],[201,52,212,50],[202,4,213,4],[202,8,213,8],[202,15,213,15,"actionGetId"],[202,26,213,26],[202,31,213,31],[202,41,213,41],[202,43,213,43],[203,6,214,8],[203,13,214,16,"options"],[203,20,214,23],[203,24,214,28,"actionGetId"],[203,35,214,39],[203,36,214,40,"name"],[203,40,214,44],[203,42,214,46,"options"],[203,49,214,53],[203,50,214,54,"params"],[203,56,214,60],[203,60,214,64],[203,61,214,65],[203,62,214,66],[203,63,214,67],[204,4,215,4],[204,5,215,5],[204,11,216,9],[204,15,216,13,"actionGetId"],[204,26,216,24],[204,31,216,29],[204,35,216,33],[204,37,216,35],[205,6,217,8],[205,13,217,16,"options"],[205,20,217,23],[205,24,217,28],[205,25,217,29],[205,26,217,30],[205,28,217,32,"useScreens_1"],[205,40,217,44],[205,41,217,45,"getSingularId"],[205,54,217,58],[205,56,217,60,"name"],[205,60,217,64],[205,62,217,66,"options"],[205,69,217,73],[205,70,217,74],[206,4,218,4],[207,4,219,4],[207,11,219,11,"undefined"],[207,20,219,20],[208,2,220,0],[209,2,221,0],[210,0,222,0],[211,0,223,0],[212,0,224,0],[213,2,225,0],[213,11,225,9,"filterSingular"],[213,25,225,23,"filterSingular"],[213,26,225,24,"state"],[213,31,225,29],[213,33,225,31,"getId"],[213,38,225,36],[213,40,225,38],[214,4,226,4],[214,8,226,8],[214,9,226,9,"state"],[214,14,226,14],[214,16,226,16],[215,6,227,8],[215,13,227,15,"state"],[215,18,227,20],[216,4,228,4],[217,4,229,4],[217,8,229,8],[217,9,229,9,"state"],[217,14,229,14],[217,15,229,15,"routes"],[217,21,229,21],[217,23,229,23],[218,6,230,8],[218,13,230,15,"state"],[218,18,230,20],[219,4,231,4],[220,4,232,4],[220,10,232,10,"currentIndex"],[220,22,232,22],[220,25,232,25,"state"],[220,30,232,30],[220,31,232,31,"index"],[220,36,232,36],[220,40,232,40,"state"],[220,45,232,45],[220,46,232,46,"routes"],[220,52,232,52],[220,53,232,53,"length"],[220,59,232,59],[220,62,232,62],[220,63,232,63],[221,4,233,4],[221,10,233,10,"current"],[221,17,233,17],[221,20,233,20,"state"],[221,25,233,25],[221,26,233,26,"routes"],[221,32,233,32],[221,33,233,33,"currentIndex"],[221,45,233,45],[221,46,233,46],[222,4,234,4],[222,10,234,10,"name"],[222,14,234,14],[222,17,234,17,"current"],[222,24,234,24],[222,25,234,25,"name"],[222,29,234,29],[223,4,235,4],[223,10,235,10,"id"],[223,12,235,12],[223,15,235,15,"getId"],[223,20,235,20],[223,23,235,23],[224,6,235,25,"params"],[224,12,235,31],[224,14,235,33,"current"],[224,21,235,40],[224,22,235,41,"params"],[225,4,235,48],[225,5,235,49],[225,6,235,50],[226,4,236,4],[226,8,236,8],[226,9,236,9,"id"],[226,11,236,11],[226,13,236,13],[227,6,237,8],[227,13,237,15,"state"],[227,18,237,20],[228,4,238,4],[229,4,239,4],[230,4,240,4],[230,8,240,8,"routes"],[230,14,240,14],[230,17,240,17,"state"],[230,22,240,22],[230,23,240,23,"routes"],[230,29,240,29],[231,4,241,4,"routes"],[231,10,241,10],[231,13,241,13,"routes"],[231,19,241,19],[231,20,241,20,"filter"],[231,26,241,26],[231,27,241,27],[231,28,241,28,"route"],[231,33,241,33],[231,35,241,35,"index"],[231,40,241,40],[231,45,241,45],[232,6,242,8],[233,6,243,8],[233,10,243,12,"index"],[233,15,243,17],[233,20,243,22,"currentIndex"],[233,32,243,34],[233,34,243,36],[234,8,244,12],[234,15,244,19],[234,19,244,23],[235,6,245,8],[236,6,246,8],[237,6,247,8],[237,13,247,15,"name"],[237,17,247,19],[237,22,247,24,"route"],[237,27,247,29],[237,28,247,30,"name"],[237,32,247,34],[237,36,247,38,"id"],[237,38,247,40],[237,43,247,45,"getId"],[237,48,247,50],[237,51,247,53],[238,8,247,55,"params"],[238,14,247,61],[238,16,247,63,"route"],[238,21,247,68],[238,22,247,69,"params"],[239,6,247,76],[239,7,247,77],[239,8,247,78],[240,4,248,4],[240,5,248,5],[240,6,248,6],[241,4,249,4],[241,11,249,11],[242,6,250,8],[242,9,250,11,"state"],[242,14,250,16],[243,6,251,8,"index"],[243,11,251,13],[243,13,251,15,"routes"],[243,19,251,21],[243,20,251,22,"length"],[243,26,251,28],[243,29,251,31],[243,30,251,32],[244,6,252,8,"routes"],[245,4,253,4],[245,5,253,5],[246,2,254,0],[247,2,255,0],[247,8,255,6,"Stack"],[247,13,255,11],[247,16,255,14,"Object"],[247,22,255,20],[247,23,255,21,"assign"],[247,29,255,27],[247,30,255,29,"props"],[247,35,255,34],[247,39,255,39],[248,4,256,4],[248,24,256,11,"_reactJsxDevRuntime"],[248,43,256,11],[248,44,256,11,"jsxDEV"],[248,50,256,11],[248,51,256,12,"RNStack"],[248,58,256,19],[249,6,256,19],[249,9,256,24,"props"],[249,14,256,29],[250,6,256,31,"UNSTABLE_router"],[250,21,256,46],[250,23,256,48,"exports"],[250,30,256,55],[250,31,256,56,"stackRouterOverride"],[251,4,256,76],[252,6,256,76,"fileName"],[252,14,256,76],[252,16,256,76,"_jsxFileName"],[252,28,256,76],[253,6,256,76,"lineNumber"],[253,16,256,76],[254,6,256,76,"columnNumber"],[254,18,256,76],[255,4,256,76],[255,11,256,77],[255,12,256,78],[256,2,257,0],[256,3,257,1],[256,5,257,3],[257,4,258,4,"Screen"],[257,10,258,10],[257,12,258,12,"RNStack"],[257,19,258,19],[257,20,258,20,"Screen"],[257,26,258,26],[258,4,259,4,"Protected"],[258,13,259,13],[258,15,259,15,"Protected_1"],[258,26,259,26],[258,27,259,27,"Protected"],[259,2,260,0],[259,3,260,1],[259,4,260,2],[260,2,261,0,"exports"],[260,9,261,7],[260,10,261,8,"default"],[260,17,261,15],[260,20,261,18,"Stack"],[260,25,261,23],[261,2,262,0],[261,8,262,6,"StackRouter"],[261,19,262,17],[261,22,262,21,"options"],[261,29,262,28],[261,33,262,33],[262,4,263,4],[262,10,263,10,"router"],[262,16,263,16],[262,19,263,19],[262,20,263,20],[262,21,263,21],[262,23,263,23,"native_1"],[262,31,263,31],[262,32,263,32,"StackRouter"],[262,43,263,43],[262,45,263,45,"options"],[262,52,263,52],[262,53,263,53],[263,4,264,4],[263,11,264,11],[264,6,265,8],[264,9,265,11,"router"],[264,15,265,17],[265,6,266,8],[265,9,266,11],[265,10,266,12],[265,11,266,13],[265,13,266,15,"exports"],[265,20,266,22],[265,21,266,23,"stackRouterOverride"],[265,40,266,42],[265,42,266,44,"router"],[265,48,266,50],[266,4,267,4],[266,5,267,5],[267,2,268,0],[267,3,268,1],[268,2,269,0,"exports"],[268,9,269,7],[268,10,269,8,"StackRouter"],[268,21,269,19],[268,24,269,22,"StackRouter"],[268,35,269,33],[269,0,269,34],[269,3]],"functionMap":{"names":["<global>","isStackAction","stackRouterOverride","getStateForAction","getIdFunction","state.routes.findLast$argument_0","state.preloadedRoutes.find$argument_0","state.routes.filter$argument_0","state.preloadedRoutes.filter$argument_0","getActionSingularIdFn","<anonymous>","filterSingular","routes.filter$argument_0","Object.assign$argument_0","StackRouter"],"mappings":"AAA;ACY;CDM;4BEU;2BCE;YCY;aDc;sDEe,yFF;0DES,6CF;2DGI,yFH;6DI6C,0BJ;sEKyD,sDL;SDqB;CFE;ASE;eCE,oDD;eCG,2DD;CTG;AWK;2BCgB;KDO;CXM;4BaC;CbE;oBcK;CdM"}},"type":"js/module"}]}