{"dependencies":[{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":21,"index":149},"end":{"line":4,"column":49,"index":177}}],"key":"JdWyQHWvvi7kws4n0MhZWUpiB2c=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createMemoryHistory = createMemoryHistory;\n  const non_secure_1 = require(_dependencyMap[0], \"nanoid/non-secure\");\n  function createMemoryHistory() {\n    let index = 0;\n    let items = [];\n    // Pending callbacks for `history.go(n)`\n    // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n    const pending = [];\n    const interrupt = () => {\n      // If another history operation was performed we need to interrupt existing ones\n      // This makes sure that calls such as `history.replace` after `history.go` don't happen\n      // Since otherwise it won't be correct if something else has changed\n      pending.forEach(it => {\n        const cb = it.cb;\n        it.cb = () => cb(true);\n      });\n    };\n    const history = {\n      get index() {\n        // We store an id in the state instead of an index\n        // Index could get out of sync with in-memory values if page reloads\n        const id = window.history.state?.id;\n        if (id) {\n          const index = items.findIndex(item => item.id === id);\n          return index > -1 ? index : 0;\n        }\n        return 0;\n      },\n      get(index) {\n        return items[index];\n      },\n      backIndex({\n        path\n      }) {\n        // We need to find the index from the element before current to get closest path to go back to\n        for (let i = index - 1; i >= 0; i--) {\n          const item = items[i];\n          if (item.path === path) {\n            return i;\n          }\n        }\n        return -1;\n      },\n      push({\n        path,\n        state\n      }) {\n        interrupt();\n        const id = (0, non_secure_1.nanoid)();\n        // When a new entry is pushed, all the existing entries after index will be inaccessible\n        // So we remove any existing entries after the current index to clean them up\n        items = items.slice(0, index + 1);\n        items.push({\n          path,\n          state,\n          id\n        });\n        index = items.length - 1;\n        // We pass empty string for title because it's ignored in all browsers except safari\n        // We don't store state object in history.state because:\n        // - browsers have limits on how big it can be, and we don't control the size\n        // - while not recommended, there could be non-serializable data in state\n        window.history.pushState({\n          id\n        }, '', path);\n      },\n      replace({\n        path,\n        state\n      }) {\n        interrupt();\n        const id = window.history.state?.id ?? (0, non_secure_1.nanoid)();\n        // Need to keep the hash part of the path if there was no previous history entry\n        // or the previous history entry had the same path\n        let pathWithHash = path;\n        const hash = pathWithHash.includes('#') ? '' : location.hash;\n        if (!items.length || items.findIndex(item => item.id === id) < 0) {\n          // There are two scenarios for creating an array with only one history record:\n          // - When loaded id not found in the items array, this function by default will replace\n          //   the first item. We need to keep only the new updated object, otherwise it will break\n          //   the page when navigating forward in history.\n          // - This is the first time any state modifications are done\n          //   So we need to push the entry as there's nothing to replace\n          pathWithHash = pathWithHash + hash;\n          items = [{\n            path: pathWithHash,\n            state,\n            id\n          }];\n          index = 0;\n        } else {\n          if (items[index].path === path) {\n            pathWithHash = pathWithHash + hash;\n          }\n          items[index] = {\n            path,\n            state,\n            id\n          };\n        }\n        window.history.replaceState({\n          id\n        }, '', pathWithHash);\n      },\n      // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n      // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n      // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n      // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n      // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n      go(n) {\n        interrupt();\n        // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n        // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n        const nextIndex = index + n;\n        const lastItemIndex = items.length - 1;\n        if (n < 0 && !items[nextIndex]) {\n          // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n          n = -index;\n          index = 0;\n        } else if (n > 0 && nextIndex > lastItemIndex) {\n          // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n          n = lastItemIndex - index;\n          index = lastItemIndex;\n        } else {\n          index = nextIndex;\n        }\n        if (n === 0) {\n          return;\n        }\n        // When we call `history.go`, `popstate` will fire when there's history to go back to\n        // So we need to somehow handle following cases:\n        // - There's history to go back, `history.go` is called, and `popstate` fires\n        // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n        // - No history to go back, but `history.go` was called, browser has no API to detect it\n        return new Promise((resolve, reject) => {\n          const done = interrupted => {\n            clearTimeout(timer);\n            if (interrupted) {\n              reject(new Error('History was changed during navigation.'));\n              return;\n            }\n            // There seems to be a bug in Chrome regarding updating the title\n            // If we set a title just before calling `history.go`, the title gets lost\n            // However the value of `document.title` is still what we set it to\n            // It's just not displayed in the tab bar\n            // To update the tab bar, we need to reset the title to something else first (e.g. '')\n            // And set the title to what it was before so it gets applied\n            // It won't work without setting it to empty string coz otherwise title isn't changing\n            // Which means that the browser won't do anything after setting the title\n            const {\n              title\n            } = window.document;\n            window.document.title = '';\n            window.document.title = title;\n            resolve();\n          };\n          pending.push({\n            ref: done,\n            cb: done\n          });\n          // If navigation didn't happen within 100ms, assume that it won't happen\n          // This may not be accurate, but hopefully it won't take so much time\n          // In Chrome, navigation seems to happen instantly in next microtask\n          // But on Firefox, it seems to take much longer, around 50ms from our testing\n          // We're using a hacky timeout since there doesn't seem to be way to know for sure\n          const timer = setTimeout(() => {\n            const index = pending.findIndex(it => it.ref === done);\n            if (index > -1) {\n              pending[index].cb();\n              pending.splice(index, 1);\n            }\n          }, 100);\n          const onPopState = () => {\n            const id = window.history.state?.id;\n            const currentIndex = items.findIndex(item => item.id === id);\n            // Fix createMemoryHistory.index variable's value\n            // as it may go out of sync when navigating in the browser.\n            index = Math.max(currentIndex, 0);\n            const last = pending.pop();\n            window.removeEventListener('popstate', onPopState);\n            last?.cb();\n          };\n          window.addEventListener('popstate', onPopState);\n          window.history.go(n);\n        });\n      },\n      // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n      // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n      // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n      listen(listener) {\n        const onPopState = () => {\n          if (pending.length) {\n            // This was triggered by `history.go(n)`, we shouldn't call the listener\n            return;\n          }\n          listener();\n        };\n        window.addEventListener('popstate', onPopState);\n        return () => window.removeEventListener('popstate', onPopState);\n      }\n    };\n    return history;\n  }\n});","lineCount":210,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"createMemoryHistory"],[7,29,3,27],[7,32,3,30,"createMemoryHistory"],[7,51,3,49],[8,2,4,0],[8,8,4,6,"non_secure_1"],[8,20,4,18],[8,23,4,21,"require"],[8,30,4,28],[8,31,4,28,"_dependencyMap"],[8,45,4,28],[8,69,4,48],[8,70,4,49],[9,2,5,0],[9,11,5,9,"createMemoryHistory"],[9,30,5,28,"createMemoryHistory"],[9,31,5,28],[9,33,5,31],[10,4,6,4],[10,8,6,8,"index"],[10,13,6,13],[10,16,6,16],[10,17,6,17],[11,4,7,4],[11,8,7,8,"items"],[11,13,7,13],[11,16,7,16],[11,18,7,18],[12,4,8,4],[13,4,9,4],[14,4,10,4],[14,10,10,10,"pending"],[14,17,10,17],[14,20,10,20],[14,22,10,22],[15,4,11,4],[15,10,11,10,"interrupt"],[15,19,11,19],[15,22,11,22,"interrupt"],[15,23,11,22],[15,28,11,28],[16,6,12,8],[17,6,13,8],[18,6,14,8],[19,6,15,8,"pending"],[19,13,15,15],[19,14,15,16,"forEach"],[19,21,15,23],[19,22,15,25,"it"],[19,24,15,27],[19,28,15,32],[20,8,16,12],[20,14,16,18,"cb"],[20,16,16,20],[20,19,16,23,"it"],[20,21,16,25],[20,22,16,26,"cb"],[20,24,16,28],[21,8,17,12,"it"],[21,10,17,14],[21,11,17,15,"cb"],[21,13,17,17],[21,16,17,20],[21,22,17,26,"cb"],[21,24,17,28],[21,25,17,29],[21,29,17,33],[21,30,17,34],[22,6,18,8],[22,7,18,9],[22,8,18,10],[23,4,19,4],[23,5,19,5],[24,4,20,4],[24,10,20,10,"history"],[24,17,20,17],[24,20,20,20],[25,6,21,8],[25,10,21,12,"index"],[25,15,21,17,"index"],[25,16,21,17],[25,18,21,20],[26,8,22,12],[27,8,23,12],[28,8,24,12],[28,14,24,18,"id"],[28,16,24,20],[28,19,24,23,"window"],[28,25,24,29],[28,26,24,30,"history"],[28,33,24,37],[28,34,24,38,"state"],[28,39,24,43],[28,41,24,45,"id"],[28,43,24,47],[29,8,25,12],[29,12,25,16,"id"],[29,14,25,18],[29,16,25,20],[30,10,26,16],[30,16,26,22,"index"],[30,21,26,27],[30,24,26,30,"items"],[30,29,26,35],[30,30,26,36,"findIndex"],[30,39,26,45],[30,40,26,47,"item"],[30,44,26,51],[30,48,26,56,"item"],[30,52,26,60],[30,53,26,61,"id"],[30,55,26,63],[30,60,26,68,"id"],[30,62,26,70],[30,63,26,71],[31,10,27,16],[31,17,27,23,"index"],[31,22,27,28],[31,25,27,31],[31,26,27,32],[31,27,27,33],[31,30,27,36,"index"],[31,35,27,41],[31,38,27,44],[31,39,27,45],[32,8,28,12],[33,8,29,12],[33,15,29,19],[33,16,29,20],[34,6,30,8],[34,7,30,9],[35,6,31,8,"get"],[35,9,31,11,"get"],[35,10,31,12,"index"],[35,15,31,17],[35,17,31,19],[36,8,32,12],[36,15,32,19,"items"],[36,20,32,24],[36,21,32,25,"index"],[36,26,32,30],[36,27,32,31],[37,6,33,8],[37,7,33,9],[38,6,34,8,"backIndex"],[38,15,34,17,"backIndex"],[38,16,34,18],[39,8,34,20,"path"],[40,6,34,25],[40,7,34,26],[40,9,34,28],[41,8,35,12],[42,8,36,12],[42,13,36,17],[42,17,36,21,"i"],[42,18,36,22],[42,21,36,25,"index"],[42,26,36,30],[42,29,36,33],[42,30,36,34],[42,32,36,36,"i"],[42,33,36,37],[42,37,36,41],[42,38,36,42],[42,40,36,44,"i"],[42,41,36,45],[42,43,36,47],[42,45,36,49],[43,10,37,16],[43,16,37,22,"item"],[43,20,37,26],[43,23,37,29,"items"],[43,28,37,34],[43,29,37,35,"i"],[43,30,37,36],[43,31,37,37],[44,10,38,16],[44,14,38,20,"item"],[44,18,38,24],[44,19,38,25,"path"],[44,23,38,29],[44,28,38,34,"path"],[44,32,38,38],[44,34,38,40],[45,12,39,20],[45,19,39,27,"i"],[45,20,39,28],[46,10,40,16],[47,8,41,12],[48,8,42,12],[48,15,42,19],[48,16,42,20],[48,17,42,21],[49,6,43,8],[49,7,43,9],[50,6,44,8,"push"],[50,10,44,12,"push"],[50,11,44,13],[51,8,44,15,"path"],[51,12,44,19],[52,8,44,21,"state"],[53,6,44,27],[53,7,44,28],[53,9,44,30],[54,8,45,12,"interrupt"],[54,17,45,21],[54,18,45,22],[54,19,45,23],[55,8,46,12],[55,14,46,18,"id"],[55,16,46,20],[55,19,46,23],[55,20,46,24],[55,21,46,25],[55,23,46,27,"non_secure_1"],[55,35,46,39],[55,36,46,40,"nanoid"],[55,42,46,46],[55,44,46,48],[55,45,46,49],[56,8,47,12],[57,8,48,12],[58,8,49,12,"items"],[58,13,49,17],[58,16,49,20,"items"],[58,21,49,25],[58,22,49,26,"slice"],[58,27,49,31],[58,28,49,32],[58,29,49,33],[58,31,49,35,"index"],[58,36,49,40],[58,39,49,43],[58,40,49,44],[58,41,49,45],[59,8,50,12,"items"],[59,13,50,17],[59,14,50,18,"push"],[59,18,50,22],[59,19,50,23],[60,10,50,25,"path"],[60,14,50,29],[61,10,50,31,"state"],[61,15,50,36],[62,10,50,38,"id"],[63,8,50,41],[63,9,50,42],[63,10,50,43],[64,8,51,12,"index"],[64,13,51,17],[64,16,51,20,"items"],[64,21,51,25],[64,22,51,26,"length"],[64,28,51,32],[64,31,51,35],[64,32,51,36],[65,8,52,12],[66,8,53,12],[67,8,54,12],[68,8,55,12],[69,8,56,12,"window"],[69,14,56,18],[69,15,56,19,"history"],[69,22,56,26],[69,23,56,27,"pushState"],[69,32,56,36],[69,33,56,37],[70,10,56,39,"id"],[71,8,56,42],[71,9,56,43],[71,11,56,45],[71,13,56,47],[71,15,56,49,"path"],[71,19,56,53],[71,20,56,54],[72,6,57,8],[72,7,57,9],[73,6,58,8,"replace"],[73,13,58,15,"replace"],[73,14,58,16],[74,8,58,18,"path"],[74,12,58,22],[75,8,58,24,"state"],[76,6,58,30],[76,7,58,31],[76,9,58,33],[77,8,59,12,"interrupt"],[77,17,59,21],[77,18,59,22],[77,19,59,23],[78,8,60,12],[78,14,60,18,"id"],[78,16,60,20],[78,19,60,23,"window"],[78,25,60,29],[78,26,60,30,"history"],[78,33,60,37],[78,34,60,38,"state"],[78,39,60,43],[78,41,60,45,"id"],[78,43,60,47],[78,47,60,51],[78,48,60,52],[78,49,60,53],[78,51,60,55,"non_secure_1"],[78,63,60,67],[78,64,60,68,"nanoid"],[78,70,60,74],[78,72,60,76],[78,73,60,77],[79,8,61,12],[80,8,62,12],[81,8,63,12],[81,12,63,16,"pathWithHash"],[81,24,63,28],[81,27,63,31,"path"],[81,31,63,35],[82,8,64,12],[82,14,64,18,"hash"],[82,18,64,22],[82,21,64,25,"pathWithHash"],[82,33,64,37],[82,34,64,38,"includes"],[82,42,64,46],[82,43,64,47],[82,46,64,50],[82,47,64,51],[82,50,64,54],[82,52,64,56],[82,55,64,59,"location"],[82,63,64,67],[82,64,64,68,"hash"],[82,68,64,72],[83,8,65,12],[83,12,65,16],[83,13,65,17,"items"],[83,18,65,22],[83,19,65,23,"length"],[83,25,65,29],[83,29,65,33,"items"],[83,34,65,38],[83,35,65,39,"findIndex"],[83,44,65,48],[83,45,65,50,"item"],[83,49,65,54],[83,53,65,59,"item"],[83,57,65,63],[83,58,65,64,"id"],[83,60,65,66],[83,65,65,71,"id"],[83,67,65,73],[83,68,65,74],[83,71,65,77],[83,72,65,78],[83,74,65,80],[84,10,66,16],[85,10,67,16],[86,10,68,16],[87,10,69,16],[88,10,70,16],[89,10,71,16],[90,10,72,16,"pathWithHash"],[90,22,72,28],[90,25,72,31,"pathWithHash"],[90,37,72,43],[90,40,72,46,"hash"],[90,44,72,50],[91,10,73,16,"items"],[91,15,73,21],[91,18,73,24],[91,19,73,25],[92,12,73,27,"path"],[92,16,73,31],[92,18,73,33,"pathWithHash"],[92,30,73,45],[93,12,73,47,"state"],[93,17,73,52],[94,12,73,54,"id"],[95,10,73,57],[95,11,73,58],[95,12,73,59],[96,10,74,16,"index"],[96,15,74,21],[96,18,74,24],[96,19,74,25],[97,8,75,12],[97,9,75,13],[97,15,76,17],[98,10,77,16],[98,14,77,20,"items"],[98,19,77,25],[98,20,77,26,"index"],[98,25,77,31],[98,26,77,32],[98,27,77,33,"path"],[98,31,77,37],[98,36,77,42,"path"],[98,40,77,46],[98,42,77,48],[99,12,78,20,"pathWithHash"],[99,24,78,32],[99,27,78,35,"pathWithHash"],[99,39,78,47],[99,42,78,50,"hash"],[99,46,78,54],[100,10,79,16],[101,10,80,16,"items"],[101,15,80,21],[101,16,80,22,"index"],[101,21,80,27],[101,22,80,28],[101,25,80,31],[102,12,80,33,"path"],[102,16,80,37],[103,12,80,39,"state"],[103,17,80,44],[104,12,80,46,"id"],[105,10,80,49],[105,11,80,50],[106,8,81,12],[107,8,82,12,"window"],[107,14,82,18],[107,15,82,19,"history"],[107,22,82,26],[107,23,82,27,"replaceState"],[107,35,82,39],[107,36,82,40],[108,10,82,42,"id"],[109,8,82,45],[109,9,82,46],[109,11,82,48],[109,13,82,50],[109,15,82,52,"pathWithHash"],[109,27,82,64],[109,28,82,65],[110,6,83,8],[110,7,83,9],[111,6,84,8],[112,6,85,8],[113,6,86,8],[114,6,87,8],[115,6,88,8],[116,6,89,8,"go"],[116,8,89,10,"go"],[116,9,89,11,"n"],[116,10,89,12],[116,12,89,14],[117,8,90,12,"interrupt"],[117,17,90,21],[117,18,90,22],[117,19,90,23],[118,8,91,12],[119,8,92,12],[120,8,93,12],[120,14,93,18,"nextIndex"],[120,23,93,27],[120,26,93,30,"index"],[120,31,93,35],[120,34,93,38,"n"],[120,35,93,39],[121,8,94,12],[121,14,94,18,"lastItemIndex"],[121,27,94,31],[121,30,94,34,"items"],[121,35,94,39],[121,36,94,40,"length"],[121,42,94,46],[121,45,94,49],[121,46,94,50],[122,8,95,12],[122,12,95,16,"n"],[122,13,95,17],[122,16,95,20],[122,17,95,21],[122,21,95,25],[122,22,95,26,"items"],[122,27,95,31],[122,28,95,32,"nextIndex"],[122,37,95,41],[122,38,95,42],[122,40,95,44],[123,10,96,16],[124,10,97,16,"n"],[124,11,97,17],[124,14,97,20],[124,15,97,21,"index"],[124,20,97,26],[125,10,98,16,"index"],[125,15,98,21],[125,18,98,24],[125,19,98,25],[126,8,99,12],[126,9,99,13],[126,15,100,17],[126,19,100,21,"n"],[126,20,100,22],[126,23,100,25],[126,24,100,26],[126,28,100,30,"nextIndex"],[126,37,100,39],[126,40,100,42,"lastItemIndex"],[126,53,100,55],[126,55,100,57],[127,10,101,16],[128,10,102,16,"n"],[128,11,102,17],[128,14,102,20,"lastItemIndex"],[128,27,102,33],[128,30,102,36,"index"],[128,35,102,41],[129,10,103,16,"index"],[129,15,103,21],[129,18,103,24,"lastItemIndex"],[129,31,103,37],[130,8,104,12],[130,9,104,13],[130,15,105,17],[131,10,106,16,"index"],[131,15,106,21],[131,18,106,24,"nextIndex"],[131,27,106,33],[132,8,107,12],[133,8,108,12],[133,12,108,16,"n"],[133,13,108,17],[133,18,108,22],[133,19,108,23],[133,21,108,25],[134,10,109,16],[135,8,110,12],[136,8,111,12],[137,8,112,12],[138,8,113,12],[139,8,114,12],[140,8,115,12],[141,8,116,12],[141,15,116,19],[141,19,116,23,"Promise"],[141,26,116,30],[141,27,116,31],[141,28,116,32,"resolve"],[141,35,116,39],[141,37,116,41,"reject"],[141,43,116,47],[141,48,116,52],[142,10,117,16],[142,16,117,22,"done"],[142,20,117,26],[142,23,117,30,"interrupted"],[142,34,117,41],[142,38,117,46],[143,12,118,20,"clearTimeout"],[143,24,118,32],[143,25,118,33,"timer"],[143,30,118,38],[143,31,118,39],[144,12,119,20],[144,16,119,24,"interrupted"],[144,27,119,35],[144,29,119,37],[145,14,120,24,"reject"],[145,20,120,30],[145,21,120,31],[145,25,120,35,"Error"],[145,30,120,40],[145,31,120,41],[145,71,120,81],[145,72,120,82],[145,73,120,83],[146,14,121,24],[147,12,122,20],[148,12,123,20],[149,12,124,20],[150,12,125,20],[151,12,126,20],[152,12,127,20],[153,12,128,20],[154,12,129,20],[155,12,130,20],[156,12,131,20],[156,18,131,26],[157,14,131,28,"title"],[158,12,131,34],[158,13,131,35],[158,16,131,38,"window"],[158,22,131,44],[158,23,131,45,"document"],[158,31,131,53],[159,12,132,20,"window"],[159,18,132,26],[159,19,132,27,"document"],[159,27,132,35],[159,28,132,36,"title"],[159,33,132,41],[159,36,132,44],[159,38,132,46],[160,12,133,20,"window"],[160,18,133,26],[160,19,133,27,"document"],[160,27,133,35],[160,28,133,36,"title"],[160,33,133,41],[160,36,133,44,"title"],[160,41,133,49],[161,12,134,20,"resolve"],[161,19,134,27],[161,20,134,28],[161,21,134,29],[162,10,135,16],[162,11,135,17],[163,10,136,16,"pending"],[163,17,136,23],[163,18,136,24,"push"],[163,22,136,28],[163,23,136,29],[164,12,136,31,"ref"],[164,15,136,34],[164,17,136,36,"done"],[164,21,136,40],[165,12,136,42,"cb"],[165,14,136,44],[165,16,136,46,"done"],[166,10,136,51],[166,11,136,52],[166,12,136,53],[167,10,137,16],[168,10,138,16],[169,10,139,16],[170,10,140,16],[171,10,141,16],[172,10,142,16],[172,16,142,22,"timer"],[172,21,142,27],[172,24,142,30,"setTimeout"],[172,34,142,40],[172,35,142,41],[172,41,142,47],[173,12,143,20],[173,18,143,26,"index"],[173,23,143,31],[173,26,143,34,"pending"],[173,33,143,41],[173,34,143,42,"findIndex"],[173,43,143,51],[173,44,143,53,"it"],[173,46,143,55],[173,50,143,60,"it"],[173,52,143,62],[173,53,143,63,"ref"],[173,56,143,66],[173,61,143,71,"done"],[173,65,143,75],[173,66,143,76],[174,12,144,20],[174,16,144,24,"index"],[174,21,144,29],[174,24,144,32],[174,25,144,33],[174,26,144,34],[174,28,144,36],[175,14,145,24,"pending"],[175,21,145,31],[175,22,145,32,"index"],[175,27,145,37],[175,28,145,38],[175,29,145,39,"cb"],[175,31,145,41],[175,32,145,42],[175,33,145,43],[176,14,146,24,"pending"],[176,21,146,31],[176,22,146,32,"splice"],[176,28,146,38],[176,29,146,39,"index"],[176,34,146,44],[176,36,146,46],[176,37,146,47],[176,38,146,48],[177,12,147,20],[178,10,148,16],[178,11,148,17],[178,13,148,19],[178,16,148,22],[178,17,148,23],[179,10,149,16],[179,16,149,22,"onPopState"],[179,26,149,32],[179,29,149,35,"onPopState"],[179,30,149,35],[179,35,149,41],[180,12,150,20],[180,18,150,26,"id"],[180,20,150,28],[180,23,150,31,"window"],[180,29,150,37],[180,30,150,38,"history"],[180,37,150,45],[180,38,150,46,"state"],[180,43,150,51],[180,45,150,53,"id"],[180,47,150,55],[181,12,151,20],[181,18,151,26,"currentIndex"],[181,30,151,38],[181,33,151,41,"items"],[181,38,151,46],[181,39,151,47,"findIndex"],[181,48,151,56],[181,49,151,58,"item"],[181,53,151,62],[181,57,151,67,"item"],[181,61,151,71],[181,62,151,72,"id"],[181,64,151,74],[181,69,151,79,"id"],[181,71,151,81],[181,72,151,82],[182,12,152,20],[183,12,153,20],[184,12,154,20,"index"],[184,17,154,25],[184,20,154,28,"Math"],[184,24,154,32],[184,25,154,33,"max"],[184,28,154,36],[184,29,154,37,"currentIndex"],[184,41,154,49],[184,43,154,51],[184,44,154,52],[184,45,154,53],[185,12,155,20],[185,18,155,26,"last"],[185,22,155,30],[185,25,155,33,"pending"],[185,32,155,40],[185,33,155,41,"pop"],[185,36,155,44],[185,37,155,45],[185,38,155,46],[186,12,156,20,"window"],[186,18,156,26],[186,19,156,27,"removeEventListener"],[186,38,156,46],[186,39,156,47],[186,49,156,57],[186,51,156,59,"onPopState"],[186,61,156,69],[186,62,156,70],[187,12,157,20,"last"],[187,16,157,24],[187,18,157,26,"cb"],[187,20,157,28],[187,21,157,29],[187,22,157,30],[188,10,158,16],[188,11,158,17],[189,10,159,16,"window"],[189,16,159,22],[189,17,159,23,"addEventListener"],[189,33,159,39],[189,34,159,40],[189,44,159,50],[189,46,159,52,"onPopState"],[189,56,159,62],[189,57,159,63],[190,10,160,16,"window"],[190,16,160,22],[190,17,160,23,"history"],[190,24,160,30],[190,25,160,31,"go"],[190,27,160,33],[190,28,160,34,"n"],[190,29,160,35],[190,30,160,36],[191,8,161,12],[191,9,161,13],[191,10,161,14],[192,6,162,8],[192,7,162,9],[193,6,163,8],[194,6,164,8],[195,6,165,8],[196,6,166,8,"listen"],[196,12,166,14,"listen"],[196,13,166,15,"listener"],[196,21,166,23],[196,23,166,25],[197,8,167,12],[197,14,167,18,"onPopState"],[197,24,167,28],[197,27,167,31,"onPopState"],[197,28,167,31],[197,33,167,37],[198,10,168,16],[198,14,168,20,"pending"],[198,21,168,27],[198,22,168,28,"length"],[198,28,168,34],[198,30,168,36],[199,12,169,20],[200,12,170,20],[201,10,171,16],[202,10,172,16,"listener"],[202,18,172,24],[202,19,172,25],[202,20,172,26],[203,8,173,12],[203,9,173,13],[204,8,174,12,"window"],[204,14,174,18],[204,15,174,19,"addEventListener"],[204,31,174,35],[204,32,174,36],[204,42,174,46],[204,44,174,48,"onPopState"],[204,54,174,58],[204,55,174,59],[205,8,175,12],[205,15,175,19],[205,21,175,25,"window"],[205,27,175,31],[205,28,175,32,"removeEventListener"],[205,47,175,51],[205,48,175,52],[205,58,175,62],[205,60,175,64,"onPopState"],[205,70,175,74],[205,71,175,75],[206,6,176,8],[207,4,177,4],[207,5,177,5],[208,4,178,4],[208,11,178,11,"history"],[208,18,178,18],[209,2,179,0],[210,0,179,1],[210,3]],"functionMap":{"names":["<global>","createMemoryHistory","interrupt","pending.forEach$argument_0","it.cb","history.get__index","items.findIndex$argument_0","history.get","history.backIndex","history.push","history.replace","history.go","Promise$argument_0","done","setTimeout$argument_0","pending.findIndex$argument_0","onPopState","history.listen","<anonymous>"],"mappings":"AAA;ACI;sBCM;wBCI;oBCE,cD;SDC;KDC;QIE;8CCK,wBD;SJI;QMC;SNE;QOC;SPS;QQC;SRa;QSC;iDJO,wBI;STkB;QUM;+BC2B;6BCC;iBDkB;yCEO;oDCC,uBD;iBFK;mCIC;yDVE,wBU;iBJO;aDG;SVC;QgBI;+BDC;aCM;mBCE,wDD;ShBC;CDG"}},"type":"js/module"}]}