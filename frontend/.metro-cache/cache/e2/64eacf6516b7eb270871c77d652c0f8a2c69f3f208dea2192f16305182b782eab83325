{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"]}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":42,"index":57}}],"key":"Opxn8Ttfh7QNGeF0y+BQ6rRbDGo=","exportNames":["*"]}},{"name":"query-string","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":58},"end":{"line":4,"column":44,"index":102}}],"key":"Tk6zkk+/XfK89igjx1MNWAcG1Q8=","exportNames":["*"]}},{"name":"./arrayStartsWith.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":103},"end":{"line":5,"column":55,"index":158}}],"key":"mJQeK2ZRLq8v0j9J6l50oLtYU2c=","exportNames":["*"]}},{"name":"./findFocusedRoute.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":159},"end":{"line":6,"column":57,"index":216}}],"key":"/OEwo8APHIJtscmrfuh7WccCayM=","exportNames":["*"]}},{"name":"./getPatternParts.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":217},"end":{"line":7,"column":55,"index":272}}],"key":"ZBgxhB8YmJlp1KxhfM5ocx9xUB0=","exportNames":["*"]}},{"name":"./isArrayEqual.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":273},"end":{"line":8,"column":49,"index":322}}],"key":"0Xv+Jf6vWjo3/vKyf7CxgrGRylo=","exportNames":["*"]}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":323},"end":{"line":9,"column":61,"index":384}}],"key":"zoUaUuxQP5qPvRrno+lraXgTGfI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = getStateFromPath;\n  var _slicedToArray2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _escapeStringRegexp = _interopRequireDefault(require(_dependencyMap[2], \"escape-string-regexp\"));\n  var queryString = _interopRequireWildcard(require(_dependencyMap[3], \"query-string\"));\n  var _arrayStartsWith = require(_dependencyMap[4], \"./arrayStartsWith.js\");\n  var _findFocusedRoute = require(_dependencyMap[5], \"./findFocusedRoute.js\");\n  var _getPatternParts = require(_dependencyMap[6], \"./getPatternParts.js\");\n  var _isArrayEqual = require(_dependencyMap[7], \"./isArrayEqual.js\");\n  var _validatePathConfig = require(_dependencyMap[8], \"./validatePathConfig.js\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _getConfigResources = getConfigResources(options),\n      initialRoutes = _getConfigResources.initialRoutes,\n      configs = _getConfigResources.configs;\n    var screens = options?.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    var prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n    if (prefix) {\n      // Make sure there is a trailing slash\n      var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(segment => {\n        var name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(config => config.segments.join('/') === '');\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  var cachedConfigResources = new WeakMap();\n  function getConfigResources(options) {\n    if (!options) return prepareConfigResources();\n    var cached = cachedConfigResources.get(options);\n    if (cached) return cached;\n    var resources = prepareConfigResources(options);\n    cachedConfigResources.set(options, resources);\n    return resources;\n  }\n  function prepareConfigResources(options) {\n    if (options) {\n      (0, _validatePathConfig.validatePathConfig)(options);\n    }\n    var initialRoutes = getInitialRoutes(options);\n    var configs = getSortedNormalizedConfigs(initialRoutes, options?.screens);\n    checkForDuplicatedConfigs(configs);\n    var configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    var initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getSortedNormalizedConfigs(initialRoutes) {\n    var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, initialRoutes, [], [], []))).sort((a, b) => {\n      // Sort config from most specific to least specific:\n      // - more segments\n      // - static segments\n      // - params with regex\n      // - regular params\n      // - wildcard\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if ((0, _isArrayEqual.isArrayEqual)(a.segments, b.segments)) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if ((0, _arrayStartsWith.arrayStartsWith)(a.segments, b.segments)) {\n        return -1;\n      }\n      if ((0, _arrayStartsWith.arrayStartsWith)(b.segments, a.segments)) {\n        return 1;\n      }\n      for (var i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {\n        // if b is longer, b gets higher priority\n        if (a.segments[i] == null) {\n          return 1;\n        }\n\n        // if a is longer, a gets higher priority\n        if (b.segments[i] == null) {\n          return -1;\n        }\n        var aWildCard = a.segments[i] === '*';\n        var bWildCard = b.segments[i] === '*';\n        var aParam = a.segments[i].startsWith(':');\n        var bParam = b.segments[i].startsWith(':');\n        var aRegex = aParam && a.segments[i].includes('(');\n        var bRegex = bParam && b.segments[i].includes('(');\n\n        // if both are wildcard or regex, we compare next component\n        if (aWildCard && bWildCard || aRegex && bRegex) {\n          continue;\n        }\n\n        // if only a is wildcard, b gets higher priority\n        if (aWildCard && !bWildCard) {\n          return 1;\n        }\n\n        // if only b is wildcard, a gets higher priority\n        if (bWildCard && !aWildCard) {\n          return -1;\n        }\n\n        // If only a has a param, b gets higher priority\n        if (aParam && !bParam) {\n          return 1;\n        }\n\n        // If only b has a param, a gets higher priority\n        if (bParam && !aParam) {\n          return -1;\n        }\n\n        // if only a has regex, a gets higher priority\n        if (aRegex && !bRegex) {\n          return -1;\n        }\n\n        // if only b has regex, b gets higher priority\n        if (bRegex && !aRegex) {\n          return 1;\n        }\n      }\n      return a.segments.length - b.segments.length;\n    });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      var pattern = config.segments.join('/');\n      if (acc[pattern]) {\n        var a = acc[pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    }));\n  }\n  var matchAgainstConfigs = (remaining, configs) => {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function (config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          routes = config.routeNames.map(routeName => {\n            var routeConfig = configs.find(c => {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === routeName && (0, _arrayStartsWith.arrayStartsWith)(config.segments, c.segments);\n            });\n            var params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(_ref => {\n              var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n                key = _ref2[0],\n                value = _ref2[1];\n              var index = Number(key.replace('param_', ''));\n              var param = routeConfig.params.find(it => it.index === index);\n              if (param?.screen === routeName && param?.name) {\n                return [param.name, value];\n              }\n              return null;\n            }).filter(it => it != null).map(_ref3 => {\n              var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n                key = _ref4[0],\n                value = _ref4[1];\n              if (value == null) {\n                return [key, undefined];\n              }\n              var decoded = decodeURIComponent(value);\n              var parsed = routeConfig.parse?.[key] ? routeConfig.parse[key](decoded) : decoded;\n              return [key, parsed];\n            })) : undefined;\n            if (params && Object.keys(params).length) {\n              return {\n                name: routeName,\n                params\n              };\n            }\n            return {\n              name: routeName\n            };\n          });\n          remainingPath = remainingPath.replace(match[0], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  var createNormalizedConfigs = (screen, routeConfig, initials, paths, parentScreens, routeNames) => {\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      paths.push({\n        screen,\n        path: config\n      });\n      configs.push(createConfigItem(screen, [...routeNames], [...paths]));\n    } else if (typeof config === 'object') {\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path == null) {\n          throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. \\`path: ''\\`.`);\n        }\n\n        // We should add alias configs after the main config\n        // So unless they are more specific, main config will be matched first\n        var aliasConfigs = [];\n        if (config.alias) {\n          for (var alias of config.alias) {\n            if (typeof alias === 'string') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], [...paths, {\n                screen,\n                path: alias\n              }], config.parse));\n            } else if (typeof alias === 'object') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], alias.exact ? [{\n                screen,\n                path: alias.path\n              }] : [...paths, {\n                screen,\n                path: alias.path\n              }], alias.parse));\n            }\n          }\n        }\n        if (config.exact) {\n          // If it's an exact path, we don't need to keep track of the parent screens\n          // So we can clear it\n          paths.length = 0;\n        }\n        paths.push({\n          screen,\n          path: config.path\n        });\n        configs.push(createConfigItem(screen, [...routeNames], [...paths], config.parse));\n        configs.push(...aliasConfigs);\n      }\n      if (typeof config !== 'string' && typeof config.path !== 'string' && config.alias?.length) {\n        throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'.`);\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          var result = createNormalizedConfigs(nestedConfig, config.screens, initials, [...paths], [...parentScreens], routeNames);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = (screen, routeNames, paths, parse) => {\n    var parts = [];\n\n    // Parse the path string into parts for easier matching\n    var _loop2 = function (_screen) {\n      parts.push(...(0, _getPatternParts.getPatternParts)(path).map(part => ({\n        ...part,\n        screen: _screen\n      })));\n    };\n    for (var _ref5 of paths) {\n      var _screen = _ref5.screen;\n      var path = _ref5.path;\n      _loop2(_screen);\n    }\n    var regex = parts.length ? new RegExp(`^(${parts.map((it, i) => {\n      if (it.param) {\n        var reg = it.regex || '[^/]+';\n        return `(((?<param_${i}>${reg})\\\\/)${it.optional ? '?' : ''})`;\n      }\n      return `${it.segment === '*' ? '.*' : (0, _escapeStringRegexp.default)(it.segment)}\\\\/`;\n    }).join('')})$`) : undefined;\n    var segments = parts.map(it => it.segment);\n    var params = parts.map((it, i) => it.param ? {\n      index: i,\n      screen: it.screen,\n      name: it.param\n    } : null).filter(it => it != null);\n    return {\n      screen,\n      regex,\n      segments,\n      params,\n      routeNames,\n      parse\n    };\n  };\n  var findParseConfigForRoute = (routeName, flatConfig) => {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRoute.findFocusedRoute)(state);\n    route.path = path.replace(/\\/$/, '');\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    return state;\n  };\n  var parseQueryParams = (path, parseConfig) => {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":535,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"getStateFromPath"],[8,26,1,13],[8,29,1,13,"getStateFromPath"],[8,45,1,13],[9,2,1,13],[9,6,1,13,"_slicedToArray2"],[9,21,1,13],[9,24,1,13,"_interopRequireDefault"],[9,46,1,13],[9,47,1,13,"require"],[9,54,1,13],[9,55,1,13,"_dependencyMap"],[9,69,1,13],[10,2,3,0],[10,6,3,0,"_escapeStringRegexp"],[10,25,3,0],[10,28,3,0,"_interopRequireDefault"],[10,50,3,0],[10,51,3,0,"require"],[10,58,3,0],[10,59,3,0,"_dependencyMap"],[10,73,3,0],[11,2,4,0],[11,6,4,0,"queryString"],[11,17,4,0],[11,20,4,0,"_interopRequireWildcard"],[11,43,4,0],[11,44,4,0,"require"],[11,51,4,0],[11,52,4,0,"_dependencyMap"],[11,66,4,0],[12,2,5,0],[12,6,5,0,"_arrayStartsWith"],[12,22,5,0],[12,25,5,0,"require"],[12,32,5,0],[12,33,5,0,"_dependencyMap"],[12,47,5,0],[13,2,6,0],[13,6,6,0,"_findFocusedRoute"],[13,23,6,0],[13,26,6,0,"require"],[13,33,6,0],[13,34,6,0,"_dependencyMap"],[13,48,6,0],[14,2,7,0],[14,6,7,0,"_getPatternParts"],[14,22,7,0],[14,25,7,0,"require"],[14,32,7,0],[14,33,7,0,"_dependencyMap"],[14,47,7,0],[15,2,8,0],[15,6,8,0,"_isArrayEqual"],[15,19,8,0],[15,22,8,0,"require"],[15,29,8,0],[15,30,8,0,"_dependencyMap"],[15,44,8,0],[16,2,9,0],[16,6,9,0,"_validatePathConfig"],[16,25,9,0],[16,28,9,0,"require"],[16,35,9,0],[16,36,9,0,"_dependencyMap"],[16,50,9,0],[17,2,9,61],[17,11,9,61,"_interopRequireWildcard"],[17,35,9,61,"e"],[17,36,9,61],[17,38,9,61,"t"],[17,39,9,61],[17,68,9,61,"WeakMap"],[17,75,9,61],[17,81,9,61,"r"],[17,82,9,61],[17,89,9,61,"WeakMap"],[17,96,9,61],[17,100,9,61,"n"],[17,101,9,61],[17,108,9,61,"WeakMap"],[17,115,9,61],[17,127,9,61,"_interopRequireWildcard"],[17,150,9,61],[17,162,9,61,"_interopRequireWildcard"],[17,163,9,61,"e"],[17,164,9,61],[17,166,9,61,"t"],[17,167,9,61],[17,176,9,61,"t"],[17,177,9,61],[17,181,9,61,"e"],[17,182,9,61],[17,186,9,61,"e"],[17,187,9,61],[17,188,9,61,"__esModule"],[17,198,9,61],[17,207,9,61,"e"],[17,208,9,61],[17,214,9,61,"o"],[17,215,9,61],[17,217,9,61,"i"],[17,218,9,61],[17,220,9,61,"f"],[17,221,9,61],[17,226,9,61,"__proto__"],[17,235,9,61],[17,243,9,61,"default"],[17,250,9,61],[17,252,9,61,"e"],[17,253,9,61],[17,270,9,61,"e"],[17,271,9,61],[17,294,9,61,"e"],[17,295,9,61],[17,320,9,61,"e"],[17,321,9,61],[17,330,9,61,"f"],[17,331,9,61],[17,337,9,61,"o"],[17,338,9,61],[17,341,9,61,"t"],[17,342,9,61],[17,345,9,61,"n"],[17,346,9,61],[17,349,9,61,"r"],[17,350,9,61],[17,358,9,61,"o"],[17,359,9,61],[17,360,9,61,"has"],[17,363,9,61],[17,364,9,61,"e"],[17,365,9,61],[17,375,9,61,"o"],[17,376,9,61],[17,377,9,61,"get"],[17,380,9,61],[17,381,9,61,"e"],[17,382,9,61],[17,385,9,61,"o"],[17,386,9,61],[17,387,9,61,"set"],[17,390,9,61],[17,391,9,61,"e"],[17,392,9,61],[17,394,9,61,"f"],[17,395,9,61],[17,409,9,61,"_t"],[17,411,9,61],[17,415,9,61,"e"],[17,416,9,61],[17,432,9,61,"_t"],[17,434,9,61],[17,441,9,61,"hasOwnProperty"],[17,455,9,61],[17,456,9,61,"call"],[17,460,9,61],[17,461,9,61,"e"],[17,462,9,61],[17,464,9,61,"_t"],[17,466,9,61],[17,473,9,61,"i"],[17,474,9,61],[17,478,9,61,"o"],[17,479,9,61],[17,482,9,61,"Object"],[17,488,9,61],[17,489,9,61,"defineProperty"],[17,503,9,61],[17,508,9,61,"Object"],[17,514,9,61],[17,515,9,61,"getOwnPropertyDescriptor"],[17,539,9,61],[17,540,9,61,"e"],[17,541,9,61],[17,543,9,61,"_t"],[17,545,9,61],[17,552,9,61,"i"],[17,553,9,61],[17,554,9,61,"get"],[17,557,9,61],[17,561,9,61,"i"],[17,562,9,61],[17,563,9,61,"set"],[17,566,9,61],[17,570,9,61,"o"],[17,571,9,61],[17,572,9,61,"f"],[17,573,9,61],[17,575,9,61,"_t"],[17,577,9,61],[17,579,9,61,"i"],[17,580,9,61],[17,584,9,61,"f"],[17,585,9,61],[17,586,9,61,"_t"],[17,588,9,61],[17,592,9,61,"e"],[17,593,9,61],[17,594,9,61,"_t"],[17,596,9,61],[17,607,9,61,"f"],[17,608,9,61],[17,613,9,61,"e"],[17,614,9,61],[17,616,9,61,"t"],[17,617,9,61],[18,2,10,0],[19,0,11,0],[20,0,12,0],[21,0,13,0],[22,0,14,0],[23,0,15,0],[24,0,16,0],[25,0,17,0],[26,0,18,0],[27,0,19,0],[28,0,20,0],[29,0,21,0],[30,0,22,0],[31,0,23,0],[32,0,24,0],[33,0,25,0],[34,0,26,0],[35,0,27,0],[36,0,28,0],[37,0,29,0],[38,0,30,0],[39,2,31,7],[39,11,31,16,"getStateFromPath"],[39,27,31,32,"getStateFromPath"],[39,28,31,33,"path"],[39,32,31,37],[39,34,31,39,"options"],[39,41,31,46],[39,43,31,48],[40,4,32,2],[40,8,32,2,"_getConfigResources"],[40,27,32,2],[40,30,35,6,"getConfigResources"],[40,48,35,24],[40,49,35,25,"options"],[40,56,35,32],[40,57,35,33],[41,6,33,4,"initialRoutes"],[41,19,33,17],[41,22,33,17,"_getConfigResources"],[41,41,33,17],[41,42,33,4,"initialRoutes"],[41,55,33,17],[42,6,34,4,"configs"],[42,13,34,11],[42,16,34,11,"_getConfigResources"],[42,35,34,11],[42,36,34,4,"configs"],[42,43,34,11],[43,4,36,2],[43,8,36,8,"screens"],[43,15,36,15],[43,18,36,18,"options"],[43,25,36,25],[43,27,36,27,"screens"],[43,34,36,34],[44,4,37,2],[44,8,37,6,"remaining"],[44,17,37,15],[44,20,37,18,"path"],[44,24,37,22],[44,25,37,23,"replace"],[44,32,37,30],[44,33,37,31],[44,39,37,37],[44,41,37,39],[44,44,37,42],[44,45,37,43],[44,46,37,44],[45,4,37,44],[45,5,38,3,"replace"],[45,12,38,10],[45,13,38,11],[45,18,38,16],[45,20,38,18],[45,22,38,20],[45,23,38,21],[45,24,38,22],[46,4,38,22],[46,5,39,3,"replace"],[46,12,39,10],[46,13,39,11],[46,20,39,18],[46,22,39,20],[46,24,39,22],[46,25,39,23],[46,26,39,24],[46,27,39,25],[48,4,41,2],[49,4,42,2,"remaining"],[49,13,42,11],[49,16,42,14,"remaining"],[49,25,42,23],[49,26,42,24,"endsWith"],[49,34,42,32],[49,35,42,33],[49,38,42,36],[49,39,42,37],[49,42,42,40,"remaining"],[49,51,42,49],[49,54,42,52],[49,57,42,55,"remaining"],[49,66,42,64],[49,69,42,67],[50,4,43,2],[50,8,43,8,"prefix"],[50,14,43,14],[50,17,43,17,"options"],[50,24,43,24],[50,26,43,26,"path"],[50,30,43,30],[50,32,43,32,"replace"],[50,39,43,39],[50,40,43,40],[50,45,43,45],[50,47,43,47],[50,49,43,49],[50,50,43,50],[50,51,43,51],[50,52,43,52],[52,4,45,2],[52,8,45,6,"prefix"],[52,14,45,12],[52,16,45,14],[53,6,46,4],[54,6,47,4],[54,10,47,10,"normalizedPrefix"],[54,26,47,26],[54,29,47,29,"prefix"],[54,35,47,35],[54,36,47,36,"endsWith"],[54,44,47,44],[54,45,47,45],[54,48,47,48],[54,49,47,49],[54,52,47,52,"prefix"],[54,58,47,58],[54,61,47,61],[54,64,47,64,"prefix"],[54,70,47,70],[54,73,47,73],[56,6,49,4],[57,6,50,4],[57,10,50,8],[57,11,50,9,"remaining"],[57,20,50,18],[57,21,50,19,"startsWith"],[57,31,50,29],[57,32,50,30,"normalizedPrefix"],[57,48,50,46],[57,49,50,47],[57,51,50,49],[58,8,51,6],[58,15,51,13,"undefined"],[58,24,51,22],[59,6,52,4],[61,6,54,4],[62,6,55,4,"remaining"],[62,15,55,13],[62,18,55,16,"remaining"],[62,27,55,25],[62,28,55,26,"replace"],[62,35,55,33],[62,36,55,34,"normalizedPrefix"],[62,52,55,50],[62,54,55,52],[62,56,55,54],[62,57,55,55],[63,4,56,2],[64,4,57,2],[64,8,57,6,"screens"],[64,15,57,13],[64,20,57,18,"undefined"],[64,29,57,27],[64,31,57,29],[65,6,58,4],[66,6,59,4],[66,10,59,10,"routes"],[66,17,59,16],[66,20,59,19,"remaining"],[66,29,59,28],[66,30,59,29,"split"],[66,35,59,34],[66,36,59,35],[66,39,59,38],[66,40,59,39],[66,41,59,40,"filter"],[66,47,59,46],[66,48,59,47,"Boolean"],[66,55,59,54],[66,56,59,55],[66,57,59,56,"map"],[66,60,59,59],[66,61,59,60,"segment"],[66,68,59,67],[66,72,59,71],[67,8,60,6],[67,12,60,12,"name"],[67,16,60,16],[67,19,60,19,"decodeURIComponent"],[67,37,60,37],[67,38,60,38,"segment"],[67,45,60,45],[67,46,60,46],[68,8,61,6],[68,15,61,13],[69,10,62,8,"name"],[70,8,63,6],[70,9,63,7],[71,6,64,4],[71,7,64,5],[71,8,64,6],[72,6,65,4],[72,10,65,8,"routes"],[72,17,65,14],[72,18,65,15,"length"],[72,24,65,21],[72,26,65,23],[73,8,66,6],[73,15,66,13,"createNestedStateObject"],[73,38,66,36],[73,39,66,37,"path"],[73,43,66,41],[73,45,66,43,"routes"],[73,52,66,49],[73,54,66,51,"initialRoutes"],[73,67,66,64],[73,68,66,65],[74,6,67,4],[75,6,68,4],[75,13,68,11,"undefined"],[75,22,68,20],[76,4,69,2],[77,4,70,2],[77,8,70,6,"remaining"],[77,17,70,15],[77,22,70,20],[77,25,70,23],[77,27,70,25],[78,6,71,4],[79,6,72,4],[80,6,73,4],[80,10,73,10,"match"],[80,15,73,15],[80,18,73,18,"configs"],[80,25,73,25],[80,26,73,26,"find"],[80,30,73,30],[80,31,73,31,"config"],[80,37,73,37],[80,41,73,41,"config"],[80,47,73,47],[80,48,73,48,"segments"],[80,56,73,56],[80,57,73,57,"join"],[80,61,73,61],[80,62,73,62],[80,65,73,65],[80,66,73,66],[80,71,73,71],[80,73,73,73],[80,74,73,74],[81,6,74,4],[81,10,74,8,"match"],[81,15,74,13],[81,17,74,15],[82,8,75,6],[82,15,75,13,"createNestedStateObject"],[82,38,75,36],[82,39,75,37,"path"],[82,43,75,41],[82,45,75,43,"match"],[82,50,75,48],[82,51,75,49,"routeNames"],[82,61,75,59],[82,62,75,60,"map"],[82,65,75,63],[82,66,75,64,"name"],[82,70,75,68],[82,75,75,73],[83,10,76,8,"name"],[84,8,77,6],[84,9,77,7],[84,10,77,8],[84,11,77,9],[84,13,77,11,"initialRoutes"],[84,26,77,24],[84,28,77,26,"configs"],[84,35,77,33],[84,36,77,34],[85,6,78,4],[86,6,79,4],[86,13,79,11,"undefined"],[86,22,79,20],[87,4,80,2],[88,4,81,2],[88,8,81,6,"result"],[88,14,81,12],[89,4,82,2],[89,8,82,6,"current"],[89,15,82,13],[91,4,84,2],[92,4,85,2],[93,4,86,2],[93,8,86,2,"_matchAgainstConfigs"],[93,28,86,2],[93,31,89,6,"matchAgainstConfigs"],[93,50,89,25],[93,51,89,26,"remaining"],[93,60,89,35],[93,62,89,37,"configs"],[93,69,89,44],[93,70,89,45],[94,6,87,4,"routes"],[94,12,87,10],[94,15,87,10,"_matchAgainstConfigs"],[94,35,87,10],[94,36,87,4,"routes"],[94,42,87,10],[95,6,88,4,"remainingPath"],[95,19,88,17],[95,22,88,17,"_matchAgainstConfigs"],[95,42,88,17],[95,43,88,4,"remainingPath"],[95,56,88,17],[96,4,90,2],[96,8,90,6,"routes"],[96,14,90,12],[96,19,90,17,"undefined"],[96,28,90,26],[96,30,90,28],[97,6,91,4],[98,6,92,4,"current"],[98,13,92,11],[98,16,92,14,"createNestedStateObject"],[98,39,92,37],[98,40,92,38,"path"],[98,44,92,42],[98,46,92,44,"routes"],[98,52,92,50],[98,54,92,52,"initialRoutes"],[98,67,92,65],[98,69,92,67,"configs"],[98,76,92,74],[98,77,92,75],[99,6,93,4,"remaining"],[99,15,93,13],[99,18,93,16,"remainingPath"],[99,31,93,29],[100,6,94,4,"result"],[100,12,94,10],[100,15,94,13,"current"],[100,22,94,20],[101,4,95,2],[102,4,96,2],[102,8,96,6,"current"],[102,15,96,13],[102,19,96,17],[102,23,96,21],[102,27,96,25,"result"],[102,33,96,31],[102,37,96,35],[102,41,96,39],[102,43,96,41],[103,6,97,4],[103,13,97,11,"undefined"],[103,22,97,20],[104,4,98,2],[105,4,99,2],[105,11,99,9,"result"],[105,17,99,15],[106,2,100,0],[108,2,102,0],[109,0,103,0],[110,0,104,0],[111,2,105,0],[111,6,105,6,"cachedConfigResources"],[111,27,105,27],[111,30,105,30],[111,34,105,34,"WeakMap"],[111,41,105,41],[111,42,105,42],[111,43,105,43],[112,2,106,0],[112,11,106,9,"getConfigResources"],[112,29,106,27,"getConfigResources"],[112,30,106,28,"options"],[112,37,106,35],[112,39,106,37],[113,4,107,2],[113,8,107,6],[113,9,107,7,"options"],[113,16,107,14],[113,18,107,16],[113,25,107,23,"prepareConfigResources"],[113,47,107,45],[113,48,107,46],[113,49,107,47],[114,4,108,2],[114,8,108,8,"cached"],[114,14,108,14],[114,17,108,17,"cachedConfigResources"],[114,38,108,38],[114,39,108,39,"get"],[114,42,108,42],[114,43,108,43,"options"],[114,50,108,50],[114,51,108,51],[115,4,109,2],[115,8,109,6,"cached"],[115,14,109,12],[115,16,109,14],[115,23,109,21,"cached"],[115,29,109,27],[116,4,110,2],[116,8,110,8,"resources"],[116,17,110,17],[116,20,110,20,"prepareConfigResources"],[116,42,110,42],[116,43,110,43,"options"],[116,50,110,50],[116,51,110,51],[117,4,111,2,"cachedConfigResources"],[117,25,111,23],[117,26,111,24,"set"],[117,29,111,27],[117,30,111,28,"options"],[117,37,111,35],[117,39,111,37,"resources"],[117,48,111,46],[117,49,111,47],[118,4,112,2],[118,11,112,9,"resources"],[118,20,112,18],[119,2,113,0],[120,2,114,0],[120,11,114,9,"prepareConfigResources"],[120,33,114,31,"prepareConfigResources"],[120,34,114,32,"options"],[120,41,114,39],[120,43,114,41],[121,4,115,2],[121,8,115,6,"options"],[121,15,115,13],[121,17,115,15],[122,6,116,4],[122,10,116,4,"validatePathConfig"],[122,48,116,22],[122,50,116,23,"options"],[122,57,116,30],[122,58,116,31],[123,4,117,2],[124,4,118,2],[124,8,118,8,"initialRoutes"],[124,21,118,21],[124,24,118,24,"getInitialRoutes"],[124,40,118,40],[124,41,118,41,"options"],[124,48,118,48],[124,49,118,49],[125,4,119,2],[125,8,119,8,"configs"],[125,15,119,15],[125,18,119,18,"getSortedNormalizedConfigs"],[125,44,119,44],[125,45,119,45,"initialRoutes"],[125,58,119,58],[125,60,119,60,"options"],[125,67,119,67],[125,69,119,69,"screens"],[125,76,119,76],[125,77,119,77],[126,4,120,2,"checkForDuplicatedConfigs"],[126,29,120,27],[126,30,120,28,"configs"],[126,37,120,35],[126,38,120,36],[127,4,121,2],[127,8,121,8,"configWithRegexes"],[127,25,121,25],[127,28,121,28,"getConfigsWithRegexes"],[127,49,121,49],[127,50,121,50,"configs"],[127,57,121,57],[127,58,121,58],[128,4,122,2],[128,11,122,9],[129,6,123,4,"initialRoutes"],[129,19,123,17],[130,6,124,4,"configs"],[130,13,124,11],[131,6,125,4,"configWithRegexes"],[132,4,126,2],[132,5,126,3],[133,2,127,0],[134,2,128,0],[134,11,128,9,"getInitialRoutes"],[134,27,128,25,"getInitialRoutes"],[134,28,128,26,"options"],[134,35,128,33],[134,37,128,35],[135,4,129,2],[135,8,129,8,"initialRoutes"],[135,21,129,21],[135,24,129,24],[135,26,129,26],[136,4,130,2],[136,8,130,6,"options"],[136,15,130,13],[136,17,130,15,"initialRouteName"],[136,33,130,31],[136,35,130,33],[137,6,131,4,"initialRoutes"],[137,19,131,17],[137,20,131,18,"push"],[137,24,131,22],[137,25,131,23],[138,8,132,6,"initialRouteName"],[138,24,132,22],[138,26,132,24,"options"],[138,33,132,31],[138,34,132,32,"initialRouteName"],[138,50,132,48],[139,8,133,6,"parentScreens"],[139,21,133,19],[139,23,133,21],[140,6,134,4],[140,7,134,5],[140,8,134,6],[141,4,135,2],[142,4,136,2],[142,11,136,9,"initialRoutes"],[142,24,136,22],[143,2,137,0],[144,2,138,0],[144,11,138,9,"getSortedNormalizedConfigs"],[144,37,138,35,"getSortedNormalizedConfigs"],[144,38,138,36,"initialRoutes"],[144,51,138,49],[144,53,138,65],[145,4,138,65],[145,8,138,51,"screens"],[145,15,138,58],[145,18,138,58,"arguments"],[145,27,138,58],[145,28,138,58,"length"],[145,34,138,58],[145,42,138,58,"arguments"],[145,51,138,58],[145,59,138,58,"undefined"],[145,68,138,58],[145,71,138,58,"arguments"],[145,80,138,58],[145,86,138,61],[145,87,138,62],[145,88,138,63],[146,4,139,2],[147,4,140,2],[147,11,140,9],[147,13,140,11],[147,14,140,12,"concat"],[147,20,140,18],[147,21,140,19],[147,24,140,22,"Object"],[147,30,140,28],[147,31,140,29,"keys"],[147,35,140,33],[147,36,140,34,"screens"],[147,43,140,41],[147,44,140,42],[147,45,140,43,"map"],[147,48,140,46],[147,49,140,47,"key"],[147,52,140,50],[147,56,140,54,"createNormalizedConfigs"],[147,79,140,77],[147,80,140,78,"key"],[147,83,140,81],[147,85,140,83,"screens"],[147,92,140,90],[147,94,140,92,"initialRoutes"],[147,107,140,105],[147,109,140,107],[147,111,140,109],[147,113,140,111],[147,115,140,113],[147,117,140,115],[147,119,140,117],[147,120,140,118],[147,121,140,119],[147,122,140,120],[147,123,140,121,"sort"],[147,127,140,125],[147,128,140,126],[147,129,140,127,"a"],[147,130,140,128],[147,132,140,130,"b"],[147,133,140,131],[147,138,140,136],[148,6,141,4],[149,6,142,4],[150,6,143,4],[151,6,144,4],[152,6,145,4],[153,6,146,4],[155,6,148,4],[156,6,149,4],[157,6,150,4],[157,10,150,8],[157,14,150,8,"isArrayEqual"],[157,40,150,20],[157,42,150,21,"a"],[157,43,150,22],[157,44,150,23,"segments"],[157,52,150,31],[157,54,150,33,"b"],[157,55,150,34],[157,56,150,35,"segments"],[157,64,150,43],[157,65,150,44],[157,67,150,46],[158,8,151,6],[158,15,151,13,"b"],[158,16,151,14],[158,17,151,15,"routeNames"],[158,27,151,25],[158,28,151,26,"join"],[158,32,151,30],[158,33,151,31],[158,36,151,34],[158,37,151,35],[158,38,151,36,"localeCompare"],[158,51,151,49],[158,52,151,50,"a"],[158,53,151,51],[158,54,151,52,"routeNames"],[158,64,151,62],[158,65,151,63,"join"],[158,69,151,67],[158,70,151,68],[158,73,151,71],[158,74,151,72],[158,75,151,73],[159,6,152,4],[161,6,154,4],[162,6,155,4],[163,6,156,4],[163,10,156,8],[163,14,156,8,"arrayStartsWith"],[163,46,156,23],[163,48,156,24,"a"],[163,49,156,25],[163,50,156,26,"segments"],[163,58,156,34],[163,60,156,36,"b"],[163,61,156,37],[163,62,156,38,"segments"],[163,70,156,46],[163,71,156,47],[163,73,156,49],[164,8,157,6],[164,15,157,13],[164,16,157,14],[164,17,157,15],[165,6,158,4],[166,6,159,4],[166,10,159,8],[166,14,159,8,"arrayStartsWith"],[166,46,159,23],[166,48,159,24,"b"],[166,49,159,25],[166,50,159,26,"segments"],[166,58,159,34],[166,60,159,36,"a"],[166,61,159,37],[166,62,159,38,"segments"],[166,70,159,46],[166,71,159,47],[166,73,159,49],[167,8,160,6],[167,15,160,13],[167,16,160,14],[168,6,161,4],[169,6,162,4],[169,11,162,9],[169,15,162,13,"i"],[169,16,162,14],[169,19,162,17],[169,20,162,18],[169,22,162,20,"i"],[169,23,162,21],[169,26,162,24,"Math"],[169,30,162,28],[169,31,162,29,"max"],[169,34,162,32],[169,35,162,33,"a"],[169,36,162,34],[169,37,162,35,"segments"],[169,45,162,43],[169,46,162,44,"length"],[169,52,162,50],[169,54,162,52,"b"],[169,55,162,53],[169,56,162,54,"segments"],[169,64,162,62],[169,65,162,63,"length"],[169,71,162,69],[169,72,162,70],[169,74,162,72,"i"],[169,75,162,73],[169,77,162,75],[169,79,162,77],[170,8,163,6],[171,8,164,6],[171,12,164,10,"a"],[171,13,164,11],[171,14,164,12,"segments"],[171,22,164,20],[171,23,164,21,"i"],[171,24,164,22],[171,25,164,23],[171,29,164,27],[171,33,164,31],[171,35,164,33],[172,10,165,8],[172,17,165,15],[172,18,165,16],[173,8,166,6],[175,8,168,6],[176,8,169,6],[176,12,169,10,"b"],[176,13,169,11],[176,14,169,12,"segments"],[176,22,169,20],[176,23,169,21,"i"],[176,24,169,22],[176,25,169,23],[176,29,169,27],[176,33,169,31],[176,35,169,33],[177,10,170,8],[177,17,170,15],[177,18,170,16],[177,19,170,17],[178,8,171,6],[179,8,172,6],[179,12,172,12,"aWildCard"],[179,21,172,21],[179,24,172,24,"a"],[179,25,172,25],[179,26,172,26,"segments"],[179,34,172,34],[179,35,172,35,"i"],[179,36,172,36],[179,37,172,37],[179,42,172,42],[179,45,172,45],[180,8,173,6],[180,12,173,12,"bWildCard"],[180,21,173,21],[180,24,173,24,"b"],[180,25,173,25],[180,26,173,26,"segments"],[180,34,173,34],[180,35,173,35,"i"],[180,36,173,36],[180,37,173,37],[180,42,173,42],[180,45,173,45],[181,8,174,6],[181,12,174,12,"aParam"],[181,18,174,18],[181,21,174,21,"a"],[181,22,174,22],[181,23,174,23,"segments"],[181,31,174,31],[181,32,174,32,"i"],[181,33,174,33],[181,34,174,34],[181,35,174,35,"startsWith"],[181,45,174,45],[181,46,174,46],[181,49,174,49],[181,50,174,50],[182,8,175,6],[182,12,175,12,"bParam"],[182,18,175,18],[182,21,175,21,"b"],[182,22,175,22],[182,23,175,23,"segments"],[182,31,175,31],[182,32,175,32,"i"],[182,33,175,33],[182,34,175,34],[182,35,175,35,"startsWith"],[182,45,175,45],[182,46,175,46],[182,49,175,49],[182,50,175,50],[183,8,176,6],[183,12,176,12,"aRegex"],[183,18,176,18],[183,21,176,21,"aParam"],[183,27,176,27],[183,31,176,31,"a"],[183,32,176,32],[183,33,176,33,"segments"],[183,41,176,41],[183,42,176,42,"i"],[183,43,176,43],[183,44,176,44],[183,45,176,45,"includes"],[183,53,176,53],[183,54,176,54],[183,57,176,57],[183,58,176,58],[184,8,177,6],[184,12,177,12,"bRegex"],[184,18,177,18],[184,21,177,21,"bParam"],[184,27,177,27],[184,31,177,31,"b"],[184,32,177,32],[184,33,177,33,"segments"],[184,41,177,41],[184,42,177,42,"i"],[184,43,177,43],[184,44,177,44],[184,45,177,45,"includes"],[184,53,177,53],[184,54,177,54],[184,57,177,57],[184,58,177,58],[186,8,179,6],[187,8,180,6],[187,12,180,10,"aWildCard"],[187,21,180,19],[187,25,180,23,"bWildCard"],[187,34,180,32],[187,38,180,36,"aRegex"],[187,44,180,42],[187,48,180,46,"bRegex"],[187,54,180,52],[187,56,180,54],[188,10,181,8],[189,8,182,6],[191,8,184,6],[192,8,185,6],[192,12,185,10,"aWildCard"],[192,21,185,19],[192,25,185,23],[192,26,185,24,"bWildCard"],[192,35,185,33],[192,37,185,35],[193,10,186,8],[193,17,186,15],[193,18,186,16],[194,8,187,6],[196,8,189,6],[197,8,190,6],[197,12,190,10,"bWildCard"],[197,21,190,19],[197,25,190,23],[197,26,190,24,"aWildCard"],[197,35,190,33],[197,37,190,35],[198,10,191,8],[198,17,191,15],[198,18,191,16],[198,19,191,17],[199,8,192,6],[201,8,194,6],[202,8,195,6],[202,12,195,10,"aParam"],[202,18,195,16],[202,22,195,20],[202,23,195,21,"bParam"],[202,29,195,27],[202,31,195,29],[203,10,196,8],[203,17,196,15],[203,18,196,16],[204,8,197,6],[206,8,199,6],[207,8,200,6],[207,12,200,10,"bParam"],[207,18,200,16],[207,22,200,20],[207,23,200,21,"aParam"],[207,29,200,27],[207,31,200,29],[208,10,201,8],[208,17,201,15],[208,18,201,16],[208,19,201,17],[209,8,202,6],[211,8,204,6],[212,8,205,6],[212,12,205,10,"aRegex"],[212,18,205,16],[212,22,205,20],[212,23,205,21,"bRegex"],[212,29,205,27],[212,31,205,29],[213,10,206,8],[213,17,206,15],[213,18,206,16],[213,19,206,17],[214,8,207,6],[216,8,209,6],[217,8,210,6],[217,12,210,10,"bRegex"],[217,18,210,16],[217,22,210,20],[217,23,210,21,"aRegex"],[217,29,210,27],[217,31,210,29],[218,10,211,8],[218,17,211,15],[218,18,211,16],[219,8,212,6],[220,6,213,4],[221,6,214,4],[221,13,214,11,"a"],[221,14,214,12],[221,15,214,13,"segments"],[221,23,214,21],[221,24,214,22,"length"],[221,30,214,28],[221,33,214,31,"b"],[221,34,214,32],[221,35,214,33,"segments"],[221,43,214,41],[221,44,214,42,"length"],[221,50,214,48],[222,4,215,2],[222,5,215,3],[222,6,215,4],[223,2,216,0],[224,2,217,0],[224,11,217,9,"checkForDuplicatedConfigs"],[224,36,217,34,"checkForDuplicatedConfigs"],[224,37,217,35,"configs"],[224,44,217,42],[224,46,217,44],[225,4,218,2],[226,4,219,2,"configs"],[226,11,219,9],[226,12,219,10,"reduce"],[226,18,219,16],[226,19,219,17],[226,20,219,18,"acc"],[226,23,219,21],[226,25,219,23,"config"],[226,31,219,29],[226,36,219,34],[227,6,220,4],[227,10,220,10,"pattern"],[227,17,220,17],[227,20,220,20,"config"],[227,26,220,26],[227,27,220,27,"segments"],[227,35,220,35],[227,36,220,36,"join"],[227,40,220,40],[227,41,220,41],[227,44,220,44],[227,45,220,45],[228,6,221,4],[228,10,221,8,"acc"],[228,13,221,11],[228,14,221,12,"pattern"],[228,21,221,19],[228,22,221,20],[228,24,221,22],[229,8,222,6],[229,12,222,12,"a"],[229,13,222,13],[229,16,222,16,"acc"],[229,19,222,19],[229,20,222,20,"pattern"],[229,27,222,27],[229,28,222,28],[229,29,222,29,"routeNames"],[229,39,222,39],[230,8,223,6],[230,12,223,12,"b"],[230,13,223,13],[230,16,223,16,"config"],[230,22,223,22],[230,23,223,23,"routeNames"],[230,33,223,33],[232,8,225,6],[233,8,226,6],[234,8,227,6],[234,12,227,12,"intersects"],[234,22,227,22],[234,25,227,25,"a"],[234,26,227,26],[234,27,227,27,"length"],[234,33,227,33],[234,36,227,36,"b"],[234,37,227,37],[234,38,227,38,"length"],[234,44,227,44],[234,47,227,47,"b"],[234,48,227,48],[234,49,227,49,"every"],[234,54,227,54],[234,55,227,55],[234,56,227,56,"it"],[234,58,227,58],[234,60,227,60,"i"],[234,61,227,61],[234,66,227,66,"a"],[234,67,227,67],[234,68,227,68,"i"],[234,69,227,69],[234,70,227,70],[234,75,227,75,"it"],[234,77,227,77],[234,78,227,78],[234,81,227,81,"a"],[234,82,227,82],[234,83,227,83,"every"],[234,88,227,88],[234,89,227,89],[234,90,227,90,"it"],[234,92,227,92],[234,94,227,94,"i"],[234,95,227,95],[234,100,227,100,"b"],[234,101,227,101],[234,102,227,102,"i"],[234,103,227,103],[234,104,227,104],[234,109,227,109,"it"],[234,111,227,111],[234,112,227,112],[235,8,228,6],[235,12,228,10],[235,13,228,11,"intersects"],[235,23,228,21],[235,25,228,23],[236,10,229,8],[236,16,229,14],[236,20,229,18,"Error"],[236,25,229,23],[236,26,229,24],[236,91,229,89,"pattern"],[236,98,229,96],[236,121,229,119,"a"],[236,122,229,120],[236,123,229,121,"join"],[236,127,229,125],[236,128,229,126],[236,133,229,131],[236,134,229,132],[236,144,229,142,"b"],[236,145,229,143],[236,146,229,144,"join"],[236,150,229,148],[236,151,229,149],[236,156,229,154],[236,157,229,155],[236,229,229,227],[236,230,229,228],[237,8,230,6],[238,6,231,4],[239,6,232,4],[239,13,232,11,"Object"],[239,19,232,17],[239,20,232,18,"assign"],[239,26,232,24],[239,27,232,25,"acc"],[239,30,232,28],[239,32,232,30],[240,8,233,6],[240,9,233,7,"pattern"],[240,16,233,14],[240,19,233,17,"config"],[241,6,234,4],[241,7,234,5],[241,8,234,6],[242,4,235,2],[242,5,235,3],[242,7,235,5],[242,8,235,6],[242,9,235,7],[242,10,235,8],[243,2,236,0],[244,2,237,0],[244,11,237,9,"getConfigsWithRegexes"],[244,32,237,30,"getConfigsWithRegexes"],[244,33,237,31,"configs"],[244,40,237,38],[244,42,237,40],[245,4,238,2],[245,11,238,9,"configs"],[245,18,238,16],[245,19,238,17,"map"],[245,22,238,20],[245,23,238,21,"c"],[245,24,238,22],[245,29,238,27],[246,6,239,4],[246,9,239,7,"c"],[246,10,239,8],[247,6,240,4],[248,6,241,4,"regex"],[248,11,241,9],[248,13,241,11,"c"],[248,14,241,12],[248,15,241,13,"regex"],[248,20,241,18],[248,23,241,21],[248,27,241,25,"RegExp"],[248,33,241,31],[248,34,241,32,"c"],[248,35,241,33],[248,36,241,34,"regex"],[248,41,241,39],[248,42,241,40,"source"],[248,48,241,46],[248,51,241,49],[248,54,241,52],[248,55,241,53],[248,58,241,56,"undefined"],[249,4,242,2],[249,5,242,3],[249,6,242,4],[249,7,242,5],[250,2,243,0],[251,2,244,0],[251,6,244,6,"matchAgainstConfigs"],[251,25,244,25],[251,28,244,28,"matchAgainstConfigs"],[251,29,244,29,"remaining"],[251,38,244,38],[251,40,244,40,"configs"],[251,47,244,47],[251,52,244,52],[252,4,245,2],[252,8,245,6,"routes"],[252,14,245,12],[253,4,246,2],[253,8,246,6,"remainingPath"],[253,21,246,19],[253,24,246,22,"remaining"],[253,33,246,31],[255,4,248,2],[256,4,248,2],[256,8,248,2,"_loop"],[256,13,248,2],[256,25,248,2,"_loop"],[256,26,248,2,"config"],[256,32,248,2],[256,34,249,32],[257,8,250,4],[257,12,250,8],[257,13,250,9,"config"],[257,19,250,15],[257,20,250,16,"regex"],[257,25,250,21],[257,27,250,23],[258,10,250,23],[259,8,252,4],[260,8,253,4],[260,12,253,10,"match"],[260,17,253,15],[260,20,253,18,"remainingPath"],[260,33,253,31],[260,34,253,32,"match"],[260,39,253,37],[260,40,253,38,"config"],[260,46,253,44],[260,47,253,45,"regex"],[260,52,253,50],[260,53,253,51],[262,8,255,4],[263,8,256,4],[263,12,256,8,"match"],[263,17,256,13],[263,19,256,15],[264,10,257,6,"routes"],[264,16,257,12],[264,19,257,15,"config"],[264,25,257,21],[264,26,257,22,"routeNames"],[264,36,257,32],[264,37,257,33,"map"],[264,40,257,36],[264,41,257,37,"routeName"],[264,50,257,46],[264,54,257,50],[265,12,258,8],[265,16,258,14,"routeConfig"],[265,27,258,25],[265,30,258,28,"configs"],[265,37,258,35],[265,38,258,36,"find"],[265,42,258,40],[265,43,258,41,"c"],[265,44,258,42],[265,48,258,46],[266,14,259,10],[267,14,260,10],[267,21,260,17,"c"],[267,22,260,18],[267,23,260,19,"screen"],[267,29,260,25],[267,34,260,30,"routeName"],[267,43,260,39],[267,47,260,43],[267,51,260,43,"arrayStartsWith"],[267,83,260,58],[267,85,260,59,"config"],[267,91,260,65],[267,92,260,66,"segments"],[267,100,260,74],[267,102,260,76,"c"],[267,103,260,77],[267,104,260,78,"segments"],[267,112,260,86],[267,113,260,87],[268,12,261,8],[268,13,261,9],[268,14,261,10],[269,12,262,8],[269,16,262,14,"params"],[269,22,262,20],[269,25,262,23,"routeConfig"],[269,36,262,34],[269,40,262,38,"match"],[269,45,262,43],[269,46,262,44,"groups"],[269,52,262,50],[269,55,262,53,"Object"],[269,61,262,59],[269,62,262,60,"fromEntries"],[269,73,262,71],[269,74,262,72,"Object"],[269,80,262,78],[269,81,262,79,"entries"],[269,88,262,86],[269,89,262,87,"match"],[269,94,262,92],[269,95,262,93,"groups"],[269,101,262,99],[269,102,262,100],[269,103,262,101,"map"],[269,106,262,104],[269,107,262,105,"_ref"],[269,111,262,105],[269,115,262,123],[270,14,262,123],[270,18,262,123,"_ref2"],[270,23,262,123],[270,30,262,123,"_slicedToArray2"],[270,45,262,123],[270,46,262,123,"default"],[270,53,262,123],[270,55,262,123,"_ref"],[270,59,262,123],[271,16,262,107,"key"],[271,19,262,110],[271,22,262,110,"_ref2"],[271,27,262,110],[272,16,262,112,"value"],[272,21,262,117],[272,24,262,117,"_ref2"],[272,29,262,117],[273,14,263,10],[273,18,263,16,"index"],[273,23,263,21],[273,26,263,24,"Number"],[273,32,263,30],[273,33,263,31,"key"],[273,36,263,34],[273,37,263,35,"replace"],[273,44,263,42],[273,45,263,43],[273,53,263,51],[273,55,263,53],[273,57,263,55],[273,58,263,56],[273,59,263,57],[274,14,264,10],[274,18,264,16,"param"],[274,23,264,21],[274,26,264,24,"routeConfig"],[274,37,264,35],[274,38,264,36,"params"],[274,44,264,42],[274,45,264,43,"find"],[274,49,264,47],[274,50,264,48,"it"],[274,52,264,50],[274,56,264,54,"it"],[274,58,264,56],[274,59,264,57,"index"],[274,64,264,62],[274,69,264,67,"index"],[274,74,264,72],[274,75,264,73],[275,14,265,10],[275,18,265,14,"param"],[275,23,265,19],[275,25,265,21,"screen"],[275,31,265,27],[275,36,265,32,"routeName"],[275,45,265,41],[275,49,265,45,"param"],[275,54,265,50],[275,56,265,52,"name"],[275,60,265,56],[275,62,265,58],[276,16,266,12],[276,23,266,19],[276,24,266,20,"param"],[276,29,266,25],[276,30,266,26,"name"],[276,34,266,30],[276,36,266,32,"value"],[276,41,266,37],[276,42,266,38],[277,14,267,10],[278,14,268,10],[278,21,268,17],[278,25,268,21],[279,12,269,8],[279,13,269,9],[279,14,269,10],[279,15,269,11,"filter"],[279,21,269,17],[279,22,269,18,"it"],[279,24,269,20],[279,28,269,24,"it"],[279,30,269,26],[279,34,269,30],[279,38,269,34],[279,39,269,35],[279,40,269,36,"map"],[279,43,269,39],[279,44,269,40,"_ref3"],[279,49,269,40],[279,53,269,58],[280,14,269,58],[280,18,269,58,"_ref4"],[280,23,269,58],[280,30,269,58,"_slicedToArray2"],[280,45,269,58],[280,46,269,58,"default"],[280,53,269,58],[280,55,269,58,"_ref3"],[280,60,269,58],[281,16,269,42,"key"],[281,19,269,45],[281,22,269,45,"_ref4"],[281,27,269,45],[282,16,269,47,"value"],[282,21,269,52],[282,24,269,52,"_ref4"],[282,29,269,52],[283,14,270,10],[283,18,270,14,"value"],[283,23,270,19],[283,27,270,23],[283,31,270,27],[283,33,270,29],[284,16,271,12],[284,23,271,19],[284,24,271,20,"key"],[284,27,271,23],[284,29,271,25,"undefined"],[284,38,271,34],[284,39,271,35],[285,14,272,10],[286,14,273,10],[286,18,273,16,"decoded"],[286,25,273,23],[286,28,273,26,"decodeURIComponent"],[286,46,273,44],[286,47,273,45,"value"],[286,52,273,50],[286,53,273,51],[287,14,274,10],[287,18,274,16,"parsed"],[287,24,274,22],[287,27,274,25,"routeConfig"],[287,38,274,36],[287,39,274,37,"parse"],[287,44,274,42],[287,47,274,45,"key"],[287,50,274,48],[287,51,274,49],[287,54,274,52,"routeConfig"],[287,65,274,63],[287,66,274,64,"parse"],[287,71,274,69],[287,72,274,70,"key"],[287,75,274,73],[287,76,274,74],[287,77,274,75,"decoded"],[287,84,274,82],[287,85,274,83],[287,88,274,86,"decoded"],[287,95,274,93],[288,14,275,10],[288,21,275,17],[288,22,275,18,"key"],[288,25,275,21],[288,27,275,23,"parsed"],[288,33,275,29],[288,34,275,30],[289,12,276,8],[289,13,276,9],[289,14,276,10],[289,15,276,11],[289,18,276,14,"undefined"],[289,27,276,23],[290,12,277,8],[290,16,277,12,"params"],[290,22,277,18],[290,26,277,22,"Object"],[290,32,277,28],[290,33,277,29,"keys"],[290,37,277,33],[290,38,277,34,"params"],[290,44,277,40],[290,45,277,41],[290,46,277,42,"length"],[290,52,277,48],[290,54,277,50],[291,14,278,10],[291,21,278,17],[292,16,279,12,"name"],[292,20,279,16],[292,22,279,18,"routeName"],[292,31,279,27],[293,16,280,12,"params"],[294,14,281,10],[294,15,281,11],[295,12,282,8],[296,12,283,8],[296,19,283,15],[297,14,284,10,"name"],[297,18,284,14],[297,20,284,16,"routeName"],[298,12,285,8],[298,13,285,9],[299,10,286,6],[299,11,286,7],[299,12,286,8],[300,10,287,6,"remainingPath"],[300,23,287,19],[300,26,287,22,"remainingPath"],[300,39,287,35],[300,40,287,36,"replace"],[300,47,287,43],[300,48,287,44,"match"],[300,53,287,49],[300,54,287,50],[300,55,287,51],[300,56,287,52],[300,58,287,54],[300,60,287,56],[300,61,287,57],[301,10,287,58],[302,8,289,4],[303,6,290,2],[303,7,290,3],[304,6,290,3,"_ret"],[304,10,290,3],[305,4,249,2],[305,9,249,7],[305,13,249,13,"config"],[305,19,249,19],[305,23,249,23,"configs"],[305,30,249,30],[306,6,249,30,"_ret"],[306,10,249,30],[306,13,249,30,"_loop"],[306,18,249,30],[306,19,249,30,"config"],[306,25,249,30],[307,6,249,30],[307,10,249,30,"_ret"],[307,14,249,30],[307,22,251,6],[308,6,251,15],[308,10,251,15,"_ret"],[308,14,251,15],[308,22,288,6],[309,4,288,12],[310,4,291,2],[310,11,291,9],[311,6,292,4,"routes"],[311,12,292,10],[312,6,293,4,"remainingPath"],[313,4,294,2],[313,5,294,3],[314,2,295,0],[314,3,295,1],[315,2,296,0],[315,6,296,6,"createNormalizedConfigs"],[315,29,296,29],[315,32,296,32,"createNormalizedConfigs"],[315,33,296,33,"screen"],[315,39,296,39],[315,41,296,41,"routeConfig"],[315,52,296,52],[315,54,296,54,"initials"],[315,62,296,62],[315,64,296,64,"paths"],[315,69,296,69],[315,71,296,71,"parentScreens"],[315,84,296,84],[315,86,296,86,"routeNames"],[315,96,296,96],[315,101,296,101],[316,4,297,2],[316,8,297,8,"configs"],[316,15,297,15],[316,18,297,18],[316,20,297,20],[317,4,298,2,"routeNames"],[317,14,298,12],[317,15,298,13,"push"],[317,19,298,17],[317,20,298,18,"screen"],[317,26,298,24],[317,27,298,25],[318,4,299,2,"parentScreens"],[318,17,299,15],[318,18,299,16,"push"],[318,22,299,20],[318,23,299,21,"screen"],[318,29,299,27],[318,30,299,28],[319,4,300,2],[319,8,300,8,"config"],[319,14,300,14],[319,17,300,17,"routeConfig"],[319,28,300,28],[319,29,300,29,"screen"],[319,35,300,35],[319,36,300,36],[320,4,301,2],[320,8,301,6],[320,15,301,13,"config"],[320,21,301,19],[320,26,301,24],[320,34,301,32],[320,36,301,34],[321,6,302,4,"paths"],[321,11,302,9],[321,12,302,10,"push"],[321,16,302,14],[321,17,302,15],[322,8,303,6,"screen"],[322,14,303,12],[323,8,304,6,"path"],[323,12,304,10],[323,14,304,12,"config"],[324,6,305,4],[324,7,305,5],[324,8,305,6],[325,6,306,4,"configs"],[325,13,306,11],[325,14,306,12,"push"],[325,18,306,16],[325,19,306,17,"createConfigItem"],[325,35,306,33],[325,36,306,34,"screen"],[325,42,306,40],[325,44,306,42],[325,45,306,43],[325,48,306,46,"routeNames"],[325,58,306,56],[325,59,306,57],[325,61,306,59],[325,62,306,60],[325,65,306,63,"paths"],[325,70,306,68],[325,71,306,69],[325,72,306,70],[325,73,306,71],[326,4,307,2],[326,5,307,3],[326,11,307,9],[326,15,307,13],[326,22,307,20,"config"],[326,28,307,26],[326,33,307,31],[326,41,307,39],[326,43,307,41],[327,6,308,4],[328,6,309,4],[329,6,310,4],[330,6,311,4],[330,10,311,8],[330,17,311,15,"config"],[330,23,311,21],[330,24,311,22,"path"],[330,28,311,26],[330,33,311,31],[330,41,311,39],[330,43,311,41],[331,8,312,6],[331,12,312,10,"config"],[331,18,312,16],[331,19,312,17,"exact"],[331,24,312,22],[331,28,312,26,"config"],[331,34,312,32],[331,35,312,33,"path"],[331,39,312,37],[331,43,312,41],[331,47,312,45],[331,49,312,47],[332,10,313,8],[332,16,313,14],[332,20,313,18,"Error"],[332,25,313,23],[332,26,313,24],[332,37,313,35,"screen"],[332,43,313,41],[332,223,313,221],[332,224,313,222],[333,8,314,6],[335,8,316,6],[336,8,317,6],[337,8,318,6],[337,12,318,12,"aliasConfigs"],[337,24,318,24],[337,27,318,27],[337,29,318,29],[338,8,319,6],[338,12,319,10,"config"],[338,18,319,16],[338,19,319,17,"alias"],[338,24,319,22],[338,26,319,24],[339,10,320,8],[339,15,320,13],[339,19,320,19,"alias"],[339,24,320,24],[339,28,320,28,"config"],[339,34,320,34],[339,35,320,35,"alias"],[339,40,320,40],[339,42,320,42],[340,12,321,10],[340,16,321,14],[340,23,321,21,"alias"],[340,28,321,26],[340,33,321,31],[340,41,321,39],[340,43,321,41],[341,14,322,12,"aliasConfigs"],[341,26,322,24],[341,27,322,25,"push"],[341,31,322,29],[341,32,322,30,"createConfigItem"],[341,48,322,46],[341,49,322,47,"screen"],[341,55,322,53],[341,57,322,55],[341,58,322,56],[341,61,322,59,"routeNames"],[341,71,322,69],[341,72,322,70],[341,74,322,72],[341,75,322,73],[341,78,322,76,"paths"],[341,83,322,81],[341,85,322,83],[342,16,323,14,"screen"],[342,22,323,20],[343,16,324,14,"path"],[343,20,324,18],[343,22,324,20,"alias"],[344,14,325,12],[344,15,325,13],[344,16,325,14],[344,18,325,16,"config"],[344,24,325,22],[344,25,325,23,"parse"],[344,30,325,28],[344,31,325,29],[344,32,325,30],[345,12,326,10],[345,13,326,11],[345,19,326,17],[345,23,326,21],[345,30,326,28,"alias"],[345,35,326,33],[345,40,326,38],[345,48,326,46],[345,50,326,48],[346,14,327,12,"aliasConfigs"],[346,26,327,24],[346,27,327,25,"push"],[346,31,327,29],[346,32,327,30,"createConfigItem"],[346,48,327,46],[346,49,327,47,"screen"],[346,55,327,53],[346,57,327,55],[346,58,327,56],[346,61,327,59,"routeNames"],[346,71,327,69],[346,72,327,70],[346,74,327,72,"alias"],[346,79,327,77],[346,80,327,78,"exact"],[346,85,327,83],[346,88,327,86],[346,89,327,87],[347,16,328,14,"screen"],[347,22,328,20],[348,16,329,14,"path"],[348,20,329,18],[348,22,329,20,"alias"],[348,27,329,25],[348,28,329,26,"path"],[349,14,330,12],[349,15,330,13],[349,16,330,14],[349,19,330,17],[349,20,330,18],[349,23,330,21,"paths"],[349,28,330,26],[349,30,330,28],[350,16,331,14,"screen"],[350,22,331,20],[351,16,332,14,"path"],[351,20,332,18],[351,22,332,20,"alias"],[351,27,332,25],[351,28,332,26,"path"],[352,14,333,12],[352,15,333,13],[352,16,333,14],[352,18,333,16,"alias"],[352,23,333,21],[352,24,333,22,"parse"],[352,29,333,27],[352,30,333,28],[352,31,333,29],[353,12,334,10],[354,10,335,8],[355,8,336,6],[356,8,337,6],[356,12,337,10,"config"],[356,18,337,16],[356,19,337,17,"exact"],[356,24,337,22],[356,26,337,24],[357,10,338,8],[358,10,339,8],[359,10,340,8,"paths"],[359,15,340,13],[359,16,340,14,"length"],[359,22,340,20],[359,25,340,23],[359,26,340,24],[360,8,341,6],[361,8,342,6,"paths"],[361,13,342,11],[361,14,342,12,"push"],[361,18,342,16],[361,19,342,17],[362,10,343,8,"screen"],[362,16,343,14],[363,10,344,8,"path"],[363,14,344,12],[363,16,344,14,"config"],[363,22,344,20],[363,23,344,21,"path"],[364,8,345,6],[364,9,345,7],[364,10,345,8],[365,8,346,6,"configs"],[365,15,346,13],[365,16,346,14,"push"],[365,20,346,18],[365,21,346,19,"createConfigItem"],[365,37,346,35],[365,38,346,36,"screen"],[365,44,346,42],[365,46,346,44],[365,47,346,45],[365,50,346,48,"routeNames"],[365,60,346,58],[365,61,346,59],[365,63,346,61],[365,64,346,62],[365,67,346,65,"paths"],[365,72,346,70],[365,73,346,71],[365,75,346,73,"config"],[365,81,346,79],[365,82,346,80,"parse"],[365,87,346,85],[365,88,346,86],[365,89,346,87],[366,8,347,6,"configs"],[366,15,347,13],[366,16,347,14,"push"],[366,20,347,18],[366,21,347,19],[366,24,347,22,"aliasConfigs"],[366,36,347,34],[366,37,347,35],[367,6,348,4],[368,6,349,4],[368,10,349,8],[368,17,349,15,"config"],[368,23,349,21],[368,28,349,26],[368,36,349,34],[368,40,349,38],[368,47,349,45,"config"],[368,53,349,51],[368,54,349,52,"path"],[368,58,349,56],[368,63,349,61],[368,71,349,69],[368,75,349,73,"config"],[368,81,349,79],[368,82,349,80,"alias"],[368,87,349,85],[368,89,349,87,"length"],[368,95,349,93],[368,97,349,95],[369,8,350,6],[369,14,350,12],[369,18,350,16,"Error"],[369,23,350,21],[369,24,350,22],[369,35,350,33,"screen"],[369,41,350,39],[369,126,350,124],[369,127,350,125],[370,6,351,4],[371,6,352,4],[371,10,352,8,"config"],[371,16,352,14],[371,17,352,15,"screens"],[371,24,352,22],[371,26,352,24],[372,8,353,6],[373,8,354,6],[373,12,354,10,"config"],[373,18,354,16],[373,19,354,17,"initialRouteName"],[373,35,354,33],[373,37,354,35],[374,10,355,8,"initials"],[374,18,355,16],[374,19,355,17,"push"],[374,23,355,21],[374,24,355,22],[375,12,356,10,"initialRouteName"],[375,28,356,26],[375,30,356,28,"config"],[375,36,356,34],[375,37,356,35,"initialRouteName"],[375,53,356,51],[376,12,357,10,"parentScreens"],[377,10,358,8],[377,11,358,9],[377,12,358,10],[378,8,359,6],[379,8,360,6,"Object"],[379,14,360,12],[379,15,360,13,"keys"],[379,19,360,17],[379,20,360,18,"config"],[379,26,360,24],[379,27,360,25,"screens"],[379,34,360,32],[379,35,360,33],[379,36,360,34,"forEach"],[379,43,360,41],[379,44,360,42,"nestedConfig"],[379,56,360,54],[379,60,360,58],[380,10,361,8],[380,14,361,14,"result"],[380,20,361,20],[380,23,361,23,"createNormalizedConfigs"],[380,46,361,46],[380,47,361,47,"nestedConfig"],[380,59,361,59],[380,61,361,61,"config"],[380,67,361,67],[380,68,361,68,"screens"],[380,75,361,75],[380,77,361,77,"initials"],[380,85,361,85],[380,87,361,87],[380,88,361,88],[380,91,361,91,"paths"],[380,96,361,96],[380,97,361,97],[380,99,361,99],[380,100,361,100],[380,103,361,103,"parentScreens"],[380,116,361,116],[380,117,361,117],[380,119,361,119,"routeNames"],[380,129,361,129],[380,130,361,130],[381,10,362,8,"configs"],[381,17,362,15],[381,18,362,16,"push"],[381,22,362,20],[381,23,362,21],[381,26,362,24,"result"],[381,32,362,30],[381,33,362,31],[382,8,363,6],[382,9,363,7],[382,10,363,8],[383,6,364,4],[384,4,365,2],[385,4,366,2,"routeNames"],[385,14,366,12],[385,15,366,13,"pop"],[385,18,366,16],[385,19,366,17],[385,20,366,18],[386,4,367,2],[386,11,367,9,"configs"],[386,18,367,16],[387,2,368,0],[387,3,368,1],[388,2,369,0],[388,6,369,6,"createConfigItem"],[388,22,369,22],[388,25,369,25,"createConfigItem"],[388,26,369,26,"screen"],[388,32,369,32],[388,34,369,34,"routeNames"],[388,44,369,44],[388,46,369,46,"paths"],[388,51,369,51],[388,53,369,53,"parse"],[388,58,369,58],[388,63,369,63],[389,4,370,2],[389,8,370,8,"parts"],[389,13,370,13],[389,16,370,16],[389,18,370,18],[391,4,372,2],[392,4,372,2],[392,8,372,2,"_loop2"],[392,14,372,2],[392,26,372,2,"_loop2"],[392,27,372,2,"_screen"],[392,34,372,2],[392,36,376,14],[393,6,377,4,"parts"],[393,11,377,9],[393,12,377,10,"push"],[393,16,377,14],[393,17,377,15],[393,20,377,18],[393,24,377,18,"getPatternParts"],[393,56,377,33],[393,58,377,34,"path"],[393,62,377,38],[393,63,377,39],[393,64,377,40,"map"],[393,67,377,43],[393,68,377,44,"part"],[393,72,377,48],[393,77,377,53],[394,8,378,6],[394,11,378,9,"part"],[394,15,378,13],[395,8,379,6,"screen"],[395,14,379,12],[395,16,379,6,"screen"],[396,6,380,4],[396,7,380,5],[396,8,380,6],[396,9,380,7],[396,10,380,8],[397,4,381,2],[397,5,381,3],[398,4,373,2],[398,13,373,2,"_ref5"],[398,18,373,2],[398,22,376,7,"paths"],[398,27,376,12],[399,6,376,12],[399,10,374,4,"screen"],[399,17,374,10],[399,20,374,10,"_ref5"],[399,25,374,10],[399,26,374,4,"screen"],[399,32,374,10],[400,6,374,10],[400,10,375,4,"path"],[400,14,375,8],[400,17,375,8,"_ref5"],[400,22,375,8],[400,23,375,4,"path"],[400,27,375,8],[401,6,375,8,"_loop2"],[401,12,375,8],[401,13,375,8,"_screen"],[401,20,375,8],[402,4,375,8],[403,4,382,2],[403,8,382,8,"regex"],[403,13,382,13],[403,16,382,16,"parts"],[403,21,382,21],[403,22,382,22,"length"],[403,28,382,28],[403,31,382,31],[403,35,382,35,"RegExp"],[403,41,382,41],[403,42,382,42],[403,47,382,47,"parts"],[403,52,382,52],[403,53,382,53,"map"],[403,56,382,56],[403,57,382,57],[403,58,382,58,"it"],[403,60,382,60],[403,62,382,62,"i"],[403,63,382,63],[403,68,382,68],[404,6,383,4],[404,10,383,8,"it"],[404,12,383,10],[404,13,383,11,"param"],[404,18,383,16],[404,20,383,18],[405,8,384,6],[405,12,384,12,"reg"],[405,15,384,15],[405,18,384,18,"it"],[405,20,384,20],[405,21,384,21,"regex"],[405,26,384,26],[405,30,384,30],[405,37,384,37],[406,8,385,6],[406,15,385,13],[406,29,385,27,"i"],[406,30,385,28],[406,34,385,32,"reg"],[406,37,385,35],[406,45,385,43,"it"],[406,47,385,45],[406,48,385,46,"optional"],[406,56,385,54],[406,59,385,57],[406,62,385,60],[406,65,385,63],[406,67,385,65],[406,70,385,68],[407,6,386,4],[408,6,387,4],[408,13,387,11],[408,16,387,14,"it"],[408,18,387,16],[408,19,387,17,"segment"],[408,26,387,24],[408,31,387,29],[408,34,387,32],[408,37,387,35],[408,41,387,39],[408,44,387,42],[408,48,387,42,"escape"],[408,75,387,48],[408,77,387,49,"it"],[408,79,387,51],[408,80,387,52,"segment"],[408,87,387,59],[408,88,387,60],[408,93,387,65],[409,4,388,2],[409,5,388,3],[409,6,388,4],[409,7,388,5,"join"],[409,11,388,9],[409,12,388,10],[409,14,388,12],[409,15,388,13],[409,19,388,17],[409,20,388,18],[409,23,388,21,"undefined"],[409,32,388,30],[410,4,389,2],[410,8,389,8,"segments"],[410,16,389,16],[410,19,389,19,"parts"],[410,24,389,24],[410,25,389,25,"map"],[410,28,389,28],[410,29,389,29,"it"],[410,31,389,31],[410,35,389,35,"it"],[410,37,389,37],[410,38,389,38,"segment"],[410,45,389,45],[410,46,389,46],[411,4,390,2],[411,8,390,8,"params"],[411,14,390,14],[411,17,390,17,"parts"],[411,22,390,22],[411,23,390,23,"map"],[411,26,390,26],[411,27,390,27],[411,28,390,28,"it"],[411,30,390,30],[411,32,390,32,"i"],[411,33,390,33],[411,38,390,38,"it"],[411,40,390,40],[411,41,390,41,"param"],[411,46,390,46],[411,49,390,49],[412,6,391,4,"index"],[412,11,391,9],[412,13,391,11,"i"],[412,14,391,12],[413,6,392,4,"screen"],[413,12,392,10],[413,14,392,12,"it"],[413,16,392,14],[413,17,392,15,"screen"],[413,23,392,21],[414,6,393,4,"name"],[414,10,393,8],[414,12,393,10,"it"],[414,14,393,12],[414,15,393,13,"param"],[415,4,394,2],[415,5,394,3],[415,8,394,6],[415,12,394,10],[415,13,394,11],[415,14,394,12,"filter"],[415,20,394,18],[415,21,394,19,"it"],[415,23,394,21],[415,27,394,25,"it"],[415,29,394,27],[415,33,394,31],[415,37,394,35],[415,38,394,36],[416,4,395,2],[416,11,395,9],[417,6,396,4,"screen"],[417,12,396,10],[418,6,397,4,"regex"],[418,11,397,9],[419,6,398,4,"segments"],[419,14,398,12],[420,6,399,4,"params"],[420,12,399,10],[421,6,400,4,"routeNames"],[421,16,400,14],[422,6,401,4,"parse"],[423,4,402,2],[423,5,402,3],[424,2,403,0],[424,3,403,1],[425,2,404,0],[425,6,404,6,"findParseConfigForRoute"],[425,29,404,29],[425,32,404,32,"findParseConfigForRoute"],[425,33,404,33,"routeName"],[425,42,404,42],[425,44,404,44,"flatConfig"],[425,54,404,54],[425,59,404,59],[426,4,405,2],[426,9,405,7],[426,13,405,13,"config"],[426,19,405,19],[426,23,405,23,"flatConfig"],[426,33,405,33],[426,35,405,35],[427,6,406,4],[427,10,406,8,"routeName"],[427,19,406,17],[427,24,406,22,"config"],[427,30,406,28],[427,31,406,29,"routeNames"],[427,41,406,39],[427,42,406,40,"config"],[427,48,406,46],[427,49,406,47,"routeNames"],[427,59,406,57],[427,60,406,58,"length"],[427,66,406,64],[427,69,406,67],[427,70,406,68],[427,71,406,69],[427,73,406,71],[428,8,407,6],[428,15,407,13,"config"],[428,21,407,19],[428,22,407,20,"parse"],[428,27,407,25],[429,6,408,4],[430,4,409,2],[431,4,410,2],[431,11,410,9,"undefined"],[431,20,410,18],[432,2,411,0],[432,3,411,1],[434,2,413,0],[435,2,414,0],[435,6,414,6,"findInitialRoute"],[435,22,414,22],[435,25,414,25,"findInitialRoute"],[435,26,414,26,"routeName"],[435,35,414,35],[435,37,414,37,"parentScreens"],[435,50,414,50],[435,52,414,52,"initialRoutes"],[435,65,414,65],[435,70,414,70],[436,4,415,2],[436,9,415,7],[436,13,415,13,"config"],[436,19,415,19],[436,23,415,23,"initialRoutes"],[436,36,415,36],[436,38,415,38],[437,6,416,4],[437,10,416,8,"parentScreens"],[437,23,416,21],[437,24,416,22,"length"],[437,30,416,28],[437,35,416,33,"config"],[437,41,416,39],[437,42,416,40,"parentScreens"],[437,55,416,53],[437,56,416,54,"length"],[437,62,416,60],[437,64,416,62],[438,8,417,6],[438,12,417,10,"sameParents"],[438,23,417,21],[438,26,417,24],[438,30,417,28],[439,8,418,6],[439,13,418,11],[439,17,418,15,"i"],[439,18,418,16],[439,21,418,19],[439,22,418,20],[439,24,418,22,"i"],[439,25,418,23],[439,28,418,26,"parentScreens"],[439,41,418,39],[439,42,418,40,"length"],[439,48,418,46],[439,50,418,48,"i"],[439,51,418,49],[439,53,418,51],[439,55,418,53],[440,10,419,8],[440,14,419,12,"parentScreens"],[440,27,419,25],[440,28,419,26,"i"],[440,29,419,27],[440,30,419,28],[440,31,419,29,"localeCompare"],[440,44,419,42],[440,45,419,43,"config"],[440,51,419,49],[440,52,419,50,"parentScreens"],[440,65,419,63],[440,66,419,64,"i"],[440,67,419,65],[440,68,419,66],[440,69,419,67],[440,74,419,72],[440,75,419,73],[440,77,419,75],[441,12,420,10,"sameParents"],[441,23,420,21],[441,26,420,24],[441,31,420,29],[442,12,421,10],[443,10,422,8],[444,8,423,6],[445,8,424,6],[445,12,424,10,"sameParents"],[445,23,424,21],[445,25,424,23],[446,10,425,8],[446,17,425,15,"routeName"],[446,26,425,24],[446,31,425,29,"config"],[446,37,425,35],[446,38,425,36,"initialRouteName"],[446,54,425,52],[446,57,425,55,"config"],[446,63,425,61],[446,64,425,62,"initialRouteName"],[446,80,425,78],[446,83,425,81,"undefined"],[446,92,425,90],[447,8,426,6],[448,6,427,4],[449,4,428,2],[450,4,429,2],[450,11,429,9,"undefined"],[450,20,429,18],[451,2,430,0],[451,3,430,1],[453,2,432,0],[454,2,433,0],[455,2,434,0],[455,6,434,6,"createStateObject"],[455,23,434,23],[455,26,434,26,"createStateObject"],[455,27,434,27,"initialRoute"],[455,39,434,39],[455,41,434,41,"route"],[455,46,434,46],[455,48,434,48,"isEmpty"],[455,55,434,55],[455,60,434,60],[456,4,435,2],[456,8,435,6,"isEmpty"],[456,15,435,13],[456,17,435,15],[457,6,436,4],[457,10,436,8,"initialRoute"],[457,22,436,20],[457,24,436,22],[458,8,437,6],[458,15,437,13],[459,10,438,8,"index"],[459,15,438,13],[459,17,438,15],[459,18,438,16],[460,10,439,8,"routes"],[460,16,439,14],[460,18,439,16],[460,19,439,17],[461,12,440,10,"name"],[461,16,440,14],[461,18,440,16,"initialRoute"],[462,10,441,8],[462,11,441,9],[462,13,441,11,"route"],[462,18,441,16],[463,8,442,6],[463,9,442,7],[464,6,443,4],[464,7,443,5],[464,13,443,11],[465,8,444,6],[465,15,444,13],[466,10,445,8,"routes"],[466,16,445,14],[466,18,445,16],[466,19,445,17,"route"],[466,24,445,22],[467,8,446,6],[467,9,446,7],[468,6,447,4],[469,4,448,2],[469,5,448,3],[469,11,448,9],[470,6,449,4],[470,10,449,8,"initialRoute"],[470,22,449,20],[470,24,449,22],[471,8,450,6],[471,15,450,13],[472,10,451,8,"index"],[472,15,451,13],[472,17,451,15],[472,18,451,16],[473,10,452,8,"routes"],[473,16,452,14],[473,18,452,16],[473,19,452,17],[474,12,453,10,"name"],[474,16,453,14],[474,18,453,16,"initialRoute"],[475,10,454,8],[475,11,454,9],[475,13,454,11],[476,12,455,10],[476,15,455,13,"route"],[476,20,455,18],[477,12,456,10,"state"],[477,17,456,15],[477,19,456,17],[478,14,457,12,"routes"],[478,20,457,18],[478,22,457,20],[479,12,458,10],[480,10,459,8],[480,11,459,9],[481,8,460,6],[481,9,460,7],[482,6,461,4],[482,7,461,5],[482,13,461,11],[483,8,462,6],[483,15,462,13],[484,10,463,8,"routes"],[484,16,463,14],[484,18,463,16],[484,19,463,17],[485,12,464,10],[485,15,464,13,"route"],[485,20,464,18],[486,12,465,10,"state"],[486,17,465,15],[486,19,465,17],[487,14,466,12,"routes"],[487,20,466,18],[487,22,466,20],[488,12,467,10],[489,10,468,8],[489,11,468,9],[490,8,469,6],[490,9,469,7],[491,6,470,4],[492,4,471,2],[493,2,472,0],[493,3,472,1],[494,2,473,0],[494,6,473,6,"createNestedStateObject"],[494,29,473,29],[494,32,473,32,"createNestedStateObject"],[494,33,473,33,"path"],[494,37,473,37],[494,39,473,39,"routes"],[494,45,473,45],[494,47,473,47,"initialRoutes"],[494,60,473,60],[494,62,473,62,"flatConfig"],[494,72,473,72],[494,77,473,77],[495,4,474,2],[495,8,474,6,"route"],[495,13,474,11],[495,16,474,14,"routes"],[495,22,474,20],[495,23,474,21,"shift"],[495,28,474,26],[495,29,474,27],[495,30,474,28],[496,4,475,2],[496,8,475,8,"parentScreens"],[496,21,475,21],[496,24,475,24],[496,26,475,26],[497,4,476,2],[497,8,476,6,"initialRoute"],[497,20,476,18],[497,23,476,21,"findInitialRoute"],[497,39,476,37],[497,40,476,38,"route"],[497,45,476,43],[497,46,476,44,"name"],[497,50,476,48],[497,52,476,50,"parentScreens"],[497,65,476,63],[497,67,476,65,"initialRoutes"],[497,80,476,78],[497,81,476,79],[498,4,477,2,"parentScreens"],[498,17,477,15],[498,18,477,16,"push"],[498,22,477,20],[498,23,477,21,"route"],[498,28,477,26],[498,29,477,27,"name"],[498,33,477,31],[498,34,477,32],[499,4,478,2],[499,8,478,8,"state"],[499,13,478,13],[499,16,478,16,"createStateObject"],[499,33,478,33],[499,34,478,34,"initialRoute"],[499,46,478,46],[499,48,478,48,"route"],[499,53,478,53],[499,55,478,55,"routes"],[499,61,478,61],[499,62,478,62,"length"],[499,68,478,68],[499,73,478,73],[499,74,478,74],[499,75,478,75],[500,4,479,2],[500,8,479,6,"routes"],[500,14,479,12],[500,15,479,13,"length"],[500,21,479,19],[500,24,479,22],[500,25,479,23],[500,27,479,25],[501,6,480,4],[501,10,480,8,"nestedState"],[501,21,480,19],[501,24,480,22,"state"],[501,29,480,27],[502,6,481,4],[502,13,481,11,"route"],[502,18,481,16],[502,21,481,19,"routes"],[502,27,481,25],[502,28,481,26,"shift"],[502,33,481,31],[502,34,481,32],[502,35,481,33],[502,37,481,35],[503,8,482,6,"initialRoute"],[503,20,482,18],[503,23,482,21,"findInitialRoute"],[503,39,482,37],[503,40,482,38,"route"],[503,45,482,43],[503,46,482,44,"name"],[503,50,482,48],[503,52,482,50,"parentScreens"],[503,65,482,63],[503,67,482,65,"initialRoutes"],[503,80,482,78],[503,81,482,79],[504,8,483,6],[504,12,483,12,"nestedStateIndex"],[504,28,483,28],[504,31,483,31,"nestedState"],[504,42,483,42],[504,43,483,43,"index"],[504,48,483,48],[504,52,483,52,"nestedState"],[504,63,483,63],[504,64,483,64,"routes"],[504,70,483,70],[504,71,483,71,"length"],[504,77,483,77],[504,80,483,80],[504,81,483,81],[505,8,484,6,"nestedState"],[505,19,484,17],[505,20,484,18,"routes"],[505,26,484,24],[505,27,484,25,"nestedStateIndex"],[505,43,484,41],[505,44,484,42],[505,45,484,43,"state"],[505,50,484,48],[505,53,484,51,"createStateObject"],[505,70,484,68],[505,71,484,69,"initialRoute"],[505,83,484,81],[505,85,484,83,"route"],[505,90,484,88],[505,92,484,90,"routes"],[505,98,484,96],[505,99,484,97,"length"],[505,105,484,103],[505,110,484,108],[505,111,484,109],[505,112,484,110],[506,8,485,6],[506,12,485,10,"routes"],[506,18,485,16],[506,19,485,17,"length"],[506,25,485,23],[506,28,485,26],[506,29,485,27],[506,31,485,29],[507,10,486,8,"nestedState"],[507,21,486,19],[507,24,486,22,"nestedState"],[507,35,486,33],[507,36,486,34,"routes"],[507,42,486,40],[507,43,486,41,"nestedStateIndex"],[507,59,486,57],[507,60,486,58],[507,61,486,59,"state"],[507,66,486,64],[508,8,487,6],[509,8,488,6,"parentScreens"],[509,21,488,19],[509,22,488,20,"push"],[509,26,488,24],[509,27,488,25,"route"],[509,32,488,30],[509,33,488,31,"name"],[509,37,488,35],[509,38,488,36],[510,6,489,4],[511,4,490,2],[512,4,491,2,"route"],[512,9,491,7],[512,12,491,10],[512,16,491,10,"findFocusedRoute"],[512,50,491,26],[512,52,491,27,"state"],[512,57,491,32],[512,58,491,33],[513,4,492,2,"route"],[513,9,492,7],[513,10,492,8,"path"],[513,14,492,12],[513,17,492,15,"path"],[513,21,492,19],[513,22,492,20,"replace"],[513,29,492,27],[513,30,492,28],[513,35,492,33],[513,37,492,35],[513,39,492,37],[513,40,492,38],[514,4,493,2],[514,8,493,8,"params"],[514,14,493,14],[514,17,493,17,"parseQueryParams"],[514,33,493,33],[514,34,493,34,"path"],[514,38,493,38],[514,40,493,40,"flatConfig"],[514,50,493,50],[514,53,493,53,"findParseConfigForRoute"],[514,76,493,76],[514,77,493,77,"route"],[514,82,493,82],[514,83,493,83,"name"],[514,87,493,87],[514,89,493,89,"flatConfig"],[514,99,493,99],[514,100,493,100],[514,103,493,103,"undefined"],[514,112,493,112],[514,113,493,113],[515,4,494,2],[515,8,494,6,"params"],[515,14,494,12],[515,16,494,14],[516,6,495,4,"route"],[516,11,495,9],[516,12,495,10,"params"],[516,18,495,16],[516,21,495,19],[517,8,496,6],[517,11,496,9,"route"],[517,16,496,14],[517,17,496,15,"params"],[517,23,496,21],[518,8,497,6],[518,11,497,9,"params"],[519,6,498,4],[519,7,498,5],[520,4,499,2],[521,4,500,2],[521,11,500,9,"state"],[521,16,500,14],[522,2,501,0],[522,3,501,1],[523,2,502,0],[523,6,502,6,"parseQueryParams"],[523,22,502,22],[523,25,502,25,"parseQueryParams"],[523,26,502,26,"path"],[523,30,502,30],[523,32,502,32,"parseConfig"],[523,43,502,43],[523,48,502,48],[524,4,503,2],[524,8,503,8,"query"],[524,13,503,13],[524,16,503,16,"path"],[524,20,503,20],[524,21,503,21,"split"],[524,26,503,26],[524,27,503,27],[524,30,503,30],[524,31,503,31],[524,32,503,32],[524,33,503,33],[524,34,503,34],[525,4,504,2],[525,8,504,8,"params"],[525,14,504,14],[525,17,504,17,"queryString"],[525,28,504,28],[525,29,504,29,"parse"],[525,34,504,34],[525,35,504,35,"query"],[525,40,504,40],[525,41,504,41],[526,4,505,2],[526,8,505,6,"parseConfig"],[526,19,505,17],[526,21,505,19],[527,6,506,4,"Object"],[527,12,506,10],[527,13,506,11,"keys"],[527,17,506,15],[527,18,506,16,"params"],[527,24,506,22],[527,25,506,23],[527,26,506,24,"forEach"],[527,33,506,31],[527,34,506,32,"name"],[527,38,506,36],[527,42,506,40],[528,8,507,6],[528,12,507,10,"Object"],[528,18,507,16],[528,19,507,17,"hasOwnProperty"],[528,33,507,31],[528,34,507,32,"call"],[528,38,507,36],[528,39,507,37,"parseConfig"],[528,50,507,48],[528,52,507,50,"name"],[528,56,507,54],[528,57,507,55],[528,61,507,59],[528,68,507,66,"params"],[528,74,507,72],[528,75,507,73,"name"],[528,79,507,77],[528,80,507,78],[528,85,507,83],[528,93,507,91],[528,95,507,93],[529,10,508,8,"params"],[529,16,508,14],[529,17,508,15,"name"],[529,21,508,19],[529,22,508,20],[529,25,508,23,"parseConfig"],[529,36,508,34],[529,37,508,35,"name"],[529,41,508,39],[529,42,508,40],[529,43,508,41,"params"],[529,49,508,47],[529,50,508,48,"name"],[529,54,508,52],[529,55,508,53],[529,56,508,54],[530,8,509,6],[531,6,510,4],[531,7,510,5],[531,8,510,6],[532,4,511,2],[533,4,512,2],[533,11,512,9,"Object"],[533,17,512,15],[533,18,512,16,"keys"],[533,22,512,20],[533,23,512,21,"params"],[533,29,512,27],[533,30,512,28],[533,31,512,29,"length"],[533,37,512,35],[533,40,512,38,"params"],[533,46,512,44],[533,49,512,47,"undefined"],[533,58,512,56],[534,2,513,0],[534,3,513,1],[535,0,513,2],[535,3]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","configs.find$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getSortedNormalizedConfigs","Object.keys.map$argument_0","concat.sort$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","matchAgainstConfigs","config.routeNames.map$argument_0","Object.entries.map$argument_0","routeConfig.params.find$argument_0","Object.entries.map.filter$argument_0","Object.entries.map.filter.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","getPatternParts.map$argument_0","parts.map$argument_0","parts.map.filter$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;OC8B;4DC4B;KDK;+BES,0CF;gEGE;QHE;CDuB;AKM;CLO;AMC;CNa;AOC;CPS;AQC;+CCE,uED,QE;GF2E;CRC;AWC;iBCE;uDCQ,sBD,YE,sBF;GDQ;CXC;AeC;qBCC;IDI;CfC;4BiBC;qCCa;yCfC;SeG;yGCC;gDCE,wBD;SDK,SG,gBH,MI;SJO;ODU;CjBS;gCuBC;0CCgE;ODG;CvBK;yByBC;4CCQ;MDG;yDEE;GFM;6BEC,gBF;2BEC;UFI,SG,gBH;CzBS;gC6BC;C7BO;yB8BG;C9BgB;0B+BI;C/BsC;gCgCC;ChC4B;yBiCC;gCTI;KSI;CjCG"}},"type":"js/module"}]}