{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":19,"index":217},"end":{"line":6,"column":40,"index":238}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94=","exportNames":["*"],"imports":1}},{"name":"./utils/url","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":14,"index":254},"end":{"line":7,"column":36,"index":276}}],"key":"KwepoOiDJIvcZxDqcbtt8RBrwgA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\").default;\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getRoutes = getRoutes;\n  exports.extrapolateGroups = extrapolateGroups;\n  exports.generateDynamic = generateDynamic;\n  var matchers_1 = require(_dependencyMap[1], \"./matchers\");\n  var url_1 = require(_dependencyMap[2], \"./utils/url\");\n  var validPlatforms = new Set(['android', 'ios', 'native', 'web']);\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule, options) {\n    var directoryTree = getDirectoryTree(contextModule, options);\n    // If there are no routes\n    if (!directoryTree) {\n      return null;\n    }\n    var rootNode = flattenDirectoryTreeToRoutes(directoryTree, options);\n    if (!options.ignoreEntryPoints) {\n      crawlAndAppendInitialRoutesAndEntryFiles(rootNode, options);\n    }\n    return rootNode;\n  }\n  /**\n   * Converts the RequireContext keys (file paths) into a directory tree.\n   */\n  function getDirectoryTree(contextModule, options) {\n    var importMode = options.importMode || \"sync\";\n    var ignoreList = [/^\\.\\/\\+(html|native-intent)\\.[tj]sx?$/]; // Ignore the top level ./+html file\n    if (options.ignore) {\n      ignoreList.push(...options.ignore);\n    }\n    if (!options.preserveApiRoutes) {\n      ignoreList.push(/\\+api$/, /\\+api\\.[tj]sx?$/);\n    }\n    var rootDirectory = {\n      files: new Map(),\n      subdirectories: new Map()\n    };\n    var hasRoutes = false;\n    var isValid = false;\n    var contextKeys = contextModule.keys();\n    var redirects = {};\n    var rewrites = {};\n    var validRedirectDestinations;\n    var getValidDestinations = () => {\n      // Loop over contexts once and cache the valid destinations\n      validRedirectDestinations ??= contextKeys.map(key => {\n        return {\n          contextKey: key,\n          nameWithoutInvisible: getNameWithoutInvisibleSegmentsFromRedirectPath((0, matchers_1.removeSupportedExtensions)(key))\n        };\n      });\n      return validRedirectDestinations;\n    };\n    // If we are keeping redirects as valid routes, then we need to add them to the contextKeys\n    // This is useful for generating a sitemap with redirects, or static site generation that includes redirects\n    if (options.preserveRedirectAndRewrites) {\n      if (options.redirects) {\n        var _loop = function () {\n            var sourceContextKey = getSourceContextKeyFromRedirectSource(redirect.source);\n            var sourceName = getNameFromRedirectPath(redirect.source);\n            var isExternalRedirect = (0, url_1.shouldLinkExternally)(redirect.destination);\n            var targetDestinationName = isExternalRedirect ? redirect.destination : getNameWithoutInvisibleSegmentsFromRedirectPath(redirect.destination);\n            if (ignoreList.some(regex => regex.test(sourceContextKey))) {\n              return 0; // continue\n            }\n            var validDestination = isExternalRedirect ? undefined : getValidDestinations().find(key => key.nameWithoutInvisible === targetDestinationName);\n            var destination = isExternalRedirect ? targetDestinationName : validDestination?.nameWithoutInvisible;\n            var destinationContextKey = isExternalRedirect ? targetDestinationName : validDestination?.contextKey;\n            if (!destinationContextKey || destination === undefined) {\n              /*\n               * Only throw the error when we are preserving the api routes\n               * When doing a static export, API routes will not exist so the redirect destination may not exist.\n               * The desired behavior for this error is to warn the user when running `expo start`, so its ok if\n               * `expo export` swallows this error.\n               */\n              if (options.preserveApiRoutes) {\n                throw new Error(`Redirect destination \"${redirect.destination}\" does not exist.`);\n              }\n              return 0; // continue\n            }\n            contextKeys.push(sourceContextKey);\n            redirects[sourceName] = {\n              source: sourceName,\n              destination,\n              destinationContextKey,\n              permanent: Boolean(redirect.permanent),\n              external: isExternalRedirect,\n              methods: redirect.methods\n            };\n          },\n          _ret;\n        for (var redirect of options.redirects) {\n          _ret = _loop();\n          if (_ret === 0) continue;\n        }\n      }\n      if (options.rewrites) {\n        var _loop2 = function () {\n            var sourceContextKey = getSourceContextKeyFromRedirectSource(rewrite.source);\n            var sourceName = getNameFromRedirectPath(rewrite.source);\n            var targetDestinationName = getNameFromRedirectPath(rewrite.destination);\n            if (ignoreList.some(regex => regex.test(sourceContextKey))) {\n              return 0; // continue\n            }\n            var validDestination = getValidDestinations().find(key => key.nameWithoutInvisible === targetDestinationName);\n            var destination = validDestination?.nameWithoutInvisible;\n            var destinationContextKey = validDestination?.contextKey;\n            if (!destinationContextKey || destination === undefined) {\n              /*\n               * Only throw the error when we are preserving the api routes\n               * When doing a static export, API routes will not exist so the redirect destination may not exist.\n               * The desired behavior for this error is to warn the user when running `expo start`, so its ok if\n               * `expo export` swallows this error.\n               */\n              if (options.preserveApiRoutes) {\n                throw new Error(`Rewrite destination \"${rewrite.destination}\" does not exist.`);\n              }\n              return 0; // continue\n            }\n            contextKeys.push(sourceContextKey);\n            rewrites[sourceName] = {\n              source: sourceName,\n              destination,\n              destinationContextKey,\n              methods: rewrite.methods\n            };\n          },\n          _ret2;\n        for (var rewrite of options.rewrites) {\n          _ret2 = _loop2();\n          if (_ret2 === 0) continue;\n        }\n      }\n    }\n    var processedRedirectsRewrites = new Set();\n    var _loop3 = function (filePath) {\n        if (ignoreList.some(regex => regex.test(filePath))) {\n          return 0; // continue\n        }\n        isValid = true;\n        var meta = getFileMeta(filePath, options, redirects, rewrites);\n        // This is a file that should be ignored. e.g maybe it has an invalid platform?\n        if (meta.specificity < 0) {\n          return 0; // continue\n        }\n        var node = {\n          type: meta.isApi ? 'api' : meta.isLayout ? 'layout' : 'route',\n          loadRoute() {\n            var routeModule;\n            if (options.ignoreRequireErrors) {\n              try {\n                routeModule = contextModule(filePath);\n              } catch {\n                routeModule = {};\n              }\n            } else {\n              routeModule = contextModule(filePath);\n            }\n            if (process.env.NODE_ENV === 'development' && importMode === 'sync') {\n              // In development mode, when async routes are disabled, add some extra error handling to improve the developer experience.\n              // This can be useful when you accidentally use an async function in a route file for the default export.\n              if (routeModule instanceof Promise) {\n                throw new Error(`Route \"${filePath}\" cannot be a promise when async routes is disabled.`);\n              }\n              var defaultExport = routeModule?.default;\n              if (defaultExport instanceof Promise) {\n                throw new Error(`The default export from route \"${filePath}\" is a promise. Ensure the React Component does not use async or promises.`);\n              }\n              // check if default is an async function without invoking it\n              if (defaultExport instanceof Function &&\n              // This only works on web because Hermes support async functions so we have to transform them out.\n              defaultExport.constructor.name === 'AsyncFunction') {\n                throw new Error(`The default export from route \"${filePath}\" is an async function. Ensure the React Component does not use async or promises.`);\n              }\n            }\n            return routeModule;\n          },\n          contextKey: filePath,\n          route: '',\n          // This is overwritten during hoisting based upon the _layout\n          dynamic: null,\n          children: [] // While we are building the directory tree, we don't know the node's children just yet. This is added during hoisting\n        };\n        if (meta.isRedirect) {\n          if (processedRedirectsRewrites.has(meta.route)) {\n            return 0; // continue\n          }\n          var _redirect = redirects[meta.route];\n          node.destinationContextKey = _redirect.destinationContextKey;\n          node.permanent = _redirect.permanent;\n          node.generated = true;\n          if (node.type === 'route') {\n            node = options.getSystemRoute({\n              type: 'redirect',\n              route: _redirect.destination,\n              defaults: node,\n              redirectConfig: _redirect\n            });\n          }\n          if (_redirect.methods) {\n            node.methods = _redirect.methods;\n          }\n          node.type = 'redirect';\n          processedRedirectsRewrites.add(meta.route);\n        }\n        if (meta.isRewrite) {\n          if (processedRedirectsRewrites.has(meta.route)) {\n            return 0; // continue\n          }\n          var _rewrite = rewrites[meta.route];\n          node.destinationContextKey = _rewrite.destinationContextKey;\n          node.generated = true;\n          if (node.type === 'route') {\n            node = options.getSystemRoute({\n              type: 'rewrite',\n              route: _rewrite.destination,\n              defaults: node,\n              rewriteConfig: _rewrite\n            });\n          }\n          if (_rewrite.methods) {\n            node.methods = _rewrite.methods;\n          }\n          node.type = 'rewrite';\n          processedRedirectsRewrites.add(meta.route);\n        }\n        if (process.env.NODE_ENV === 'development') {\n          // If the user has set the `EXPO_ROUTER_IMPORT_MODE` to `sync` then we should\n          // filter the missing routes.\n          if (node.type !== 'api' && importMode === 'sync') {\n            var routeItem = node.loadRoute();\n            // Have a warning for nullish ex\n            var route = routeItem?.default;\n            if (route == null) {\n              // Do not throw an error since a user may just be creating a new route.\n              console.warn(`Route \"${filePath}\" is missing the required default export. Ensure a React component is exported as default.`);\n              return 0; // continue\n            }\n            if (['boolean', 'number', 'string'].includes(typeof route)) {\n              throw new Error(`The default export from route \"${filePath}\" is an unsupported type: \"${typeof route}\". Only React Components are supported as default exports from route files.`);\n            }\n          }\n        }\n        /**\n         * A single filepath may be extrapolated into multiple routes if it contains array syntax.\n         * Another way to thinking about is that a filepath node is present in multiple leaves of the directory tree.\n         */\n        for (var _route of extrapolateGroups(meta.route)) {\n          // Traverse the directory tree to its leaf node, creating any missing directories along the way\n          var subdirectoryParts = _route.split('/').slice(0, -1);\n          // Start at the root directory and traverse the path to the leaf directory\n          var directory = rootDirectory;\n          for (var part of subdirectoryParts) {\n            var subDirectory = directory.subdirectories.get(part);\n            // Create any missing subdirectories\n            if (!subDirectory) {\n              subDirectory = {\n                files: new Map(),\n                subdirectories: new Map()\n              };\n              directory.subdirectories.set(part, subDirectory);\n            }\n            directory = subDirectory;\n          }\n          // Clone the node for this route\n          node = {\n            ...node,\n            route: _route\n          };\n          if (meta.isLayout) {\n            directory.layout ??= [];\n            var existing = directory.layout[meta.specificity];\n            if (existing) {\n              // In production, use the first route found\n              if (process.env.NODE_ENV !== 'production') {\n                throw new Error(`The layouts \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${_route}\". Remove or rename one of these files.`);\n              }\n            } else {\n              node = getLayoutNode(node, options);\n              directory.layout[meta.specificity] = node;\n            }\n          } else if (meta.isApi) {\n            var fileKey = `${_route}+api`;\n            var nodes = directory.files.get(fileKey);\n            if (!nodes) {\n              nodes = [];\n              directory.files.set(fileKey, nodes);\n            }\n            // API Routes have no specificity, they are always the first node\n            var _existing = nodes[0];\n            if (_existing) {\n              // In production, use the first route found\n              if (process.env.NODE_ENV !== 'production') {\n                throw new Error(`The API route file \"${filePath}\" and \"${_existing.contextKey}\" conflict on the route \"/${_route}\". Remove or rename one of these files.`);\n              }\n            } else {\n              nodes[0] = node;\n            }\n          } else {\n            var _nodes = directory.files.get(_route);\n            if (!_nodes) {\n              _nodes = [];\n              directory.files.set(_route, _nodes);\n            }\n            /**\n             * If there is an existing node with the same specificity, then we have a conflict.\n             * NOTE(Platform Routes):\n             *    We cannot check for specificity conflicts here, as we haven't processed all the context keys yet!\n             *    This will be checked during hoisting, as well as enforcing that all routes have a non-platform route.\n             */\n            var _existing2 = _nodes[meta.specificity];\n            if (_existing2) {\n              // In production, use the first route found\n              if (process.env.NODE_ENV !== 'production') {\n                throw new Error(`The route files \"${filePath}\" and \"${_existing2.contextKey}\" conflict on the route \"/${_route}\". Remove or rename one of these files.`);\n              }\n            } else {\n              hasRoutes ||= true;\n              _nodes[meta.specificity] = node;\n            }\n          }\n        }\n      },\n      _ret3;\n    for (var filePath of contextKeys) {\n      _ret3 = _loop3(filePath);\n      if (_ret3 === 0) continue;\n    }\n    // If there are no routes/layouts then we should display the tutorial.\n    if (!isValid) {\n      return null;\n    }\n    /**\n     * If there are no top-level _layout, add a default _layout\n     * While this is a generated route, it will still be generated even if skipGenerated is true.\n     */\n    if (!rootDirectory.layout) {\n      rootDirectory.layout = [options.getSystemRoute({\n        type: 'layout',\n        route: ''\n      })];\n    }\n    // Only include the sitemap if there are routes.\n    if (!options.skipGenerated) {\n      if (hasRoutes && options.sitemap !== false) {\n        appendSitemapRoute(rootDirectory, options);\n      }\n      if (options.notFound !== false) {\n        appendNotFoundRoute(rootDirectory, options);\n      }\n    }\n    return rootDirectory;\n  }\n  function getNameFromRedirectPath(path) {\n    // Removing only the filesystem extensions, to be able to handle +api, +html\n    return (0, matchers_1.removeFileSystemExtensions)((0, matchers_1.removeFileSystemDots)(path))\n    // Remove the leading `/`\n    .replace(/^\\//, '');\n  }\n  function getNameWithoutInvisibleSegmentsFromRedirectPath(path) {\n    return (0, matchers_1.stripInvisibleSegmentsFromPath)(getNameFromRedirectPath(path));\n  }\n  // Creates fake context key for redirects and rewrites\n  function getSourceContextKeyFromRedirectSource(source) {\n    var name = getNameFromRedirectPath(source);\n    var prefix = './';\n    var suffix = /\\.[tj]sx?$/.test(name) ? '' : '.js'; // Ensure it has a file extension\n    return `${prefix}${name}${suffix}`;\n  }\n  /**\n   * Flatten the directory tree into routes, hoisting routes to the nearest _layout.\n   */\n  function flattenDirectoryTreeToRoutes(directory, options, /* The nearest _layout file in the directory tree */\n  layout) {\n    var pathToRemove = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    /**\n     * This directory has a _layout file so it becomes the new target for hoisting routes.\n     */\n    if (directory.layout) {\n      var previousLayout = layout;\n      layout = getMostSpecific(directory.layout);\n      // Add the new layout as a child of its parent\n      if (previousLayout) {\n        previousLayout.children.push(layout);\n      }\n      if (options.internal_stripLoadRoute) {\n        delete layout.loadRoute;\n      }\n      // `route` is the absolute pathname. We need to make this relative to the last _layout\n      var newRoute = layout.route.replace(pathToRemove, '');\n      pathToRemove = layout.route ? `${layout.route}/` : '';\n      // Now update this layout with the new relative route and dynamic conventions\n      layout.route = newRoute;\n      layout.dynamic = generateDynamic(layout.contextKey.slice(0));\n    }\n    // This should never occur as there will always be a root layout, but it makes the type system happy\n    if (!layout) throw new Error('Expo Router Internal Error: No nearest layout');\n    for (var routes of directory.files.values()) {\n      var routeNode = getMostSpecific(routes);\n      // `route` is the absolute pathname. We need to make this relative to the nearest layout\n      routeNode.route = routeNode.route.replace(pathToRemove, '');\n      routeNode.dynamic = generateDynamic(routeNode.route);\n      if (options.internal_stripLoadRoute) {\n        delete routeNode.loadRoute;\n      }\n      layout.children.push(routeNode);\n    }\n    // Recursively flatten the subdirectories\n    for (var child of directory.subdirectories.values()) {\n      flattenDirectoryTreeToRoutes(child, options, layout, pathToRemove);\n    }\n    return layout;\n  }\n  function getFileMeta(originalKey, options, redirects, rewrites) {\n    // Remove the leading `./`\n    var key = (0, matchers_1.removeSupportedExtensions)((0, matchers_1.removeFileSystemDots)(originalKey));\n    var route = key;\n    var parts = (0, matchers_1.removeFileSystemDots)(originalKey).split('/');\n    var filename = parts[parts.length - 1];\n    var _split = (0, matchers_1.removeSupportedExtensions)(filename).split('.'),\n      _split2 = _slicedToArray(_split, 2),\n      filenameWithoutExtensions = _split2[0],\n      platformExtension = _split2[1];\n    var isLayout = filenameWithoutExtensions === '_layout';\n    var isApi = originalKey.match(/\\+api\\.(\\w+\\.)?[jt]sx?$/);\n    if (filenameWithoutExtensions.startsWith('(') && filenameWithoutExtensions.endsWith(')')) {\n      throw new Error(`Invalid route ${originalKey}. Routes cannot end with '(group)' syntax`);\n    }\n    // Nested routes cannot start with the '+' character, except for the '+not-found' route\n    if (!isApi && filename.startsWith('+') && filenameWithoutExtensions !== '+not-found') {\n      var renamedRoute = [...parts.slice(0, -1), filename.slice(1)].join('/');\n      throw new Error(`Invalid route ${originalKey}. Route nodes cannot start with the '+' character. \"Rename it to ${renamedRoute}\"`);\n    }\n    var specificity = 0;\n    var hasPlatformExtension = validPlatforms.has(platformExtension);\n    var usePlatformRoutes = options.platformRoutes ?? true;\n    if (hasPlatformExtension) {\n      if (!usePlatformRoutes) {\n        // If the user has disabled platform routes, then we should ignore this file\n        specificity = -1;\n      } else if (!options.platform) {\n        // If we don't have a platform, then we should ignore this file\n        // This used by typed routes, sitemap, etc\n        specificity = -1;\n      } else if (platformExtension === options.platform) {\n        // If the platform extension is the same as the options.platform, then it is the most specific\n        specificity = 2;\n      } else if (platformExtension === 'native' && options.platform !== 'web') {\n        // `native` is allow but isn't as specific as the platform\n        specificity = 1;\n      } else if (platformExtension !== options.platform) {\n        // Somehow we have a platform extension that doesn't match the options.platform and it isn't native\n        // This is an invalid file and we will ignore it\n        specificity = -1;\n      }\n      if (isApi && specificity !== 0) {\n        throw new Error(`API routes cannot have platform extensions. Remove '.${platformExtension}' from '${originalKey}'`);\n      }\n      route = route.replace(new RegExp(`.${platformExtension}$`), '');\n    }\n    return {\n      route,\n      specificity,\n      isLayout,\n      isApi,\n      isRedirect: key in redirects,\n      isRewrite: key in rewrites\n    };\n  }\n  /**\n   * Generates a set of strings which have the router array syntax extrapolated.\n   *\n   * /(a,b)/(c,d)/e.tsx => new Set(['a/c/e.tsx', 'a/d/e.tsx', 'b/c/e.tsx', 'b/d/e.tsx'])\n   */\n  function extrapolateGroups(key) {\n    var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var match = (0, matchers_1.matchArrayGroupName)(key);\n    if (!match) {\n      keys.add(key);\n      return keys;\n    }\n    var groups = match.split(',');\n    var groupsSet = new Set(groups);\n    if (groupsSet.size !== groups.length) {\n      throw new Error(`Array syntax cannot contain duplicate group name \"${groups}\" in \"${key}\".`);\n    }\n    if (groups.length === 1) {\n      keys.add(key);\n      return keys;\n    }\n    for (var group of groups) {\n      extrapolateGroups(key.replace(match, group.trim()), keys);\n    }\n    return keys;\n  }\n  function generateDynamic(path) {\n    var dynamic = path.split('/').map(part => {\n      if (part === '+not-found') {\n        return {\n          name: '+not-found',\n          deep: true,\n          notFound: true\n        };\n      }\n      return (0, matchers_1.matchDynamicName)(part) ?? null;\n    }).filter(part => !!part);\n    return dynamic.length === 0 ? null : dynamic;\n  }\n  function appendSitemapRoute(directory, options) {\n    if (!directory.files.has('_sitemap') && options.getSystemRoute) {\n      directory.files.set('_sitemap', [options.getSystemRoute({\n        type: 'route',\n        route: '_sitemap'\n      })]);\n    }\n  }\n  function appendNotFoundRoute(directory, options) {\n    if (!directory.files.has('+not-found') && options.getSystemRoute) {\n      directory.files.set('+not-found', [options.getSystemRoute({\n        type: 'route',\n        route: '+not-found'\n      })]);\n    }\n  }\n  function getLayoutNode(node, options) {\n    /**\n     * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n     * Each of these layouts will have a different anchor based upon the first group name.\n     */\n    // We may strip loadRoute during testing\n    var groupName = (0, matchers_1.matchLastGroupName)(node.route);\n    var childMatchingGroup = node.children.find(child => {\n      return child.route.replace(/\\/index$/, '') === groupName;\n    });\n    var anchor = childMatchingGroup?.route;\n    var loaded = node.loadRoute();\n    if (loaded?.unstable_settings) {\n      try {\n        // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n        anchor = loaded.unstable_settings.anchor ?? loaded.unstable_settings.initialRouteName ?? anchor;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (!error.message.match(/You cannot dot into a client module/)) {\n            throw error;\n          }\n        }\n      }\n      if (groupName) {\n        // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n        var groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.anchor ?? loaded.unstable_settings?.[groupName]?.initialRouteName;\n        anchor = groupSpecificInitialRouteName ?? anchor;\n      }\n    }\n    return {\n      ...node,\n      route: node.route.replace(/\\/?_layout$/, ''),\n      children: [],\n      // Each layout should have its own children\n      initialRouteName: anchor\n    };\n  }\n  function crawlAndAppendInitialRoutesAndEntryFiles(node, options) {\n    var entryPoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    if (node.type === 'route') {\n      node.entryPoints = [...new Set([...entryPoints, node.contextKey])];\n    } else if (node.type === 'redirect') {\n      node.entryPoints = [...new Set([...entryPoints, node.destinationContextKey])];\n    } else if (node.type === 'layout') {\n      if (!node.children) {\n        throw new Error(`Layout \"${node.contextKey}\" does not contain any child routes`);\n      }\n      // Every node below this layout will have it as an entryPoint\n      entryPoints = [...entryPoints, node.contextKey];\n      /**\n       * Calculate the initialRouteNode\n       *\n       * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n       * Each of these layouts will have a different anchor based upon the first group.\n       */\n      var groupName = (0, matchers_1.matchGroupName)(node.route);\n      var childMatchingGroup = node.children.find(child => {\n        return child.route.replace(/\\/index$/, '') === groupName;\n      });\n      var anchor = childMatchingGroup?.route;\n      // We may strip loadRoute during testing\n      if (!options.internal_stripLoadRoute) {\n        var loaded = node.loadRoute();\n        if (loaded?.unstable_settings) {\n          try {\n            // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n            anchor = loaded.unstable_settings.anchor ?? loaded.unstable_settings.initialRouteName ?? anchor;\n          } catch (error) {\n            if (error instanceof Error) {\n              if (!error.message.match(/You cannot dot into a client module/)) {\n                throw error;\n              }\n            }\n          }\n          if (groupName) {\n            // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n            var groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.anchor ?? loaded.unstable_settings?.[groupName]?.initialRouteName;\n            anchor = groupSpecificInitialRouteName ?? anchor;\n          }\n        }\n      }\n      if (anchor) {\n        var anchorRoute = node.children.find(child => child.route === anchor);\n        if (!anchorRoute) {\n          var validAnchorRoutes = node.children.filter(child => !child.generated).map(child => `'${child.route}'`).join(', ');\n          if (groupName) {\n            throw new Error(`Layout ${node.contextKey} has invalid anchor '${anchor}' for group '(${groupName})'. Valid options are: ${validAnchorRoutes}`);\n          } else {\n            throw new Error(`Layout ${node.contextKey} has invalid anchor '${anchor}'. Valid options are: ${validAnchorRoutes}`);\n          }\n        }\n        // Navigators can add initialsRoutes into the history, so they need to be to be included in the entryPoints\n        node.initialRouteName = anchor;\n        entryPoints.push(anchorRoute.contextKey);\n      }\n      for (var child of node.children) {\n        crawlAndAppendInitialRoutesAndEntryFiles(child, options, entryPoints);\n      }\n    }\n  }\n  function getMostSpecific(routes) {\n    var route = routes[routes.length - 1];\n    if (!routes[0]) {\n      throw new Error(`The file ${route.contextKey} does not have a fallback sibling file without a platform extension.`);\n    }\n    // This works even tho routes is holey array (e.g it might have index 0 and 2 but not 1)\n    // `.length` includes the holes in its count\n    return routes[routes.length - 1];\n  }\n});","lineCount":650,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,90,1,13,"default"],[4,97,1,13],[5,2,2,0,"Object"],[5,8,2,6],[5,9,2,7,"defineProperty"],[5,23,2,21],[5,24,2,22,"exports"],[5,31,2,29],[5,33,2,31],[5,45,2,43],[5,47,2,45],[6,4,2,47,"value"],[6,9,2,52],[6,11,2,54],[7,2,2,59],[7,3,2,60],[7,4,2,61],[8,2,3,0,"exports"],[8,9,3,7],[8,10,3,8,"getRoutes"],[8,19,3,17],[8,22,3,20,"getRoutes"],[8,31,3,29],[9,2,4,0,"exports"],[9,9,4,7],[9,10,4,8,"extrapolateGroups"],[9,27,4,25],[9,30,4,28,"extrapolateGroups"],[9,47,4,45],[10,2,5,0,"exports"],[10,9,5,7],[10,10,5,8,"generateDynamic"],[10,25,5,23],[10,28,5,26,"generateDynamic"],[10,43,5,41],[11,2,6,0],[11,6,6,6,"matchers_1"],[11,16,6,16],[11,19,6,19,"require"],[11,26,6,26],[11,27,6,26,"_dependencyMap"],[11,41,6,26],[11,58,6,39],[11,59,6,40],[12,2,7,0],[12,6,7,6,"url_1"],[12,11,7,11],[12,14,7,14,"require"],[12,21,7,21],[12,22,7,21,"_dependencyMap"],[12,36,7,21],[12,54,7,35],[12,55,7,36],[13,2,8,0],[13,6,8,6,"validPlatforms"],[13,20,8,20],[13,23,8,23],[13,27,8,27,"Set"],[13,30,8,30],[13,31,8,31],[13,32,8,32],[13,41,8,41],[13,43,8,43],[13,48,8,48],[13,50,8,50],[13,58,8,58],[13,60,8,60],[13,65,8,65],[13,66,8,66],[13,67,8,67],[14,2,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,2,21,0],[26,11,21,9,"getRoutes"],[26,20,21,18,"getRoutes"],[26,21,21,19,"contextModule"],[26,34,21,32],[26,36,21,34,"options"],[26,43,21,41],[26,45,21,43],[27,4,22,4],[27,8,22,10,"directoryTree"],[27,21,22,23],[27,24,22,26,"getDirectoryTree"],[27,40,22,42],[27,41,22,43,"contextModule"],[27,54,22,56],[27,56,22,58,"options"],[27,63,22,65],[27,64,22,66],[28,4,23,4],[29,4,24,4],[29,8,24,8],[29,9,24,9,"directoryTree"],[29,22,24,22],[29,24,24,24],[30,6,25,8],[30,13,25,15],[30,17,25,19],[31,4,26,4],[32,4,27,4],[32,8,27,10,"rootNode"],[32,16,27,18],[32,19,27,21,"flattenDirectoryTreeToRoutes"],[32,47,27,49],[32,48,27,50,"directoryTree"],[32,61,27,63],[32,63,27,65,"options"],[32,70,27,72],[32,71,27,73],[33,4,28,4],[33,8,28,8],[33,9,28,9,"options"],[33,16,28,16],[33,17,28,17,"ignoreEntryPoints"],[33,34,28,34],[33,36,28,36],[34,6,29,8,"crawlAndAppendInitialRoutesAndEntryFiles"],[34,46,29,48],[34,47,29,49,"rootNode"],[34,55,29,57],[34,57,29,59,"options"],[34,64,29,66],[34,65,29,67],[35,4,30,4],[36,4,31,4],[36,11,31,11,"rootNode"],[36,19,31,19],[37,2,32,0],[38,2,33,0],[39,0,34,0],[40,0,35,0],[41,2,36,0],[41,11,36,9,"getDirectoryTree"],[41,27,36,25,"getDirectoryTree"],[41,28,36,26,"contextModule"],[41,41,36,39],[41,43,36,41,"options"],[41,50,36,48],[41,52,36,50],[42,4,37,4],[42,8,37,10,"importMode"],[42,18,37,20],[42,21,37,23,"options"],[42,28,37,30],[42,29,37,31,"importMode"],[42,39,37,41],[42,49,37,80],[43,4,38,4],[43,8,38,10,"ignoreList"],[43,18,38,20],[43,21,38,23],[43,22,38,24],[43,61,38,63],[43,62,38,64],[43,63,38,65],[43,64,38,66],[44,4,39,4],[44,8,39,8,"options"],[44,15,39,15],[44,16,39,16,"ignore"],[44,22,39,22],[44,24,39,24],[45,6,40,8,"ignoreList"],[45,16,40,18],[45,17,40,19,"push"],[45,21,40,23],[45,22,40,24],[45,25,40,27,"options"],[45,32,40,34],[45,33,40,35,"ignore"],[45,39,40,41],[45,40,40,42],[46,4,41,4],[47,4,42,4],[47,8,42,8],[47,9,42,9,"options"],[47,16,42,16],[47,17,42,17,"preserveApiRoutes"],[47,34,42,34],[47,36,42,36],[48,6,43,8,"ignoreList"],[48,16,43,18],[48,17,43,19,"push"],[48,21,43,23],[48,22,43,24],[48,30,43,32],[48,32,43,34],[48,49,43,51],[48,50,43,52],[49,4,44,4],[50,4,45,4],[50,8,45,10,"rootDirectory"],[50,21,45,23],[50,24,45,26],[51,6,46,8,"files"],[51,11,46,13],[51,13,46,15],[51,17,46,19,"Map"],[51,20,46,22],[51,21,46,23],[51,22,46,24],[52,6,47,8,"subdirectories"],[52,20,47,22],[52,22,47,24],[52,26,47,28,"Map"],[52,29,47,31],[52,30,47,32],[53,4,48,4],[53,5,48,5],[54,4,49,4],[54,8,49,8,"hasRoutes"],[54,17,49,17],[54,20,49,20],[54,25,49,25],[55,4,50,4],[55,8,50,8,"isValid"],[55,15,50,15],[55,18,50,18],[55,23,50,23],[56,4,51,4],[56,8,51,10,"contextKeys"],[56,19,51,21],[56,22,51,24,"contextModule"],[56,35,51,37],[56,36,51,38,"keys"],[56,40,51,42],[56,41,51,43],[56,42,51,44],[57,4,52,4],[57,8,52,10,"redirects"],[57,17,52,19],[57,20,52,22],[57,21,52,23],[57,22,52,24],[58,4,53,4],[58,8,53,10,"rewrites"],[58,16,53,18],[58,19,53,21],[58,20,53,22],[58,21,53,23],[59,4,54,4],[59,8,54,8,"validRedirectDestinations"],[59,33,54,33],[60,4,55,4],[60,8,55,10,"getValidDestinations"],[60,28,55,30],[60,31,55,33,"getValidDestinations"],[60,32,55,33],[60,37,55,39],[61,6,56,8],[62,6,57,8,"validRedirectDestinations"],[62,31,57,33],[62,36,57,38,"contextKeys"],[62,47,57,49],[62,48,57,50,"map"],[62,51,57,53],[62,52,57,55,"key"],[62,55,57,58],[62,59,57,63],[63,8,58,12],[63,15,58,19],[64,10,59,16,"contextKey"],[64,20,59,26],[64,22,59,28,"key"],[64,25,59,31],[65,10,60,16,"nameWithoutInvisible"],[65,30,60,36],[65,32,60,38,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[65,79,60,85],[65,80,60,86],[65,81,60,87],[65,82,60,88],[65,84,60,90,"matchers_1"],[65,94,60,100],[65,95,60,101,"removeSupportedExtensions"],[65,120,60,126],[65,122,60,128,"key"],[65,125,60,131],[65,126,60,132],[66,8,61,12],[66,9,61,13],[67,6,62,8],[67,7,62,9],[67,8,62,10],[68,6,63,8],[68,13,63,15,"validRedirectDestinations"],[68,38,63,40],[69,4,64,4],[69,5,64,5],[70,4,65,4],[71,4,66,4],[72,4,67,4],[72,8,67,8,"options"],[72,15,67,15],[72,16,67,16,"preserveRedirectAndRewrites"],[72,43,67,43],[72,45,67,45],[73,6,68,8],[73,10,68,12,"options"],[73,17,68,19],[73,18,68,20,"redirects"],[73,27,68,29],[73,29,68,31],[74,8,68,31],[74,12,68,31,"_loop"],[74,17,68,31],[74,29,68,31,"_loop"],[74,30,68,31],[74,32,69,54],[75,12,70,16],[75,16,70,22,"sourceContextKey"],[75,32,70,38],[75,35,70,41,"getSourceContextKeyFromRedirectSource"],[75,72,70,78],[75,73,70,79,"redirect"],[75,81,70,87],[75,82,70,88,"source"],[75,88,70,94],[75,89,70,95],[76,12,71,16],[76,16,71,22,"sourceName"],[76,26,71,32],[76,29,71,35,"getNameFromRedirectPath"],[76,52,71,58],[76,53,71,59,"redirect"],[76,61,71,67],[76,62,71,68,"source"],[76,68,71,74],[76,69,71,75],[77,12,72,16],[77,16,72,22,"isExternalRedirect"],[77,34,72,40],[77,37,72,43],[77,38,72,44],[77,39,72,45],[77,41,72,47,"url_1"],[77,46,72,52],[77,47,72,53,"shouldLinkExternally"],[77,67,72,73],[77,69,72,75,"redirect"],[77,77,72,83],[77,78,72,84,"destination"],[77,89,72,95],[77,90,72,96],[78,12,73,16],[78,16,73,22,"targetDestinationName"],[78,37,73,43],[78,40,73,46,"isExternalRedirect"],[78,58,73,64],[78,61,74,22,"redirect"],[78,69,74,30],[78,70,74,31,"destination"],[78,81,74,42],[78,84,75,22,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[78,131,75,69],[78,132,75,70,"redirect"],[78,140,75,78],[78,141,75,79,"destination"],[78,152,75,90],[78,153,75,91],[79,12,76,16],[79,16,76,20,"ignoreList"],[79,26,76,30],[79,27,76,31,"some"],[79,31,76,35],[79,32,76,37,"regex"],[79,37,76,42],[79,41,76,47,"regex"],[79,46,76,52],[79,47,76,53,"test"],[79,51,76,57],[79,52,76,58,"sourceContextKey"],[79,68,76,74],[79,69,76,75],[79,70,76,76],[79,72,76,78],[80,14,76,78],[81,12,78,16],[82,12,79,16],[82,16,79,22,"validDestination"],[82,32,79,38],[82,35,79,41,"isExternalRedirect"],[82,53,79,59],[82,56,80,22,"undefined"],[82,65,80,31],[82,68,81,22,"getValidDestinations"],[82,88,81,42],[82,89,81,43],[82,90,81,44],[82,91,81,45,"find"],[82,95,81,49],[82,96,81,51,"key"],[82,99,81,54],[82,103,81,59,"key"],[82,106,81,62],[82,107,81,63,"nameWithoutInvisible"],[82,127,81,83],[82,132,81,88,"targetDestinationName"],[82,153,81,109],[82,154,81,110],[83,12,82,16],[83,16,82,22,"destination"],[83,27,82,33],[83,30,82,36,"isExternalRedirect"],[83,48,82,54],[83,51,83,22,"targetDestinationName"],[83,72,83,43],[83,75,84,22,"validDestination"],[83,91,84,38],[83,93,84,40,"nameWithoutInvisible"],[83,113,84,60],[84,12,85,16],[84,16,85,22,"destinationContextKey"],[84,37,85,43],[84,40,85,46,"isExternalRedirect"],[84,58,85,64],[84,61,86,22,"targetDestinationName"],[84,82,86,43],[84,85,87,22,"validDestination"],[84,101,87,38],[84,103,87,40,"contextKey"],[84,113,87,50],[85,12,88,16],[85,16,88,20],[85,17,88,21,"destinationContextKey"],[85,38,88,42],[85,42,88,46,"destination"],[85,53,88,57],[85,58,88,62,"undefined"],[85,67,88,71],[85,69,88,73],[86,14,89,20],[87,0,90,0],[88,0,91,0],[89,0,92,0],[90,0,93,0],[91,0,94,0],[92,14,95,20],[92,18,95,24,"options"],[92,25,95,31],[92,26,95,32,"preserveApiRoutes"],[92,43,95,49],[92,45,95,51],[93,16,96,24],[93,22,96,30],[93,26,96,34,"Error"],[93,31,96,39],[93,32,96,40],[93,57,96,65,"redirect"],[93,65,96,73],[93,66,96,74,"destination"],[93,77,96,85],[93,96,96,104],[93,97,96,105],[94,14,97,20],[95,14,97,21],[96,12,99,16],[97,12,100,16,"contextKeys"],[97,23,100,27],[97,24,100,28,"push"],[97,28,100,32],[97,29,100,33,"sourceContextKey"],[97,45,100,49],[97,46,100,50],[98,12,101,16,"redirects"],[98,21,101,25],[98,22,101,26,"sourceName"],[98,32,101,36],[98,33,101,37],[98,36,101,40],[99,14,102,20,"source"],[99,20,102,26],[99,22,102,28,"sourceName"],[99,32,102,38],[100,14,103,20,"destination"],[100,25,103,31],[101,14,104,20,"destinationContextKey"],[101,35,104,41],[102,14,105,20,"permanent"],[102,23,105,29],[102,25,105,31,"Boolean"],[102,32,105,38],[102,33,105,39,"redirect"],[102,41,105,47],[102,42,105,48,"permanent"],[102,51,105,57],[102,52,105,58],[103,14,106,20,"external"],[103,22,106,28],[103,24,106,30,"isExternalRedirect"],[103,42,106,48],[104,14,107,20,"methods"],[104,21,107,27],[104,23,107,29,"redirect"],[104,31,107,37],[104,32,107,38,"methods"],[105,12,108,16],[105,13,108,17],[106,10,109,12],[106,11,109,13],[107,10,109,13,"_ret"],[107,14,109,13],[108,8,69,12],[108,13,69,17],[108,17,69,23,"redirect"],[108,25,69,31],[108,29,69,35,"options"],[108,36,69,42],[108,37,69,43,"redirects"],[108,46,69,52],[109,10,69,52,"_ret"],[109,14,69,52],[109,17,69,52,"_loop"],[109,22,69,52],[110,10,69,52],[110,14,69,52,"_ret"],[110,18,69,52],[110,26,77,20],[111,8,77,29],[112,6,110,8],[113,6,111,8],[113,10,111,12,"options"],[113,17,111,19],[113,18,111,20,"rewrites"],[113,26,111,28],[113,28,111,30],[114,8,111,30],[114,12,111,30,"_loop2"],[114,18,111,30],[114,30,111,30,"_loop2"],[114,31,111,30],[114,33,112,52],[115,12,113,16],[115,16,113,22,"sourceContextKey"],[115,32,113,38],[115,35,113,41,"getSourceContextKeyFromRedirectSource"],[115,72,113,78],[115,73,113,79,"rewrite"],[115,80,113,86],[115,81,113,87,"source"],[115,87,113,93],[115,88,113,94],[116,12,114,16],[116,16,114,22,"sourceName"],[116,26,114,32],[116,29,114,35,"getNameFromRedirectPath"],[116,52,114,58],[116,53,114,59,"rewrite"],[116,60,114,66],[116,61,114,67,"source"],[116,67,114,73],[116,68,114,74],[117,12,115,16],[117,16,115,22,"targetDestinationName"],[117,37,115,43],[117,40,115,46,"getNameFromRedirectPath"],[117,63,115,69],[117,64,115,70,"rewrite"],[117,71,115,77],[117,72,115,78,"destination"],[117,83,115,89],[117,84,115,90],[118,12,116,16],[118,16,116,20,"ignoreList"],[118,26,116,30],[118,27,116,31,"some"],[118,31,116,35],[118,32,116,37,"regex"],[118,37,116,42],[118,41,116,47,"regex"],[118,46,116,52],[118,47,116,53,"test"],[118,51,116,57],[118,52,116,58,"sourceContextKey"],[118,68,116,74],[118,69,116,75],[118,70,116,76],[118,72,116,78],[119,14,116,78],[120,12,118,16],[121,12,119,16],[121,16,119,22,"validDestination"],[121,32,119,38],[121,35,119,41,"getValidDestinations"],[121,55,119,61],[121,56,119,62],[121,57,119,63],[121,58,119,64,"find"],[121,62,119,68],[121,63,119,70,"key"],[121,66,119,73],[121,70,119,78,"key"],[121,73,119,81],[121,74,119,82,"nameWithoutInvisible"],[121,94,119,102],[121,99,119,107,"targetDestinationName"],[121,120,119,128],[121,121,119,129],[122,12,120,16],[122,16,120,22,"destination"],[122,27,120,33],[122,30,120,36,"validDestination"],[122,46,120,52],[122,48,120,54,"nameWithoutInvisible"],[122,68,120,74],[123,12,121,16],[123,16,121,22,"destinationContextKey"],[123,37,121,43],[123,40,121,46,"validDestination"],[123,56,121,62],[123,58,121,64,"contextKey"],[123,68,121,74],[124,12,122,16],[124,16,122,20],[124,17,122,21,"destinationContextKey"],[124,38,122,42],[124,42,122,46,"destination"],[124,53,122,57],[124,58,122,62,"undefined"],[124,67,122,71],[124,69,122,73],[125,14,123,20],[126,0,124,0],[127,0,125,0],[128,0,126,0],[129,0,127,0],[130,0,128,0],[131,14,129,20],[131,18,129,24,"options"],[131,25,129,31],[131,26,129,32,"preserveApiRoutes"],[131,43,129,49],[131,45,129,51],[132,16,130,24],[132,22,130,30],[132,26,130,34,"Error"],[132,31,130,39],[132,32,130,40],[132,56,130,64,"rewrite"],[132,63,130,71],[132,64,130,72,"destination"],[132,75,130,83],[132,94,130,102],[132,95,130,103],[133,14,131,20],[134,14,131,21],[135,12,133,16],[136,12,134,16,"contextKeys"],[136,23,134,27],[136,24,134,28,"push"],[136,28,134,32],[136,29,134,33,"sourceContextKey"],[136,45,134,49],[136,46,134,50],[137,12,135,16,"rewrites"],[137,20,135,24],[137,21,135,25,"sourceName"],[137,31,135,35],[137,32,135,36],[137,35,135,39],[138,14,136,20,"source"],[138,20,136,26],[138,22,136,28,"sourceName"],[138,32,136,38],[139,14,137,20,"destination"],[139,25,137,31],[140,14,138,20,"destinationContextKey"],[140,35,138,41],[141,14,139,20,"methods"],[141,21,139,27],[141,23,139,29,"rewrite"],[141,30,139,36],[141,31,139,37,"methods"],[142,12,140,16],[142,13,140,17],[143,10,141,12],[143,11,141,13],[144,10,141,13,"_ret2"],[144,15,141,13],[145,8,112,12],[145,13,112,17],[145,17,112,23,"rewrite"],[145,24,112,30],[145,28,112,34,"options"],[145,35,112,41],[145,36,112,42,"rewrites"],[145,44,112,50],[146,10,112,50,"_ret2"],[146,15,112,50],[146,18,112,50,"_loop2"],[146,24,112,50],[147,10,112,50],[147,14,112,50,"_ret2"],[147,19,112,50],[147,27,117,20],[148,8,117,29],[149,6,142,8],[150,4,143,4],[151,4,144,4],[151,8,144,10,"processedRedirectsRewrites"],[151,34,144,36],[151,37,144,39],[151,41,144,43,"Set"],[151,44,144,46],[151,45,144,47],[151,46,144,48],[152,4,144,49],[152,8,144,49,"_loop3"],[152,14,144,49],[152,26,144,49,"_loop3"],[152,27,144,49,"filePath"],[152,35,144,49],[152,37,145,40],[153,8,146,8],[153,12,146,12,"ignoreList"],[153,22,146,22],[153,23,146,23,"some"],[153,27,146,27],[153,28,146,29,"regex"],[153,33,146,34],[153,37,146,39,"regex"],[153,42,146,44],[153,43,146,45,"test"],[153,47,146,49],[153,48,146,50,"filePath"],[153,56,146,58],[153,57,146,59],[153,58,146,60],[153,60,146,62],[154,10,146,62],[155,8,148,8],[156,8,149,8,"isValid"],[156,15,149,15],[156,18,149,18],[156,22,149,22],[157,8,150,8],[157,12,150,14,"meta"],[157,16,150,18],[157,19,150,21,"getFileMeta"],[157,30,150,32],[157,31,150,33,"filePath"],[157,39,150,41],[157,41,150,43,"options"],[157,48,150,50],[157,50,150,52,"redirects"],[157,59,150,61],[157,61,150,63,"rewrites"],[157,69,150,71],[157,70,150,72],[158,8,151,8],[159,8,152,8],[159,12,152,12,"meta"],[159,16,152,16],[159,17,152,17,"specificity"],[159,28,152,28],[159,31,152,31],[159,32,152,32],[159,34,152,34],[160,10,152,34],[161,8,154,8],[162,8,155,8],[162,12,155,12,"node"],[162,16,155,16],[162,19,155,19],[163,10,156,12,"type"],[163,14,156,16],[163,16,156,18,"meta"],[163,20,156,22],[163,21,156,23,"isApi"],[163,26,156,28],[163,29,156,31],[163,34,156,36],[163,37,156,39,"meta"],[163,41,156,43],[163,42,156,44,"isLayout"],[163,50,156,52],[163,53,156,55],[163,61,156,63],[163,64,156,66],[163,71,156,73],[164,10,157,12,"loadRoute"],[164,19,157,21,"loadRoute"],[164,20,157,21],[164,22,157,24],[165,12,158,16],[165,16,158,20,"routeModule"],[165,27,158,31],[166,12,159,16],[166,16,159,20,"options"],[166,23,159,27],[166,24,159,28,"ignoreRequireErrors"],[166,43,159,47],[166,45,159,49],[167,14,160,20],[167,18,160,24],[168,16,161,24,"routeModule"],[168,27,161,35],[168,30,161,38,"contextModule"],[168,43,161,51],[168,44,161,52,"filePath"],[168,52,161,60],[168,53,161,61],[169,14,162,20],[169,15,162,21],[169,16,163,20],[169,22,163,26],[170,16,164,24,"routeModule"],[170,27,164,35],[170,30,164,38],[170,31,164,39],[170,32,164,40],[171,14,165,20],[172,12,166,16],[172,13,166,17],[172,19,167,21],[173,14,168,20,"routeModule"],[173,25,168,31],[173,28,168,34,"contextModule"],[173,41,168,47],[173,42,168,48,"filePath"],[173,50,168,56],[173,51,168,57],[174,12,169,16],[175,12,170,16],[175,16,170,20,"process"],[175,23,170,27],[175,24,170,28,"env"],[175,27,170,31],[175,28,170,32,"NODE_ENV"],[175,36,170,40],[175,41,170,45],[175,54,170,58],[175,58,170,62,"importMode"],[175,68,170,72],[175,73,170,77],[175,79,170,83],[175,81,170,85],[176,14,171,20],[177,14,172,20],[178,14,173,20],[178,18,173,24,"routeModule"],[178,29,173,35],[178,41,173,47,"Promise"],[178,48,173,54],[178,50,173,56],[179,16,174,24],[179,22,174,30],[179,26,174,34,"Error"],[179,31,174,39],[179,32,174,40],[179,42,174,50,"filePath"],[179,50,174,58],[179,104,174,112],[179,105,174,113],[180,14,175,20],[181,14,176,20],[181,18,176,26,"defaultExport"],[181,31,176,39],[181,34,176,42,"routeModule"],[181,45,176,53],[181,47,176,55,"default"],[181,54,176,62],[182,14,177,20],[182,18,177,24,"defaultExport"],[182,31,177,37],[182,43,177,49,"Promise"],[182,50,177,56],[182,52,177,58],[183,16,178,24],[183,22,178,30],[183,26,178,34,"Error"],[183,31,178,39],[183,32,178,40],[183,66,178,74,"filePath"],[183,74,178,82],[183,150,178,158],[183,151,178,159],[184,14,179,20],[185,14,180,20],[186,14,181,20],[186,18,181,24,"defaultExport"],[186,31,181,37],[186,43,181,49,"Function"],[186,51,181,57],[187,14,182,24],[188,14,183,24,"defaultExport"],[188,27,183,37],[188,28,183,38,"constructor"],[188,39,183,49],[188,40,183,50,"name"],[188,44,183,54],[188,49,183,59],[188,64,183,74],[188,66,183,76],[189,16,184,24],[189,22,184,30],[189,26,184,34,"Error"],[189,31,184,39],[189,32,184,40],[189,66,184,74,"filePath"],[189,74,184,82],[189,158,184,166],[189,159,184,167],[190,14,185,20],[191,12,186,16],[192,12,187,16],[192,19,187,23,"routeModule"],[192,30,187,34],[193,10,188,12],[193,11,188,13],[194,10,189,12,"contextKey"],[194,20,189,22],[194,22,189,24,"filePath"],[194,30,189,32],[195,10,190,12,"route"],[195,15,190,17],[195,17,190,19],[195,19,190,21],[196,10,190,23],[197,10,191,12,"dynamic"],[197,17,191,19],[197,19,191,21],[197,23,191,25],[198,10,192,12,"children"],[198,18,192,20],[198,20,192,22],[198,22,192,24],[198,23,192,26],[199,8,193,8],[199,9,193,9],[200,8,194,8],[200,12,194,12,"meta"],[200,16,194,16],[200,17,194,17,"isRedirect"],[200,27,194,27],[200,29,194,29],[201,10,195,12],[201,14,195,16,"processedRedirectsRewrites"],[201,40,195,42],[201,41,195,43,"has"],[201,44,195,46],[201,45,195,47,"meta"],[201,49,195,51],[201,50,195,52,"route"],[201,55,195,57],[201,56,195,58],[201,58,195,60],[202,12,195,60],[203,10,197,12],[204,10,198,12],[204,14,198,18,"redirect"],[204,23,198,26],[204,26,198,29,"redirects"],[204,35,198,38],[204,36,198,39,"meta"],[204,40,198,43],[204,41,198,44,"route"],[204,46,198,49],[204,47,198,50],[205,10,199,12,"node"],[205,14,199,16],[205,15,199,17,"destinationContextKey"],[205,36,199,38],[205,39,199,41,"redirect"],[205,48,199,49],[205,49,199,50,"destinationContextKey"],[205,70,199,71],[206,10,200,12,"node"],[206,14,200,16],[206,15,200,17,"permanent"],[206,24,200,26],[206,27,200,29,"redirect"],[206,36,200,37],[206,37,200,38,"permanent"],[206,46,200,47],[207,10,201,12,"node"],[207,14,201,16],[207,15,201,17,"generated"],[207,24,201,26],[207,27,201,29],[207,31,201,33],[208,10,202,12],[208,14,202,16,"node"],[208,18,202,20],[208,19,202,21,"type"],[208,23,202,25],[208,28,202,30],[208,35,202,37],[208,37,202,39],[209,12,203,16,"node"],[209,16,203,20],[209,19,203,23,"options"],[209,26,203,30],[209,27,203,31,"getSystemRoute"],[209,41,203,45],[209,42,203,46],[210,14,204,20,"type"],[210,18,204,24],[210,20,204,26],[210,30,204,36],[211,14,205,20,"route"],[211,19,205,25],[211,21,205,27,"redirect"],[211,30,205,35],[211,31,205,36,"destination"],[211,42,205,47],[212,14,206,20,"defaults"],[212,22,206,28],[212,24,206,30,"node"],[212,28,206,34],[213,14,207,20,"redirectConfig"],[213,28,207,34],[213,30,207,36,"redirect"],[214,12,208,16],[214,13,208,17],[214,14,208,18],[215,10,209,12],[216,10,210,12],[216,14,210,16,"redirect"],[216,23,210,24],[216,24,210,25,"methods"],[216,31,210,32],[216,33,210,34],[217,12,211,16,"node"],[217,16,211,20],[217,17,211,21,"methods"],[217,24,211,28],[217,27,211,31,"redirect"],[217,36,211,39],[217,37,211,40,"methods"],[217,44,211,47],[218,10,212,12],[219,10,213,12,"node"],[219,14,213,16],[219,15,213,17,"type"],[219,19,213,21],[219,22,213,24],[219,32,213,34],[220,10,214,12,"processedRedirectsRewrites"],[220,36,214,38],[220,37,214,39,"add"],[220,40,214,42],[220,41,214,43,"meta"],[220,45,214,47],[220,46,214,48,"route"],[220,51,214,53],[220,52,214,54],[221,8,215,8],[222,8,216,8],[222,12,216,12,"meta"],[222,16,216,16],[222,17,216,17,"isRewrite"],[222,26,216,26],[222,28,216,28],[223,10,217,12],[223,14,217,16,"processedRedirectsRewrites"],[223,40,217,42],[223,41,217,43,"has"],[223,44,217,46],[223,45,217,47,"meta"],[223,49,217,51],[223,50,217,52,"route"],[223,55,217,57],[223,56,217,58],[223,58,217,60],[224,12,217,60],[225,10,219,12],[226,10,220,12],[226,14,220,18,"rewrite"],[226,22,220,25],[226,25,220,28,"rewrites"],[226,33,220,36],[226,34,220,37,"meta"],[226,38,220,41],[226,39,220,42,"route"],[226,44,220,47],[226,45,220,48],[227,10,221,12,"node"],[227,14,221,16],[227,15,221,17,"destinationContextKey"],[227,36,221,38],[227,39,221,41,"rewrite"],[227,47,221,48],[227,48,221,49,"destinationContextKey"],[227,69,221,70],[228,10,222,12,"node"],[228,14,222,16],[228,15,222,17,"generated"],[228,24,222,26],[228,27,222,29],[228,31,222,33],[229,10,223,12],[229,14,223,16,"node"],[229,18,223,20],[229,19,223,21,"type"],[229,23,223,25],[229,28,223,30],[229,35,223,37],[229,37,223,39],[230,12,224,16,"node"],[230,16,224,20],[230,19,224,23,"options"],[230,26,224,30],[230,27,224,31,"getSystemRoute"],[230,41,224,45],[230,42,224,46],[231,14,225,20,"type"],[231,18,225,24],[231,20,225,26],[231,29,225,35],[232,14,226,20,"route"],[232,19,226,25],[232,21,226,27,"rewrite"],[232,29,226,34],[232,30,226,35,"destination"],[232,41,226,46],[233,14,227,20,"defaults"],[233,22,227,28],[233,24,227,30,"node"],[233,28,227,34],[234,14,228,20,"rewriteConfig"],[234,27,228,33],[234,29,228,35,"rewrite"],[235,12,229,16],[235,13,229,17],[235,14,229,18],[236,10,230,12],[237,10,231,12],[237,14,231,16,"rewrite"],[237,22,231,23],[237,23,231,24,"methods"],[237,30,231,31],[237,32,231,33],[238,12,232,16,"node"],[238,16,232,20],[238,17,232,21,"methods"],[238,24,232,28],[238,27,232,31,"rewrite"],[238,35,232,38],[238,36,232,39,"methods"],[238,43,232,46],[239,10,233,12],[240,10,234,12,"node"],[240,14,234,16],[240,15,234,17,"type"],[240,19,234,21],[240,22,234,24],[240,31,234,33],[241,10,235,12,"processedRedirectsRewrites"],[241,36,235,38],[241,37,235,39,"add"],[241,40,235,42],[241,41,235,43,"meta"],[241,45,235,47],[241,46,235,48,"route"],[241,51,235,53],[241,52,235,54],[242,8,236,8],[243,8,237,8],[243,12,237,12,"process"],[243,19,237,19],[243,20,237,20,"env"],[243,23,237,23],[243,24,237,24,"NODE_ENV"],[243,32,237,32],[243,37,237,37],[243,50,237,50],[243,52,237,52],[244,10,238,12],[245,10,239,12],[246,10,240,12],[246,14,240,16,"node"],[246,18,240,20],[246,19,240,21,"type"],[246,23,240,25],[246,28,240,30],[246,33,240,35],[246,37,240,39,"importMode"],[246,47,240,49],[246,52,240,54],[246,58,240,60],[246,60,240,62],[247,12,241,16],[247,16,241,22,"routeItem"],[247,25,241,31],[247,28,241,34,"node"],[247,32,241,38],[247,33,241,39,"loadRoute"],[247,42,241,48],[247,43,241,49],[247,44,241,50],[248,12,242,16],[249,12,243,16],[249,16,243,22,"route"],[249,21,243,27],[249,24,243,30,"routeItem"],[249,33,243,39],[249,35,243,41,"default"],[249,42,243,48],[250,12,244,16],[250,16,244,20,"route"],[250,21,244,25],[250,25,244,29],[250,29,244,33],[250,31,244,35],[251,14,245,20],[252,14,246,20,"console"],[252,21,246,27],[252,22,246,28,"warn"],[252,26,246,32],[252,27,246,33],[252,37,246,43,"filePath"],[252,45,246,51],[252,137,246,143],[252,138,246,144],[253,14,246,145],[254,12,248,16],[255,12,249,16],[255,16,249,20],[255,17,249,21],[255,26,249,30],[255,28,249,32],[255,36,249,40],[255,38,249,42],[255,46,249,50],[255,47,249,51],[255,48,249,52,"includes"],[255,56,249,60],[255,57,249,61],[255,64,249,68,"route"],[255,69,249,73],[255,70,249,74],[255,72,249,76],[256,14,250,20],[256,20,250,26],[256,24,250,30,"Error"],[256,29,250,35],[256,30,250,36],[256,64,250,70,"filePath"],[256,72,250,78],[256,102,250,108],[256,109,250,115,"route"],[256,114,250,120],[256,191,250,197],[256,192,250,198],[257,12,251,16],[258,10,252,12],[259,8,253,8],[260,8,254,8],[261,0,255,0],[262,0,256,0],[263,0,257,0],[264,8,258,8],[264,13,258,13],[264,17,258,19,"route"],[264,23,258,24],[264,27,258,28,"extrapolateGroups"],[264,44,258,45],[264,45,258,46,"meta"],[264,49,258,50],[264,50,258,51,"route"],[264,55,258,56],[264,56,258,57],[264,58,258,59],[265,10,259,12],[266,10,260,12],[266,14,260,18,"subdirectoryParts"],[266,31,260,35],[266,34,260,38,"route"],[266,40,260,43],[266,41,260,44,"split"],[266,46,260,49],[266,47,260,50],[266,50,260,53],[266,51,260,54],[266,52,260,55,"slice"],[266,57,260,60],[266,58,260,61],[266,59,260,62],[266,61,260,64],[266,62,260,65],[266,63,260,66],[266,64,260,67],[267,10,261,12],[268,10,262,12],[268,14,262,16,"directory"],[268,23,262,25],[268,26,262,28,"rootDirectory"],[268,39,262,41],[269,10,263,12],[269,15,263,17],[269,19,263,23,"part"],[269,23,263,27],[269,27,263,31,"subdirectoryParts"],[269,44,263,48],[269,46,263,50],[270,12,264,16],[270,16,264,20,"subDirectory"],[270,28,264,32],[270,31,264,35,"directory"],[270,40,264,44],[270,41,264,45,"subdirectories"],[270,55,264,59],[270,56,264,60,"get"],[270,59,264,63],[270,60,264,64,"part"],[270,64,264,68],[270,65,264,69],[271,12,265,16],[272,12,266,16],[272,16,266,20],[272,17,266,21,"subDirectory"],[272,29,266,33],[272,31,266,35],[273,14,267,20,"subDirectory"],[273,26,267,32],[273,29,267,35],[274,16,268,24,"files"],[274,21,268,29],[274,23,268,31],[274,27,268,35,"Map"],[274,30,268,38],[274,31,268,39],[274,32,268,40],[275,16,269,24,"subdirectories"],[275,30,269,38],[275,32,269,40],[275,36,269,44,"Map"],[275,39,269,47],[275,40,269,48],[276,14,270,20],[276,15,270,21],[277,14,271,20,"directory"],[277,23,271,29],[277,24,271,30,"subdirectories"],[277,38,271,44],[277,39,271,45,"set"],[277,42,271,48],[277,43,271,49,"part"],[277,47,271,53],[277,49,271,55,"subDirectory"],[277,61,271,67],[277,62,271,68],[278,12,272,16],[279,12,273,16,"directory"],[279,21,273,25],[279,24,273,28,"subDirectory"],[279,36,273,40],[280,10,274,12],[281,10,275,12],[282,10,276,12,"node"],[282,14,276,16],[282,17,276,19],[283,12,276,21],[283,15,276,24,"node"],[283,19,276,28],[284,12,276,30,"route"],[284,17,276,35],[284,19,276,30,"route"],[285,10,276,36],[285,11,276,37],[286,10,277,12],[286,14,277,16,"meta"],[286,18,277,20],[286,19,277,21,"isLayout"],[286,27,277,29],[286,29,277,31],[287,12,278,16,"directory"],[287,21,278,25],[287,22,278,26,"layout"],[287,28,278,32],[287,33,278,37],[287,35,278,39],[288,12,279,16],[288,16,279,22,"existing"],[288,24,279,30],[288,27,279,33,"directory"],[288,36,279,42],[288,37,279,43,"layout"],[288,43,279,49],[288,44,279,50,"meta"],[288,48,279,54],[288,49,279,55,"specificity"],[288,60,279,66],[288,61,279,67],[289,12,280,16],[289,16,280,20,"existing"],[289,24,280,28],[289,26,280,30],[290,14,281,20],[291,14,282,20],[291,18,282,24,"process"],[291,25,282,31],[291,26,282,32,"env"],[291,29,282,35],[291,30,282,36,"NODE_ENV"],[291,38,282,44],[291,43,282,49],[291,55,282,61],[291,57,282,63],[292,16,283,24],[292,22,283,30],[292,26,283,34,"Error"],[292,31,283,39],[292,32,283,40],[292,48,283,56,"filePath"],[292,56,283,64],[292,66,283,74,"existing"],[292,74,283,82],[292,75,283,83,"contextKey"],[292,85,283,93],[292,114,283,122,"route"],[292,120,283,127],[292,161,283,168],[292,162,283,169],[293,14,284,20],[294,12,285,16],[294,13,285,17],[294,19,286,21],[295,14,287,20,"node"],[295,18,287,24],[295,21,287,27,"getLayoutNode"],[295,34,287,40],[295,35,287,41,"node"],[295,39,287,45],[295,41,287,47,"options"],[295,48,287,54],[295,49,287,55],[296,14,288,20,"directory"],[296,23,288,29],[296,24,288,30,"layout"],[296,30,288,36],[296,31,288,37,"meta"],[296,35,288,41],[296,36,288,42,"specificity"],[296,47,288,53],[296,48,288,54],[296,51,288,57,"node"],[296,55,288,61],[297,12,289,16],[298,10,290,12],[298,11,290,13],[298,17,291,17],[298,21,291,21,"meta"],[298,25,291,25],[298,26,291,26,"isApi"],[298,31,291,31],[298,33,291,33],[299,12,292,16],[299,16,292,22,"fileKey"],[299,23,292,29],[299,26,292,32],[299,29,292,35,"route"],[299,35,292,40],[299,41,292,46],[300,12,293,16],[300,16,293,20,"nodes"],[300,21,293,25],[300,24,293,28,"directory"],[300,33,293,37],[300,34,293,38,"files"],[300,39,293,43],[300,40,293,44,"get"],[300,43,293,47],[300,44,293,48,"fileKey"],[300,51,293,55],[300,52,293,56],[301,12,294,16],[301,16,294,20],[301,17,294,21,"nodes"],[301,22,294,26],[301,24,294,28],[302,14,295,20,"nodes"],[302,19,295,25],[302,22,295,28],[302,24,295,30],[303,14,296,20,"directory"],[303,23,296,29],[303,24,296,30,"files"],[303,29,296,35],[303,30,296,36,"set"],[303,33,296,39],[303,34,296,40,"fileKey"],[303,41,296,47],[303,43,296,49,"nodes"],[303,48,296,54],[303,49,296,55],[304,12,297,16],[305,12,298,16],[306,12,299,16],[306,16,299,22,"existing"],[306,25,299,30],[306,28,299,33,"nodes"],[306,33,299,38],[306,34,299,39],[306,35,299,40],[306,36,299,41],[307,12,300,16],[307,16,300,20,"existing"],[307,25,300,28],[307,27,300,30],[308,14,301,20],[309,14,302,20],[309,18,302,24,"process"],[309,25,302,31],[309,26,302,32,"env"],[309,29,302,35],[309,30,302,36,"NODE_ENV"],[309,38,302,44],[309,43,302,49],[309,55,302,61],[309,57,302,63],[310,16,303,24],[310,22,303,30],[310,26,303,34,"Error"],[310,31,303,39],[310,32,303,40],[310,55,303,63,"filePath"],[310,63,303,71],[310,73,303,81,"existing"],[310,82,303,89],[310,83,303,90,"contextKey"],[310,93,303,100],[310,122,303,129,"route"],[310,128,303,134],[310,169,303,175],[310,170,303,176],[311,14,304,20],[312,12,305,16],[312,13,305,17],[312,19,306,21],[313,14,307,20,"nodes"],[313,19,307,25],[313,20,307,26],[313,21,307,27],[313,22,307,28],[313,25,307,31,"node"],[313,29,307,35],[314,12,308,16],[315,10,309,12],[315,11,309,13],[315,17,310,17],[316,12,311,16],[316,16,311,20,"nodes"],[316,22,311,25],[316,25,311,28,"directory"],[316,34,311,37],[316,35,311,38,"files"],[316,40,311,43],[316,41,311,44,"get"],[316,44,311,47],[316,45,311,48,"route"],[316,51,311,53],[316,52,311,54],[317,12,312,16],[317,16,312,20],[317,17,312,21,"nodes"],[317,23,312,26],[317,25,312,28],[318,14,313,20,"nodes"],[318,20,313,25],[318,23,313,28],[318,25,313,30],[319,14,314,20,"directory"],[319,23,314,29],[319,24,314,30,"files"],[319,29,314,35],[319,30,314,36,"set"],[319,33,314,39],[319,34,314,40,"route"],[319,40,314,45],[319,42,314,47,"nodes"],[319,48,314,52],[319,49,314,53],[320,12,315,16],[321,12,316,16],[322,0,317,0],[323,0,318,0],[324,0,319,0],[325,0,320,0],[326,0,321,0],[327,12,322,16],[327,16,322,22,"existing"],[327,26,322,30],[327,29,322,33,"nodes"],[327,35,322,38],[327,36,322,39,"meta"],[327,40,322,43],[327,41,322,44,"specificity"],[327,52,322,55],[327,53,322,56],[328,12,323,16],[328,16,323,20,"existing"],[328,26,323,28],[328,28,323,30],[329,14,324,20],[330,14,325,20],[330,18,325,24,"process"],[330,25,325,31],[330,26,325,32,"env"],[330,29,325,35],[330,30,325,36,"NODE_ENV"],[330,38,325,44],[330,43,325,49],[330,55,325,61],[330,57,325,63],[331,16,326,24],[331,22,326,30],[331,26,326,34,"Error"],[331,31,326,39],[331,32,326,40],[331,52,326,60,"filePath"],[331,60,326,68],[331,70,326,78,"existing"],[331,80,326,86],[331,81,326,87,"contextKey"],[331,91,326,97],[331,120,326,126,"route"],[331,126,326,131],[331,167,326,172],[331,168,326,173],[332,14,327,20],[333,12,328,16],[333,13,328,17],[333,19,329,21],[334,14,330,20,"hasRoutes"],[334,23,330,29],[334,28,330,34],[334,32,330,38],[335,14,331,20,"nodes"],[335,20,331,25],[335,21,331,26,"meta"],[335,25,331,30],[335,26,331,31,"specificity"],[335,37,331,42],[335,38,331,43],[335,41,331,46,"node"],[335,45,331,50],[336,12,332,16],[337,10,333,12],[338,8,334,8],[339,6,335,4],[339,7,335,5],[340,6,335,5,"_ret3"],[340,11,335,5],[341,4,145,4],[341,9,145,9],[341,13,145,15,"filePath"],[341,21,145,23],[341,25,145,27,"contextKeys"],[341,36,145,38],[342,6,145,38,"_ret3"],[342,11,145,38],[342,14,145,38,"_loop3"],[342,20,145,38],[342,21,145,38,"filePath"],[342,29,145,38],[343,6,145,38],[343,10,145,38,"_ret3"],[343,15,145,38],[343,23,147,12],[344,4,147,21],[345,4,336,4],[346,4,337,4],[346,8,337,8],[346,9,337,9,"isValid"],[346,16,337,16],[346,18,337,18],[347,6,338,8],[347,13,338,15],[347,17,338,19],[348,4,339,4],[349,4,340,4],[350,0,341,0],[351,0,342,0],[352,0,343,0],[353,4,344,4],[353,8,344,8],[353,9,344,9,"rootDirectory"],[353,22,344,22],[353,23,344,23,"layout"],[353,29,344,29],[353,31,344,31],[354,6,345,8,"rootDirectory"],[354,19,345,21],[354,20,345,22,"layout"],[354,26,345,28],[354,29,345,31],[354,30,346,12,"options"],[354,37,346,19],[354,38,346,20,"getSystemRoute"],[354,52,346,34],[354,53,346,35],[355,8,347,16,"type"],[355,12,347,20],[355,14,347,22],[355,22,347,30],[356,8,348,16,"route"],[356,13,348,21],[356,15,348,23],[357,6,349,12],[357,7,349,13],[357,8,349,14],[357,9,350,9],[358,4,351,4],[359,4,352,4],[360,4,353,4],[360,8,353,8],[360,9,353,9,"options"],[360,16,353,16],[360,17,353,17,"skipGenerated"],[360,30,353,30],[360,32,353,32],[361,6,354,8],[361,10,354,12,"hasRoutes"],[361,19,354,21],[361,23,354,25,"options"],[361,30,354,32],[361,31,354,33,"sitemap"],[361,38,354,40],[361,43,354,45],[361,48,354,50],[361,50,354,52],[362,8,355,12,"appendSitemapRoute"],[362,26,355,30],[362,27,355,31,"rootDirectory"],[362,40,355,44],[362,42,355,46,"options"],[362,49,355,53],[362,50,355,54],[363,6,356,8],[364,6,357,8],[364,10,357,12,"options"],[364,17,357,19],[364,18,357,20,"notFound"],[364,26,357,28],[364,31,357,33],[364,36,357,38],[364,38,357,40],[365,8,358,12,"appendNotFoundRoute"],[365,27,358,31],[365,28,358,32,"rootDirectory"],[365,41,358,45],[365,43,358,47,"options"],[365,50,358,54],[365,51,358,55],[366,6,359,8],[367,4,360,4],[368,4,361,4],[368,11,361,11,"rootDirectory"],[368,24,361,24],[369,2,362,0],[370,2,363,0],[370,11,363,9,"getNameFromRedirectPath"],[370,34,363,32,"getNameFromRedirectPath"],[370,35,363,33,"path"],[370,39,363,37],[370,41,363,39],[371,4,364,4],[372,4,365,4],[372,11,365,12],[372,12,365,13],[372,13,365,14],[372,15,365,16,"matchers_1"],[372,25,365,26],[372,26,365,27,"removeFileSystemExtensions"],[372,52,365,53],[372,54,365,55],[372,55,365,56],[372,56,365,57],[372,58,365,59,"matchers_1"],[372,68,365,69],[372,69,365,70,"removeFileSystemDots"],[372,89,365,90],[372,91,365,92,"path"],[372,95,365,96],[372,96,365,97],[373,4,366,8],[374,4,366,8],[374,5,367,9,"replace"],[374,12,367,16],[374,13,367,17],[374,18,367,22],[374,20,367,24],[374,22,367,26],[374,23,367,27],[375,2,368,0],[376,2,369,0],[376,11,369,9,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[376,58,369,56,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[376,59,369,57,"path"],[376,63,369,61],[376,65,369,63],[377,4,370,4],[377,11,370,11],[377,12,370,12],[377,13,370,13],[377,15,370,15,"matchers_1"],[377,25,370,25],[377,26,370,26,"stripInvisibleSegmentsFromPath"],[377,56,370,56],[377,58,370,58,"getNameFromRedirectPath"],[377,81,370,81],[377,82,370,82,"path"],[377,86,370,86],[377,87,370,87],[377,88,370,88],[378,2,371,0],[379,2,372,0],[380,2,373,0],[380,11,373,9,"getSourceContextKeyFromRedirectSource"],[380,48,373,46,"getSourceContextKeyFromRedirectSource"],[380,49,373,47,"source"],[380,55,373,53],[380,57,373,55],[381,4,374,4],[381,8,374,10,"name"],[381,12,374,14],[381,15,374,17,"getNameFromRedirectPath"],[381,38,374,40],[381,39,374,41,"source"],[381,45,374,47],[381,46,374,48],[382,4,375,4],[382,8,375,10,"prefix"],[382,14,375,16],[382,17,375,19],[382,21,375,23],[383,4,376,4],[383,8,376,10,"suffix"],[383,14,376,16],[383,17,376,19],[383,29,376,31],[383,30,376,32,"test"],[383,34,376,36],[383,35,376,37,"name"],[383,39,376,41],[383,40,376,42],[383,43,376,45],[383,45,376,47],[383,48,376,50],[383,53,376,55],[383,54,376,56],[383,55,376,57],[384,4,377,4],[384,11,377,11],[384,14,377,14,"prefix"],[384,20,377,20],[384,23,377,23,"name"],[384,27,377,27],[384,30,377,30,"suffix"],[384,36,377,36],[384,38,377,38],[385,2,378,0],[386,2,379,0],[387,0,380,0],[388,0,381,0],[389,2,382,0],[389,11,382,9,"flattenDirectoryTreeToRoutes"],[389,39,382,37,"flattenDirectoryTreeToRoutes"],[389,40,382,38,"directory"],[389,49,382,47],[389,51,382,49,"options"],[389,58,382,56],[389,60,383,0],[390,2,384,0,"layout"],[390,8,384,6],[390,10,386,19],[391,4,386,19],[391,8,386,0,"pathToRemove"],[391,20,386,12],[391,23,386,12,"arguments"],[391,32,386,12],[391,33,386,12,"length"],[391,39,386,12],[391,47,386,12,"arguments"],[391,56,386,12],[391,64,386,12,"undefined"],[391,73,386,12],[391,76,386,12,"arguments"],[391,85,386,12],[391,91,386,15],[391,93,386,17],[392,4,387,4],[393,0,388,0],[394,0,389,0],[395,4,390,4],[395,8,390,8,"directory"],[395,17,390,17],[395,18,390,18,"layout"],[395,24,390,24],[395,26,390,26],[396,6,391,8],[396,10,391,14,"previousLayout"],[396,24,391,28],[396,27,391,31,"layout"],[396,33,391,37],[397,6,392,8,"layout"],[397,12,392,14],[397,15,392,17,"getMostSpecific"],[397,30,392,32],[397,31,392,33,"directory"],[397,40,392,42],[397,41,392,43,"layout"],[397,47,392,49],[397,48,392,50],[398,6,393,8],[399,6,394,8],[399,10,394,12,"previousLayout"],[399,24,394,26],[399,26,394,28],[400,8,395,12,"previousLayout"],[400,22,395,26],[400,23,395,27,"children"],[400,31,395,35],[400,32,395,36,"push"],[400,36,395,40],[400,37,395,41,"layout"],[400,43,395,47],[400,44,395,48],[401,6,396,8],[402,6,397,8],[402,10,397,12,"options"],[402,17,397,19],[402,18,397,20,"internal_stripLoadRoute"],[402,41,397,43],[402,43,397,45],[403,8,398,12],[403,15,398,19,"layout"],[403,21,398,25],[403,22,398,26,"loadRoute"],[403,31,398,35],[404,6,399,8],[405,6,400,8],[406,6,401,8],[406,10,401,14,"newRoute"],[406,18,401,22],[406,21,401,25,"layout"],[406,27,401,31],[406,28,401,32,"route"],[406,33,401,37],[406,34,401,38,"replace"],[406,41,401,45],[406,42,401,46,"pathToRemove"],[406,54,401,58],[406,56,401,60],[406,58,401,62],[406,59,401,63],[407,6,402,8,"pathToRemove"],[407,18,402,20],[407,21,402,23,"layout"],[407,27,402,29],[407,28,402,30,"route"],[407,33,402,35],[407,36,402,38],[407,39,402,41,"layout"],[407,45,402,47],[407,46,402,48,"route"],[407,51,402,53],[407,54,402,56],[407,57,402,59],[407,59,402,61],[408,6,403,8],[409,6,404,8,"layout"],[409,12,404,14],[409,13,404,15,"route"],[409,18,404,20],[409,21,404,23,"newRoute"],[409,29,404,31],[410,6,405,8,"layout"],[410,12,405,14],[410,13,405,15,"dynamic"],[410,20,405,22],[410,23,405,25,"generateDynamic"],[410,38,405,40],[410,39,405,41,"layout"],[410,45,405,47],[410,46,405,48,"contextKey"],[410,56,405,58],[410,57,405,59,"slice"],[410,62,405,64],[410,63,405,65],[410,64,405,66],[410,65,405,67],[410,66,405,68],[411,4,406,4],[412,4,407,4],[413,4,408,4],[413,8,408,8],[413,9,408,9,"layout"],[413,15,408,15],[413,17,409,8],[413,23,409,14],[413,27,409,18,"Error"],[413,32,409,23],[413,33,409,24],[413,80,409,71],[413,81,409,72],[414,4,410,4],[414,9,410,9],[414,13,410,15,"routes"],[414,19,410,21],[414,23,410,25,"directory"],[414,32,410,34],[414,33,410,35,"files"],[414,38,410,40],[414,39,410,41,"values"],[414,45,410,47],[414,46,410,48],[414,47,410,49],[414,49,410,51],[415,6,411,8],[415,10,411,14,"routeNode"],[415,19,411,23],[415,22,411,26,"getMostSpecific"],[415,37,411,41],[415,38,411,42,"routes"],[415,44,411,48],[415,45,411,49],[416,6,412,8],[417,6,413,8,"routeNode"],[417,15,413,17],[417,16,413,18,"route"],[417,21,413,23],[417,24,413,26,"routeNode"],[417,33,413,35],[417,34,413,36,"route"],[417,39,413,41],[417,40,413,42,"replace"],[417,47,413,49],[417,48,413,50,"pathToRemove"],[417,60,413,62],[417,62,413,64],[417,64,413,66],[417,65,413,67],[418,6,414,8,"routeNode"],[418,15,414,17],[418,16,414,18,"dynamic"],[418,23,414,25],[418,26,414,28,"generateDynamic"],[418,41,414,43],[418,42,414,44,"routeNode"],[418,51,414,53],[418,52,414,54,"route"],[418,57,414,59],[418,58,414,60],[419,6,415,8],[419,10,415,12,"options"],[419,17,415,19],[419,18,415,20,"internal_stripLoadRoute"],[419,41,415,43],[419,43,415,45],[420,8,416,12],[420,15,416,19,"routeNode"],[420,24,416,28],[420,25,416,29,"loadRoute"],[420,34,416,38],[421,6,417,8],[422,6,418,8,"layout"],[422,12,418,14],[422,13,418,15,"children"],[422,21,418,23],[422,22,418,24,"push"],[422,26,418,28],[422,27,418,29,"routeNode"],[422,36,418,38],[422,37,418,39],[423,4,419,4],[424,4,420,4],[425,4,421,4],[425,9,421,9],[425,13,421,15,"child"],[425,18,421,20],[425,22,421,24,"directory"],[425,31,421,33],[425,32,421,34,"subdirectories"],[425,46,421,48],[425,47,421,49,"values"],[425,53,421,55],[425,54,421,56],[425,55,421,57],[425,57,421,59],[426,6,422,8,"flattenDirectoryTreeToRoutes"],[426,34,422,36],[426,35,422,37,"child"],[426,40,422,42],[426,42,422,44,"options"],[426,49,422,51],[426,51,422,53,"layout"],[426,57,422,59],[426,59,422,61,"pathToRemove"],[426,71,422,73],[426,72,422,74],[427,4,423,4],[428,4,424,4],[428,11,424,11,"layout"],[428,17,424,17],[429,2,425,0],[430,2,426,0],[430,11,426,9,"getFileMeta"],[430,22,426,20,"getFileMeta"],[430,23,426,21,"originalKey"],[430,34,426,32],[430,36,426,34,"options"],[430,43,426,41],[430,45,426,43,"redirects"],[430,54,426,52],[430,56,426,54,"rewrites"],[430,64,426,62],[430,66,426,64],[431,4,427,4],[432,4,428,4],[432,8,428,10,"key"],[432,11,428,13],[432,14,428,16],[432,15,428,17],[432,16,428,18],[432,18,428,20,"matchers_1"],[432,28,428,30],[432,29,428,31,"removeSupportedExtensions"],[432,54,428,56],[432,56,428,58],[432,57,428,59],[432,58,428,60],[432,60,428,62,"matchers_1"],[432,70,428,72],[432,71,428,73,"removeFileSystemDots"],[432,91,428,93],[432,93,428,95,"originalKey"],[432,104,428,106],[432,105,428,107],[432,106,428,108],[433,4,429,4],[433,8,429,8,"route"],[433,13,429,13],[433,16,429,16,"key"],[433,19,429,19],[434,4,430,4],[434,8,430,10,"parts"],[434,13,430,15],[434,16,430,18],[434,17,430,19],[434,18,430,20],[434,20,430,22,"matchers_1"],[434,30,430,32],[434,31,430,33,"removeFileSystemDots"],[434,51,430,53],[434,53,430,55,"originalKey"],[434,64,430,66],[434,65,430,67],[434,66,430,68,"split"],[434,71,430,73],[434,72,430,74],[434,75,430,77],[434,76,430,78],[435,4,431,4],[435,8,431,10,"filename"],[435,16,431,18],[435,19,431,21,"parts"],[435,24,431,26],[435,25,431,27,"parts"],[435,30,431,32],[435,31,431,33,"length"],[435,37,431,39],[435,40,431,42],[435,41,431,43],[435,42,431,44],[436,4,432,4],[436,8,432,4,"_split"],[436,14,432,4],[436,17,432,59],[436,18,432,60],[436,19,432,61],[436,21,432,63,"matchers_1"],[436,31,432,73],[436,32,432,74,"removeSupportedExtensions"],[436,57,432,99],[436,59,432,101,"filename"],[436,67,432,109],[436,68,432,110],[436,69,432,111,"split"],[436,74,432,116],[436,75,432,117],[436,78,432,120],[436,79,432,121],[437,6,432,121,"_split2"],[437,13,432,121],[437,16,432,121,"_slicedToArray"],[437,30,432,121],[437,31,432,121,"_split"],[437,37,432,121],[438,6,432,11,"filenameWithoutExtensions"],[438,31,432,36],[438,34,432,36,"_split2"],[438,41,432,36],[439,6,432,38,"platformExtension"],[439,23,432,55],[439,26,432,55,"_split2"],[439,33,432,55],[440,4,433,4],[440,8,433,10,"isLayout"],[440,16,433,18],[440,19,433,21,"filenameWithoutExtensions"],[440,44,433,46],[440,49,433,51],[440,58,433,60],[441,4,434,4],[441,8,434,10,"isApi"],[441,13,434,15],[441,16,434,18,"originalKey"],[441,27,434,29],[441,28,434,30,"match"],[441,33,434,35],[441,34,434,36],[441,59,434,61],[441,60,434,62],[442,4,435,4],[442,8,435,8,"filenameWithoutExtensions"],[442,33,435,33],[442,34,435,34,"startsWith"],[442,44,435,44],[442,45,435,45],[442,48,435,48],[442,49,435,49],[442,53,435,53,"filenameWithoutExtensions"],[442,78,435,78],[442,79,435,79,"endsWith"],[442,87,435,87],[442,88,435,88],[442,91,435,91],[442,92,435,92],[442,94,435,94],[443,6,436,8],[443,12,436,14],[443,16,436,18,"Error"],[443,21,436,23],[443,22,436,24],[443,39,436,41,"originalKey"],[443,50,436,52],[443,93,436,95],[443,94,436,96],[444,4,437,4],[445,4,438,4],[446,4,439,4],[446,8,439,8],[446,9,439,9,"isApi"],[446,14,439,14],[446,18,439,18,"filename"],[446,26,439,26],[446,27,439,27,"startsWith"],[446,37,439,37],[446,38,439,38],[446,41,439,41],[446,42,439,42],[446,46,439,46,"filenameWithoutExtensions"],[446,71,439,71],[446,76,439,76],[446,88,439,88],[446,90,439,90],[447,6,440,8],[447,10,440,14,"renamedRoute"],[447,22,440,26],[447,25,440,29],[447,26,440,30],[447,29,440,33,"parts"],[447,34,440,38],[447,35,440,39,"slice"],[447,40,440,44],[447,41,440,45],[447,42,440,46],[447,44,440,48],[447,45,440,49],[447,46,440,50],[447,47,440,51],[447,49,440,53,"filename"],[447,57,440,61],[447,58,440,62,"slice"],[447,63,440,67],[447,64,440,68],[447,65,440,69],[447,66,440,70],[447,67,440,71],[447,68,440,72,"join"],[447,72,440,76],[447,73,440,77],[447,76,440,80],[447,77,440,81],[448,6,441,8],[448,12,441,14],[448,16,441,18,"Error"],[448,21,441,23],[448,22,441,24],[448,39,441,41,"originalKey"],[448,50,441,52],[448,118,441,120,"renamedRoute"],[448,130,441,132],[448,133,441,135],[448,134,441,136],[449,4,442,4],[450,4,443,4],[450,8,443,8,"specificity"],[450,19,443,19],[450,22,443,22],[450,23,443,23],[451,4,444,4],[451,8,444,10,"hasPlatformExtension"],[451,28,444,30],[451,31,444,33,"validPlatforms"],[451,45,444,47],[451,46,444,48,"has"],[451,49,444,51],[451,50,444,52,"platformExtension"],[451,67,444,69],[451,68,444,70],[452,4,445,4],[452,8,445,10,"usePlatformRoutes"],[452,25,445,27],[452,28,445,30,"options"],[452,35,445,37],[452,36,445,38,"platformRoutes"],[452,50,445,52],[452,54,445,56],[452,58,445,60],[453,4,446,4],[453,8,446,8,"hasPlatformExtension"],[453,28,446,28],[453,30,446,30],[454,6,447,8],[454,10,447,12],[454,11,447,13,"usePlatformRoutes"],[454,28,447,30],[454,30,447,32],[455,8,448,12],[456,8,449,12,"specificity"],[456,19,449,23],[456,22,449,26],[456,23,449,27],[456,24,449,28],[457,6,450,8],[457,7,450,9],[457,13,451,13],[457,17,451,17],[457,18,451,18,"options"],[457,25,451,25],[457,26,451,26,"platform"],[457,34,451,34],[457,36,451,36],[458,8,452,12],[459,8,453,12],[460,8,454,12,"specificity"],[460,19,454,23],[460,22,454,26],[460,23,454,27],[460,24,454,28],[461,6,455,8],[461,7,455,9],[461,13,456,13],[461,17,456,17,"platformExtension"],[461,34,456,34],[461,39,456,39,"options"],[461,46,456,46],[461,47,456,47,"platform"],[461,55,456,55],[461,57,456,57],[462,8,457,12],[463,8,458,12,"specificity"],[463,19,458,23],[463,22,458,26],[463,23,458,27],[464,6,459,8],[464,7,459,9],[464,13,460,13],[464,17,460,17,"platformExtension"],[464,34,460,34],[464,39,460,39],[464,47,460,47],[464,51,460,51,"options"],[464,58,460,58],[464,59,460,59,"platform"],[464,67,460,67],[464,72,460,72],[464,77,460,77],[464,79,460,79],[465,8,461,12],[466,8,462,12,"specificity"],[466,19,462,23],[466,22,462,26],[466,23,462,27],[467,6,463,8],[467,7,463,9],[467,13,464,13],[467,17,464,17,"platformExtension"],[467,34,464,34],[467,39,464,39,"options"],[467,46,464,46],[467,47,464,47,"platform"],[467,55,464,55],[467,57,464,57],[468,8,465,12],[469,8,466,12],[470,8,467,12,"specificity"],[470,19,467,23],[470,22,467,26],[470,23,467,27],[470,24,467,28],[471,6,468,8],[472,6,469,8],[472,10,469,12,"isApi"],[472,15,469,17],[472,19,469,21,"specificity"],[472,30,469,32],[472,35,469,37],[472,36,469,38],[472,38,469,40],[473,8,470,12],[473,14,470,18],[473,18,470,22,"Error"],[473,23,470,27],[473,24,470,28],[473,80,470,84,"platformExtension"],[473,97,470,101],[473,108,470,112,"originalKey"],[473,119,470,123],[473,122,470,126],[473,123,470,127],[474,6,471,8],[475,6,472,8,"route"],[475,11,472,13],[475,14,472,16,"route"],[475,19,472,21],[475,20,472,22,"replace"],[475,27,472,29],[475,28,472,30],[475,32,472,34,"RegExp"],[475,38,472,40],[475,39,472,41],[475,43,472,45,"platformExtension"],[475,60,472,62],[475,63,472,65],[475,64,472,66],[475,66,472,68],[475,68,472,70],[475,69,472,71],[476,4,473,4],[477,4,474,4],[477,11,474,11],[478,6,475,8,"route"],[478,11,475,13],[479,6,476,8,"specificity"],[479,17,476,19],[480,6,477,8,"isLayout"],[480,14,477,16],[481,6,478,8,"isApi"],[481,11,478,13],[482,6,479,8,"isRedirect"],[482,16,479,18],[482,18,479,20,"key"],[482,21,479,23],[482,25,479,27,"redirects"],[482,34,479,36],[483,6,480,8,"isRewrite"],[483,15,480,17],[483,17,480,19,"key"],[483,20,480,22],[483,24,480,26,"rewrites"],[484,4,481,4],[484,5,481,5],[485,2,482,0],[486,2,483,0],[487,0,484,0],[488,0,485,0],[489,0,486,0],[490,0,487,0],[491,2,488,0],[491,11,488,9,"extrapolateGroups"],[491,28,488,26,"extrapolateGroups"],[491,29,488,27,"key"],[491,32,488,30],[491,34,488,50],[492,4,488,50],[492,8,488,32,"keys"],[492,12,488,36],[492,15,488,36,"arguments"],[492,24,488,36],[492,25,488,36,"length"],[492,31,488,36],[492,39,488,36,"arguments"],[492,48,488,36],[492,56,488,36,"undefined"],[492,65,488,36],[492,68,488,36,"arguments"],[492,77,488,36],[492,83,488,39],[492,87,488,43,"Set"],[492,90,488,46],[492,91,488,47],[492,92,488,48],[493,4,489,4],[493,8,489,10,"match"],[493,13,489,15],[493,16,489,18],[493,17,489,19],[493,18,489,20],[493,20,489,22,"matchers_1"],[493,30,489,32],[493,31,489,33,"matchArrayGroupName"],[493,50,489,52],[493,52,489,54,"key"],[493,55,489,57],[493,56,489,58],[494,4,490,4],[494,8,490,8],[494,9,490,9,"match"],[494,14,490,14],[494,16,490,16],[495,6,491,8,"keys"],[495,10,491,12],[495,11,491,13,"add"],[495,14,491,16],[495,15,491,17,"key"],[495,18,491,20],[495,19,491,21],[496,6,492,8],[496,13,492,15,"keys"],[496,17,492,19],[497,4,493,4],[498,4,494,4],[498,8,494,10,"groups"],[498,14,494,16],[498,17,494,19,"match"],[498,22,494,24],[498,23,494,25,"split"],[498,28,494,30],[498,29,494,31],[498,32,494,34],[498,33,494,35],[499,4,495,4],[499,8,495,10,"groupsSet"],[499,17,495,19],[499,20,495,22],[499,24,495,26,"Set"],[499,27,495,29],[499,28,495,30,"groups"],[499,34,495,36],[499,35,495,37],[500,4,496,4],[500,8,496,8,"groupsSet"],[500,17,496,17],[500,18,496,18,"size"],[500,22,496,22],[500,27,496,27,"groups"],[500,33,496,33],[500,34,496,34,"length"],[500,40,496,40],[500,42,496,42],[501,6,497,8],[501,12,497,14],[501,16,497,18,"Error"],[501,21,497,23],[501,22,497,24],[501,75,497,77,"groups"],[501,81,497,83],[501,90,497,92,"key"],[501,93,497,95],[501,97,497,99],[501,98,497,100],[502,4,498,4],[503,4,499,4],[503,8,499,8,"groups"],[503,14,499,14],[503,15,499,15,"length"],[503,21,499,21],[503,26,499,26],[503,27,499,27],[503,29,499,29],[504,6,500,8,"keys"],[504,10,500,12],[504,11,500,13,"add"],[504,14,500,16],[504,15,500,17,"key"],[504,18,500,20],[504,19,500,21],[505,6,501,8],[505,13,501,15,"keys"],[505,17,501,19],[506,4,502,4],[507,4,503,4],[507,9,503,9],[507,13,503,15,"group"],[507,18,503,20],[507,22,503,24,"groups"],[507,28,503,30],[507,30,503,32],[508,6,504,8,"extrapolateGroups"],[508,23,504,25],[508,24,504,26,"key"],[508,27,504,29],[508,28,504,30,"replace"],[508,35,504,37],[508,36,504,38,"match"],[508,41,504,43],[508,43,504,45,"group"],[508,48,504,50],[508,49,504,51,"trim"],[508,53,504,55],[508,54,504,56],[508,55,504,57],[508,56,504,58],[508,58,504,60,"keys"],[508,62,504,64],[508,63,504,65],[509,4,505,4],[510,4,506,4],[510,11,506,11,"keys"],[510,15,506,15],[511,2,507,0],[512,2,508,0],[512,11,508,9,"generateDynamic"],[512,26,508,24,"generateDynamic"],[512,27,508,25,"path"],[512,31,508,29],[512,33,508,31],[513,4,509,4],[513,8,509,10,"dynamic"],[513,15,509,17],[513,18,509,20,"path"],[513,22,509,24],[513,23,510,9,"split"],[513,28,510,14],[513,29,510,15],[513,32,510,18],[513,33,510,19],[513,34,511,9,"map"],[513,37,511,12],[513,38,511,14,"part"],[513,42,511,18],[513,46,511,23],[514,6,512,8],[514,10,512,12,"part"],[514,14,512,16],[514,19,512,21],[514,31,512,33],[514,33,512,35],[515,8,513,12],[515,15,513,19],[516,10,514,16,"name"],[516,14,514,20],[516,16,514,22],[516,28,514,34],[517,10,515,16,"deep"],[517,14,515,20],[517,16,515,22],[517,20,515,26],[518,10,516,16,"notFound"],[518,18,516,24],[518,20,516,26],[519,8,517,12],[519,9,517,13],[520,6,518,8],[521,6,519,8],[521,13,519,15],[521,14,519,16],[521,15,519,17],[521,17,519,19,"matchers_1"],[521,27,519,29],[521,28,519,30,"matchDynamicName"],[521,44,519,46],[521,46,519,48,"part"],[521,50,519,52],[521,51,519,53],[521,55,519,57],[521,59,519,61],[522,4,520,4],[522,5,520,5],[522,6,520,6],[522,7,521,9,"filter"],[522,13,521,15],[522,14,521,17,"part"],[522,18,521,21],[522,22,521,26],[522,23,521,27],[522,24,521,28,"part"],[522,28,521,32],[522,29,521,33],[523,4,522,4],[523,11,522,11,"dynamic"],[523,18,522,18],[523,19,522,19,"length"],[523,25,522,25],[523,30,522,30],[523,31,522,31],[523,34,522,34],[523,38,522,38],[523,41,522,41,"dynamic"],[523,48,522,48],[524,2,523,0],[525,2,524,0],[525,11,524,9,"appendSitemapRoute"],[525,29,524,27,"appendSitemapRoute"],[525,30,524,28,"directory"],[525,39,524,37],[525,41,524,39,"options"],[525,48,524,46],[525,50,524,48],[526,4,525,4],[526,8,525,8],[526,9,525,9,"directory"],[526,18,525,18],[526,19,525,19,"files"],[526,24,525,24],[526,25,525,25,"has"],[526,28,525,28],[526,29,525,29],[526,39,525,39],[526,40,525,40],[526,44,525,44,"options"],[526,51,525,51],[526,52,525,52,"getSystemRoute"],[526,66,525,66],[526,68,525,68],[527,6,526,8,"directory"],[527,15,526,17],[527,16,526,18,"files"],[527,21,526,23],[527,22,526,24,"set"],[527,25,526,27],[527,26,526,28],[527,36,526,38],[527,38,526,40],[527,39,527,12,"options"],[527,46,527,19],[527,47,527,20,"getSystemRoute"],[527,61,527,34],[527,62,527,35],[528,8,528,16,"type"],[528,12,528,20],[528,14,528,22],[528,21,528,29],[529,8,529,16,"route"],[529,13,529,21],[529,15,529,23],[530,6,530,12],[530,7,530,13],[530,8,530,14],[530,9,531,9],[530,10,531,10],[531,4,532,4],[532,2,533,0],[533,2,534,0],[533,11,534,9,"appendNotFoundRoute"],[533,30,534,28,"appendNotFoundRoute"],[533,31,534,29,"directory"],[533,40,534,38],[533,42,534,40,"options"],[533,49,534,47],[533,51,534,49],[534,4,535,4],[534,8,535,8],[534,9,535,9,"directory"],[534,18,535,18],[534,19,535,19,"files"],[534,24,535,24],[534,25,535,25,"has"],[534,28,535,28],[534,29,535,29],[534,41,535,41],[534,42,535,42],[534,46,535,46,"options"],[534,53,535,53],[534,54,535,54,"getSystemRoute"],[534,68,535,68],[534,70,535,70],[535,6,536,8,"directory"],[535,15,536,17],[535,16,536,18,"files"],[535,21,536,23],[535,22,536,24,"set"],[535,25,536,27],[535,26,536,28],[535,38,536,40],[535,40,536,42],[535,41,537,12,"options"],[535,48,537,19],[535,49,537,20,"getSystemRoute"],[535,63,537,34],[535,64,537,35],[536,8,538,16,"type"],[536,12,538,20],[536,14,538,22],[536,21,538,29],[537,8,539,16,"route"],[537,13,539,21],[537,15,539,23],[538,6,540,12],[538,7,540,13],[538,8,540,14],[538,9,541,9],[538,10,541,10],[539,4,542,4],[540,2,543,0],[541,2,544,0],[541,11,544,9,"getLayoutNode"],[541,24,544,22,"getLayoutNode"],[541,25,544,23,"node"],[541,29,544,27],[541,31,544,29,"options"],[541,38,544,36],[541,40,544,38],[542,4,545,4],[543,0,546,0],[544,0,547,0],[545,0,548,0],[546,4,549,4],[547,4,550,4],[547,8,550,10,"groupName"],[547,17,550,19],[547,20,550,22],[547,21,550,23],[547,22,550,24],[547,24,550,26,"matchers_1"],[547,34,550,36],[547,35,550,37,"matchLastGroupName"],[547,53,550,55],[547,55,550,57,"node"],[547,59,550,61],[547,60,550,62,"route"],[547,65,550,67],[547,66,550,68],[548,4,551,4],[548,8,551,10,"childMatchingGroup"],[548,26,551,28],[548,29,551,31,"node"],[548,33,551,35],[548,34,551,36,"children"],[548,42,551,44],[548,43,551,45,"find"],[548,47,551,49],[548,48,551,51,"child"],[548,53,551,56],[548,57,551,61],[549,6,552,8],[549,13,552,15,"child"],[549,18,552,20],[549,19,552,21,"route"],[549,24,552,26],[549,25,552,27,"replace"],[549,32,552,34],[549,33,552,35],[549,43,552,45],[549,45,552,47],[549,47,552,49],[549,48,552,50],[549,53,552,55,"groupName"],[549,62,552,64],[550,4,553,4],[550,5,553,5],[550,6,553,6],[551,4,554,4],[551,8,554,8,"anchor"],[551,14,554,14],[551,17,554,17,"childMatchingGroup"],[551,35,554,35],[551,37,554,37,"route"],[551,42,554,42],[552,4,555,4],[552,8,555,10,"loaded"],[552,14,555,16],[552,17,555,19,"node"],[552,21,555,23],[552,22,555,24,"loadRoute"],[552,31,555,33],[552,32,555,34],[552,33,555,35],[553,4,556,4],[553,8,556,8,"loaded"],[553,14,556,14],[553,16,556,16,"unstable_settings"],[553,33,556,33],[553,35,556,35],[554,6,557,8],[554,10,557,12],[555,8,558,12],[556,8,559,12,"anchor"],[556,14,559,18],[556,17,560,16,"loaded"],[556,23,560,22],[556,24,560,23,"unstable_settings"],[556,41,560,40],[556,42,560,41,"anchor"],[556,48,560,47],[556,52,560,51,"loaded"],[556,58,560,57],[556,59,560,58,"unstable_settings"],[556,76,560,75],[556,77,560,76,"initialRouteName"],[556,93,560,92],[556,97,560,96,"anchor"],[556,103,560,102],[557,6,561,8],[557,7,561,9],[557,8,562,8],[557,15,562,15,"error"],[557,20,562,20],[557,22,562,22],[558,8,563,12],[558,12,563,16,"error"],[558,17,563,21],[558,29,563,33,"Error"],[558,34,563,38],[558,36,563,40],[559,10,564,16],[559,14,564,20],[559,15,564,21,"error"],[559,20,564,26],[559,21,564,27,"message"],[559,28,564,34],[559,29,564,35,"match"],[559,34,564,40],[559,35,564,41],[559,72,564,78],[559,73,564,79],[559,75,564,81],[560,12,565,20],[560,18,565,26,"error"],[560,23,565,31],[561,10,566,16],[562,8,567,12],[563,6,568,8],[564,6,569,8],[564,10,569,12,"groupName"],[564,19,569,21],[564,21,569,23],[565,8,570,12],[566,8,571,12],[566,12,571,18,"groupSpecificInitialRouteName"],[566,41,571,47],[566,44,571,50,"loaded"],[566,50,571,56],[566,51,571,57,"unstable_settings"],[566,68,571,74],[566,71,571,77,"groupName"],[566,80,571,86],[566,81,571,87],[566,83,571,89,"anchor"],[566,89,571,95],[566,93,572,16,"loaded"],[566,99,572,22],[566,100,572,23,"unstable_settings"],[566,117,572,40],[566,120,572,43,"groupName"],[566,129,572,52],[566,130,572,53],[566,132,572,55,"initialRouteName"],[566,148,572,71],[567,8,573,12,"anchor"],[567,14,573,18],[567,17,573,21,"groupSpecificInitialRouteName"],[567,46,573,50],[567,50,573,54,"anchor"],[567,56,573,60],[568,6,574,8],[569,4,575,4],[570,4,576,4],[570,11,576,11],[571,6,577,8],[571,9,577,11,"node"],[571,13,577,15],[572,6,578,8,"route"],[572,11,578,13],[572,13,578,15,"node"],[572,17,578,19],[572,18,578,20,"route"],[572,23,578,25],[572,24,578,26,"replace"],[572,31,578,33],[572,32,578,34],[572,45,578,47],[572,47,578,49],[572,49,578,51],[572,50,578,52],[573,6,579,8,"children"],[573,14,579,16],[573,16,579,18],[573,18,579,20],[574,6,579,22],[575,6,580,8,"initialRouteName"],[575,22,580,24],[575,24,580,26,"anchor"],[576,4,581,4],[576,5,581,5],[577,2,582,0],[578,2,583,0],[578,11,583,9,"crawlAndAppendInitialRoutesAndEntryFiles"],[578,51,583,49,"crawlAndAppendInitialRoutesAndEntryFiles"],[578,52,583,50,"node"],[578,56,583,54],[578,58,583,56,"options"],[578,65,583,63],[578,67,583,83],[579,4,583,83],[579,8,583,65,"entryPoints"],[579,19,583,76],[579,22,583,76,"arguments"],[579,31,583,76],[579,32,583,76,"length"],[579,38,583,76],[579,46,583,76,"arguments"],[579,55,583,76],[579,63,583,76,"undefined"],[579,72,583,76],[579,75,583,76,"arguments"],[579,84,583,76],[579,90,583,79],[579,92,583,81],[580,4,584,4],[580,8,584,8,"node"],[580,12,584,12],[580,13,584,13,"type"],[580,17,584,17],[580,22,584,22],[580,29,584,29],[580,31,584,31],[581,6,585,8,"node"],[581,10,585,12],[581,11,585,13,"entryPoints"],[581,22,585,24],[581,25,585,27],[581,26,585,28],[581,29,585,31],[581,33,585,35,"Set"],[581,36,585,38],[581,37,585,39],[581,38,585,40],[581,41,585,43,"entryPoints"],[581,52,585,54],[581,54,585,56,"node"],[581,58,585,60],[581,59,585,61,"contextKey"],[581,69,585,71],[581,70,585,72],[581,71,585,73],[581,72,585,74],[582,4,586,4],[582,5,586,5],[582,11,587,9],[582,15,587,13,"node"],[582,19,587,17],[582,20,587,18,"type"],[582,24,587,22],[582,29,587,27],[582,39,587,37],[582,41,587,39],[583,6,588,8,"node"],[583,10,588,12],[583,11,588,13,"entryPoints"],[583,22,588,24],[583,25,588,27],[583,26,588,28],[583,29,588,31],[583,33,588,35,"Set"],[583,36,588,38],[583,37,588,39],[583,38,588,40],[583,41,588,43,"entryPoints"],[583,52,588,54],[583,54,588,56,"node"],[583,58,588,60],[583,59,588,61,"destinationContextKey"],[583,80,588,82],[583,81,588,83],[583,82,588,84],[583,83,588,85],[584,4,589,4],[584,5,589,5],[584,11,590,9],[584,15,590,13,"node"],[584,19,590,17],[584,20,590,18,"type"],[584,24,590,22],[584,29,590,27],[584,37,590,35],[584,39,590,37],[585,6,591,8],[585,10,591,12],[585,11,591,13,"node"],[585,15,591,17],[585,16,591,18,"children"],[585,24,591,26],[585,26,591,28],[586,8,592,12],[586,14,592,18],[586,18,592,22,"Error"],[586,23,592,27],[586,24,592,28],[586,35,592,39,"node"],[586,39,592,43],[586,40,592,44,"contextKey"],[586,50,592,54],[586,87,592,91],[586,88,592,92],[587,6,593,8],[588,6,594,8],[589,6,595,8,"entryPoints"],[589,17,595,19],[589,20,595,22],[589,21,595,23],[589,24,595,26,"entryPoints"],[589,35,595,37],[589,37,595,39,"node"],[589,41,595,43],[589,42,595,44,"contextKey"],[589,52,595,54],[589,53,595,55],[590,6,596,8],[591,0,597,0],[592,0,598,0],[593,0,599,0],[594,0,600,0],[595,0,601,0],[596,6,602,8],[596,10,602,14,"groupName"],[596,19,602,23],[596,22,602,26],[596,23,602,27],[596,24,602,28],[596,26,602,30,"matchers_1"],[596,36,602,40],[596,37,602,41,"matchGroupName"],[596,51,602,55],[596,53,602,57,"node"],[596,57,602,61],[596,58,602,62,"route"],[596,63,602,67],[596,64,602,68],[597,6,603,8],[597,10,603,14,"childMatchingGroup"],[597,28,603,32],[597,31,603,35,"node"],[597,35,603,39],[597,36,603,40,"children"],[597,44,603,48],[597,45,603,49,"find"],[597,49,603,53],[597,50,603,55,"child"],[597,55,603,60],[597,59,603,65],[598,8,604,12],[598,15,604,19,"child"],[598,20,604,24],[598,21,604,25,"route"],[598,26,604,30],[598,27,604,31,"replace"],[598,34,604,38],[598,35,604,39],[598,45,604,49],[598,47,604,51],[598,49,604,53],[598,50,604,54],[598,55,604,59,"groupName"],[598,64,604,68],[599,6,605,8],[599,7,605,9],[599,8,605,10],[600,6,606,8],[600,10,606,12,"anchor"],[600,16,606,18],[600,19,606,21,"childMatchingGroup"],[600,37,606,39],[600,39,606,41,"route"],[600,44,606,46],[601,6,607,8],[602,6,608,8],[602,10,608,12],[602,11,608,13,"options"],[602,18,608,20],[602,19,608,21,"internal_stripLoadRoute"],[602,42,608,44],[602,44,608,46],[603,8,609,12],[603,12,609,18,"loaded"],[603,18,609,24],[603,21,609,27,"node"],[603,25,609,31],[603,26,609,32,"loadRoute"],[603,35,609,41],[603,36,609,42],[603,37,609,43],[604,8,610,12],[604,12,610,16,"loaded"],[604,18,610,22],[604,20,610,24,"unstable_settings"],[604,37,610,41],[604,39,610,43],[605,10,611,16],[605,14,611,20],[606,12,612,20],[607,12,613,20,"anchor"],[607,18,613,26],[607,21,614,24,"loaded"],[607,27,614,30],[607,28,614,31,"unstable_settings"],[607,45,614,48],[607,46,614,49,"anchor"],[607,52,614,55],[607,56,614,59,"loaded"],[607,62,614,65],[607,63,614,66,"unstable_settings"],[607,80,614,83],[607,81,614,84,"initialRouteName"],[607,97,614,100],[607,101,614,104,"anchor"],[607,107,614,110],[608,10,615,16],[608,11,615,17],[608,12,616,16],[608,19,616,23,"error"],[608,24,616,28],[608,26,616,30],[609,12,617,20],[609,16,617,24,"error"],[609,21,617,29],[609,33,617,41,"Error"],[609,38,617,46],[609,40,617,48],[610,14,618,24],[610,18,618,28],[610,19,618,29,"error"],[610,24,618,34],[610,25,618,35,"message"],[610,32,618,42],[610,33,618,43,"match"],[610,38,618,48],[610,39,618,49],[610,76,618,86],[610,77,618,87],[610,79,618,89],[611,16,619,28],[611,22,619,34,"error"],[611,27,619,39],[612,14,620,24],[613,12,621,20],[614,10,622,16],[615,10,623,16],[615,14,623,20,"groupName"],[615,23,623,29],[615,25,623,31],[616,12,624,20],[617,12,625,20],[617,16,625,26,"groupSpecificInitialRouteName"],[617,45,625,55],[617,48,625,58,"loaded"],[617,54,625,64],[617,55,625,65,"unstable_settings"],[617,72,625,82],[617,75,625,85,"groupName"],[617,84,625,94],[617,85,625,95],[617,87,625,97,"anchor"],[617,93,625,103],[617,97,626,24,"loaded"],[617,103,626,30],[617,104,626,31,"unstable_settings"],[617,121,626,48],[617,124,626,51,"groupName"],[617,133,626,60],[617,134,626,61],[617,136,626,63,"initialRouteName"],[617,152,626,79],[618,12,627,20,"anchor"],[618,18,627,26],[618,21,627,29,"groupSpecificInitialRouteName"],[618,50,627,58],[618,54,627,62,"anchor"],[618,60,627,68],[619,10,628,16],[620,8,629,12],[621,6,630,8],[622,6,631,8],[622,10,631,12,"anchor"],[622,16,631,18],[622,18,631,20],[623,8,632,12],[623,12,632,18,"anchorRoute"],[623,23,632,29],[623,26,632,32,"node"],[623,30,632,36],[623,31,632,37,"children"],[623,39,632,45],[623,40,632,46,"find"],[623,44,632,50],[623,45,632,52,"child"],[623,50,632,57],[623,54,632,62,"child"],[623,59,632,67],[623,60,632,68,"route"],[623,65,632,73],[623,70,632,78,"anchor"],[623,76,632,84],[623,77,632,85],[624,8,633,12],[624,12,633,16],[624,13,633,17,"anchorRoute"],[624,24,633,28],[624,26,633,30],[625,10,634,16],[625,14,634,22,"validAnchorRoutes"],[625,31,634,39],[625,34,634,42,"node"],[625,38,634,46],[625,39,634,47,"children"],[625,47,634,55],[625,48,635,21,"filter"],[625,54,635,27],[625,55,635,29,"child"],[625,60,635,34],[625,64,635,39],[625,65,635,40,"child"],[625,70,635,45],[625,71,635,46,"generated"],[625,80,635,55],[625,81,635,56],[625,82,636,21,"map"],[625,85,636,24],[625,86,636,26,"child"],[625,91,636,31],[625,95,636,36],[625,99,636,40,"child"],[625,104,636,45],[625,105,636,46,"route"],[625,110,636,51],[625,113,636,54],[625,114,636,55],[625,115,637,21,"join"],[625,119,637,25],[625,120,637,26],[625,124,637,30],[625,125,637,31],[626,10,638,16],[626,14,638,20,"groupName"],[626,23,638,29],[626,25,638,31],[627,12,639,20],[627,18,639,26],[627,22,639,30,"Error"],[627,27,639,35],[627,28,639,36],[627,38,639,46,"node"],[627,42,639,50],[627,43,639,51,"contextKey"],[627,53,639,61],[627,77,639,85,"anchor"],[627,83,639,91],[627,100,639,108,"groupName"],[627,109,639,117],[627,135,639,143,"validAnchorRoutes"],[627,152,639,160],[627,154,639,162],[627,155,639,163],[628,10,640,16],[628,11,640,17],[628,17,641,21],[629,12,642,20],[629,18,642,26],[629,22,642,30,"Error"],[629,27,642,35],[629,28,642,36],[629,38,642,46,"node"],[629,42,642,50],[629,43,642,51,"contextKey"],[629,53,642,61],[629,77,642,85,"anchor"],[629,83,642,91],[629,108,642,116,"validAnchorRoutes"],[629,125,642,133],[629,127,642,135],[629,128,642,136],[630,10,643,16],[631,8,644,12],[632,8,645,12],[633,8,646,12,"node"],[633,12,646,16],[633,13,646,17,"initialRouteName"],[633,29,646,33],[633,32,646,36,"anchor"],[633,38,646,42],[634,8,647,12,"entryPoints"],[634,19,647,23],[634,20,647,24,"push"],[634,24,647,28],[634,25,647,29,"anchorRoute"],[634,36,647,40],[634,37,647,41,"contextKey"],[634,47,647,51],[634,48,647,52],[635,6,648,8],[636,6,649,8],[636,11,649,13],[636,15,649,19,"child"],[636,20,649,24],[636,24,649,28,"node"],[636,28,649,32],[636,29,649,33,"children"],[636,37,649,41],[636,39,649,43],[637,8,650,12,"crawlAndAppendInitialRoutesAndEntryFiles"],[637,48,650,52],[637,49,650,53,"child"],[637,54,650,58],[637,56,650,60,"options"],[637,63,650,67],[637,65,650,69,"entryPoints"],[637,76,650,80],[637,77,650,81],[638,6,651,8],[639,4,652,4],[640,2,653,0],[641,2,654,0],[641,11,654,9,"getMostSpecific"],[641,26,654,24,"getMostSpecific"],[641,27,654,25,"routes"],[641,33,654,31],[641,35,654,33],[642,4,655,4],[642,8,655,10,"route"],[642,13,655,15],[642,16,655,18,"routes"],[642,22,655,24],[642,23,655,25,"routes"],[642,29,655,31],[642,30,655,32,"length"],[642,36,655,38],[642,39,655,41],[642,40,655,42],[642,41,655,43],[643,4,656,4],[643,8,656,8],[643,9,656,9,"routes"],[643,15,656,15],[643,16,656,16],[643,17,656,17],[643,18,656,18],[643,20,656,20],[644,6,657,8],[644,12,657,14],[644,16,657,18,"Error"],[644,21,657,23],[644,22,657,24],[644,34,657,36,"route"],[644,39,657,41],[644,40,657,42,"contextKey"],[644,50,657,52],[644,120,657,122],[644,121,657,123],[645,4,658,4],[646,4,659,4],[647,4,660,4],[648,4,661,4],[648,11,661,11,"routes"],[648,17,661,17],[648,18,661,18,"routes"],[648,24,661,24],[648,25,661,25,"length"],[648,31,661,31],[648,34,661,34],[648,35,661,35],[648,36,661,36],[649,2,662,0],[650,0,662,1],[650,3]],"functionMap":{"names":["<global>","getRoutes","getDirectoryTree","getValidDestinations","contextKeys.map$argument_0","ignoreList.some$argument_0","getValidDestinations.find$argument_0","node.loadRoute","getNameFromRedirectPath","getNameWithoutInvisibleSegmentsFromRedirectPath","getSourceContextKeyFromRedirectSource","flattenDirectoryTreeToRoutes","getFileMeta","extrapolateGroups","generateDynamic","path.split.map$argument_0","path.split.map.filter$argument_0","appendSitemapRoute","appendNotFoundRoute","getLayoutNode","node.children.find$argument_0","crawlAndAppendInitialRoutesAndEntryFiles","node.children.filter$argument_0","node.children.filter.map$argument_0","getMostSpecific"],"mappings":"AAA;ACoB;CDW;AEI;iCCmB;sDCE;SDK;KDE;oCGY,uCH;kDIK,2DJ;oCGmC,uCH;qEIG,2DJ;4BG2B,+BH;YKW;aL+B;CF8K;AQC;CRK;ASC;CTE;AUE;CVK;AWI;CX2C;AYC;CZwD;AaM;CbmB;AcC;aCG;KDS;gBEC,gBF;CdE;AiBC;CjBS;AkBC;ClBS;AmBC;kDCO;KDE;CnB6B;AqBC;sDDoB;SCE;mDD2B,iCC;4BCG,2BD;yBEC,6BF;CrBiB;AwBC;CxBQ"},"hasCjsExports":true},"type":"js/module"}]}