{"dependencies":[{"name":"@babel/runtime/helpers/objectWithoutPropertiesLoose","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"HFkXuFcBAqfzGtqyPj8g62MKT0M=","exportNames":["*"],"imports":1}},{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":40,"column":17,"index":1637},"end":{"line":40,"column":52,"index":1672}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"],"imports":1}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":47,"index":1721},"end":{"line":41,"column":78,"index":1752}}],"key":"14QBo/6I2jfYu7Ct29OWBvp5ENM=","exportNames":["*"],"imports":1}},{"name":"./findFocusedRoute","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":42,"column":27,"index":1782},"end":{"line":42,"column":56,"index":1811}}],"key":"JPe8xQMI59bnv97OB8syZ4AgEvA=","exportNames":["*"],"imports":1}},{"name":"./getStateFromPath-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":43,"column":26,"index":1839},"end":{"line":43,"column":61,"index":1874}}],"key":"R0kZl7h5DI+/CZCR2+pJK8wn5iY=","exportNames":["*"],"imports":1}},{"name":"../constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":44,"column":20,"index":1897},"end":{"line":44,"column":43,"index":1920}}],"key":"zmjjtqoQxi2W71eIMIIaEi1mOpU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _objectWithoutPropertiesLoose = require(_dependencyMap[0], \"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\n  const _excluded = [\"path\"];\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var ownKeys = function (o) {\n      ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = getStateFromPath;\n  const native_1 = require(_dependencyMap[1], \"@react-navigation/native\");\n  const escape_string_regexp_1 = __importDefault(require(_dependencyMap[2], \"escape-string-regexp\"));\n  const findFocusedRoute_1 = require(_dependencyMap[3], \"./findFocusedRoute\");\n  const expo = __importStar(require(_dependencyMap[4], \"./getStateFromPath-forks\"));\n  const constants_1 = require(_dependencyMap[5], \"../constants\");\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options,\n  // START FORK\n  segments = []\n  // END FORK\n  ) {\n    const {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    } = getConfigResources(options,\n    // START FORK\n    segments\n    // END FORK\n    );\n    const screens = options?.screens;\n    // START FORK\n    const expoPath = expo.getUrlWithReactNavigationConcessions(path);\n    // END FORK\n    // START FORK\n    let remaining = expo.cleanPath(expoPath.nonstandardPathname);\n    // let remaining = path\n    //   .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    //   .replace(/^\\//, '') // Remove extra leading slash\n    //   .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n    // // Make sure there is a trailing slash\n    // remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    // END FORK\n    const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n    if (prefix) {\n      // Make sure there is a trailing slash\n      const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      const routes = remaining.split('/').filter(Boolean).map(segment => {\n        const name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (routes.length) {\n        return createNestedStateObject(expoPath, routes, initialRoutes, [], expoPath.url.hash);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      // START FORK\n      const match = expo.matchForEmptyPath(configWithRegexes);\n      // const match = configs.find(\n      //   (config) =>\n      //     config.path === '' &&\n      //     config.routeNames.every(\n      //       // Make sure that none of the parent configs have a non-empty path defined\n      //       (name) => !configs.find((c) => c.screen === name)?.path\n      //     )\n      // );\n      // END FORK\n      if (match) {\n        return createNestedStateObject(expoPath, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs, expoPath.url.hash);\n      }\n      return undefined;\n    }\n    let result;\n    let current;\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const {\n      routes,\n      remainingPath\n    } = matchAgainstConfigs(remaining, configWithRegexes);\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(expoPath, routes, initialRoutes, configs, expoPath.url.hash);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  let cachedConfigResources = [undefined, prepareConfigResources()];\n  function getConfigResources(options,\n  // START FORK\n  previousSegments\n  // END FORK\n  ) {\n    // START FORK - We need to disable this caching as our configs can change based upon the current state\n    // if (cachedConfigResources[0] !== options) {\n    cachedConfigResources = [options, prepareConfigResources(options, previousSegments)];\n    // }\n    // END FORK FORK\n    return cachedConfigResources[1];\n  }\n  function prepareConfigResources(options, previousSegments) {\n    if (options) {\n      (0, native_1.validatePathConfig)(options);\n    }\n    const initialRoutes = getInitialRoutes(options);\n    const configs = getNormalizedConfigs(initialRoutes, options?.screens, previousSegments);\n    checkForDuplicatedConfigs(configs);\n    const configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    const initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getNormalizedConfigs(initialRoutes, screens = {},\n  // START FORK\n  previousSegments\n  // END FORK\n  ) {\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).map(expo.appendIsInitial(initialRoutes)).sort(expo.getRouteConfigSorter(previousSegments));\n    // .sort((a, b) => {\n    //   // Sort config so that:\n    //   // - the most exhaustive ones are always at the beginning\n    //   // - patterns with wildcard are always at the end\n    //   // If 2 patterns are same, move the one with less route names up\n    //   // This is an error state, so it's only useful for consistent error messages\n    //   if (a.pattern === b.pattern) {\n    //     return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    //   }\n    //   // If one of the patterns starts with the other, it's more exhaustive\n    //   // So move it up\n    //   if (a.pattern.startsWith(b.pattern)) {\n    //     return -1;\n    //   }\n    //   if (b.pattern.startsWith(a.pattern)) {\n    //     return 1;\n    //   }\n    //   const aParts = a.pattern.split('/');\n    //   const bParts = b.pattern.split('/');\n    //   for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n    //     // if b is longer, b get higher priority\n    //     if (aParts[i] == null) {\n    //       return 1;\n    //     }\n    //     // if a is longer, a get higher priority\n    //     if (bParts[i] == null) {\n    //       return -1;\n    //     }\n    //     const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n    //     const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n    //     // if both are wildcard we compare next component\n    //     if (aWildCard && bWildCard) {\n    //       continue;\n    //     }\n    //     // if only a is wild card, b get higher priority\n    //     if (aWildCard) {\n    //       return 1;\n    //     }\n    //     // if only b is wild card, a get higher priority\n    //     if (bWildCard) {\n    //       return -1;\n    //     }\n    //   }\n    //   return bParts.length - aParts.length;\n    // });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      if (acc[config.pattern]) {\n        const a = acc[config.pattern].routeNames;\n        const b = config.routeNames;\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [config.pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => Object.assign({}, c, {\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      // START FORK\n      // regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      regex: expo.configRegExp(c)\n      // END FORK\n    }));\n  }\n  const joinPaths = (...paths) => [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  const matchAgainstConfigs = (remaining, configs) => {\n    let routes;\n    let remainingPath = remaining;\n    // START FORK\n    const allParams = Object.create(null);\n    // END FORK\n    // Go through all configs, and see if the next path segment matches our regex\n    for (const config of configs) {\n      if (!config.regex) {\n        continue;\n      }\n      const match = remainingPath.match(config.regex);\n      // If our regex matches, we need to extract params from the path\n      if (match) {\n        const matchResult = config.pattern?.split('/').reduce((acc, p, index) => {\n          if (!expo.isDynamicPart(p)) {\n            return acc;\n          }\n          acc.pos += 1;\n          // START FORK\n          const decodedParamSegment = expo.safelyDecodeURIComponent(\n          // const decodedParamSegment = decodeURIComponent(\n          // The param segments appear every second item starting from 2 in the regex match result\n          match[(acc.pos + 1) * 2]\n          // Remove trailing slash\n          .replace(/\\/$/, ''));\n          // END FORK\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment\n            })\n          });\n          return acc;\n        }, {\n          pos: -1,\n          matchedParams: {}\n        });\n        const matchedParams = matchResult.matchedParams || {};\n        routes = config.routeNames.map(name => {\n          const routeConfig = configs.find(c => {\n            // Check matching name AND pattern in case same screen is used at different levels in config\n            return c.screen === name && config.pattern.startsWith(c.pattern);\n          });\n          // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n          const normalizedPath = routeConfig?.path.split('/').filter(Boolean).join('/');\n          // Get the number of segments in the initial pattern\n          const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${(0, escape_string_regexp_1.default)(normalizedPath)}$`), '')?.split('/').length;\n          const params = normalizedPath?.split('/').reduce((acc, p, index) => {\n            if (!expo.isDynamicPart(p)) {\n              return acc;\n            }\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            // START FORK\n            // const value = matchedParams[p]?.[index + offset];\n            const value = expo.getParamValue(p, matchedParams[p]?.[index + offset]);\n            // END FORK\n            if (value) {\n              // START FORK\n              // const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              const key = expo.replacePart(p);\n              // END FORK\n              acc[key] = routeConfig?.parse?.[key] ? routeConfig.parse[key](value) : value;\n            }\n            return acc;\n          }, {});\n          if (params && Object.keys(params).length) {\n            Object.assign(allParams, params);\n            return {\n              name,\n              params\n            };\n          }\n          return {\n            name\n          };\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        break;\n      }\n    }\n    // START FORK\n    expo.populateParams(routes, allParams);\n    // END FORK\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  const createNormalizedConfigs = (screen, routeConfig, routeNames = [], initials, parentScreens, parentPattern) => {\n    const configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    // @ts-expect-error: TODO(@kitten): This is entirely untyped. The index access just flags this, but we're not typing the config properly here\n    const config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      let pattern;\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        if (screen !== constants_1.INTERNAL_SLOT_NAME) {\n          configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse, config));\n        }\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], pattern ?? parentPattern);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  const createConfigItem = (screen, routeNames, pattern, path, parse = undefined, config = {}) => {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    // START FORK\n    const regex = pattern ? expo.routePatternToRegex(pattern) : undefined;\n    // const regex = pattern\n    //   ? new RegExp(\n    //       `^(${pattern\n    //         .split('/')\n    //         .map((it) => {\n    //           if (it.startsWith(':')) {\n    //             return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    //           }\n    //           return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n    //         })\n    //         .join('')})`\n    //     )\n    //   : undefined;\n    // END FORK\n    return Object.assign({\n      screen,\n      regex,\n      pattern,\n      path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: [...routeNames],\n      parse\n    }, expo.createConfig(screen, pattern, routeNames, config));\n  };\n  const findParseConfigForRoute = (routeName, flatConfig) => {\n    for (const config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n  // Try to find an initial route connected with the one passed\n  const findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (const config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        let sameParents = true;\n        for (let i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  const createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      } else {\n        return {\n          routes: [Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      }\n    }\n  };\n  const createNestedStateObject = (_ref, routes, initialRoutes, flatConfig, hash) => {\n    let {\n        path\n      } = _ref,\n      expoURL = _objectWithoutPropertiesLoose(_ref, _excluded);\n    let route = routes.shift();\n    const parentScreens = [];\n    let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    const state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      let nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, findFocusedRoute_1.findFocusedRoute)(state);\n    // START FORK\n    route.path = expoURL.pathWithoutGroups;\n    // route.path = path;\n    // END FORK\n    // START FORK\n    // const params = parseQueryParams(\n    const params = expo.parseQueryParams(path, route, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined, hash);\n    // END FORK\n    // START FORK\n    // expo.handleUrlParams(route, params, hash);\n    if (params) {\n      route.params = Object.assign({}, route.params, params);\n    }\n    // END FORK\n    return state;\n  };\n  // START FORK\n  // const parseQueryParams = (path: string, parseConfig?: Record<string, (value: string) => any>) => {\n  //   const query = path.split('?')[1];\n  //   const params = queryString.parse(query);\n  //   if (parseConfig) {\n  //     Object.keys(params).forEach((name) => {\n  //       if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n  //         params[name] = parseConfig[name](params[name] as string);\n  //       }\n  //     });\n  //   }\n  //   return Object.keys(params).length ? params : undefined;\n  // };\n  // END FORK\n});","lineCount":576,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_objectWithoutPropertiesLoose"],[4,35,1,13],[4,38,1,13,"require"],[4,45,1,13],[4,46,1,13,"_dependencyMap"],[4,60,1,13],[5,2,1,13],[5,8,1,13,"_excluded"],[5,17,1,13],[6,2,2,0],[6,6,2,4,"__createBinding"],[6,21,2,19],[6,24,2,23],[6,28,2,27],[6,32,2,31],[6,36,2,35],[6,37,2,36,"__createBinding"],[6,52,2,51],[6,57,2,57,"Object"],[6,63,2,63],[6,64,2,64,"create"],[6,70,2,70],[6,73,2,74],[6,83,2,83,"o"],[6,84,2,84],[6,86,2,86,"m"],[6,87,2,87],[6,89,2,89,"k"],[6,90,2,90],[6,92,2,92,"k2"],[6,94,2,94],[6,96,2,96],[7,4,3,4],[7,8,3,8,"k2"],[7,10,3,10],[7,15,3,15,"undefined"],[7,24,3,24],[7,26,3,26,"k2"],[7,28,3,28],[7,31,3,31,"k"],[7,32,3,32],[8,4,4,4],[8,8,4,8,"desc"],[8,12,4,12],[8,15,4,15,"Object"],[8,21,4,21],[8,22,4,22,"getOwnPropertyDescriptor"],[8,46,4,46],[8,47,4,47,"m"],[8,48,4,48],[8,50,4,50,"k"],[8,51,4,51],[8,52,4,52],[9,4,5,4],[9,8,5,8],[9,9,5,9,"desc"],[9,13,5,13],[9,18,5,18],[9,23,5,23],[9,27,5,27,"desc"],[9,31,5,31],[9,34,5,34],[9,35,5,35,"m"],[9,36,5,36],[9,37,5,37,"__esModule"],[9,47,5,47],[9,50,5,50,"desc"],[9,54,5,54],[9,55,5,55,"writable"],[9,63,5,63],[9,67,5,67,"desc"],[9,71,5,71],[9,72,5,72,"configurable"],[9,84,5,84],[9,85,5,85],[9,87,5,87],[10,6,6,6,"desc"],[10,10,6,10],[10,13,6,13],[11,8,6,15,"enumerable"],[11,18,6,25],[11,20,6,27],[11,24,6,31],[12,8,6,33,"get"],[12,11,6,36],[12,13,6,38],[12,22,6,38,"get"],[12,23,6,38],[12,25,6,49],[13,10,6,51],[13,17,6,58,"m"],[13,18,6,59],[13,19,6,60,"k"],[13,20,6,61],[13,21,6,62],[14,8,6,64],[15,6,6,66],[15,7,6,67],[16,4,7,4],[17,4,8,4,"Object"],[17,10,8,10],[17,11,8,11,"defineProperty"],[17,25,8,25],[17,26,8,26,"o"],[17,27,8,27],[17,29,8,29,"k2"],[17,31,8,31],[17,33,8,33,"desc"],[17,37,8,37],[17,38,8,38],[18,2,9,0],[18,3,9,1],[18,6,9,6],[18,16,9,15,"o"],[18,17,9,16],[18,19,9,18,"m"],[18,20,9,19],[18,22,9,21,"k"],[18,23,9,22],[18,25,9,24,"k2"],[18,27,9,26],[18,29,9,28],[19,4,10,4],[19,8,10,8,"k2"],[19,10,10,10],[19,15,10,15,"undefined"],[19,24,10,24],[19,26,10,26,"k2"],[19,28,10,28],[19,31,10,31,"k"],[19,32,10,32],[20,4,11,4,"o"],[20,5,11,5],[20,6,11,6,"k2"],[20,8,11,8],[20,9,11,9],[20,12,11,12,"m"],[20,13,11,13],[20,14,11,14,"k"],[20,15,11,15],[20,16,11,16],[21,2,12,0],[21,3,12,2],[21,4,12,3],[22,2,13,0],[22,6,13,4,"__setModuleDefault"],[22,24,13,22],[22,27,13,26],[22,31,13,30],[22,35,13,34],[22,39,13,38],[22,40,13,39,"__setModuleDefault"],[22,58,13,57],[22,63,13,63,"Object"],[22,69,13,69],[22,70,13,70,"create"],[22,76,13,76],[22,79,13,80],[22,89,13,89,"o"],[22,90,13,90],[22,92,13,92,"v"],[22,93,13,93],[22,95,13,95],[23,4,14,4,"Object"],[23,10,14,10],[23,11,14,11,"defineProperty"],[23,25,14,25],[23,26,14,26,"o"],[23,27,14,27],[23,29,14,29],[23,38,14,38],[23,40,14,40],[24,6,14,42,"enumerable"],[24,16,14,52],[24,18,14,54],[24,22,14,58],[25,6,14,60,"value"],[25,11,14,65],[25,13,14,67,"v"],[26,4,14,69],[26,5,14,70],[26,6,14,71],[27,2,15,0],[27,3,15,1],[27,6,15,5],[27,16,15,14,"o"],[27,17,15,15],[27,19,15,17,"v"],[27,20,15,18],[27,22,15,20],[28,4,16,4,"o"],[28,5,16,5],[28,6,16,6],[28,15,16,15],[28,16,16,16],[28,19,16,19,"v"],[28,20,16,20],[29,2,17,0],[29,3,17,1],[29,4,17,2],[30,2,18,0],[30,6,18,4,"__importStar"],[30,18,18,16],[30,21,18,20],[30,25,18,24],[30,29,18,28],[30,33,18,32],[30,34,18,33,"__importStar"],[30,46,18,45],[30,50,18,51],[30,62,18,63],[31,4,19,4],[31,8,19,8,"ownKeys"],[31,15,19,15],[31,18,19,18],[31,27,19,18,"ownKeys"],[31,28,19,27,"o"],[31,29,19,28],[31,31,19,30],[32,6,20,8,"ownKeys"],[32,13,20,15],[32,16,20,18,"Object"],[32,22,20,24],[32,23,20,25,"getOwnPropertyNames"],[32,42,20,44],[32,46,20,48],[32,56,20,58,"o"],[32,57,20,59],[32,59,20,61],[33,8,21,12],[33,12,21,16,"ar"],[33,14,21,18],[33,17,21,21],[33,19,21,23],[34,8,22,12],[34,13,22,17],[34,17,22,21,"k"],[34,18,22,22],[34,22,22,26,"o"],[34,23,22,27],[34,25,22,29],[34,29,22,33,"Object"],[34,35,22,39],[34,36,22,40,"prototype"],[34,45,22,49],[34,46,22,50,"hasOwnProperty"],[34,60,22,64],[34,61,22,65,"call"],[34,65,22,69],[34,66,22,70,"o"],[34,67,22,71],[34,69,22,73,"k"],[34,70,22,74],[34,71,22,75],[34,73,22,77,"ar"],[34,75,22,79],[34,76,22,80,"ar"],[34,78,22,82],[34,79,22,83,"length"],[34,85,22,89],[34,86,22,90],[34,89,22,93,"k"],[34,90,22,94],[35,8,23,12],[35,15,23,19,"ar"],[35,17,23,21],[36,6,24,8],[36,7,24,9],[37,6,25,8],[37,13,25,15,"ownKeys"],[37,20,25,22],[37,21,25,23,"o"],[37,22,25,24],[37,23,25,25],[38,4,26,4],[38,5,26,5],[39,4,27,4],[39,11,27,11],[39,21,27,21,"mod"],[39,24,27,24],[39,26,27,26],[40,6,28,8],[40,10,28,12,"mod"],[40,13,28,15],[40,17,28,19,"mod"],[40,20,28,22],[40,21,28,23,"__esModule"],[40,31,28,33],[40,33,28,35],[40,40,28,42,"mod"],[40,43,28,45],[41,6,29,8],[41,10,29,12,"result"],[41,16,29,18],[41,19,29,21],[41,20,29,22],[41,21,29,23],[42,6,30,8],[42,10,30,12,"mod"],[42,13,30,15],[42,17,30,19],[42,21,30,23],[42,23,30,25],[42,28,30,30],[42,32,30,34,"k"],[42,33,30,35],[42,36,30,38,"ownKeys"],[42,43,30,45],[42,44,30,46,"mod"],[42,47,30,49],[42,48,30,50],[42,50,30,52,"i"],[42,51,30,53],[42,54,30,56],[42,55,30,57],[42,57,30,59,"i"],[42,58,30,60],[42,61,30,63,"k"],[42,62,30,64],[42,63,30,65,"length"],[42,69,30,71],[42,71,30,73,"i"],[42,72,30,74],[42,74,30,76],[42,76,30,78],[42,80,30,82,"k"],[42,81,30,83],[42,82,30,84,"i"],[42,83,30,85],[42,84,30,86],[42,89,30,91],[42,98,30,100],[42,100,30,102,"__createBinding"],[42,115,30,117],[42,116,30,118,"result"],[42,122,30,124],[42,124,30,126,"mod"],[42,127,30,129],[42,129,30,131,"k"],[42,130,30,132],[42,131,30,133,"i"],[42,132,30,134],[42,133,30,135],[42,134,30,136],[43,6,31,8,"__setModuleDefault"],[43,24,31,26],[43,25,31,27,"result"],[43,31,31,33],[43,33,31,35,"mod"],[43,36,31,38],[43,37,31,39],[44,6,32,8],[44,13,32,15,"result"],[44,19,32,21],[45,4,33,4],[45,5,33,5],[46,2,34,0],[46,3,34,1],[46,4,34,3],[46,5,34,4],[47,2,35,0],[47,6,35,4,"__importDefault"],[47,21,35,19],[47,24,35,23],[47,28,35,27],[47,32,35,31],[47,36,35,35],[47,37,35,36,"__importDefault"],[47,52,35,51],[47,56,35,56],[47,66,35,66,"mod"],[47,69,35,69],[47,71,35,71],[48,4,36,4],[48,11,36,12,"mod"],[48,14,36,15],[48,18,36,19,"mod"],[48,21,36,22],[48,22,36,23,"__esModule"],[48,32,36,33],[48,35,36,37,"mod"],[48,38,36,40],[48,41,36,43],[49,6,36,45],[49,15,36,54],[49,17,36,56,"mod"],[50,4,36,60],[50,5,36,61],[51,2,37,0],[51,3,37,1],[52,2,38,0,"Object"],[52,8,38,6],[52,9,38,7,"defineProperty"],[52,23,38,21],[52,24,38,22,"exports"],[52,31,38,29],[52,33,38,31],[52,45,38,43],[52,47,38,45],[53,4,38,47,"value"],[53,9,38,52],[53,11,38,54],[54,2,38,59],[54,3,38,60],[54,4,38,61],[55,2,39,0,"exports"],[55,9,39,7],[55,10,39,8,"getStateFromPath"],[55,26,39,24],[55,29,39,27,"getStateFromPath"],[55,45,39,43],[56,2,40,0],[56,8,40,6,"native_1"],[56,16,40,14],[56,19,40,17,"require"],[56,26,40,24],[56,27,40,24,"_dependencyMap"],[56,41,40,24],[56,72,40,51],[56,73,40,52],[57,2,41,0],[57,8,41,6,"escape_string_regexp_1"],[57,30,41,28],[57,33,41,31,"__importDefault"],[57,48,41,46],[57,49,41,47,"require"],[57,56,41,54],[57,57,41,54,"_dependencyMap"],[57,71,41,54],[57,98,41,77],[57,99,41,78],[57,100,41,79],[58,2,42,0],[58,8,42,6,"findFocusedRoute_1"],[58,26,42,24],[58,29,42,27,"require"],[58,36,42,34],[58,37,42,34,"_dependencyMap"],[58,51,42,34],[58,76,42,55],[58,77,42,56],[59,2,43,0],[59,8,43,6,"expo"],[59,12,43,10],[59,15,43,13,"__importStar"],[59,27,43,25],[59,28,43,26,"require"],[59,35,43,33],[59,36,43,33,"_dependencyMap"],[59,50,43,33],[59,81,43,60],[59,82,43,61],[59,83,43,62],[60,2,44,0],[60,8,44,6,"constants_1"],[60,19,44,17],[60,22,44,20,"require"],[60,29,44,27],[60,30,44,27,"_dependencyMap"],[60,44,44,27],[60,63,44,42],[60,64,44,43],[61,2,45,0],[62,0,46,0],[63,0,47,0],[64,0,48,0],[65,0,49,0],[66,0,50,0],[67,0,51,0],[68,0,52,0],[69,0,53,0],[70,0,54,0],[71,0,55,0],[72,0,56,0],[73,0,57,0],[74,0,58,0],[75,0,59,0],[76,0,60,0],[77,0,61,0],[78,0,62,0],[79,0,63,0],[80,0,64,0],[81,0,65,0],[82,2,66,0],[82,11,66,9,"getStateFromPath"],[82,27,66,25,"getStateFromPath"],[82,28,66,26,"path"],[82,32,66,30],[82,34,66,32,"options"],[82,41,66,39],[83,2,67,0],[84,2,68,0,"segments"],[84,10,68,8],[84,13,68,11],[85,2,69,0],[86,2,69,0],[86,4,70,2],[87,4,71,4],[87,10,71,10],[88,6,71,12,"initialRoutes"],[88,19,71,25],[89,6,71,27,"configs"],[89,13,71,34],[90,6,71,36,"configWithRegexes"],[91,4,71,54],[91,5,71,55],[91,8,71,58,"getConfigResources"],[91,26,71,76],[91,27,71,77,"options"],[91,34,71,84],[92,4,72,4],[93,4,73,4,"segments"],[94,4,74,4],[95,4,75,4],[95,5,75,5],[96,4,76,4],[96,10,76,10,"screens"],[96,17,76,17],[96,20,76,20,"options"],[96,27,76,27],[96,29,76,29,"screens"],[96,36,76,36],[97,4,77,4],[98,4,78,4],[98,10,78,10,"expoPath"],[98,18,78,18],[98,21,78,21,"expo"],[98,25,78,25],[98,26,78,26,"getUrlWithReactNavigationConcessions"],[98,62,78,62],[98,63,78,63,"path"],[98,67,78,67],[98,68,78,68],[99,4,79,4],[100,4,80,4],[101,4,81,4],[101,8,81,8,"remaining"],[101,17,81,17],[101,20,81,20,"expo"],[101,24,81,24],[101,25,81,25,"cleanPath"],[101,34,81,34],[101,35,81,35,"expoPath"],[101,43,81,43],[101,44,81,44,"nonstandardPathname"],[101,63,81,63],[101,64,81,64],[102,4,82,4],[103,4,83,4],[104,4,84,4],[105,4,85,4],[106,4,86,4],[107,4,87,4],[108,4,88,4],[109,4,89,4],[109,10,89,10,"prefix"],[109,16,89,16],[109,19,89,19,"options"],[109,26,89,26],[109,28,89,28,"path"],[109,32,89,32],[109,34,89,34,"replace"],[109,41,89,41],[109,42,89,42],[109,47,89,47],[109,49,89,49],[109,51,89,51],[109,52,89,52],[109,53,89,53],[109,54,89,54],[110,4,90,4],[110,8,90,8,"prefix"],[110,14,90,14],[110,16,90,16],[111,6,91,8],[112,6,92,8],[112,12,92,14,"normalizedPrefix"],[112,28,92,30],[112,31,92,33,"prefix"],[112,37,92,39],[112,38,92,40,"endsWith"],[112,46,92,48],[112,47,92,49],[112,50,92,52],[112,51,92,53],[112,54,92,56,"prefix"],[112,60,92,62],[112,63,92,65],[112,66,92,68,"prefix"],[112,72,92,74],[112,75,92,77],[113,6,93,8],[114,6,94,8],[114,10,94,12],[114,11,94,13,"remaining"],[114,20,94,22],[114,21,94,23,"startsWith"],[114,31,94,33],[114,32,94,34,"normalizedPrefix"],[114,48,94,50],[114,49,94,51],[114,51,94,53],[115,8,95,12],[115,15,95,19,"undefined"],[115,24,95,28],[116,6,96,8],[117,6,97,8],[118,6,98,8,"remaining"],[118,15,98,17],[118,18,98,20,"remaining"],[118,27,98,29],[118,28,98,30,"replace"],[118,35,98,37],[118,36,98,38,"normalizedPrefix"],[118,52,98,54],[118,54,98,56],[118,56,98,58],[118,57,98,59],[119,4,99,4],[120,4,100,4],[120,8,100,8,"screens"],[120,15,100,15],[120,20,100,20,"undefined"],[120,29,100,29],[120,31,100,31],[121,6,101,8],[122,6,102,8],[122,12,102,14,"routes"],[122,18,102,20],[122,21,102,23,"remaining"],[122,30,102,32],[122,31,103,13,"split"],[122,36,103,18],[122,37,103,19],[122,40,103,22],[122,41,103,23],[122,42,104,13,"filter"],[122,48,104,19],[122,49,104,20,"Boolean"],[122,56,104,27],[122,57,104,28],[122,58,105,13,"map"],[122,61,105,16],[122,62,105,18,"segment"],[122,69,105,25],[122,73,105,30],[123,8,106,12],[123,14,106,18,"name"],[123,18,106,22],[123,21,106,25,"decodeURIComponent"],[123,39,106,43],[123,40,106,44,"segment"],[123,47,106,51],[123,48,106,52],[124,8,107,12],[124,15,107,19],[125,10,107,21,"name"],[126,8,107,26],[126,9,107,27],[127,6,108,8],[127,7,108,9],[127,8,108,10],[128,6,109,8],[128,10,109,12,"routes"],[128,16,109,18],[128,17,109,19,"length"],[128,23,109,25],[128,25,109,27],[129,8,110,12],[129,15,110,19,"createNestedStateObject"],[129,38,110,42],[129,39,110,43,"expoPath"],[129,47,110,51],[129,49,110,53,"routes"],[129,55,110,59],[129,57,110,61,"initialRoutes"],[129,70,110,74],[129,72,110,76],[129,74,110,78],[129,76,110,80,"expoPath"],[129,84,110,88],[129,85,110,89,"url"],[129,88,110,92],[129,89,110,93,"hash"],[129,93,110,97],[129,94,110,98],[130,6,111,8],[131,6,112,8],[131,13,112,15,"undefined"],[131,22,112,24],[132,4,113,4],[133,4,114,4],[133,8,114,8,"remaining"],[133,17,114,17],[133,22,114,22],[133,25,114,25],[133,27,114,27],[134,6,115,8],[135,6,116,8],[136,6,117,8],[137,6,118,8],[137,12,118,14,"match"],[137,17,118,19],[137,20,118,22,"expo"],[137,24,118,26],[137,25,118,27,"matchForEmptyPath"],[137,42,118,44],[137,43,118,45,"configWithRegexes"],[137,60,118,62],[137,61,118,63],[138,6,119,8],[139,6,120,8],[140,6,121,8],[141,6,122,8],[142,6,123,8],[143,6,124,8],[144,6,125,8],[145,6,126,8],[146,6,127,8],[147,6,128,8],[147,10,128,12,"match"],[147,15,128,17],[147,17,128,19],[148,8,129,12],[148,15,129,19,"createNestedStateObject"],[148,38,129,42],[148,39,129,43,"expoPath"],[148,47,129,51],[148,49,129,53,"match"],[148,54,129,58],[148,55,129,59,"routeNames"],[148,65,129,69],[148,66,129,70,"map"],[148,69,129,73],[148,70,129,75,"name"],[148,74,129,79],[148,79,129,85],[149,10,129,87,"name"],[150,8,129,92],[150,9,129,93],[150,10,129,94],[150,11,129,95],[150,13,129,97,"initialRoutes"],[150,26,129,110],[150,28,129,112,"configs"],[150,35,129,119],[150,37,129,121,"expoPath"],[150,45,129,129],[150,46,129,130,"url"],[150,49,129,133],[150,50,129,134,"hash"],[150,54,129,138],[150,55,129,139],[151,6,130,8],[152,6,131,8],[152,13,131,15,"undefined"],[152,22,131,24],[153,4,132,4],[154,4,133,4],[154,8,133,8,"result"],[154,14,133,14],[155,4,134,4],[155,8,134,8,"current"],[155,15,134,15],[156,4,135,4],[157,4,136,4],[158,4,137,4],[158,10,137,10],[159,6,137,12,"routes"],[159,12,137,18],[160,6,137,20,"remainingPath"],[161,4,137,34],[161,5,137,35],[161,8,137,38,"matchAgainstConfigs"],[161,27,137,57],[161,28,137,58,"remaining"],[161,37,137,67],[161,39,137,69,"configWithRegexes"],[161,56,137,86],[161,57,137,87],[162,4,138,4],[162,8,138,8,"routes"],[162,14,138,14],[162,19,138,19,"undefined"],[162,28,138,28],[162,30,138,30],[163,6,139,8],[164,6,140,8,"current"],[164,13,140,15],[164,16,140,18,"createNestedStateObject"],[164,39,140,41],[164,40,140,42,"expoPath"],[164,48,140,50],[164,50,140,52,"routes"],[164,56,140,58],[164,58,140,60,"initialRoutes"],[164,71,140,73],[164,73,140,75,"configs"],[164,80,140,82],[164,82,140,84,"expoPath"],[164,90,140,92],[164,91,140,93,"url"],[164,94,140,96],[164,95,140,97,"hash"],[164,99,140,101],[164,100,140,102],[165,6,141,8,"remaining"],[165,15,141,17],[165,18,141,20,"remainingPath"],[165,31,141,33],[166,6,142,8,"result"],[166,12,142,14],[166,15,142,17,"current"],[166,22,142,24],[167,4,143,4],[168,4,144,4],[168,8,144,8,"current"],[168,15,144,15],[168,19,144,19],[168,23,144,23],[168,27,144,27,"result"],[168,33,144,33],[168,37,144,37],[168,41,144,41],[168,43,144,43],[169,6,145,8],[169,13,145,15,"undefined"],[169,22,145,24],[170,4,146,4],[171,4,147,4],[171,11,147,11,"result"],[171,17,147,17],[172,2,148,0],[173,2,149,0],[174,0,150,0],[175,0,151,0],[176,2,152,0],[176,6,152,4,"cachedConfigResources"],[176,27,152,25],[176,30,152,28],[176,31,153,4,"undefined"],[176,40,153,13],[176,42,154,4,"prepareConfigResources"],[176,64,154,26],[176,65,154,27],[176,66,154,28],[176,67,155,1],[177,2,156,0],[177,11,156,9,"getConfigResources"],[177,29,156,27,"getConfigResources"],[177,30,156,28,"options"],[177,37,156,35],[178,2,157,0],[179,2,158,0,"previousSegments"],[180,2,159,0],[181,2,159,0],[181,4,160,2],[182,4,161,4],[183,4,162,4],[184,4,163,4,"cachedConfigResources"],[184,25,163,25],[184,28,163,28],[184,29,163,29,"options"],[184,36,163,36],[184,38,163,38,"prepareConfigResources"],[184,60,163,60],[184,61,163,61,"options"],[184,68,163,68],[184,70,163,70,"previousSegments"],[184,86,163,86],[184,87,163,87],[184,88,163,88],[185,4,164,4],[186,4,165,4],[187,4,166,4],[187,11,166,11,"cachedConfigResources"],[187,32,166,32],[187,33,166,33],[187,34,166,34],[187,35,166,35],[188,2,167,0],[189,2,168,0],[189,11,168,9,"prepareConfigResources"],[189,33,168,31,"prepareConfigResources"],[189,34,168,32,"options"],[189,41,168,39],[189,43,168,41,"previousSegments"],[189,59,168,57],[189,61,168,59],[190,4,169,4],[190,8,169,8,"options"],[190,15,169,15],[190,17,169,17],[191,6,170,8],[191,7,170,9],[191,8,170,10],[191,10,170,12,"native_1"],[191,18,170,20],[191,19,170,21,"validatePathConfig"],[191,37,170,39],[191,39,170,41,"options"],[191,46,170,48],[191,47,170,49],[192,4,171,4],[193,4,172,4],[193,10,172,10,"initialRoutes"],[193,23,172,23],[193,26,172,26,"getInitialRoutes"],[193,42,172,42],[193,43,172,43,"options"],[193,50,172,50],[193,51,172,51],[194,4,173,4],[194,10,173,10,"configs"],[194,17,173,17],[194,20,173,20,"getNormalizedConfigs"],[194,40,173,40],[194,41,173,41,"initialRoutes"],[194,54,173,54],[194,56,173,56,"options"],[194,63,173,63],[194,65,173,65,"screens"],[194,72,173,72],[194,74,173,74,"previousSegments"],[194,90,173,90],[194,91,173,91],[195,4,174,4,"checkForDuplicatedConfigs"],[195,29,174,29],[195,30,174,30,"configs"],[195,37,174,37],[195,38,174,38],[196,4,175,4],[196,10,175,10,"configWithRegexes"],[196,27,175,27],[196,30,175,30,"getConfigsWithRegexes"],[196,51,175,51],[196,52,175,52,"configs"],[196,59,175,59],[196,60,175,60],[197,4,176,4],[197,11,176,11],[198,6,177,8,"initialRoutes"],[198,19,177,21],[199,6,178,8,"configs"],[199,13,178,15],[200,6,179,8,"configWithRegexes"],[201,4,180,4],[201,5,180,5],[202,2,181,0],[203,2,182,0],[203,11,182,9,"getInitialRoutes"],[203,27,182,25,"getInitialRoutes"],[203,28,182,26,"options"],[203,35,182,33],[203,37,182,35],[204,4,183,4],[204,10,183,10,"initialRoutes"],[204,23,183,23],[204,26,183,26],[204,28,183,28],[205,4,184,4],[205,8,184,8,"options"],[205,15,184,15],[205,17,184,17,"initialRouteName"],[205,33,184,33],[205,35,184,35],[206,6,185,8,"initialRoutes"],[206,19,185,21],[206,20,185,22,"push"],[206,24,185,26],[206,25,185,27],[207,8,186,12,"initialRouteName"],[207,24,186,28],[207,26,186,30,"options"],[207,33,186,37],[207,34,186,38,"initialRouteName"],[207,50,186,54],[208,8,187,12,"parentScreens"],[208,21,187,25],[208,23,187,27],[209,6,188,8],[209,7,188,9],[209,8,188,10],[210,4,189,4],[211,4,190,4],[211,11,190,11,"initialRoutes"],[211,24,190,24],[212,2,191,0],[213,2,192,0],[213,11,192,9,"getNormalizedConfigs"],[213,31,192,29,"getNormalizedConfigs"],[213,32,192,30,"initialRoutes"],[213,45,192,43],[213,47,192,45,"screens"],[213,54,192,52],[213,57,192,55],[213,58,192,56],[213,59,192,57],[214,2,193,0],[215,2,194,0,"previousSegments"],[216,2,195,0],[217,2,195,0],[217,4,196,2],[218,4,197,4],[219,4,198,4],[219,11,198,11],[219,13,198,13],[219,14,199,9,"concat"],[219,20,199,15],[219,21,199,16],[219,24,199,19,"Object"],[219,30,199,25],[219,31,199,26,"keys"],[219,35,199,30],[219,36,199,31,"screens"],[219,43,199,38],[219,44,199,39],[219,45,199,40,"map"],[219,48,199,43],[219,49,199,45,"key"],[219,52,199,48],[219,56,199,53,"createNormalizedConfigs"],[219,79,199,76],[219,80,199,77,"key"],[219,83,199,80],[219,85,199,82,"screens"],[219,92,199,89],[219,94,199,91],[219,96,199,93],[219,98,199,95,"initialRoutes"],[219,111,199,108],[219,113,199,110],[219,115,199,112],[219,116,199,113],[219,117,199,114],[219,118,199,115],[219,119,200,9,"map"],[219,122,200,12],[219,123,200,13,"expo"],[219,127,200,17],[219,128,200,18,"appendIsInitial"],[219,143,200,33],[219,144,200,34,"initialRoutes"],[219,157,200,47],[219,158,200,48],[219,159,200,49],[219,160,201,9,"sort"],[219,164,201,13],[219,165,201,14,"expo"],[219,169,201,18],[219,170,201,19,"getRouteConfigSorter"],[219,190,201,39],[219,191,201,40,"previousSegments"],[219,207,201,56],[219,208,201,57],[219,209,201,58],[220,4,202,4],[221,4,203,4],[222,4,204,4],[223,4,205,4],[224,4,206,4],[225,4,207,4],[226,4,208,4],[227,4,209,4],[228,4,210,4],[229,4,211,4],[230,4,212,4],[231,4,213,4],[232,4,214,4],[233,4,215,4],[234,4,216,4],[235,4,217,4],[236,4,218,4],[237,4,219,4],[238,4,220,4],[239,4,221,4],[240,4,222,4],[241,4,223,4],[242,4,224,4],[243,4,225,4],[244,4,226,4],[245,4,227,4],[246,4,228,4],[247,4,229,4],[248,4,230,4],[249,4,231,4],[250,4,232,4],[251,4,233,4],[252,4,234,4],[253,4,235,4],[254,4,236,4],[255,4,237,4],[256,4,238,4],[257,4,239,4],[258,4,240,4],[259,4,241,4],[260,4,242,4],[261,4,243,4],[262,4,244,4],[263,4,245,4],[264,4,246,4],[265,2,247,0],[266,2,248,0],[266,11,248,9,"checkForDuplicatedConfigs"],[266,36,248,34,"checkForDuplicatedConfigs"],[266,37,248,35,"configs"],[266,44,248,42],[266,46,248,44],[267,4,249,4],[268,4,250,4,"configs"],[268,11,250,11],[268,12,250,12,"reduce"],[268,18,250,18],[268,19,250,19],[268,20,250,20,"acc"],[268,23,250,23],[268,25,250,25,"config"],[268,31,250,31],[268,36,250,36],[269,6,251,8],[269,10,251,12,"acc"],[269,13,251,15],[269,14,251,16,"config"],[269,20,251,22],[269,21,251,23,"pattern"],[269,28,251,30],[269,29,251,31],[269,31,251,33],[270,8,252,12],[270,14,252,18,"a"],[270,15,252,19],[270,18,252,22,"acc"],[270,21,252,25],[270,22,252,26,"config"],[270,28,252,32],[270,29,252,33,"pattern"],[270,36,252,40],[270,37,252,41],[270,38,252,42,"routeNames"],[270,48,252,52],[271,8,253,12],[271,14,253,18,"b"],[271,15,253,19],[271,18,253,22,"config"],[271,24,253,28],[271,25,253,29,"routeNames"],[271,35,253,39],[272,8,254,12],[273,8,255,12],[274,8,256,12],[274,14,256,18,"intersects"],[274,24,256,28],[274,27,256,31,"a"],[274,28,256,32],[274,29,256,33,"length"],[274,35,256,39],[274,38,256,42,"b"],[274,39,256,43],[274,40,256,44,"length"],[274,46,256,50],[274,49,256,53,"b"],[274,50,256,54],[274,51,256,55,"every"],[274,56,256,60],[274,57,256,61],[274,58,256,62,"it"],[274,60,256,64],[274,62,256,66,"i"],[274,63,256,67],[274,68,256,72,"a"],[274,69,256,73],[274,70,256,74,"i"],[274,71,256,75],[274,72,256,76],[274,77,256,81,"it"],[274,79,256,83],[274,80,256,84],[274,83,256,87,"a"],[274,84,256,88],[274,85,256,89,"every"],[274,90,256,94],[274,91,256,95],[274,92,256,96,"it"],[274,94,256,98],[274,96,256,100,"i"],[274,97,256,101],[274,102,256,106,"b"],[274,103,256,107],[274,104,256,108,"i"],[274,105,256,109],[274,106,256,110],[274,111,256,115,"it"],[274,113,256,117],[274,114,256,118],[275,8,257,12],[275,12,257,16],[275,13,257,17,"intersects"],[275,23,257,27],[275,25,257,29],[276,10,258,16],[276,16,258,22],[276,20,258,26,"Error"],[276,25,258,31],[276,26,258,32],[276,91,258,97,"config"],[276,97,258,103],[276,98,258,104,"pattern"],[276,105,258,111],[276,128,258,134,"a"],[276,129,258,135],[276,130,258,136,"join"],[276,134,258,140],[276,135,258,141],[276,140,258,146],[276,141,258,147],[276,151,258,157,"b"],[276,152,258,158],[276,153,258,159,"join"],[276,157,258,163],[276,158,258,164],[276,163,258,169],[276,164,258,170],[276,236,258,242],[276,237,258,243],[277,8,259,12],[278,6,260,8],[279,6,261,8],[279,13,261,15,"Object"],[279,19,261,21],[279,20,261,22,"assign"],[279,26,261,28],[279,27,261,29,"acc"],[279,30,261,32],[279,32,261,34],[280,8,262,12],[280,9,262,13,"config"],[280,15,262,19],[280,16,262,20,"pattern"],[280,23,262,27],[280,26,262,30,"config"],[281,6,263,8],[281,7,263,9],[281,8,263,10],[282,4,264,4],[282,5,264,5],[282,7,264,7],[282,8,264,8],[282,9,264,9],[282,10,264,10],[283,2,265,0],[284,2,266,0],[284,11,266,9,"getConfigsWithRegexes"],[284,32,266,30,"getConfigsWithRegexes"],[284,33,266,31,"configs"],[284,40,266,38],[284,42,266,40],[285,4,267,4],[285,11,267,11,"configs"],[285,18,267,18],[285,19,267,19,"map"],[285,22,267,22],[285,23,267,24,"c"],[285,24,267,25],[285,28,267,25,"Object"],[285,34,267,25],[285,35,267,25,"assign"],[285,41,267,25],[285,46,268,11,"c"],[285,47,268,12],[286,6,269,8],[287,6,270,8],[288,6,271,8],[289,6,272,8,"regex"],[289,11,272,13],[289,13,272,15,"expo"],[289,17,272,19],[289,18,272,20,"configRegExp"],[289,30,272,32],[289,31,272,33,"c"],[289,32,272,34],[290,6,273,8],[291,4,273,8],[291,6,274,6],[291,7,274,7],[292,2,275,0],[293,2,276,0],[293,8,276,6,"joinPaths"],[293,17,276,15],[293,20,276,18,"joinPaths"],[293,21,276,19],[293,24,276,22,"paths"],[293,29,276,27],[293,34,276,32],[293,36,276,34],[293,37,277,5,"concat"],[293,43,277,11],[293,44,277,12],[293,47,277,15,"paths"],[293,52,277,20],[293,53,277,21,"map"],[293,56,277,24],[293,57,277,26,"p"],[293,58,277,27],[293,62,277,32,"p"],[293,63,277,33],[293,64,277,34,"split"],[293,69,277,39],[293,70,277,40],[293,73,277,43],[293,74,277,44],[293,75,277,45],[293,76,277,46],[293,77,278,5,"filter"],[293,83,278,11],[293,84,278,12,"Boolean"],[293,91,278,19],[293,92,278,20],[293,93,279,5,"join"],[293,97,279,9],[293,98,279,10],[293,101,279,13],[293,102,279,14],[294,2,280,0],[294,8,280,6,"matchAgainstConfigs"],[294,27,280,25],[294,30,280,28,"matchAgainstConfigs"],[294,31,280,29,"remaining"],[294,40,280,38],[294,42,280,40,"configs"],[294,49,280,47],[294,54,280,52],[295,4,281,4],[295,8,281,8,"routes"],[295,14,281,14],[296,4,282,4],[296,8,282,8,"remainingPath"],[296,21,282,21],[296,24,282,24,"remaining"],[296,33,282,33],[297,4,283,4],[298,4,284,4],[298,10,284,10,"allParams"],[298,19,284,19],[298,22,284,22,"Object"],[298,28,284,28],[298,29,284,29,"create"],[298,35,284,35],[298,36,284,36],[298,40,284,40],[298,41,284,41],[299,4,285,4],[300,4,286,4],[301,4,287,4],[301,9,287,9],[301,15,287,15,"config"],[301,21,287,21],[301,25,287,25,"configs"],[301,32,287,32],[301,34,287,34],[302,6,288,8],[302,10,288,12],[302,11,288,13,"config"],[302,17,288,19],[302,18,288,20,"regex"],[302,23,288,25],[302,25,288,27],[303,8,289,12],[304,6,290,8],[305,6,291,8],[305,12,291,14,"match"],[305,17,291,19],[305,20,291,22,"remainingPath"],[305,33,291,35],[305,34,291,36,"match"],[305,39,291,41],[305,40,291,42,"config"],[305,46,291,48],[305,47,291,49,"regex"],[305,52,291,54],[305,53,291,55],[306,6,292,8],[307,6,293,8],[307,10,293,12,"match"],[307,15,293,17],[307,17,293,19],[308,8,294,12],[308,14,294,18,"matchResult"],[308,25,294,29],[308,28,294,32,"config"],[308,34,294,38],[308,35,294,39,"pattern"],[308,42,294,46],[308,44,294,48,"split"],[308,49,294,53],[308,50,294,54],[308,53,294,57],[308,54,294,58],[308,55,294,59,"reduce"],[308,61,294,65],[308,62,294,66],[308,63,294,67,"acc"],[308,66,294,70],[308,68,294,72,"p"],[308,69,294,73],[308,71,294,75,"index"],[308,76,294,80],[308,81,294,85],[309,10,295,16],[309,14,295,20],[309,15,295,21,"expo"],[309,19,295,25],[309,20,295,26,"isDynamicPart"],[309,33,295,39],[309,34,295,40,"p"],[309,35,295,41],[309,36,295,42],[309,38,295,44],[310,12,296,20],[310,19,296,27,"acc"],[310,22,296,30],[311,10,297,16],[312,10,298,16,"acc"],[312,13,298,19],[312,14,298,20,"pos"],[312,17,298,23],[312,21,298,27],[312,22,298,28],[313,10,299,16],[314,10,300,16],[314,16,300,22,"decodedParamSegment"],[314,35,300,41],[314,38,300,44,"expo"],[314,42,300,48],[314,43,300,49,"safelyDecodeURIComponent"],[314,67,300,73],[315,10,301,16],[316,10,302,16],[317,10,303,16,"match"],[317,15,303,21],[317,16,303,22],[317,17,303,23,"acc"],[317,20,303,26],[317,21,303,27,"pos"],[317,24,303,30],[317,27,303,33],[317,28,303,34],[317,32,303,38],[317,33,303,39],[318,10,304,20],[319,10,304,20],[319,11,305,21,"replace"],[319,18,305,28],[319,19,305,29],[319,24,305,34],[319,26,305,36],[319,28,305,38],[319,29,305,39],[319,30,305,40],[320,10,306,16],[321,10,307,16,"Object"],[321,16,307,22],[321,17,307,23,"assign"],[321,23,307,29],[321,24,307,30,"acc"],[321,27,307,33],[321,28,307,34,"matchedParams"],[321,41,307,47],[321,43,307,49],[322,12,308,20],[322,13,308,21,"p"],[322,14,308,22],[322,17,308,25,"Object"],[322,23,308,31],[322,24,308,32,"assign"],[322,30,308,38],[322,31,308,39,"acc"],[322,34,308,42],[322,35,308,43,"matchedParams"],[322,48,308,56],[322,49,308,57,"p"],[322,50,308,58],[322,51,308,59],[322,55,308,63],[322,56,308,64],[322,57,308,65],[322,59,308,67],[323,14,309,24],[323,15,309,25,"index"],[323,20,309,30],[323,23,309,33,"decodedParamSegment"],[324,12,310,20],[324,13,310,21],[325,10,311,16],[325,11,311,17],[325,12,311,18],[326,10,312,16],[326,17,312,23,"acc"],[326,20,312,26],[327,8,313,12],[327,9,313,13],[327,11,313,15],[328,10,313,17,"pos"],[328,13,313,20],[328,15,313,22],[328,16,313,23],[328,17,313,24],[329,10,313,26,"matchedParams"],[329,23,313,39],[329,25,313,41],[329,26,313,42],[330,8,313,44],[330,9,313,45],[330,10,313,46],[331,8,314,12],[331,14,314,18,"matchedParams"],[331,27,314,31],[331,30,314,34,"matchResult"],[331,41,314,45],[331,42,314,46,"matchedParams"],[331,55,314,59],[331,59,314,63],[331,60,314,64],[331,61,314,65],[332,8,315,12,"routes"],[332,14,315,18],[332,17,315,21,"config"],[332,23,315,27],[332,24,315,28,"routeNames"],[332,34,315,38],[332,35,315,39,"map"],[332,38,315,42],[332,39,315,44,"name"],[332,43,315,48],[332,47,315,53],[333,10,316,16],[333,16,316,22,"routeConfig"],[333,27,316,33],[333,30,316,36,"configs"],[333,37,316,43],[333,38,316,44,"find"],[333,42,316,48],[333,43,316,50,"c"],[333,44,316,51],[333,48,316,56],[334,12,317,20],[335,12,318,20],[335,19,318,27,"c"],[335,20,318,28],[335,21,318,29,"screen"],[335,27,318,35],[335,32,318,40,"name"],[335,36,318,44],[335,40,318,48,"config"],[335,46,318,54],[335,47,318,55,"pattern"],[335,54,318,62],[335,55,318,63,"startsWith"],[335,65,318,73],[335,66,318,74,"c"],[335,67,318,75],[335,68,318,76,"pattern"],[335,75,318,83],[335,76,318,84],[336,10,319,16],[336,11,319,17],[336,12,319,18],[337,10,320,16],[338,10,321,16],[338,16,321,22,"normalizedPath"],[338,30,321,36],[338,33,321,39,"routeConfig"],[338,44,321,50],[338,46,321,52,"path"],[338,50,321,56],[338,51,321,57,"split"],[338,56,321,62],[338,57,321,63],[338,60,321,66],[338,61,321,67],[338,62,321,68,"filter"],[338,68,321,74],[338,69,321,75,"Boolean"],[338,76,321,82],[338,77,321,83],[338,78,321,84,"join"],[338,82,321,88],[338,83,321,89],[338,86,321,92],[338,87,321,93],[339,10,322,16],[340,10,323,16],[340,16,323,22,"numInitialSegments"],[340,34,323,40],[340,37,323,43,"routeConfig"],[340,48,323,54],[340,50,323,56,"pattern"],[341,10,324,20],[342,10,324,20],[342,11,325,21,"replace"],[342,18,325,28],[342,19,325,29],[342,23,325,33,"RegExp"],[342,29,325,39],[342,30,325,40],[342,33,325,43],[342,34,325,44],[342,35,325,45],[342,37,325,47,"escape_string_regexp_1"],[342,59,325,69],[342,60,325,70,"default"],[342,67,325,77],[342,69,325,79,"normalizedPath"],[342,83,325,93],[342,84,325,94],[342,87,325,97],[342,88,325,98],[342,90,325,100],[342,92,325,102],[342,93,325,103],[342,95,326,22,"split"],[342,100,326,27],[342,101,326,28],[342,104,326,31],[342,105,326,32],[342,106,326,33,"length"],[342,112,326,39],[343,10,327,16],[343,16,327,22,"params"],[343,22,327,28],[343,25,327,31,"normalizedPath"],[343,39,327,45],[343,41,328,22,"split"],[343,46,328,27],[343,47,328,28],[343,50,328,31],[343,51,328,32],[343,52,329,21,"reduce"],[343,58,329,27],[343,59,329,28],[343,60,329,29,"acc"],[343,63,329,32],[343,65,329,34,"p"],[343,66,329,35],[343,68,329,37,"index"],[343,73,329,42],[343,78,329,47],[344,12,330,20],[344,16,330,24],[344,17,330,25,"expo"],[344,21,330,29],[344,22,330,30,"isDynamicPart"],[344,35,330,43],[344,36,330,44,"p"],[344,37,330,45],[344,38,330,46],[344,40,330,48],[345,14,331,24],[345,21,331,31,"acc"],[345,24,331,34],[346,12,332,20],[347,12,333,20],[348,12,334,20],[349,12,335,20],[349,18,335,26,"offset"],[349,24,335,32],[349,27,335,35,"numInitialSegments"],[349,45,335,53],[349,48,335,56,"numInitialSegments"],[349,66,335,74],[349,69,335,77],[349,70,335,78],[349,73,335,81],[349,74,335,82],[350,12,336,20],[351,12,337,20],[352,12,338,20],[352,18,338,26,"value"],[352,23,338,31],[352,26,338,34,"expo"],[352,30,338,38],[352,31,338,39,"getParamValue"],[352,44,338,52],[352,45,338,53,"p"],[352,46,338,54],[352,48,338,56,"matchedParams"],[352,61,338,69],[352,62,338,70,"p"],[352,63,338,71],[352,64,338,72],[352,67,338,75,"index"],[352,72,338,80],[352,75,338,83,"offset"],[352,81,338,89],[352,82,338,90],[352,83,338,91],[353,12,339,20],[354,12,340,20],[354,16,340,24,"value"],[354,21,340,29],[354,23,340,31],[355,14,341,24],[356,14,342,24],[357,14,343,24],[357,20,343,30,"key"],[357,23,343,33],[357,26,343,36,"expo"],[357,30,343,40],[357,31,343,41,"replacePart"],[357,42,343,52],[357,43,343,53,"p"],[357,44,343,54],[357,45,343,55],[358,14,344,24],[359,14,345,24,"acc"],[359,17,345,27],[359,18,345,28,"key"],[359,21,345,31],[359,22,345,32],[359,25,345,35,"routeConfig"],[359,36,345,46],[359,38,345,48,"parse"],[359,43,345,53],[359,46,345,56,"key"],[359,49,345,59],[359,50,345,60],[359,53,345,63,"routeConfig"],[359,64,345,74],[359,65,345,75,"parse"],[359,70,345,80],[359,71,345,81,"key"],[359,74,345,84],[359,75,345,85],[359,76,345,86,"value"],[359,81,345,91],[359,82,345,92],[359,85,345,95,"value"],[359,90,345,100],[360,12,346,20],[361,12,347,20],[361,19,347,27,"acc"],[361,22,347,30],[362,10,348,16],[362,11,348,17],[362,13,348,19],[362,14,348,20],[362,15,348,21],[362,16,348,22],[363,10,349,16],[363,14,349,20,"params"],[363,20,349,26],[363,24,349,30,"Object"],[363,30,349,36],[363,31,349,37,"keys"],[363,35,349,41],[363,36,349,42,"params"],[363,42,349,48],[363,43,349,49],[363,44,349,50,"length"],[363,50,349,56],[363,52,349,58],[364,12,350,20,"Object"],[364,18,350,26],[364,19,350,27,"assign"],[364,25,350,33],[364,26,350,34,"allParams"],[364,35,350,43],[364,37,350,45,"params"],[364,43,350,51],[364,44,350,52],[365,12,351,20],[365,19,351,27],[366,14,351,29,"name"],[366,18,351,33],[367,14,351,35,"params"],[368,12,351,42],[368,13,351,43],[369,10,352,16],[370,10,353,16],[370,17,353,23],[371,12,353,25,"name"],[372,10,353,30],[372,11,353,31],[373,8,354,12],[373,9,354,13],[373,10,354,14],[374,8,355,12,"remainingPath"],[374,21,355,25],[374,24,355,28,"remainingPath"],[374,37,355,41],[374,38,355,42,"replace"],[374,45,355,49],[374,46,355,50,"match"],[374,51,355,55],[374,52,355,56],[374,53,355,57],[374,54,355,58],[374,56,355,60],[374,58,355,62],[374,59,355,63],[375,8,356,12],[376,6,357,8],[377,4,358,4],[378,4,359,4],[379,4,360,4,"expo"],[379,8,360,8],[379,9,360,9,"populateParams"],[379,23,360,23],[379,24,360,24,"routes"],[379,30,360,30],[379,32,360,32,"allParams"],[379,41,360,41],[379,42,360,42],[380,4,361,4],[381,4,362,4],[381,11,362,11],[382,6,362,13,"routes"],[382,12,362,19],[383,6,362,21,"remainingPath"],[384,4,362,35],[384,5,362,36],[385,2,363,0],[385,3,363,1],[386,2,364,0],[386,8,364,6,"createNormalizedConfigs"],[386,31,364,29],[386,34,364,32,"createNormalizedConfigs"],[386,35,364,33,"screen"],[386,41,364,39],[386,43,364,41,"routeConfig"],[386,54,364,52],[386,56,364,54,"routeNames"],[386,66,364,64],[386,69,364,67],[386,71,364,69],[386,73,364,71,"initials"],[386,81,364,79],[386,83,364,81,"parentScreens"],[386,96,364,94],[386,98,364,96,"parentPattern"],[386,111,364,109],[386,116,364,114],[387,4,365,4],[387,10,365,10,"configs"],[387,17,365,17],[387,20,365,20],[387,22,365,22],[388,4,366,4,"routeNames"],[388,14,366,14],[388,15,366,15,"push"],[388,19,366,19],[388,20,366,20,"screen"],[388,26,366,26],[388,27,366,27],[389,4,367,4,"parentScreens"],[389,17,367,17],[389,18,367,18,"push"],[389,22,367,22],[389,23,367,23,"screen"],[389,29,367,29],[389,30,367,30],[390,4,368,4],[391,4,369,4],[391,10,369,10,"config"],[391,16,369,16],[391,19,369,19,"routeConfig"],[391,30,369,30],[391,31,369,31,"screen"],[391,37,369,37],[391,38,369,38],[392,4,370,4],[392,8,370,8],[392,15,370,15,"config"],[392,21,370,21],[392,26,370,26],[392,34,370,34],[392,36,370,36],[393,6,371,8],[394,6,372,8],[394,12,372,14,"pattern"],[394,19,372,21],[394,22,372,24,"parentPattern"],[394,35,372,37],[394,38,372,40,"joinPaths"],[394,47,372,49],[394,48,372,50,"parentPattern"],[394,61,372,63],[394,63,372,65,"config"],[394,69,372,71],[394,70,372,72],[394,73,372,75,"config"],[394,79,372,81],[395,6,373,8,"configs"],[395,13,373,15],[395,14,373,16,"push"],[395,18,373,20],[395,19,373,21,"createConfigItem"],[395,35,373,37],[395,36,373,38,"screen"],[395,42,373,44],[395,44,373,46,"routeNames"],[395,54,373,56],[395,56,373,58,"pattern"],[395,63,373,65],[395,65,373,67,"config"],[395,71,373,73],[395,72,373,74],[395,73,373,75],[396,4,374,4],[396,5,374,5],[396,11,375,9],[396,15,375,13],[396,22,375,20,"config"],[396,28,375,26],[396,33,375,31],[396,41,375,39],[396,43,375,41],[397,6,376,8],[397,10,376,12,"pattern"],[397,17,376,19],[398,6,377,8],[399,6,378,8],[400,6,379,8],[401,6,380,8],[401,10,380,12],[401,17,380,19,"config"],[401,23,380,25],[401,24,380,26,"path"],[401,28,380,30],[401,33,380,35],[401,41,380,43],[401,43,380,45],[402,8,381,12],[402,12,381,16,"config"],[402,18,381,22],[402,19,381,23,"exact"],[402,24,381,28],[402,28,381,32,"config"],[402,34,381,38],[402,35,381,39,"path"],[402,39,381,43],[402,44,381,48,"undefined"],[402,53,381,57],[402,55,381,59],[403,10,382,16],[403,16,382,22],[403,20,382,26,"Error"],[403,25,382,31],[403,26,382,32],[403,176,382,182],[403,177,382,183],[404,8,383,12],[405,8,384,12,"pattern"],[405,15,384,19],[405,18,385,16,"config"],[405,24,385,22],[405,25,385,23,"exact"],[405,30,385,28],[405,35,385,33],[405,39,385,37],[405,42,386,22,"joinPaths"],[405,51,386,31],[405,52,386,32,"parentPattern"],[405,65,386,45],[405,69,386,49],[405,71,386,51],[405,73,386,53,"config"],[405,79,386,59],[405,80,386,60,"path"],[405,84,386,64],[405,88,386,68],[405,90,386,70],[405,91,386,71],[405,94,387,22,"config"],[405,100,387,28],[405,101,387,29,"path"],[405,105,387,33],[405,109,387,37],[405,111,387,39],[406,8,388,12],[406,12,388,16,"screen"],[406,18,388,22],[406,23,388,27,"constants_1"],[406,34,388,38],[406,35,388,39,"INTERNAL_SLOT_NAME"],[406,53,388,57],[406,55,388,59],[407,10,389,16,"configs"],[407,17,389,23],[407,18,389,24,"push"],[407,22,389,28],[407,23,389,29,"createConfigItem"],[407,39,389,45],[407,40,389,46,"screen"],[407,46,389,52],[407,48,389,54,"routeNames"],[407,58,389,64],[407,60,389,66,"pattern"],[407,67,389,73],[407,69,389,75,"config"],[407,75,389,81],[407,76,389,82,"path"],[407,80,389,86],[407,82,389,88,"config"],[407,88,389,94],[407,89,389,95,"parse"],[407,94,389,100],[407,96,389,102,"config"],[407,102,389,108],[407,103,389,109],[407,104,389,110],[408,8,390,12],[409,6,391,8],[410,6,392,8],[410,10,392,12,"config"],[410,16,392,18],[410,17,392,19,"screens"],[410,24,392,26],[410,26,392,28],[411,8,393,12],[412,8,394,12],[412,12,394,16,"config"],[412,18,394,22],[412,19,394,23,"initialRouteName"],[412,35,394,39],[412,37,394,41],[413,10,395,16,"initials"],[413,18,395,24],[413,19,395,25,"push"],[413,23,395,29],[413,24,395,30],[414,12,396,20,"initialRouteName"],[414,28,396,36],[414,30,396,38,"config"],[414,36,396,44],[414,37,396,45,"initialRouteName"],[414,53,396,61],[415,12,397,20,"parentScreens"],[416,10,398,16],[416,11,398,17],[416,12,398,18],[417,8,399,12],[418,8,400,12,"Object"],[418,14,400,18],[418,15,400,19,"keys"],[418,19,400,23],[418,20,400,24,"config"],[418,26,400,30],[418,27,400,31,"screens"],[418,34,400,38],[418,35,400,39],[418,36,400,40,"forEach"],[418,43,400,47],[418,44,400,49,"nestedConfig"],[418,56,400,61],[418,60,400,66],[419,10,401,16],[419,16,401,22,"result"],[419,22,401,28],[419,25,401,31,"createNormalizedConfigs"],[419,48,401,54],[419,49,401,55,"nestedConfig"],[419,61,401,67],[419,63,401,69,"config"],[419,69,401,75],[419,70,401,76,"screens"],[419,77,401,83],[419,79,401,85,"routeNames"],[419,89,401,95],[419,91,401,97,"initials"],[419,99,401,105],[419,101,401,107],[419,102,401,108],[419,105,401,111,"parentScreens"],[419,118,401,124],[419,119,401,125],[419,121,401,127,"pattern"],[419,128,401,134],[419,132,401,138,"parentPattern"],[419,145,401,151],[419,146,401,152],[420,10,402,16,"configs"],[420,17,402,23],[420,18,402,24,"push"],[420,22,402,28],[420,23,402,29],[420,26,402,32,"result"],[420,32,402,38],[420,33,402,39],[421,8,403,12],[421,9,403,13],[421,10,403,14],[422,6,404,8],[423,4,405,4],[424,4,406,4,"routeNames"],[424,14,406,14],[424,15,406,15,"pop"],[424,18,406,18],[424,19,406,19],[424,20,406,20],[425,4,407,4],[425,11,407,11,"configs"],[425,18,407,18],[426,2,408,0],[426,3,408,1],[427,2,409,0],[427,8,409,6,"createConfigItem"],[427,24,409,22],[427,27,409,25,"createConfigItem"],[427,28,409,26,"screen"],[427,34,409,32],[427,36,409,34,"routeNames"],[427,46,409,44],[427,48,409,46,"pattern"],[427,55,409,53],[427,57,409,55,"path"],[427,61,409,59],[427,63,409,61,"parse"],[427,68,409,66],[427,71,409,69,"undefined"],[427,80,409,78],[427,82,409,80,"config"],[427,88,409,86],[427,91,409,89],[427,92,409,90],[427,93,409,91],[427,98,409,96],[428,4,410,4],[429,4,411,4,"pattern"],[429,11,411,11],[429,14,411,14,"pattern"],[429,21,411,21],[429,22,411,22,"split"],[429,27,411,27],[429,28,411,28],[429,31,411,31],[429,32,411,32],[429,33,411,33,"filter"],[429,39,411,39],[429,40,411,40,"Boolean"],[429,47,411,47],[429,48,411,48],[429,49,411,49,"join"],[429,53,411,53],[429,54,411,54],[429,57,411,57],[429,58,411,58],[430,4,412,4],[431,4,413,4],[431,10,413,10,"regex"],[431,15,413,15],[431,18,413,18,"pattern"],[431,25,413,25],[431,28,413,28,"expo"],[431,32,413,32],[431,33,413,33,"routePatternToRegex"],[431,52,413,52],[431,53,413,53,"pattern"],[431,60,413,60],[431,61,413,61],[431,64,413,64,"undefined"],[431,73,413,73],[432,4,414,4],[433,4,415,4],[434,4,416,4],[435,4,417,4],[436,4,418,4],[437,4,419,4],[438,4,420,4],[439,4,421,4],[440,4,422,4],[441,4,423,4],[442,4,424,4],[443,4,425,4],[444,4,426,4],[445,4,427,4],[446,4,428,4],[446,11,428,4,"Object"],[446,17,428,4],[446,18,428,4,"assign"],[446,24,428,4],[447,6,429,8,"screen"],[447,12,429,14],[448,6,430,8,"regex"],[448,11,430,13],[449,6,431,8,"pattern"],[449,13,431,15],[450,6,432,8,"path"],[450,10,432,12],[451,6,433,8],[452,6,434,8,"routeNames"],[452,16,434,18],[452,18,434,20],[452,19,434,21],[452,22,434,24,"routeNames"],[452,32,434,34],[452,33,434,35],[453,6,435,8,"parse"],[454,4,435,13],[454,7,437,11,"expo"],[454,11,437,15],[454,12,437,16,"createConfig"],[454,24,437,28],[454,25,437,29,"screen"],[454,31,437,35],[454,33,437,37,"pattern"],[454,40,437,44],[454,42,437,46,"routeNames"],[454,52,437,56],[454,54,437,58,"config"],[454,60,437,64],[454,61,437,65],[455,2,440,0],[455,3,440,1],[456,2,441,0],[456,8,441,6,"findParseConfigForRoute"],[456,31,441,29],[456,34,441,32,"findParseConfigForRoute"],[456,35,441,33,"routeName"],[456,44,441,42],[456,46,441,44,"flatConfig"],[456,56,441,54],[456,61,441,59],[457,4,442,4],[457,9,442,9],[457,15,442,15,"config"],[457,21,442,21],[457,25,442,25,"flatConfig"],[457,35,442,35],[457,37,442,37],[458,6,443,8],[458,10,443,12,"routeName"],[458,19,443,21],[458,24,443,26,"config"],[458,30,443,32],[458,31,443,33,"routeNames"],[458,41,443,43],[458,42,443,44,"config"],[458,48,443,50],[458,49,443,51,"routeNames"],[458,59,443,61],[458,60,443,62,"length"],[458,66,443,68],[458,69,443,71],[458,70,443,72],[458,71,443,73],[458,73,443,75],[459,8,444,12],[459,15,444,19,"config"],[459,21,444,25],[459,22,444,26,"parse"],[459,27,444,31],[460,6,445,8],[461,4,446,4],[462,4,447,4],[462,11,447,11,"undefined"],[462,20,447,20],[463,2,448,0],[463,3,448,1],[464,2,449,0],[465,2,450,0],[465,8,450,6,"findInitialRoute"],[465,24,450,22],[465,27,450,25,"findInitialRoute"],[465,28,450,26,"routeName"],[465,37,450,35],[465,39,450,37,"parentScreens"],[465,52,450,50],[465,54,450,52,"initialRoutes"],[465,67,450,65],[465,72,450,70],[466,4,451,4],[466,9,451,9],[466,15,451,15,"config"],[466,21,451,21],[466,25,451,25,"initialRoutes"],[466,38,451,38],[466,40,451,40],[467,6,452,8],[467,10,452,12,"parentScreens"],[467,23,452,25],[467,24,452,26,"length"],[467,30,452,32],[467,35,452,37,"config"],[467,41,452,43],[467,42,452,44,"parentScreens"],[467,55,452,57],[467,56,452,58,"length"],[467,62,452,64],[467,64,452,66],[468,8,453,12],[468,12,453,16,"sameParents"],[468,23,453,27],[468,26,453,30],[468,30,453,34],[469,8,454,12],[469,13,454,17],[469,17,454,21,"i"],[469,18,454,22],[469,21,454,25],[469,22,454,26],[469,24,454,28,"i"],[469,25,454,29],[469,28,454,32,"parentScreens"],[469,41,454,45],[469,42,454,46,"length"],[469,48,454,52],[469,50,454,54,"i"],[469,51,454,55],[469,53,454,57],[469,55,454,59],[470,10,455,16],[470,14,455,20,"parentScreens"],[470,27,455,33],[470,28,455,34,"i"],[470,29,455,35],[470,30,455,36],[470,31,455,37,"localeCompare"],[470,44,455,50],[470,45,455,51,"config"],[470,51,455,57],[470,52,455,58,"parentScreens"],[470,65,455,71],[470,66,455,72,"i"],[470,67,455,73],[470,68,455,74],[470,69,455,75],[470,74,455,80],[470,75,455,81],[470,77,455,83],[471,12,456,20,"sameParents"],[471,23,456,31],[471,26,456,34],[471,31,456,39],[472,12,457,20],[473,10,458,16],[474,8,459,12],[475,8,460,12],[475,12,460,16,"sameParents"],[475,23,460,27],[475,25,460,29],[476,10,461,16],[476,17,461,23,"routeName"],[476,26,461,32],[476,31,461,37,"config"],[476,37,461,43],[476,38,461,44,"initialRouteName"],[476,54,461,60],[476,57,461,63,"config"],[476,63,461,69],[476,64,461,70,"initialRouteName"],[476,80,461,86],[476,83,461,89,"undefined"],[476,92,461,98],[477,8,462,12],[478,6,463,8],[479,4,464,4],[480,4,465,4],[480,11,465,11,"undefined"],[480,20,465,20],[481,2,466,0],[481,3,466,1],[482,2,467,0],[483,2,468,0],[484,2,469,0],[484,8,469,6,"createStateObject"],[484,25,469,23],[484,28,469,26,"createStateObject"],[484,29,469,27,"initialRoute"],[484,41,469,39],[484,43,469,41,"route"],[484,48,469,46],[484,50,469,48,"isEmpty"],[484,57,469,55],[484,62,469,60],[485,4,470,4],[485,8,470,8,"isEmpty"],[485,15,470,15],[485,17,470,17],[486,6,471,8],[486,10,471,12,"initialRoute"],[486,22,471,24],[486,24,471,26],[487,8,472,12],[487,15,472,19],[488,10,473,16,"index"],[488,15,473,21],[488,17,473,23],[488,18,473,24],[489,10,474,16,"routes"],[489,16,474,22],[489,18,474,24],[489,19,474,25],[490,12,474,27,"name"],[490,16,474,31],[490,18,474,33,"initialRoute"],[490,30,474,45],[491,12,474,47,"params"],[491,18,474,53],[491,20,474,55,"route"],[491,25,474,60],[491,26,474,61,"params"],[492,10,474,68],[492,11,474,69],[492,13,474,71,"route"],[492,18,474,76],[493,8,475,12],[493,9,475,13],[494,6,476,8],[494,7,476,9],[494,13,477,13],[495,8,478,12],[495,15,478,19],[496,10,479,16,"routes"],[496,16,479,22],[496,18,479,24],[496,19,479,25,"route"],[496,24,479,30],[497,8,480,12],[497,9,480,13],[498,6,481,8],[499,4,482,4],[499,5,482,5],[499,11,483,9],[500,6,484,8],[500,10,484,12,"initialRoute"],[500,22,484,24],[500,24,484,26],[501,8,485,12],[501,15,485,19],[502,10,486,16,"index"],[502,15,486,21],[502,17,486,23],[502,18,486,24],[503,10,487,16,"routes"],[503,16,487,22],[503,18,487,24],[503,19,488,20],[504,12,488,22,"name"],[504,16,488,26],[504,18,488,28,"initialRoute"],[504,30,488,40],[505,12,488,42,"params"],[505,18,488,48],[505,20,488,50,"route"],[505,25,488,55],[505,26,488,56,"params"],[506,10,488,63],[506,11,488,64],[506,13,488,64,"Object"],[506,19,488,64],[506,20,488,64,"assign"],[506,26,488,64],[506,31,489,25,"route"],[506,36,489,30],[507,12,489,32,"state"],[507,17,489,37],[507,19,489,39],[508,14,489,41,"routes"],[508,20,489,47],[508,22,489,49],[509,12,489,52],[510,10,489,53],[511,8,491,12],[511,9,491,13],[512,6,492,8],[512,7,492,9],[512,13,493,13],[513,8,494,12],[513,15,494,19],[514,10,495,16,"routes"],[514,16,495,22],[514,18,495,24],[514,19,495,24,"Object"],[514,25,495,24],[514,26,495,24,"assign"],[514,32,495,24],[514,37,495,30,"route"],[514,42,495,35],[515,12,495,37,"state"],[515,17,495,42],[515,19,495,44],[516,14,495,46,"routes"],[516,20,495,52],[516,22,495,54],[517,12,495,57],[518,10,495,58],[519,8,496,12],[519,9,496,13],[520,6,497,8],[521,4,498,4],[522,2,499,0],[522,3,499,1],[523,2,500,0],[523,8,500,6,"createNestedStateObject"],[523,31,500,29],[523,34,500,32,"createNestedStateObject"],[523,35,500,32,"_ref"],[523,39,500,32],[523,41,500,55,"routes"],[523,47,500,61],[523,49,500,63,"initialRoutes"],[523,62,500,76],[523,64,500,78,"flatConfig"],[523,74,500,88],[523,76,500,90,"hash"],[523,80,500,94],[523,85,500,99],[524,4,500,99],[524,8,500,33],[525,8,500,35,"path"],[526,6,500,52],[526,7,500,53],[526,10,500,53,"_ref"],[526,14,500,53],[527,6,500,44,"expoURL"],[527,13,500,51],[527,16,500,51,"_objectWithoutPropertiesLoose"],[527,45,500,51],[527,46,500,51,"_ref"],[527,50,500,51],[527,52,500,51,"_excluded"],[527,61,500,51],[528,4,501,4],[528,8,501,8,"route"],[528,13,501,13],[528,16,501,16,"routes"],[528,22,501,22],[528,23,501,23,"shift"],[528,28,501,28],[528,29,501,29],[528,30,501,30],[529,4,502,4],[529,10,502,10,"parentScreens"],[529,23,502,23],[529,26,502,26],[529,28,502,28],[530,4,503,4],[530,8,503,8,"initialRoute"],[530,20,503,20],[530,23,503,23,"findInitialRoute"],[530,39,503,39],[530,40,503,40,"route"],[530,45,503,45],[530,46,503,46,"name"],[530,50,503,50],[530,52,503,52,"parentScreens"],[530,65,503,65],[530,67,503,67,"initialRoutes"],[530,80,503,80],[530,81,503,81],[531,4,504,4,"parentScreens"],[531,17,504,17],[531,18,504,18,"push"],[531,22,504,22],[531,23,504,23,"route"],[531,28,504,28],[531,29,504,29,"name"],[531,33,504,33],[531,34,504,34],[532,4,505,4],[532,10,505,10,"state"],[532,15,505,15],[532,18,505,18,"createStateObject"],[532,35,505,35],[532,36,505,36,"initialRoute"],[532,48,505,48],[532,50,505,50,"route"],[532,55,505,55],[532,57,505,57,"routes"],[532,63,505,63],[532,64,505,64,"length"],[532,70,505,70],[532,75,505,75],[532,76,505,76],[532,77,505,77],[533,4,506,4],[533,8,506,8,"routes"],[533,14,506,14],[533,15,506,15,"length"],[533,21,506,21],[533,24,506,24],[533,25,506,25],[533,27,506,27],[534,6,507,8],[534,10,507,12,"nestedState"],[534,21,507,23],[534,24,507,26,"state"],[534,29,507,31],[535,6,508,8],[535,13,508,16,"route"],[535,18,508,21],[535,21,508,24,"routes"],[535,27,508,30],[535,28,508,31,"shift"],[535,33,508,36],[535,34,508,37],[535,35,508,38],[535,37,508,41],[536,8,509,12,"initialRoute"],[536,20,509,24],[536,23,509,27,"findInitialRoute"],[536,39,509,43],[536,40,509,44,"route"],[536,45,509,49],[536,46,509,50,"name"],[536,50,509,54],[536,52,509,56,"parentScreens"],[536,65,509,69],[536,67,509,71,"initialRoutes"],[536,80,509,84],[536,81,509,85],[537,8,510,12],[537,14,510,18,"nestedStateIndex"],[537,30,510,34],[537,33,510,37,"nestedState"],[537,44,510,48],[537,45,510,49,"index"],[537,50,510,54],[537,54,510,58,"nestedState"],[537,65,510,69],[537,66,510,70,"routes"],[537,72,510,76],[537,73,510,77,"length"],[537,79,510,83],[537,82,510,86],[537,83,510,87],[538,8,511,12,"nestedState"],[538,19,511,23],[538,20,511,24,"routes"],[538,26,511,30],[538,27,511,31,"nestedStateIndex"],[538,43,511,47],[538,44,511,48],[538,45,511,49,"state"],[538,50,511,54],[538,53,511,57,"createStateObject"],[538,70,511,74],[538,71,511,75,"initialRoute"],[538,83,511,87],[538,85,511,89,"route"],[538,90,511,94],[538,92,511,96,"routes"],[538,98,511,102],[538,99,511,103,"length"],[538,105,511,109],[538,110,511,114],[538,111,511,115],[538,112,511,116],[539,8,512,12],[539,12,512,16,"routes"],[539,18,512,22],[539,19,512,23,"length"],[539,25,512,29],[539,28,512,32],[539,29,512,33],[539,31,512,35],[540,10,513,16,"nestedState"],[540,21,513,27],[540,24,513,30,"nestedState"],[540,35,513,41],[540,36,513,42,"routes"],[540,42,513,48],[540,43,513,49,"nestedStateIndex"],[540,59,513,65],[540,60,513,66],[540,61,513,67,"state"],[540,66,513,72],[541,8,514,12],[542,8,515,12,"parentScreens"],[542,21,515,25],[542,22,515,26,"push"],[542,26,515,30],[542,27,515,31,"route"],[542,32,515,36],[542,33,515,37,"name"],[542,37,515,41],[542,38,515,42],[543,6,516,8],[544,4,517,4],[545,4,518,4,"route"],[545,9,518,9],[545,12,518,12],[545,13,518,13],[545,14,518,14],[545,16,518,16,"findFocusedRoute_1"],[545,34,518,34],[545,35,518,35,"findFocusedRoute"],[545,51,518,51],[545,53,518,53,"state"],[545,58,518,58],[545,59,518,59],[546,4,519,4],[547,4,520,4,"route"],[547,9,520,9],[547,10,520,10,"path"],[547,14,520,14],[547,17,520,17,"expoURL"],[547,24,520,24],[547,25,520,25,"pathWithoutGroups"],[547,42,520,42],[548,4,521,4],[549,4,522,4],[550,4,523,4],[551,4,524,4],[552,4,525,4],[552,10,525,10,"params"],[552,16,525,16],[552,19,525,19,"expo"],[552,23,525,23],[552,24,525,24,"parseQueryParams"],[552,40,525,40],[552,41,525,41,"path"],[552,45,525,45],[552,47,525,47,"route"],[552,52,525,52],[552,54,525,54,"flatConfig"],[552,64,525,64],[552,67,525,67,"findParseConfigForRoute"],[552,90,525,90],[552,91,525,91,"route"],[552,96,525,96],[552,97,525,97,"name"],[552,101,525,101],[552,103,525,103,"flatConfig"],[552,113,525,113],[552,114,525,114],[552,117,525,117,"undefined"],[552,126,525,126],[552,128,525,128,"hash"],[552,132,525,132],[552,133,525,133],[553,4,526,4],[554,4,527,4],[555,4,528,4],[556,4,529,4],[556,8,529,8,"params"],[556,14,529,14],[556,16,529,16],[557,6,530,8,"route"],[557,11,530,13],[557,12,530,14,"params"],[557,18,530,20],[557,21,530,20,"Object"],[557,27,530,20],[557,28,530,20,"assign"],[557,34,530,20],[557,39,530,28,"route"],[557,44,530,33],[557,45,530,34,"params"],[557,51,530,40],[557,53,530,45,"params"],[557,59,530,51],[557,60,530,53],[558,4,531,4],[559,4,532,4],[560,4,533,4],[560,11,533,11,"state"],[560,16,533,16],[561,2,534,0],[561,3,534,1],[562,2,535,0],[563,2,536,0],[564,2,537,0],[565,2,538,0],[566,2,539,0],[567,2,540,0],[568,2,541,0],[569,2,542,0],[570,2,543,0],[571,2,544,0],[572,2,545,0],[573,2,546,0],[574,2,547,0],[575,2,548,0],[576,0,548,0],[576,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","getStateFromPath","remaining.split.filter.map$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getNormalizedConfigs","Object.keys.map$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.reduce$argument_0","config.routeNames.map$argument_0","configs.find$argument_0","normalizedPath.split.reduce$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;wDCC;CDE;AI6B;iBCuC;SDG;0EEqB,oBF;CJmB;AOQ;CPW;AQC;CRa;ASC;CTS;AUC;4CCO,qED;CVgD;AYC;mBCE;6DCM,sBD,YE,sBF;KDQ;CZC;AgBC;uBCC;MDO;ChBC;kBkBC;yBCC,mBD;clBE;4BoBC;kECc;aDmB;2CEE;iDCC;iBDG;4BEU;iBFmB;aFM;CpBS;gCyBC;gDCoC;aDG;CzBK;yB2BC;C3B+B;gC4BC;C5BO;yB6BE;C7BgB;0B8BG;C9B8B;gC+BC;C/BkC"},"hasCjsExports":true},"type":"js/module"}]}