{"dependencies":[{"name":"@babel/runtime/helpers/createForOfIteratorHelperLoose","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":100,"index":100}}],"key":"Y/2Rvrgl4aDxeJKdk1U58Vc2xw8=","exportNames":["*"],"imports":1}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":311},"end":{"line":12,"column":43,"index":354}}],"key":"bGUa+dDG2WEhPiIlobT3urS95UE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return ChildListCollection;\n    }\n  });\n  var _babelRuntimeHelpersCreateForOfIteratorHelperLoose = require(_dependencyMap[0], \"@babel/runtime/helpers/createForOfIteratorHelperLoose\");\n  var _createForOfIteratorHelperLoose = _interopDefault(_babelRuntimeHelpersCreateForOfIteratorHelperLoose);\n  var _fbjsLibInvariant = require(_dependencyMap[1], \"fbjs/lib/invariant\");\n  var invariant = _interopDefault(_fbjsLibInvariant);\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  class ChildListCollection {\n    constructor() {\n      this._cellKeyToChildren = new Map();\n      this._childrenToCellKey = new Map();\n    }\n    add(list, cellKey) {\n      var _this$_cellKeyToChild;\n      (0, invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n      var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild !== void 0 ? _this$_cellKeyToChild : new Set();\n      cellLists.add(list);\n      this._cellKeyToChildren.set(cellKey, cellLists);\n      this._childrenToCellKey.set(list, cellKey);\n    }\n    remove(list) {\n      var cellKey = this._childrenToCellKey.get(list);\n      (0, invariant.default)(cellKey != null, 'Trying to remove non-present child list');\n      this._childrenToCellKey.delete(list);\n      var cellLists = this._cellKeyToChildren.get(cellKey);\n      (0, invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');\n      cellLists.delete(list);\n      if (cellLists.size === 0) {\n        this._cellKeyToChildren.delete(cellKey);\n      }\n    }\n    forEach(fn) {\n      for (var _iterator = (0, _createForOfIteratorHelperLoose.default)(this._cellKeyToChildren.values()), _step; !(_step = _iterator()).done;) {\n        var listSet = _step.value;\n        for (var _iterator2 = (0, _createForOfIteratorHelperLoose.default)(listSet), _step2; !(_step2 = _iterator2()).done;) {\n          var list = _step2.value;\n          fn(list);\n        }\n      }\n    }\n    forEachInCell(cellKey, fn) {\n      var _this$_cellKeyToChild2;\n      var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild2 !== void 0 ? _this$_cellKeyToChild2 : [];\n      for (var _iterator3 = (0, _createForOfIteratorHelperLoose.default)(listSet), _step3; !(_step3 = _iterator3()).done;) {\n        var list = _step3.value;\n        fn(list);\n      }\n    }\n    anyInCell(cellKey, fn) {\n      var _this$_cellKeyToChild3;\n      var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild3 !== void 0 ? _this$_cellKeyToChild3 : [];\n      for (var _iterator4 = (0, _createForOfIteratorHelperLoose.default)(listSet), _step4; !(_step4 = _iterator4()).done;) {\n        var list = _step4.value;\n        if (fn(list)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    size() {\n      return this._childrenToCellKey.size;\n    }\n  }\n});","lineCount":88,"map":[[12,2,13,15,"Object"],[12,8,13,15],[12,9,13,15,"defineProperty"],[12,23,13,15],[12,24,13,15,"exports"],[12,31,13,15],[13,4,13,15,"enumerable"],[13,14,13,15],[14,4,13,15,"get"],[14,7,13,15],[14,18,13,15,"get"],[14,19,13,15],[15,6,13,15],[15,13,13,15,"ChildListCollection"],[15,32,13,15],[16,4,13,15],[17,2,13,15],[18,2,1,0],[18,6,1,0,"_babelRuntimeHelpersCreateForOfIteratorHelperLoose"],[18,56,1,0],[18,59,1,0,"require"],[18,66,1,0],[18,67,1,0,"_dependencyMap"],[18,81,1,0],[19,2,1,0],[19,6,1,0,"_createForOfIteratorHelperLoose"],[19,37,1,0],[19,40,1,0,"_interopDefault"],[19,55,1,0],[19,56,1,0,"_babelRuntimeHelpersCreateForOfIteratorHelperLoose"],[19,106,1,0],[20,2,12,0],[20,6,12,0,"_fbjsLibInvariant"],[20,23,12,0],[20,26,12,0,"require"],[20,33,12,0],[20,34,12,0,"_dependencyMap"],[20,48,12,0],[21,2,12,0],[21,6,12,0,"invariant"],[21,15,12,0],[21,18,12,0,"_interopDefault"],[21,33,12,0],[21,34,12,0,"_fbjsLibInvariant"],[21,51,12,0],[22,2,2,0],[23,0,3,0],[24,0,4,0],[25,0,5,0],[26,0,6,0],[27,0,7,0],[28,0,8,0],[29,0,9,0],[30,0,10,0],[32,2,13,15],[32,8,13,21,"ChildListCollection"],[32,27,13,40],[32,28,13,41],[33,4,14,2,"constructor"],[33,15,14,13,"constructor"],[33,16,14,13],[33,18,14,16],[34,6,15,4],[34,10,15,8],[34,11,15,9,"_cellKeyToChildren"],[34,29,15,27],[34,32,15,30],[34,36,15,34,"Map"],[34,39,15,37],[34,40,15,38],[34,41,15,39],[35,6,16,4],[35,10,16,8],[35,11,16,9,"_childrenToCellKey"],[35,29,16,27],[35,32,16,30],[35,36,16,34,"Map"],[35,39,16,37],[35,40,16,38],[35,41,16,39],[36,4,17,2],[37,4,18,2,"add"],[37,7,18,5,"add"],[37,8,18,6,"list"],[37,12,18,10],[37,14,18,12,"cellKey"],[37,21,18,19],[37,23,18,21],[38,6,19,4],[38,10,19,8,"_this$_cellKeyToChild"],[38,31,19,29],[39,6,20,4],[39,10,20,4,"invariant"],[39,19,20,13],[39,20,20,13,"default"],[39,27,20,13],[39,29,20,14],[39,30,20,15],[39,34,20,19],[39,35,20,20,"_childrenToCellKey"],[39,53,20,38],[39,54,20,39,"has"],[39,57,20,42],[39,58,20,43,"list"],[39,62,20,47],[39,63,20,48],[39,65,20,50],[39,107,20,92],[39,108,20,93],[40,6,21,4],[40,10,21,8,"cellLists"],[40,19,21,17],[40,22,21,20],[40,23,21,21,"_this$_cellKeyToChild"],[40,44,21,42],[40,47,21,45],[40,51,21,49],[40,52,21,50,"_cellKeyToChildren"],[40,70,21,68],[40,71,21,69,"get"],[40,74,21,72],[40,75,21,73,"cellKey"],[40,82,21,80],[40,83,21,81],[40,89,21,87],[40,93,21,91],[40,97,21,95,"_this$_cellKeyToChild"],[40,118,21,116],[40,123,21,121],[40,128,21,126],[40,129,21,127],[40,132,21,130,"_this$_cellKeyToChild"],[40,153,21,151],[40,156,21,154],[40,160,21,158,"Set"],[40,163,21,161],[40,164,21,162],[40,165,21,163],[41,6,22,4,"cellLists"],[41,15,22,13],[41,16,22,14,"add"],[41,19,22,17],[41,20,22,18,"list"],[41,24,22,22],[41,25,22,23],[42,6,23,4],[42,10,23,8],[42,11,23,9,"_cellKeyToChildren"],[42,29,23,27],[42,30,23,28,"set"],[42,33,23,31],[42,34,23,32,"cellKey"],[42,41,23,39],[42,43,23,41,"cellLists"],[42,52,23,50],[42,53,23,51],[43,6,24,4],[43,10,24,8],[43,11,24,9,"_childrenToCellKey"],[43,29,24,27],[43,30,24,28,"set"],[43,33,24,31],[43,34,24,32,"list"],[43,38,24,36],[43,40,24,38,"cellKey"],[43,47,24,45],[43,48,24,46],[44,4,25,2],[45,4,26,2,"remove"],[45,10,26,8,"remove"],[45,11,26,9,"list"],[45,15,26,13],[45,17,26,15],[46,6,27,4],[46,10,27,8,"cellKey"],[46,17,27,15],[46,20,27,18],[46,24,27,22],[46,25,27,23,"_childrenToCellKey"],[46,43,27,41],[46,44,27,42,"get"],[46,47,27,45],[46,48,27,46,"list"],[46,52,27,50],[46,53,27,51],[47,6,28,4],[47,10,28,4,"invariant"],[47,19,28,13],[47,20,28,13,"default"],[47,27,28,13],[47,29,28,14,"cellKey"],[47,36,28,21],[47,40,28,25],[47,44,28,29],[47,46,28,31],[47,87,28,72],[47,88,28,73],[48,6,29,4],[48,10,29,8],[48,11,29,9,"_childrenToCellKey"],[48,29,29,27],[48,30,29,28,"delete"],[48,36,29,34],[48,37,29,35,"list"],[48,41,29,39],[48,42,29,40],[49,6,30,4],[49,10,30,8,"cellLists"],[49,19,30,17],[49,22,30,20],[49,26,30,24],[49,27,30,25,"_cellKeyToChildren"],[49,45,30,43],[49,46,30,44,"get"],[49,49,30,47],[49,50,30,48,"cellKey"],[49,57,30,55],[49,58,30,56],[50,6,31,4],[50,10,31,4,"invariant"],[50,19,31,13],[50,20,31,13,"default"],[50,27,31,13],[50,29,31,14,"cellLists"],[50,38,31,23],[50,40,31,25],[50,83,31,68],[50,84,31,69],[51,6,32,4,"cellLists"],[51,15,32,13],[51,16,32,14,"delete"],[51,22,32,20],[51,23,32,21,"list"],[51,27,32,25],[51,28,32,26],[52,6,33,4],[52,10,33,8,"cellLists"],[52,19,33,17],[52,20,33,18,"size"],[52,24,33,22],[52,29,33,27],[52,30,33,28],[52,32,33,30],[53,8,34,6],[53,12,34,10],[53,13,34,11,"_cellKeyToChildren"],[53,31,34,29],[53,32,34,30,"delete"],[53,38,34,36],[53,39,34,37,"cellKey"],[53,46,34,44],[53,47,34,45],[54,6,35,4],[55,4,36,2],[56,4,37,2,"forEach"],[56,11,37,9,"forEach"],[56,12,37,10,"fn"],[56,14,37,12],[56,16,37,14],[57,6,38,4],[57,11,38,9],[57,15,38,13,"_iterator"],[57,24,38,22],[57,27,38,25],[57,31,38,25,"_createForOfIteratorHelperLoose"],[57,62,38,56],[57,63,38,56,"default"],[57,70,38,56],[57,72,38,57],[57,76,38,61],[57,77,38,62,"_cellKeyToChildren"],[57,95,38,80],[57,96,38,81,"values"],[57,102,38,87],[57,103,38,88],[57,104,38,89],[57,105,38,90],[57,107,38,92,"_step"],[57,112,38,97],[57,114,38,99],[57,115,38,100],[57,116,38,101,"_step"],[57,121,38,106],[57,124,38,109,"_iterator"],[57,133,38,118],[57,134,38,119],[57,135,38,120],[57,137,38,122,"done"],[57,141,38,126],[57,144,38,129],[58,8,39,6],[58,12,39,10,"listSet"],[58,19,39,17],[58,22,39,20,"_step"],[58,27,39,25],[58,28,39,26,"value"],[58,33,39,31],[59,8,40,6],[59,13,40,11],[59,17,40,15,"_iterator2"],[59,27,40,25],[59,30,40,28],[59,34,40,28,"_createForOfIteratorHelperLoose"],[59,65,40,59],[59,66,40,59,"default"],[59,73,40,59],[59,75,40,60,"listSet"],[59,82,40,67],[59,83,40,68],[59,85,40,70,"_step2"],[59,91,40,76],[59,93,40,78],[59,94,40,79],[59,95,40,80,"_step2"],[59,101,40,86],[59,104,40,89,"_iterator2"],[59,114,40,99],[59,115,40,100],[59,116,40,101],[59,118,40,103,"done"],[59,122,40,107],[59,125,40,110],[60,10,41,8],[60,14,41,12,"list"],[60,18,41,16],[60,21,41,19,"_step2"],[60,27,41,25],[60,28,41,26,"value"],[60,33,41,31],[61,10,42,8,"fn"],[61,12,42,10],[61,13,42,11,"list"],[61,17,42,15],[61,18,42,16],[62,8,43,6],[63,6,44,4],[64,4,45,2],[65,4,46,2,"forEachInCell"],[65,17,46,15,"forEachInCell"],[65,18,46,16,"cellKey"],[65,25,46,23],[65,27,46,25,"fn"],[65,29,46,27],[65,31,46,29],[66,6,47,4],[66,10,47,8,"_this$_cellKeyToChild2"],[66,32,47,30],[67,6,48,4],[67,10,48,8,"listSet"],[67,17,48,15],[67,20,48,18],[67,21,48,19,"_this$_cellKeyToChild2"],[67,43,48,41],[67,46,48,44],[67,50,48,48],[67,51,48,49,"_cellKeyToChildren"],[67,69,48,67],[67,70,48,68,"get"],[67,73,48,71],[67,74,48,72,"cellKey"],[67,81,48,79],[67,82,48,80],[67,88,48,86],[67,92,48,90],[67,96,48,94,"_this$_cellKeyToChild2"],[67,118,48,116],[67,123,48,121],[67,128,48,126],[67,129,48,127],[67,132,48,130,"_this$_cellKeyToChild2"],[67,154,48,152],[67,157,48,155],[67,159,48,157],[68,6,49,4],[68,11,49,9],[68,15,49,13,"_iterator3"],[68,25,49,23],[68,28,49,26],[68,32,49,26,"_createForOfIteratorHelperLoose"],[68,63,49,57],[68,64,49,57,"default"],[68,71,49,57],[68,73,49,58,"listSet"],[68,80,49,65],[68,81,49,66],[68,83,49,68,"_step3"],[68,89,49,74],[68,91,49,76],[68,92,49,77],[68,93,49,78,"_step3"],[68,99,49,84],[68,102,49,87,"_iterator3"],[68,112,49,97],[68,113,49,98],[68,114,49,99],[68,116,49,101,"done"],[68,120,49,105],[68,123,49,108],[69,8,50,6],[69,12,50,10,"list"],[69,16,50,14],[69,19,50,17,"_step3"],[69,25,50,23],[69,26,50,24,"value"],[69,31,50,29],[70,8,51,6,"fn"],[70,10,51,8],[70,11,51,9,"list"],[70,15,51,13],[70,16,51,14],[71,6,52,4],[72,4,53,2],[73,4,54,2,"anyInCell"],[73,13,54,11,"anyInCell"],[73,14,54,12,"cellKey"],[73,21,54,19],[73,23,54,21,"fn"],[73,25,54,23],[73,27,54,25],[74,6,55,4],[74,10,55,8,"_this$_cellKeyToChild3"],[74,32,55,30],[75,6,56,4],[75,10,56,8,"listSet"],[75,17,56,15],[75,20,56,18],[75,21,56,19,"_this$_cellKeyToChild3"],[75,43,56,41],[75,46,56,44],[75,50,56,48],[75,51,56,49,"_cellKeyToChildren"],[75,69,56,67],[75,70,56,68,"get"],[75,73,56,71],[75,74,56,72,"cellKey"],[75,81,56,79],[75,82,56,80],[75,88,56,86],[75,92,56,90],[75,96,56,94,"_this$_cellKeyToChild3"],[75,118,56,116],[75,123,56,121],[75,128,56,126],[75,129,56,127],[75,132,56,130,"_this$_cellKeyToChild3"],[75,154,56,152],[75,157,56,155],[75,159,56,157],[76,6,57,4],[76,11,57,9],[76,15,57,13,"_iterator4"],[76,25,57,23],[76,28,57,26],[76,32,57,26,"_createForOfIteratorHelperLoose"],[76,63,57,57],[76,64,57,57,"default"],[76,71,57,57],[76,73,57,58,"listSet"],[76,80,57,65],[76,81,57,66],[76,83,57,68,"_step4"],[76,89,57,74],[76,91,57,76],[76,92,57,77],[76,93,57,78,"_step4"],[76,99,57,84],[76,102,57,87,"_iterator4"],[76,112,57,97],[76,113,57,98],[76,114,57,99],[76,116,57,101,"done"],[76,120,57,105],[76,123,57,108],[77,8,58,6],[77,12,58,10,"list"],[77,16,58,14],[77,19,58,17,"_step4"],[77,25,58,23],[77,26,58,24,"value"],[77,31,58,29],[78,8,59,6],[78,12,59,10,"fn"],[78,14,59,12],[78,15,59,13,"list"],[78,19,59,17],[78,20,59,18],[78,22,59,20],[79,10,60,8],[79,17,60,15],[79,21,60,19],[80,8,61,6],[81,6,62,4],[82,6,63,4],[82,13,63,11],[82,18,63,16],[83,4,64,2],[84,4,65,2,"size"],[84,8,65,6,"size"],[84,9,65,6],[84,11,65,9],[85,6,66,4],[85,13,66,11],[85,17,66,15],[85,18,66,16,"_childrenToCellKey"],[85,36,66,34],[85,37,66,35,"size"],[85,41,66,39],[86,4,67,2],[87,2,68,0],[88,0,68,1],[88,3]],"functionMap":{"names":["<global>","ChildListCollection","constructor","add","remove","forEach","forEachInCell","anyInCell","size"],"mappings":"AAA;eCY;ECC;GDG;EEC;GFO;EGC;GHU;EIC;GJQ;EKC;GLO;EMC;GNU;EOC;GPE"},"hasCjsExports":false},"type":"js/module"}]}