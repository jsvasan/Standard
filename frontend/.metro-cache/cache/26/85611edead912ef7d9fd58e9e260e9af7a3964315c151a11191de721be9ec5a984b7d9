{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.loadStaticParamsAsync = loadStaticParamsAsync;\n  exports.evalStaticParamsAsync = evalStaticParamsAsync;\n  exports.assertStaticParams = assertStaticParams;\n  async function loadStaticParamsAsync(route) {\n    const expandedChildren = await Promise.all(route.children.map(route => loadStaticParamsRecursive(route, {\n      parentParams: {}\n    })));\n    route.children = expandedChildren.flat();\n    return route;\n  }\n  async function evalStaticParamsAsync(route, props, generateStaticParams) {\n    if (!route.dynamic && generateStaticParams) {\n      throw new Error('Cannot use generateStaticParams in a route without dynamic segments: ' + route.contextKey);\n    }\n    if (generateStaticParams) {\n      const staticParams = await generateStaticParams({\n        params: props.parentParams || {}\n      });\n      assertStaticParamsType(staticParams);\n      // Assert that at least one param from each matches the dynamic route.\n      staticParams.forEach(params => assertStaticParams(route, params));\n      return staticParams;\n    }\n    return null;\n  }\n  async function loadStaticParamsRecursive(route, props) {\n    if (!route?.dynamic && !route?.children?.length) {\n      return [route];\n    }\n    const loaded = await route.loadRoute();\n    const staticParams = (await evalStaticParamsAsync(route, props, loaded.generateStaticParams)) ?? [];\n    const traverseForNode = async nextParams => {\n      const nextChildren = [];\n      for (const child of route.children) {\n        const children = await loadStaticParamsRecursive(child, {\n          ...props,\n          parentParams: nextParams\n        });\n        nextChildren.push(...children);\n      }\n      return uniqBy(nextChildren, i => i.route);\n    };\n    if (!staticParams.length) {\n      const nextParams = {\n        ...props.parentParams\n      };\n      route.children = await traverseForNode(nextParams);\n      return [route];\n    }\n    const createParsedRouteName = (input, params) => {\n      let parsedRouteName = input;\n      route.dynamic?.map(query => {\n        const param = params[query.name];\n        const formattedParameter = Array.isArray(param) ? param.join('/') : param;\n        if (query.deep) {\n          parsedRouteName = parsedRouteName.replace(`[...${query.name}]`, formattedParameter);\n        } else {\n          parsedRouteName = parsedRouteName.replace(`[${query.name}]`, param);\n        }\n      });\n      return parsedRouteName;\n    };\n    const generatedRoutes = await Promise.all(staticParams.map(async params => {\n      const nextParams = {\n        ...props.parentParams,\n        ...params\n      };\n      const dynamicChildren = await traverseForNode(nextParams);\n      const parsedRoute = createParsedRouteName(route.route, params);\n      const generatedContextKey = createParsedRouteName(route.contextKey, params);\n      return {\n        ...route,\n        // TODO: Add a new field for this\n        contextKey: generatedContextKey,\n        // Convert the dynamic route to a static route.\n        dynamic: null,\n        route: parsedRoute,\n        children: dynamicChildren\n      };\n    }));\n    return [route, ...generatedRoutes];\n  }\n  /** lodash.uniqBy */\n  function uniqBy(array, key) {\n    const seen = {};\n    return array.filter(item => {\n      const k = key(item);\n      if (seen[k]) {\n        return false;\n      }\n      seen[k] = true;\n      return true;\n    });\n  }\n  function assertStaticParamsType(params) {\n    if (!Array.isArray(params)) {\n      throw new Error(`generateStaticParams() must return an array of params, received ${params}`);\n    }\n  }\n  function formatExpected(expected, received) {\n    const total = {\n      ...received\n    };\n    for (const item of expected) {\n      if (total[item] == null) {\n        total[item] = String(total[item]);\n      } else {\n        total[item] = `\"${total[item]}\"`;\n      }\n    }\n    return ['{', Object.entries(total).map(([key, value]) => `  \"${key}\": ${value}`).join(',\\n'), '}'].join('\\n');\n  }\n  function assertStaticParams(route, params) {\n    // Type checking\n    if (!route.dynamic) {\n      throw new Error('assertStaticParams() must be called on a dynamic route.');\n    }\n    const matches = route.dynamic.every(dynamic => {\n      const value = params[dynamic.name];\n      return value !== undefined && value !== null;\n    });\n    if (!matches) {\n      const plural = route.dynamic.length > 1 ? 's' : '';\n      const expected = route.dynamic.map(dynamic => dynamic.name);\n      throw new Error(`[${route.contextKey}]: generateStaticParams() must return an array of params that match the dynamic route${plural}. Expected non-nullish values for key${plural}: ${expected.map(v => `\"${v}\"`).join(', ')}.\\nReceived:\\n${formatExpected(expected, params)}`);\n    }\n    const validateSingleParam = (dynamic, value, allowMultipleSegments) => {\n      if (typeof value !== 'string') {\n        throw new Error(`generateStaticParams() for route \"${route.contextKey}\" expected param \"${dynamic.name}\" to be of type string, instead found \"${typeof value}\" while parsing \"${value}\".`);\n      }\n      const parts = value.split('/').filter(Boolean);\n      if (parts.length > 1 && !allowMultipleSegments) {\n        throw new Error(`generateStaticParams() for route \"${route.contextKey}\" expected param \"${dynamic.name}\" to not contain \"/\" (multiple segments) while parsing \"${value}\".`);\n      }\n      if (parts.length === 0) {\n        throw new Error(`generateStaticParams() for route \"${route.contextKey}\" expected param \"${dynamic.name}\" not to be empty while parsing \"${value}\".`);\n      }\n    };\n    // `[shape]/bar/[...colors]` -> `[shape]`, `[...colors]`\n    for (const dynamic of route.dynamic) {\n      let parameter = params[dynamic.name];\n      if (dynamic.deep) {\n        if (Array.isArray(parameter)) {\n          parameter = parameter.filter(Boolean).join('/');\n        }\n        validateSingleParam(dynamic, parameter, true);\n      } else {\n        validateSingleParam(dynamic, parameter);\n      }\n    }\n  }\n});","lineCount":158,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"loadStaticParamsAsync"],[7,31,3,29],[7,34,3,32,"loadStaticParamsAsync"],[7,55,3,53],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"evalStaticParamsAsync"],[8,31,4,29],[8,34,4,32,"evalStaticParamsAsync"],[8,55,4,53],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"assertStaticParams"],[9,28,5,26],[9,31,5,29,"assertStaticParams"],[9,49,5,47],[10,2,6,0],[10,17,6,15,"loadStaticParamsAsync"],[10,38,6,36,"loadStaticParamsAsync"],[10,39,6,37,"route"],[10,44,6,42],[10,46,6,44],[11,4,7,4],[11,10,7,10,"expandedChildren"],[11,26,7,26],[11,29,7,29],[11,35,7,35,"Promise"],[11,42,7,42],[11,43,7,43,"all"],[11,46,7,46],[11,47,7,47,"route"],[11,52,7,52],[11,53,7,53,"children"],[11,61,7,61],[11,62,7,62,"map"],[11,65,7,65],[11,66,7,67,"route"],[11,71,7,72],[11,75,7,77,"loadStaticParamsRecursive"],[11,100,7,102],[11,101,7,103,"route"],[11,106,7,108],[11,108,7,110],[12,6,7,112,"parentParams"],[12,18,7,124],[12,20,7,126],[12,21,7,127],[13,4,7,129],[13,5,7,130],[13,6,7,131],[13,7,7,132],[13,8,7,133],[14,4,8,4,"route"],[14,9,8,9],[14,10,8,10,"children"],[14,18,8,18],[14,21,8,21,"expandedChildren"],[14,37,8,37],[14,38,8,38,"flat"],[14,42,8,42],[14,43,8,43],[14,44,8,44],[15,4,9,4],[15,11,9,11,"route"],[15,16,9,16],[16,2,10,0],[17,2,11,0],[17,17,11,15,"evalStaticParamsAsync"],[17,38,11,36,"evalStaticParamsAsync"],[17,39,11,37,"route"],[17,44,11,42],[17,46,11,44,"props"],[17,51,11,49],[17,53,11,51,"generateStaticParams"],[17,73,11,71],[17,75,11,73],[18,4,12,4],[18,8,12,8],[18,9,12,9,"route"],[18,14,12,14],[18,15,12,15,"dynamic"],[18,22,12,22],[18,26,12,26,"generateStaticParams"],[18,46,12,46],[18,48,12,48],[19,6,13,8],[19,12,13,14],[19,16,13,18,"Error"],[19,21,13,23],[19,22,13,24],[19,93,13,95],[19,96,13,98,"route"],[19,101,13,103],[19,102,13,104,"contextKey"],[19,112,13,114],[19,113,13,115],[20,4,14,4],[21,4,15,4],[21,8,15,8,"generateStaticParams"],[21,28,15,28],[21,30,15,30],[22,6,16,8],[22,12,16,14,"staticParams"],[22,24,16,26],[22,27,16,29],[22,33,16,35,"generateStaticParams"],[22,53,16,55],[22,54,16,56],[23,8,17,12,"params"],[23,14,17,18],[23,16,17,20,"props"],[23,21,17,25],[23,22,17,26,"parentParams"],[23,34,17,38],[23,38,17,42],[23,39,17,43],[24,6,18,8],[24,7,18,9],[24,8,18,10],[25,6,19,8,"assertStaticParamsType"],[25,28,19,30],[25,29,19,31,"staticParams"],[25,41,19,43],[25,42,19,44],[26,6,20,8],[27,6,21,8,"staticParams"],[27,18,21,20],[27,19,21,21,"forEach"],[27,26,21,28],[27,27,21,30,"params"],[27,33,21,36],[27,37,21,41,"assertStaticParams"],[27,55,21,59],[27,56,21,60,"route"],[27,61,21,65],[27,63,21,67,"params"],[27,69,21,73],[27,70,21,74],[27,71,21,75],[28,6,22,8],[28,13,22,15,"staticParams"],[28,25,22,27],[29,4,23,4],[30,4,24,4],[30,11,24,11],[30,15,24,15],[31,2,25,0],[32,2,26,0],[32,17,26,15,"loadStaticParamsRecursive"],[32,42,26,40,"loadStaticParamsRecursive"],[32,43,26,41,"route"],[32,48,26,46],[32,50,26,48,"props"],[32,55,26,53],[32,57,26,55],[33,4,27,4],[33,8,27,8],[33,9,27,9,"route"],[33,14,27,14],[33,16,27,16,"dynamic"],[33,23,27,23],[33,27,27,27],[33,28,27,28,"route"],[33,33,27,33],[33,35,27,35,"children"],[33,43,27,43],[33,45,27,45,"length"],[33,51,27,51],[33,53,27,53],[34,6,28,8],[34,13,28,15],[34,14,28,16,"route"],[34,19,28,21],[34,20,28,22],[35,4,29,4],[36,4,30,4],[36,10,30,10,"loaded"],[36,16,30,16],[36,19,30,19],[36,25,30,25,"route"],[36,30,30,30],[36,31,30,31,"loadRoute"],[36,40,30,40],[36,41,30,41],[36,42,30,42],[37,4,31,4],[37,10,31,10,"staticParams"],[37,22,31,22],[37,25,31,25],[37,26,31,26],[37,32,31,32,"evalStaticParamsAsync"],[37,53,31,53],[37,54,31,54,"route"],[37,59,31,59],[37,61,31,61,"props"],[37,66,31,66],[37,68,31,68,"loaded"],[37,74,31,74],[37,75,31,75,"generateStaticParams"],[37,95,31,95],[37,96,31,96],[37,101,31,101],[37,103,31,103],[38,4,32,4],[38,10,32,10,"traverseForNode"],[38,25,32,25],[38,28,32,28],[38,34,32,35,"nextParams"],[38,44,32,45],[38,48,32,50],[39,6,33,8],[39,12,33,14,"nextChildren"],[39,24,33,26],[39,27,33,29],[39,29,33,31],[40,6,34,8],[40,11,34,13],[40,17,34,19,"child"],[40,22,34,24],[40,26,34,28,"route"],[40,31,34,33],[40,32,34,34,"children"],[40,40,34,42],[40,42,34,44],[41,8,35,12],[41,14,35,18,"children"],[41,22,35,26],[41,25,35,29],[41,31,35,35,"loadStaticParamsRecursive"],[41,56,35,60],[41,57,35,61,"child"],[41,62,35,66],[41,64,35,68],[42,10,36,16],[42,13,36,19,"props"],[42,18,36,24],[43,10,37,16,"parentParams"],[43,22,37,28],[43,24,37,30,"nextParams"],[44,8,38,12],[44,9,38,13],[44,10,38,14],[45,8,39,12,"nextChildren"],[45,20,39,24],[45,21,39,25,"push"],[45,25,39,29],[45,26,39,30],[45,29,39,33,"children"],[45,37,39,41],[45,38,39,42],[46,6,40,8],[47,6,41,8],[47,13,41,15,"uniqBy"],[47,19,41,21],[47,20,41,22,"nextChildren"],[47,32,41,34],[47,34,41,37,"i"],[47,35,41,38],[47,39,41,43,"i"],[47,40,41,44],[47,41,41,45,"route"],[47,46,41,50],[47,47,41,51],[48,4,42,4],[48,5,42,5],[49,4,43,4],[49,8,43,8],[49,9,43,9,"staticParams"],[49,21,43,21],[49,22,43,22,"length"],[49,28,43,28],[49,30,43,30],[50,6,44,8],[50,12,44,14,"nextParams"],[50,22,44,24],[50,25,44,27],[51,8,45,12],[51,11,45,15,"props"],[51,16,45,20],[51,17,45,21,"parentParams"],[52,6,46,8],[52,7,46,9],[53,6,47,8,"route"],[53,11,47,13],[53,12,47,14,"children"],[53,20,47,22],[53,23,47,25],[53,29,47,31,"traverseForNode"],[53,44,47,46],[53,45,47,47,"nextParams"],[53,55,47,57],[53,56,47,58],[54,6,48,8],[54,13,48,15],[54,14,48,16,"route"],[54,19,48,21],[54,20,48,22],[55,4,49,4],[56,4,50,4],[56,10,50,10,"createParsedRouteName"],[56,31,50,31],[56,34,50,34,"createParsedRouteName"],[56,35,50,35,"input"],[56,40,50,40],[56,42,50,42,"params"],[56,48,50,48],[56,53,50,53],[57,6,51,8],[57,10,51,12,"parsedRouteName"],[57,25,51,27],[57,28,51,30,"input"],[57,33,51,35],[58,6,52,8,"route"],[58,11,52,13],[58,12,52,14,"dynamic"],[58,19,52,21],[58,21,52,23,"map"],[58,24,52,26],[58,25,52,28,"query"],[58,30,52,33],[58,34,52,38],[59,8,53,12],[59,14,53,18,"param"],[59,19,53,23],[59,22,53,26,"params"],[59,28,53,32],[59,29,53,33,"query"],[59,34,53,38],[59,35,53,39,"name"],[59,39,53,43],[59,40,53,44],[60,8,54,12],[60,14,54,18,"formattedParameter"],[60,32,54,36],[60,35,54,39,"Array"],[60,40,54,44],[60,41,54,45,"isArray"],[60,48,54,52],[60,49,54,53,"param"],[60,54,54,58],[60,55,54,59],[60,58,54,62,"param"],[60,63,54,67],[60,64,54,68,"join"],[60,68,54,72],[60,69,54,73],[60,72,54,76],[60,73,54,77],[60,76,54,80,"param"],[60,81,54,85],[61,8,55,12],[61,12,55,16,"query"],[61,17,55,21],[61,18,55,22,"deep"],[61,22,55,26],[61,24,55,28],[62,10,56,16,"parsedRouteName"],[62,25,56,31],[62,28,56,34,"parsedRouteName"],[62,43,56,49],[62,44,56,50,"replace"],[62,51,56,57],[62,52,56,58],[62,59,56,65,"query"],[62,64,56,70],[62,65,56,71,"name"],[62,69,56,75],[62,72,56,78],[62,74,56,80,"formattedParameter"],[62,92,56,98],[62,93,56,99],[63,8,57,12],[63,9,57,13],[63,15,58,17],[64,10,59,16,"parsedRouteName"],[64,25,59,31],[64,28,59,34,"parsedRouteName"],[64,43,59,49],[64,44,59,50,"replace"],[64,51,59,57],[64,52,59,58],[64,56,59,62,"query"],[64,61,59,67],[64,62,59,68,"name"],[64,66,59,72],[64,69,59,75],[64,71,59,77,"param"],[64,76,59,82],[64,77,59,83],[65,8,60,12],[66,6,61,8],[66,7,61,9],[66,8,61,10],[67,6,62,8],[67,13,62,15,"parsedRouteName"],[67,28,62,30],[68,4,63,4],[68,5,63,5],[69,4,64,4],[69,10,64,10,"generatedRoutes"],[69,25,64,25],[69,28,64,28],[69,34,64,34,"Promise"],[69,41,64,41],[69,42,64,42,"all"],[69,45,64,45],[69,46,64,46,"staticParams"],[69,58,64,58],[69,59,64,59,"map"],[69,62,64,62],[69,63,64,63],[69,69,64,70,"params"],[69,75,64,76],[69,79,64,81],[70,6,65,8],[70,12,65,14,"nextParams"],[70,22,65,24],[70,25,65,27],[71,8,66,12],[71,11,66,15,"props"],[71,16,66,20],[71,17,66,21,"parentParams"],[71,29,66,33],[72,8,67,12],[72,11,67,15,"params"],[73,6,68,8],[73,7,68,9],[74,6,69,8],[74,12,69,14,"dynamicChildren"],[74,27,69,29],[74,30,69,32],[74,36,69,38,"traverseForNode"],[74,51,69,53],[74,52,69,54,"nextParams"],[74,62,69,64],[74,63,69,65],[75,6,70,8],[75,12,70,14,"parsedRoute"],[75,23,70,25],[75,26,70,28,"createParsedRouteName"],[75,47,70,49],[75,48,70,50,"route"],[75,53,70,55],[75,54,70,56,"route"],[75,59,70,61],[75,61,70,63,"params"],[75,67,70,69],[75,68,70,70],[76,6,71,8],[76,12,71,14,"generatedContextKey"],[76,31,71,33],[76,34,71,36,"createParsedRouteName"],[76,55,71,57],[76,56,71,58,"route"],[76,61,71,63],[76,62,71,64,"contextKey"],[76,72,71,74],[76,74,71,76,"params"],[76,80,71,82],[76,81,71,83],[77,6,72,8],[77,13,72,15],[78,8,73,12],[78,11,73,15,"route"],[78,16,73,20],[79,8,74,12],[80,8,75,12,"contextKey"],[80,18,75,22],[80,20,75,24,"generatedContextKey"],[80,39,75,43],[81,8,76,12],[82,8,77,12,"dynamic"],[82,15,77,19],[82,17,77,21],[82,21,77,25],[83,8,78,12,"route"],[83,13,78,17],[83,15,78,19,"parsedRoute"],[83,26,78,30],[84,8,79,12,"children"],[84,16,79,20],[84,18,79,22,"dynamicChildren"],[85,6,80,8],[85,7,80,9],[86,4,81,4],[86,5,81,5],[86,6,81,6],[86,7,81,7],[87,4,82,4],[87,11,82,11],[87,12,82,12,"route"],[87,17,82,17],[87,19,82,19],[87,22,82,22,"generatedRoutes"],[87,37,82,37],[87,38,82,38],[88,2,83,0],[89,2,84,0],[90,2,85,0],[90,11,85,9,"uniqBy"],[90,17,85,15,"uniqBy"],[90,18,85,16,"array"],[90,23,85,21],[90,25,85,23,"key"],[90,28,85,26],[90,30,85,28],[91,4,86,4],[91,10,86,10,"seen"],[91,14,86,14],[91,17,86,17],[91,18,86,18],[91,19,86,19],[92,4,87,4],[92,11,87,11,"array"],[92,16,87,16],[92,17,87,17,"filter"],[92,23,87,23],[92,24,87,25,"item"],[92,28,87,29],[92,32,87,34],[93,6,88,8],[93,12,88,14,"k"],[93,13,88,15],[93,16,88,18,"key"],[93,19,88,21],[93,20,88,22,"item"],[93,24,88,26],[93,25,88,27],[94,6,89,8],[94,10,89,12,"seen"],[94,14,89,16],[94,15,89,17,"k"],[94,16,89,18],[94,17,89,19],[94,19,89,21],[95,8,90,12],[95,15,90,19],[95,20,90,24],[96,6,91,8],[97,6,92,8,"seen"],[97,10,92,12],[97,11,92,13,"k"],[97,12,92,14],[97,13,92,15],[97,16,92,18],[97,20,92,22],[98,6,93,8],[98,13,93,15],[98,17,93,19],[99,4,94,4],[99,5,94,5],[99,6,94,6],[100,2,95,0],[101,2,96,0],[101,11,96,9,"assertStaticParamsType"],[101,33,96,31,"assertStaticParamsType"],[101,34,96,32,"params"],[101,40,96,38],[101,42,96,40],[102,4,97,4],[102,8,97,8],[102,9,97,9,"Array"],[102,14,97,14],[102,15,97,15,"isArray"],[102,22,97,22],[102,23,97,23,"params"],[102,29,97,29],[102,30,97,30],[102,32,97,32],[103,6,98,8],[103,12,98,14],[103,16,98,18,"Error"],[103,21,98,23],[103,22,98,24],[103,89,98,91,"params"],[103,95,98,97],[103,97,98,99],[103,98,98,100],[104,4,99,4],[105,2,100,0],[106,2,101,0],[106,11,101,9,"formatExpected"],[106,25,101,23,"formatExpected"],[106,26,101,24,"expected"],[106,34,101,32],[106,36,101,34,"received"],[106,44,101,42],[106,46,101,44],[107,4,102,4],[107,10,102,10,"total"],[107,15,102,15],[107,18,102,18],[108,6,103,8],[108,9,103,11,"received"],[109,4,104,4],[109,5,104,5],[110,4,105,4],[110,9,105,9],[110,15,105,15,"item"],[110,19,105,19],[110,23,105,23,"expected"],[110,31,105,31],[110,33,105,33],[111,6,106,8],[111,10,106,12,"total"],[111,15,106,17],[111,16,106,18,"item"],[111,20,106,22],[111,21,106,23],[111,25,106,27],[111,29,106,31],[111,31,106,33],[112,8,107,12,"total"],[112,13,107,17],[112,14,107,18,"item"],[112,18,107,22],[112,19,107,23],[112,22,107,26,"String"],[112,28,107,32],[112,29,107,33,"total"],[112,34,107,38],[112,35,107,39,"item"],[112,39,107,43],[112,40,107,44],[112,41,107,45],[113,6,108,8],[113,7,108,9],[113,13,109,13],[114,8,110,12,"total"],[114,13,110,17],[114,14,110,18,"item"],[114,18,110,22],[114,19,110,23],[114,22,110,26],[114,26,110,30,"total"],[114,31,110,35],[114,32,110,36,"item"],[114,36,110,40],[114,37,110,41],[114,40,110,44],[115,6,111,8],[116,4,112,4],[117,4,113,4],[117,11,113,11],[117,12,114,8],[117,15,114,11],[117,17,115,8,"Object"],[117,23,115,14],[117,24,115,15,"entries"],[117,31,115,22],[117,32,115,23,"total"],[117,37,115,28],[117,38,115,29],[117,39,116,13,"map"],[117,42,116,16],[117,43,116,17],[117,44,116,18],[117,45,116,19,"key"],[117,48,116,22],[117,50,116,24,"value"],[117,55,116,29],[117,56,116,30],[117,61,116,35],[117,67,116,41,"key"],[117,70,116,44],[117,76,116,50,"value"],[117,81,116,55],[117,83,116,57],[117,84,116,58],[117,85,117,13,"join"],[117,89,117,17],[117,90,117,18],[117,95,117,23],[117,96,117,24],[117,98,118,8],[117,101,118,11],[117,102,119,5],[117,103,119,6,"join"],[117,107,119,10],[117,108,119,11],[117,112,119,15],[117,113,119,16],[118,2,120,0],[119,2,121,0],[119,11,121,9,"assertStaticParams"],[119,29,121,27,"assertStaticParams"],[119,30,121,28,"route"],[119,35,121,33],[119,37,121,35,"params"],[119,43,121,41],[119,45,121,43],[120,4,122,4],[121,4,123,4],[121,8,123,8],[121,9,123,9,"route"],[121,14,123,14],[121,15,123,15,"dynamic"],[121,22,123,22],[121,24,123,24],[122,6,124,8],[122,12,124,14],[122,16,124,18,"Error"],[122,21,124,23],[122,22,124,24],[122,79,124,81],[122,80,124,82],[123,4,125,4],[124,4,126,4],[124,10,126,10,"matches"],[124,17,126,17],[124,20,126,20,"route"],[124,25,126,25],[124,26,126,26,"dynamic"],[124,33,126,33],[124,34,126,34,"every"],[124,39,126,39],[124,40,126,41,"dynamic"],[124,47,126,48],[124,51,126,53],[125,6,127,8],[125,12,127,14,"value"],[125,17,127,19],[125,20,127,22,"params"],[125,26,127,28],[125,27,127,29,"dynamic"],[125,34,127,36],[125,35,127,37,"name"],[125,39,127,41],[125,40,127,42],[126,6,128,8],[126,13,128,15,"value"],[126,18,128,20],[126,23,128,25,"undefined"],[126,32,128,34],[126,36,128,38,"value"],[126,41,128,43],[126,46,128,48],[126,50,128,52],[127,4,129,4],[127,5,129,5],[127,6,129,6],[128,4,130,4],[128,8,130,8],[128,9,130,9,"matches"],[128,16,130,16],[128,18,130,18],[129,6,131,8],[129,12,131,14,"plural"],[129,18,131,20],[129,21,131,23,"route"],[129,26,131,28],[129,27,131,29,"dynamic"],[129,34,131,36],[129,35,131,37,"length"],[129,41,131,43],[129,44,131,46],[129,45,131,47],[129,48,131,50],[129,51,131,53],[129,54,131,56],[129,56,131,58],[130,6,132,8],[130,12,132,14,"expected"],[130,20,132,22],[130,23,132,25,"route"],[130,28,132,30],[130,29,132,31,"dynamic"],[130,36,132,38],[130,37,132,39,"map"],[130,40,132,42],[130,41,132,44,"dynamic"],[130,48,132,51],[130,52,132,56,"dynamic"],[130,59,132,63],[130,60,132,64,"name"],[130,64,132,68],[130,65,132,69],[131,6,133,8],[131,12,133,14],[131,16,133,18,"Error"],[131,21,133,23],[131,22,133,24],[131,26,133,28,"route"],[131,31,133,33],[131,32,133,34,"contextKey"],[131,42,133,44],[131,130,133,132,"plural"],[131,136,133,138],[131,176,133,178,"plural"],[131,182,133,184],[131,187,133,189,"expected"],[131,195,133,197],[131,196,134,13,"map"],[131,199,134,16],[131,200,134,18,"v"],[131,201,134,19],[131,205,134,24],[131,209,134,28,"v"],[131,210,134,29],[131,213,134,32],[131,214,134,33],[131,215,135,13,"join"],[131,219,135,17],[131,220,135,18],[131,224,135,22],[131,225,135,23],[131,242,135,40,"formatExpected"],[131,256,135,54],[131,257,135,55,"expected"],[131,265,135,63],[131,267,135,65,"params"],[131,273,135,71],[131,274,135,72],[131,276,135,74],[131,277,135,75],[132,4,136,4],[133,4,137,4],[133,10,137,10,"validateSingleParam"],[133,29,137,29],[133,32,137,32,"validateSingleParam"],[133,33,137,33,"dynamic"],[133,40,137,40],[133,42,137,42,"value"],[133,47,137,47],[133,49,137,49,"allowMultipleSegments"],[133,70,137,70],[133,75,137,75],[134,6,138,8],[134,10,138,12],[134,17,138,19,"value"],[134,22,138,24],[134,27,138,29],[134,35,138,37],[134,37,138,39],[135,8,139,12],[135,14,139,18],[135,18,139,22,"Error"],[135,23,139,27],[135,24,139,28],[135,61,139,65,"route"],[135,66,139,70],[135,67,139,71,"contextKey"],[135,77,139,81],[135,98,139,102,"dynamic"],[135,105,139,109],[135,106,139,110,"name"],[135,110,139,114],[135,152,139,156],[135,159,139,163,"value"],[135,164,139,168],[135,184,139,188,"value"],[135,189,139,193],[135,193,139,197],[135,194,139,198],[136,6,140,8],[137,6,141,8],[137,12,141,14,"parts"],[137,17,141,19],[137,20,141,22,"value"],[137,25,141,27],[137,26,141,28,"split"],[137,31,141,33],[137,32,141,34],[137,35,141,37],[137,36,141,38],[137,37,141,39,"filter"],[137,43,141,45],[137,44,141,46,"Boolean"],[137,51,141,53],[137,52,141,54],[138,6,142,8],[138,10,142,12,"parts"],[138,15,142,17],[138,16,142,18,"length"],[138,22,142,24],[138,25,142,27],[138,26,142,28],[138,30,142,32],[138,31,142,33,"allowMultipleSegments"],[138,52,142,54],[138,54,142,56],[139,8,143,12],[139,14,143,18],[139,18,143,22,"Error"],[139,23,143,27],[139,24,143,28],[139,61,143,65,"route"],[139,66,143,70],[139,67,143,71,"contextKey"],[139,77,143,81],[139,98,143,102,"dynamic"],[139,105,143,109],[139,106,143,110,"name"],[139,110,143,114],[139,169,143,173,"value"],[139,174,143,178],[139,178,143,182],[139,179,143,183],[140,6,144,8],[141,6,145,8],[141,10,145,12,"parts"],[141,15,145,17],[141,16,145,18,"length"],[141,22,145,24],[141,27,145,29],[141,28,145,30],[141,30,145,32],[142,8,146,12],[142,14,146,18],[142,18,146,22,"Error"],[142,23,146,27],[142,24,146,28],[142,61,146,65,"route"],[142,66,146,70],[142,67,146,71,"contextKey"],[142,77,146,81],[142,98,146,102,"dynamic"],[142,105,146,109],[142,106,146,110,"name"],[142,110,146,114],[142,146,146,150,"value"],[142,151,146,155],[142,155,146,159],[142,156,146,160],[143,6,147,8],[144,4,148,4],[144,5,148,5],[145,4,149,4],[146,4,150,4],[146,9,150,9],[146,15,150,15,"dynamic"],[146,22,150,22],[146,26,150,26,"route"],[146,31,150,31],[146,32,150,32,"dynamic"],[146,39,150,39],[146,41,150,41],[147,6,151,8],[147,10,151,12,"parameter"],[147,19,151,21],[147,22,151,24,"params"],[147,28,151,30],[147,29,151,31,"dynamic"],[147,36,151,38],[147,37,151,39,"name"],[147,41,151,43],[147,42,151,44],[148,6,152,8],[148,10,152,12,"dynamic"],[148,17,152,19],[148,18,152,20,"deep"],[148,22,152,24],[148,24,152,26],[149,8,153,12],[149,12,153,16,"Array"],[149,17,153,21],[149,18,153,22,"isArray"],[149,25,153,29],[149,26,153,30,"parameter"],[149,35,153,39],[149,36,153,40],[149,38,153,42],[150,10,154,16,"parameter"],[150,19,154,25],[150,22,154,28,"parameter"],[150,31,154,37],[150,32,154,38,"filter"],[150,38,154,44],[150,39,154,45,"Boolean"],[150,46,154,52],[150,47,154,53],[150,48,154,54,"join"],[150,52,154,58],[150,53,154,59],[150,56,154,62],[150,57,154,63],[151,8,155,12],[152,8,156,12,"validateSingleParam"],[152,27,156,31],[152,28,156,32,"dynamic"],[152,35,156,39],[152,37,156,41,"parameter"],[152,46,156,50],[152,48,156,52],[152,52,156,56],[152,53,156,57],[153,6,157,8],[153,7,157,9],[153,13,158,13],[154,8,159,12,"validateSingleParam"],[154,27,159,31],[154,28,159,32,"dynamic"],[154,35,159,39],[154,37,159,41,"parameter"],[154,46,159,50],[154,47,159,51],[155,6,160,8],[156,4,161,4],[157,2,162,0],[158,0,162,1],[158,3]],"functionMap":{"names":["<global>","loadStaticParamsAsync","route.children.map$argument_0","evalStaticParamsAsync","staticParams.forEach$argument_0","loadStaticParamsRecursive","traverseForNode","uniqBy$argument_1","createParsedRouteName","route.dynamic.map$argument_0","staticParams.map$argument_0","uniqBy","array.filter$argument_0","assertStaticParamsType","formatExpected","Object.entries.map$argument_0","assertStaticParams","route.dynamic.every$argument_0","expected.map$argument_0","validateSingleParam"],"mappings":"AAA;ACK;kECC,iED;CDG;AGC;6BCU,6CD;CHI;AKC;4BCM;oCCS,cD;KDC;kCGQ;2BCE;SDS;KHE;+DKC;KLiB;CLE;AWE;wBCE;KDO;CXC;AaC;CbI;AcC;iBCe,wCD;CdI;AgBC;wCCK;KDG;2CPG,yBO;iBEE,eF;gCGG;KHW;ChBc"}},"type":"js/module"}]}