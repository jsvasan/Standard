{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  /**\n   * EventEmitter manages listeners and publishes events to them.\n   *\n   * EventEmitter accepts a single type parameter that defines the valid events\n   * and associated listener argument(s).\n   *\n   * @example\n   *\n   *   const emitter = new EventEmitter<{\n   *     success: [number, string],\n   *     error: [Error],\n   *   }>();\n   *\n   *   emitter.on('success', (statusCode, responseText) => {...});\n   *   emitter.emit('success', 200, '...');\n   *\n   *   emitter.on('error', error => {...});\n   *   emitter.emit('error', new Error('Resource not found'));\n   *\n   */\n  class EventEmitter {\n    constructor() {\n      this._registry = {};\n    }\n    /**\n     * Registers a listener that is called when the supplied event is emitted.\n     * Returns a subscription that has a `remove` method to undo registration.\n     */\n    addListener(eventType, listener, context) {\n      var registrations = allocate(this._registry, eventType);\n      var registration = {\n        context,\n        listener,\n        remove() {\n          registrations.delete(registration);\n        }\n      };\n      registrations.add(registration);\n      return registration;\n    }\n\n    /**\n     * Emits the supplied event. Additional arguments supplied to `emit` will be\n     * passed through to each of the registered listeners.\n     *\n     * If a listener modifies the listeners registered for the same event, those\n     * changes will not be reflected in the current invocation of `emit`.\n     */\n    emit(eventType) {\n      var registrations = this._registry[eventType];\n      if (registrations != null) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        for (var _i = 0, _arr = [...registrations]; _i < _arr.length; _i++) {\n          var registration = _arr[_i];\n          registration.listener.apply(registration.context, args);\n        }\n      }\n    }\n\n    /**\n     * Removes all registered listeners.\n     */\n    removeAllListeners(eventType) {\n      if (eventType == null) {\n        this._registry = {};\n      } else {\n        delete this._registry[eventType];\n      }\n    }\n\n    /**\n     * Returns the number of registered listeners for the supplied event.\n     */\n    listenerCount(eventType) {\n      var registrations = this._registry[eventType];\n      return registrations == null ? 0 : registrations.size;\n    }\n  }\n  exports.default = EventEmitter;\n  function allocate(registry, eventType) {\n    var registrations = registry[eventType];\n    if (registrations == null) {\n      registrations = new Set();\n      registry[eventType] = registrations;\n    }\n    return registrations;\n  }\n});","lineCount":105,"map":[[6,2,1,0],[7,0,2,0],[8,0,3,0],[9,0,4,0],[10,0,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[16,2,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,2,31,15],[36,8,31,21,"EventEmitter"],[36,20,31,33],[36,21,31,34],[37,4,32,2,"constructor"],[37,15,32,13,"constructor"],[37,16,32,13],[37,18,32,16],[38,6,33,4],[38,10,33,8],[38,11,33,9,"_registry"],[38,20,33,18],[38,23,33,21],[38,24,33,22],[38,25,33,23],[39,4,34,2],[40,4,35,2],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,4,39,2,"addListener"],[44,15,39,13,"addListener"],[44,16,39,14,"eventType"],[44,25,39,23],[44,27,39,25,"listener"],[44,35,39,33],[44,37,39,35,"context"],[44,44,39,42],[44,46,39,44],[45,6,40,4],[45,10,40,8,"registrations"],[45,23,40,21],[45,26,40,24,"allocate"],[45,34,40,32],[45,35,40,33],[45,39,40,37],[45,40,40,38,"_registry"],[45,49,40,47],[45,51,40,49,"eventType"],[45,60,40,58],[45,61,40,59],[46,6,41,4],[46,10,41,8,"registration"],[46,22,41,20],[46,25,41,23],[47,8,42,6,"context"],[47,15,42,13],[48,8,43,6,"listener"],[48,16,43,14],[49,8,44,6,"remove"],[49,14,44,12,"remove"],[49,15,44,12],[49,17,44,15],[50,10,45,8,"registrations"],[50,23,45,21],[50,24,45,22,"delete"],[50,30,45,28],[50,31,45,29,"registration"],[50,43,45,41],[50,44,45,42],[51,8,46,6],[52,6,47,4],[52,7,47,5],[53,6,48,4,"registrations"],[53,19,48,17],[53,20,48,18,"add"],[53,23,48,21],[53,24,48,22,"registration"],[53,36,48,34],[53,37,48,35],[54,6,49,4],[54,13,49,11,"registration"],[54,25,49,23],[55,4,50,2],[57,4,52,2],[58,0,53,0],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,0,57,0],[63,0,58,0],[64,4,59,2,"emit"],[64,8,59,6,"emit"],[64,9,59,7,"eventType"],[64,18,59,16],[64,20,59,18],[65,6,60,4],[65,10,60,8,"registrations"],[65,23,60,21],[65,26,60,24],[65,30,60,28],[65,31,60,29,"_registry"],[65,40,60,38],[65,41,60,39,"eventType"],[65,50,60,48],[65,51,60,49],[66,6,61,4],[66,10,61,8,"registrations"],[66,23,61,21],[66,27,61,25],[66,31,61,29],[66,33,61,31],[67,8,62,6],[67,13,62,11],[67,17,62,15,"_len"],[67,21,62,19],[67,24,62,22,"arguments"],[67,33,62,31],[67,34,62,32,"length"],[67,40,62,38],[67,42,62,40,"args"],[67,46,62,44],[67,49,62,47],[67,53,62,51,"Array"],[67,58,62,56],[67,59,62,57,"_len"],[67,63,62,61],[67,66,62,64],[67,67,62,65],[67,70,62,68,"_len"],[67,74,62,72],[67,77,62,75],[67,78,62,76],[67,81,62,79],[67,82,62,80],[67,83,62,81],[67,85,62,83,"_key"],[67,89,62,87],[67,92,62,90],[67,93,62,91],[67,95,62,93,"_key"],[67,99,62,97],[67,102,62,100,"_len"],[67,106,62,104],[67,108,62,106,"_key"],[67,112,62,110],[67,114,62,112],[67,116,62,114],[68,10,63,8,"args"],[68,14,63,12],[68,15,63,13,"_key"],[68,19,63,17],[68,22,63,20],[68,23,63,21],[68,24,63,22],[68,27,63,25,"arguments"],[68,36,63,34],[68,37,63,35,"_key"],[68,41,63,39],[68,42,63,40],[69,8,64,6],[70,8,65,6],[70,13,65,11],[70,17,65,15,"_i"],[70,19,65,17],[70,22,65,20],[70,23,65,21],[70,25,65,23,"_arr"],[70,29,65,27],[70,32,65,30],[70,33,65,31],[70,36,65,34,"registrations"],[70,49,65,47],[70,50,65,48],[70,52,65,50,"_i"],[70,54,65,52],[70,57,65,55,"_arr"],[70,61,65,59],[70,62,65,60,"length"],[70,68,65,66],[70,70,65,68,"_i"],[70,72,65,70],[70,74,65,72],[70,76,65,74],[71,10,66,8],[71,14,66,12,"registration"],[71,26,66,24],[71,29,66,27,"_arr"],[71,33,66,31],[71,34,66,32,"_i"],[71,36,66,34],[71,37,66,35],[72,10,67,8,"registration"],[72,22,67,20],[72,23,67,21,"listener"],[72,31,67,29],[72,32,67,30,"apply"],[72,37,67,35],[72,38,67,36,"registration"],[72,50,67,48],[72,51,67,49,"context"],[72,58,67,56],[72,60,67,58,"args"],[72,64,67,62],[72,65,67,63],[73,8,68,6],[74,6,69,4],[75,4,70,2],[77,4,72,2],[78,0,73,0],[79,0,74,0],[80,4,75,2,"removeAllListeners"],[80,22,75,20,"removeAllListeners"],[80,23,75,21,"eventType"],[80,32,75,30],[80,34,75,32],[81,6,76,4],[81,10,76,8,"eventType"],[81,19,76,17],[81,23,76,21],[81,27,76,25],[81,29,76,27],[82,8,77,6],[82,12,77,10],[82,13,77,11,"_registry"],[82,22,77,20],[82,25,77,23],[82,26,77,24],[82,27,77,25],[83,6,78,4],[83,7,78,5],[83,13,78,11],[84,8,79,6],[84,15,79,13],[84,19,79,17],[84,20,79,18,"_registry"],[84,29,79,27],[84,30,79,28,"eventType"],[84,39,79,37],[84,40,79,38],[85,6,80,4],[86,4,81,2],[88,4,83,2],[89,0,84,0],[90,0,85,0],[91,4,86,2,"listenerCount"],[91,17,86,15,"listenerCount"],[91,18,86,16,"eventType"],[91,27,86,25],[91,29,86,27],[92,6,87,4],[92,10,87,8,"registrations"],[92,23,87,21],[92,26,87,24],[92,30,87,28],[92,31,87,29,"_registry"],[92,40,87,38],[92,41,87,39,"eventType"],[92,50,87,48],[92,51,87,49],[93,6,88,4],[93,13,88,11,"registrations"],[93,26,88,24],[93,30,88,28],[93,34,88,32],[93,37,88,35],[93,38,88,36],[93,41,88,39,"registrations"],[93,54,88,52],[93,55,88,53,"size"],[93,59,88,57],[94,4,89,2],[95,2,90,0],[96,2,90,1,"exports"],[96,9,90,1],[96,10,90,1,"default"],[96,17,90,1],[96,20,90,1,"EventEmitter"],[96,32,90,1],[97,2,91,0],[97,11,91,9,"allocate"],[97,19,91,17,"allocate"],[97,20,91,18,"registry"],[97,28,91,26],[97,30,91,28,"eventType"],[97,39,91,37],[97,41,91,39],[98,4,92,2],[98,8,92,6,"registrations"],[98,21,92,19],[98,24,92,22,"registry"],[98,32,92,30],[98,33,92,31,"eventType"],[98,42,92,40],[98,43,92,41],[99,4,93,2],[99,8,93,6,"registrations"],[99,21,93,19],[99,25,93,23],[99,29,93,27],[99,31,93,29],[100,6,94,4,"registrations"],[100,19,94,17],[100,22,94,20],[100,26,94,24,"Set"],[100,29,94,27],[100,30,94,28],[100,31,94,29],[101,6,95,4,"registry"],[101,14,95,12],[101,15,95,13,"eventType"],[101,24,95,22],[101,25,95,23],[101,28,95,26,"registrations"],[101,41,95,39],[102,4,96,2],[103,4,97,2],[103,11,97,9,"registrations"],[103,24,97,22],[104,2,98,0],[105,0,98,1],[105,3]],"functionMap":{"names":["<global>","EventEmitter","constructor","addListener","registration.remove","emit","removeAllListeners","listenerCount","allocate"],"mappings":"AAA;eC8B;ECC;GDE;EEK;MCK;ODE;GFI;EIS;GJW;EKK;GLM;EMK;GNG;CDC;AQC"}},"type":"js/module"}]}