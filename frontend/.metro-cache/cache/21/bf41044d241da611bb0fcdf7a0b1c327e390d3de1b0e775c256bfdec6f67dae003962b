{"dependencies":[{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":42,"column":17,"index":1711},"end":{"line":42,"column":52,"index":1746}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"]}},{"name":"fast-deep-equal","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":43,"column":42,"index":1790},"end":{"line":43,"column":68,"index":1816}}],"key":"iEBGa3aMoFBQ4TeKXo2Id/lrEzo=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":44,"column":27,"index":1846},"end":{"line":44,"column":43,"index":1862}}],"key":"XN65eZP/QkNMzaBAXbG/zPyidpY=","exportNames":["*"]}},{"name":"./createMemoryHistory","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":45,"column":30,"index":1895},"end":{"line":45,"column":62,"index":1927}}],"key":"T95MoFqjtEQtuFIdt1PG4pqDTlQ=","exportNames":["*"]}},{"name":"./getPathFromState","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":46,"column":27,"index":1956},"end":{"line":46,"column":56,"index":1985}}],"key":"TZR37/GkKQ7IrvlrOJcmswln0Cg=","exportNames":["*"]}},{"name":"../constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":47,"column":20,"index":2007},"end":{"line":47,"column":43,"index":2030}}],"key":"zmjjtqoQxi2W71eIMIIaEi1mOpU=","exportNames":["*"]}},{"name":"../global-state/serverLocationContext","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":48,"column":32,"index":2064},"end":{"line":48,"column":80,"index":2112}}],"key":"hQKKFj1beB9NGb1vxpEkslBJ/Qs=","exportNames":["*"]}},{"name":"../global-state/storeContext","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":49,"column":23,"index":2137},"end":{"line":49,"column":62,"index":2176}}],"key":"FJzIouWFJWCROzZtQIZp7Dstzdg=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var ownKeys = function (o) {\n      ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.series = void 0;\n  exports.useLinking = useLinking;\n  exports.getInitialURLWithTimeout = getInitialURLWithTimeout;\n  const native_1 = require(_dependencyMap[0], \"@react-navigation/native\");\n  const fast_deep_equal_1 = __importDefault(require(_dependencyMap[1], \"fast-deep-equal\"));\n  const React = __importStar(require(_dependencyMap[2], \"react\"));\n  const createMemoryHistory_1 = require(_dependencyMap[3], \"./createMemoryHistory\");\n  const getPathFromState_1 = require(_dependencyMap[4], \"./getPathFromState\");\n  const constants_1 = require(_dependencyMap[5], \"../constants\");\n  const serverLocationContext_1 = require(_dependencyMap[6], \"../global-state/serverLocationContext\");\n  const storeContext_1 = require(_dependencyMap[7], \"../global-state/storeContext\");\n  /**\n   * Find the matching navigation state that changed between 2 navigation states\n   * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n   */\n  const findMatchingState = (a, b) => {\n    if (a === undefined || b === undefined || a.key !== b.key) {\n      return [undefined, undefined];\n    }\n    // Tab and drawer will have `history` property, but stack will have history in `routes`\n    const aHistoryLength = a.history ? a.history.length : a.routes.length;\n    const bHistoryLength = b.history ? b.history.length : b.routes.length;\n    const aRoute = a.routes[a.index];\n    const bRoute = b.routes[b.index];\n    const aChildState = aRoute.state;\n    const bChildState = bRoute.state;\n    // Stop here if this is the state object that changed:\n    // - history length is different\n    // - focused routes are different\n    // - one of them doesn't have child state\n    // - child state keys are different\n    if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n      return [a, b];\n    }\n    return findMatchingState(aChildState, bChildState);\n  };\n  /**\n   * Run async function in series as it's called.\n   */\n  const series = cb => {\n    let queue = Promise.resolve();\n    const callback = () => {\n      queue = queue.then(cb);\n    };\n    return callback;\n  };\n  exports.series = series;\n  const linkingHandlers = [];\n  function useLinking(ref, {\n    enabled = true,\n    config,\n    getStateFromPath = native_1.getStateFromPath,\n    getPathFromState = native_1.getPathFromState,\n    getActionFromState = native_1.getActionFromState\n  }, onUnhandledLinking) {\n    const independent = (0, native_1.useNavigationIndependentTree)();\n    const store = (0, storeContext_1.useExpoRouterStore)();\n    React.useEffect(() => {\n      if (process.env.NODE_ENV === 'production') {\n        return undefined;\n      }\n      if (independent) {\n        return undefined;\n      }\n      if (enabled !== false && linkingHandlers.length) {\n        console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n      }\n      const handler = Symbol();\n      if (enabled !== false) {\n        linkingHandlers.push(handler);\n      }\n      return () => {\n        const index = linkingHandlers.indexOf(handler);\n        if (index > -1) {\n          linkingHandlers.splice(index, 1);\n        }\n      };\n    }, [enabled, independent]);\n    const [history] = React.useState(createMemoryHistory_1.createMemoryHistory);\n    // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n    // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n    // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n    const enabledRef = React.useRef(enabled);\n    const configRef = React.useRef(config);\n    const getStateFromPathRef = React.useRef(getStateFromPath);\n    const getPathFromStateRef = React.useRef(getPathFromState);\n    const getActionFromStateRef = React.useRef(getActionFromState);\n    React.useEffect(() => {\n      enabledRef.current = enabled;\n      configRef.current = config;\n      getStateFromPathRef.current = getStateFromPath;\n      getPathFromStateRef.current = getPathFromState;\n      getActionFromStateRef.current = getActionFromState;\n    });\n    const validateRoutesNotExistInRootState = React.useCallback(state => {\n      // START FORK\n      // Instead of using the rootState, we use INTERNAL_SLOT_NAME, which is the only route in the root navigator in Expo Router\n      // const navigation = ref.current;\n      // const rootState = navigation?.getRootState();\n      const routeNames = [constants_1.INTERNAL_SLOT_NAME];\n      // END FORK\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      // START FORK\n      // return state?.routes.some((r) => !rootState?.routeNames?.includes(r.name));\n      return state?.routes.some(r => !routeNames.includes(r.name));\n      // END FORK\n    }, [ref]);\n    const server = React.use(serverLocationContext_1.ServerContext);\n    const getInitialState = React.useCallback(() => {\n      let value;\n      if (enabledRef.current) {\n        const location = server?.location ?? (typeof window !== 'undefined' ? window.location : undefined);\n        const path = location ? location.pathname + location.search : undefined;\n        if (path) {\n          value = getStateFromPathRef.current(path, configRef.current);\n        }\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n      }\n      const thenable = {\n        then(onfulfilled) {\n          return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n        },\n        catch() {\n          return thenable;\n        }\n      };\n      return thenable;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const previousIndexRef = React.useRef(undefined);\n    const previousStateRef = React.useRef(undefined);\n    const pendingPopStatePathRef = React.useRef(undefined);\n    React.useEffect(() => {\n      previousIndexRef.current = history.index;\n      return history.listen(() => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const {\n          location\n        } = window;\n        const path = location.pathname + location.search + location.hash;\n        const index = history.index;\n        const previousIndex = previousIndexRef.current ?? 0;\n        previousIndexRef.current = index;\n        pendingPopStatePathRef.current = path;\n        // When browser back/forward is clicked, we first need to check if state object for this index exists\n        // If it does we'll reset to that state object\n        // Otherwise, we'll handle it like a regular deep link\n        const record = history.get(index);\n        if (record?.path === path && record?.state) {\n          navigation.resetRoot(record.state);\n          return;\n        }\n        const state = getStateFromPathRef.current(path, configRef.current);\n        // We should only dispatch an action when going forward\n        // Otherwise the action will likely add items to history, which would mess things up\n        if (state) {\n          // If the link were handled, it gets cleared in NavigationContainer\n          onUnhandledLinking(path);\n          // Make sure that the routes in the state exist in the root navigator\n          // Otherwise there's an error in the linking configuration\n          if (validateRoutesNotExistInRootState(state)) {\n            return;\n          }\n          if (index > previousIndex || (\n          /* START FORK\n           *\n           * This is a workaround for React Navigation's handling of hashes (it doesn't handle them)\n           * When you click on <a href=\"#hash\">, the browser will first fire a popstate event\n           * and this callback will be called.\n           *\n           * From React Navigation's perspective, it's treating the new hash change like a back/forward\n           * button press, so it thinks it should reset the state. When we should\n           * be to be pushing the new state\n           *\n           * Our fix is to check if the index is the same as the previous index\n           * and if the incoming path is the same as the old path but with the hash added,\n           * then treat it as a push instead of a reset\n           *\n           * This also works for subsequent hash changes, as internally RN\n           * doesn't store the hash in the history state.\n           *\n           * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n           */\n          index === previousIndex && (!record || `${record?.path}${location.hash}` === path))\n          // END FORK\n          ) {\n            const action = getActionFromStateRef.current(state, configRef.current);\n            if (action !== undefined) {\n              try {\n                navigation.dispatch(action);\n              } catch (e) {\n                // Ignore any errors from deep linking.\n                // This could happen in case of malformed links, navigation object not being initialized etc.\n                console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n              }\n            } else {\n              navigation.resetRoot(state);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          // if current path didn't return any state, we should revert to initial state\n          navigation.resetRoot(state);\n        }\n      });\n    }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n    React.useEffect(() => {\n      if (!enabled) {\n        return;\n      }\n      const getPathForRoute = (route, state) => {\n        let path;\n        // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n        // This makes sure that we preserve the original URL for wildcard routes\n        if (route?.path) {\n          const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n          if (stateForPath) {\n            const focusedRoute = (0, native_1.findFocusedRoute)(stateForPath);\n            if (focusedRoute && focusedRoute.name === route.name && (0, fast_deep_equal_1.default)({\n              ...focusedRoute.params\n            }, {\n              ...route.params\n            })) {\n              // START FORK - Ensure paths coming from events (e.g refresh) have the base URL\n              // path = route.path;\n              path = (0, getPathFromState_1.appendBaseUrl)(route.path);\n              // END FORK\n            }\n          }\n        }\n        if (path == null) {\n          path = getPathFromStateRef.current(state, configRef.current);\n        }\n        // START FORK - ExpoRouter manually handles hashes. This code is intentionally removed\n        // const previousRoute = previousStateRef.current\n        //   ? findFocusedRoute(previousStateRef.current)\n        //   : undefined;\n        // Preserve the hash if the route didn't change\n        // if (\n        //   previousRoute &&\n        //   route &&\n        //   'key' in previousRoute &&\n        //   'key' in route &&\n        //   previousRoute.key === route.key\n        // ) {\n        //   path = path + location.hash;\n        // }\n        // END FORK\n        return path;\n      };\n      if (ref.current) {\n        // We need to record the current metadata on the first render if they aren't set\n        // This will allow the initial state to be in the history entry\n        // START FORK\n        // Instead of using the rootState (which might be stale) we should use the focused state\n        // const state = ref.current.getRootState();\n        const rootState = ref.current.getRootState();\n        const state = store.state;\n        // END FORK\n        if (state) {\n          const route = (0, native_1.findFocusedRoute)(state);\n          const path = getPathForRoute(route, state);\n          if (previousStateRef.current === undefined) {\n            // START FORK\n            // previousStateRef.current = state;\n            previousStateRef.current = rootState;\n            // END FORK\n          }\n          history.replace({\n            path,\n            state\n          });\n        }\n      }\n      const onStateChange = async () => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const previousState = previousStateRef.current;\n        // START FORK\n        // Instead of using the rootState (which might be stale) we should use the focused state\n        // const state = navigation.getRootState();\n        const rootState = navigation.getRootState();\n        const state = store.state;\n        // END FORK\n        // root state may not available, for example when root navigators switch inside the container\n        if (!state) {\n          return;\n        }\n        const pendingPath = pendingPopStatePathRef.current;\n        const route = (0, native_1.findFocusedRoute)(state);\n        const path = getPathForRoute(route, state);\n        // START FORK\n        // previousStateRef.current = state;\n        previousStateRef.current = rootState;\n        // END FORK\n        pendingPopStatePathRef.current = undefined;\n        // To detect the kind of state change, we need to:\n        // - Find the common focused navigation state in previous and current state\n        // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n        // - If no common focused navigation state found, it's a replace\n        const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n        if (previousFocusedState && focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath) {\n          const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n          if (historyDelta > 0) {\n            // If history length is increased, we should pushState\n            // Note that path might not actually change here, for example, drawer open should pushState\n            history.push({\n              path,\n              state\n            });\n          } else if (historyDelta < 0) {\n            // If history length is decreased, i.e. entries were removed, we want to go back\n            const nextIndex = history.backIndex({\n              path\n            });\n            const currentIndex = history.index;\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex - currentIndex)) {\n                // An existing entry for this path exists and it's less than current index, go back to that\n                await history.go(nextIndex - currentIndex);\n              } else {\n                // We couldn't find an existing entry to go back to, so we'll go back by the delta\n                // This won't be correct if multiple routes were pushed in one go before\n                // Usually this shouldn't happen and this is a fallback for that\n                await history.go(historyDelta);\n              }\n              // Store the updated state as well as fix the path if incorrect\n              history.replace({\n                path,\n                state\n              });\n            } catch {\n              // The navigation was interrupted\n            }\n          } else {\n            // If history length is unchanged, we want to replaceState\n            history.replace({\n              path,\n              state\n            });\n          }\n        } else {\n          // If no common navigation state was found, assume it's a replace\n          // This would happen if the user did a reset/conditionally changed navigators\n          history.replace({\n            path,\n            state\n          });\n        }\n      };\n      // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n      // This could happen since `history.go(n)` is asynchronous\n      // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n      return ref.current?.addListener('state', (0, exports.series)(onStateChange));\n    }, [enabled, history, ref]);\n    return {\n      getInitialState\n    };\n  }\n  function getInitialURLWithTimeout() {\n    return typeof window === 'undefined' ? '' : window.location.href;\n  }\n});","lineCount":428,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__createBinding"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__createBinding"],[4,52,2,51],[4,57,2,57,"Object"],[4,63,2,63],[4,64,2,64,"create"],[4,70,2,70],[4,73,2,74],[4,83,2,83,"o"],[4,84,2,84],[4,86,2,86,"m"],[4,87,2,87],[4,89,2,89,"k"],[4,90,2,90],[4,92,2,92,"k2"],[4,94,2,94],[4,96,2,96],[5,4,3,4],[5,8,3,8,"k2"],[5,10,3,10],[5,15,3,15,"undefined"],[5,24,3,24],[5,26,3,26,"k2"],[5,28,3,28],[5,31,3,31,"k"],[5,32,3,32],[6,4,4,4],[6,8,4,8,"desc"],[6,12,4,12],[6,15,4,15,"Object"],[6,21,4,21],[6,22,4,22,"getOwnPropertyDescriptor"],[6,46,4,46],[6,47,4,47,"m"],[6,48,4,48],[6,50,4,50,"k"],[6,51,4,51],[6,52,4,52],[7,4,5,4],[7,8,5,8],[7,9,5,9,"desc"],[7,13,5,13],[7,18,5,18],[7,23,5,23],[7,27,5,27,"desc"],[7,31,5,31],[7,34,5,34],[7,35,5,35,"m"],[7,36,5,36],[7,37,5,37,"__esModule"],[7,47,5,47],[7,50,5,50,"desc"],[7,54,5,54],[7,55,5,55,"writable"],[7,63,5,63],[7,67,5,67,"desc"],[7,71,5,71],[7,72,5,72,"configurable"],[7,84,5,84],[7,85,5,85],[7,87,5,87],[8,6,6,6,"desc"],[8,10,6,10],[8,13,6,13],[9,8,6,15,"enumerable"],[9,18,6,25],[9,20,6,27],[9,24,6,31],[10,8,6,33,"get"],[10,11,6,36],[10,13,6,38],[10,22,6,38,"get"],[10,23,6,38],[10,25,6,49],[11,10,6,51],[11,17,6,58,"m"],[11,18,6,59],[11,19,6,60,"k"],[11,20,6,61],[11,21,6,62],[12,8,6,64],[13,6,6,66],[13,7,6,67],[14,4,7,4],[15,4,8,4,"Object"],[15,10,8,10],[15,11,8,11,"defineProperty"],[15,25,8,25],[15,26,8,26,"o"],[15,27,8,27],[15,29,8,29,"k2"],[15,31,8,31],[15,33,8,33,"desc"],[15,37,8,37],[15,38,8,38],[16,2,9,0],[16,3,9,1],[16,6,9,6],[16,16,9,15,"o"],[16,17,9,16],[16,19,9,18,"m"],[16,20,9,19],[16,22,9,21,"k"],[16,23,9,22],[16,25,9,24,"k2"],[16,27,9,26],[16,29,9,28],[17,4,10,4],[17,8,10,8,"k2"],[17,10,10,10],[17,15,10,15,"undefined"],[17,24,10,24],[17,26,10,26,"k2"],[17,28,10,28],[17,31,10,31,"k"],[17,32,10,32],[18,4,11,4,"o"],[18,5,11,5],[18,6,11,6,"k2"],[18,8,11,8],[18,9,11,9],[18,12,11,12,"m"],[18,13,11,13],[18,14,11,14,"k"],[18,15,11,15],[18,16,11,16],[19,2,12,0],[19,3,12,2],[19,4,12,3],[20,2,13,0],[20,6,13,4,"__setModuleDefault"],[20,24,13,22],[20,27,13,26],[20,31,13,30],[20,35,13,34],[20,39,13,38],[20,40,13,39,"__setModuleDefault"],[20,58,13,57],[20,63,13,63,"Object"],[20,69,13,69],[20,70,13,70,"create"],[20,76,13,76],[20,79,13,80],[20,89,13,89,"o"],[20,90,13,90],[20,92,13,92,"v"],[20,93,13,93],[20,95,13,95],[21,4,14,4,"Object"],[21,10,14,10],[21,11,14,11,"defineProperty"],[21,25,14,25],[21,26,14,26,"o"],[21,27,14,27],[21,29,14,29],[21,38,14,38],[21,40,14,40],[22,6,14,42,"enumerable"],[22,16,14,52],[22,18,14,54],[22,22,14,58],[23,6,14,60,"value"],[23,11,14,65],[23,13,14,67,"v"],[24,4,14,69],[24,5,14,70],[24,6,14,71],[25,2,15,0],[25,3,15,1],[25,6,15,5],[25,16,15,14,"o"],[25,17,15,15],[25,19,15,17,"v"],[25,20,15,18],[25,22,15,20],[26,4,16,4,"o"],[26,5,16,5],[26,6,16,6],[26,15,16,15],[26,16,16,16],[26,19,16,19,"v"],[26,20,16,20],[27,2,17,0],[27,3,17,1],[27,4,17,2],[28,2,18,0],[28,6,18,4,"__importStar"],[28,18,18,16],[28,21,18,20],[28,25,18,24],[28,29,18,28],[28,33,18,32],[28,34,18,33,"__importStar"],[28,46,18,45],[28,50,18,51],[28,62,18,63],[29,4,19,4],[29,8,19,8,"ownKeys"],[29,15,19,15],[29,18,19,18],[29,27,19,18,"ownKeys"],[29,28,19,27,"o"],[29,29,19,28],[29,31,19,30],[30,6,20,8,"ownKeys"],[30,13,20,15],[30,16,20,18,"Object"],[30,22,20,24],[30,23,20,25,"getOwnPropertyNames"],[30,42,20,44],[30,46,20,48],[30,56,20,58,"o"],[30,57,20,59],[30,59,20,61],[31,8,21,12],[31,12,21,16,"ar"],[31,14,21,18],[31,17,21,21],[31,19,21,23],[32,8,22,12],[32,13,22,17],[32,17,22,21,"k"],[32,18,22,22],[32,22,22,26,"o"],[32,23,22,27],[32,25,22,29],[32,29,22,33,"Object"],[32,35,22,39],[32,36,22,40,"prototype"],[32,45,22,49],[32,46,22,50,"hasOwnProperty"],[32,60,22,64],[32,61,22,65,"call"],[32,65,22,69],[32,66,22,70,"o"],[32,67,22,71],[32,69,22,73,"k"],[32,70,22,74],[32,71,22,75],[32,73,22,77,"ar"],[32,75,22,79],[32,76,22,80,"ar"],[32,78,22,82],[32,79,22,83,"length"],[32,85,22,89],[32,86,22,90],[32,89,22,93,"k"],[32,90,22,94],[33,8,23,12],[33,15,23,19,"ar"],[33,17,23,21],[34,6,24,8],[34,7,24,9],[35,6,25,8],[35,13,25,15,"ownKeys"],[35,20,25,22],[35,21,25,23,"o"],[35,22,25,24],[35,23,25,25],[36,4,26,4],[36,5,26,5],[37,4,27,4],[37,11,27,11],[37,21,27,21,"mod"],[37,24,27,24],[37,26,27,26],[38,6,28,8],[38,10,28,12,"mod"],[38,13,28,15],[38,17,28,19,"mod"],[38,20,28,22],[38,21,28,23,"__esModule"],[38,31,28,33],[38,33,28,35],[38,40,28,42,"mod"],[38,43,28,45],[39,6,29,8],[39,10,29,12,"result"],[39,16,29,18],[39,19,29,21],[39,20,29,22],[39,21,29,23],[40,6,30,8],[40,10,30,12,"mod"],[40,13,30,15],[40,17,30,19],[40,21,30,23],[40,23,30,25],[40,28,30,30],[40,32,30,34,"k"],[40,33,30,35],[40,36,30,38,"ownKeys"],[40,43,30,45],[40,44,30,46,"mod"],[40,47,30,49],[40,48,30,50],[40,50,30,52,"i"],[40,51,30,53],[40,54,30,56],[40,55,30,57],[40,57,30,59,"i"],[40,58,30,60],[40,61,30,63,"k"],[40,62,30,64],[40,63,30,65,"length"],[40,69,30,71],[40,71,30,73,"i"],[40,72,30,74],[40,74,30,76],[40,76,30,78],[40,80,30,82,"k"],[40,81,30,83],[40,82,30,84,"i"],[40,83,30,85],[40,84,30,86],[40,89,30,91],[40,98,30,100],[40,100,30,102,"__createBinding"],[40,115,30,117],[40,116,30,118,"result"],[40,122,30,124],[40,124,30,126,"mod"],[40,127,30,129],[40,129,30,131,"k"],[40,130,30,132],[40,131,30,133,"i"],[40,132,30,134],[40,133,30,135],[40,134,30,136],[41,6,31,8,"__setModuleDefault"],[41,24,31,26],[41,25,31,27,"result"],[41,31,31,33],[41,33,31,35,"mod"],[41,36,31,38],[41,37,31,39],[42,6,32,8],[42,13,32,15,"result"],[42,19,32,21],[43,4,33,4],[43,5,33,5],[44,2,34,0],[44,3,34,1],[44,4,34,3],[44,5,34,4],[45,2,35,0],[45,6,35,4,"__importDefault"],[45,21,35,19],[45,24,35,23],[45,28,35,27],[45,32,35,31],[45,36,35,35],[45,37,35,36,"__importDefault"],[45,52,35,51],[45,56,35,56],[45,66,35,66,"mod"],[45,69,35,69],[45,71,35,71],[46,4,36,4],[46,11,36,12,"mod"],[46,14,36,15],[46,18,36,19,"mod"],[46,21,36,22],[46,22,36,23,"__esModule"],[46,32,36,33],[46,35,36,37,"mod"],[46,38,36,40],[46,41,36,43],[47,6,36,45],[47,15,36,54],[47,17,36,56,"mod"],[48,4,36,60],[48,5,36,61],[49,2,37,0],[49,3,37,1],[50,2,38,0,"Object"],[50,8,38,6],[50,9,38,7,"defineProperty"],[50,23,38,21],[50,24,38,22,"exports"],[50,31,38,29],[50,33,38,31],[50,45,38,43],[50,47,38,45],[51,4,38,47,"value"],[51,9,38,52],[51,11,38,54],[52,2,38,59],[52,3,38,60],[52,4,38,61],[53,2,39,0,"exports"],[53,9,39,7],[53,10,39,8,"series"],[53,16,39,14],[53,19,39,17],[53,24,39,22],[53,25,39,23],[54,2,40,0,"exports"],[54,9,40,7],[54,10,40,8,"useLinking"],[54,20,40,18],[54,23,40,21,"useLinking"],[54,33,40,31],[55,2,41,0,"exports"],[55,9,41,7],[55,10,41,8,"getInitialURLWithTimeout"],[55,34,41,32],[55,37,41,35,"getInitialURLWithTimeout"],[55,61,41,59],[56,2,42,0],[56,8,42,6,"native_1"],[56,16,42,14],[56,19,42,17,"require"],[56,26,42,24],[56,27,42,24,"_dependencyMap"],[56,41,42,24],[56,72,42,51],[56,73,42,52],[57,2,43,0],[57,8,43,6,"fast_deep_equal_1"],[57,25,43,23],[57,28,43,26,"__importDefault"],[57,43,43,41],[57,44,43,42,"require"],[57,51,43,49],[57,52,43,49,"_dependencyMap"],[57,66,43,49],[57,88,43,67],[57,89,43,68],[57,90,43,69],[58,2,44,0],[58,8,44,6,"React"],[58,13,44,11],[58,16,44,14,"__importStar"],[58,28,44,26],[58,29,44,27,"require"],[58,36,44,34],[58,37,44,34,"_dependencyMap"],[58,51,44,34],[58,63,44,42],[58,64,44,43],[58,65,44,44],[59,2,45,0],[59,8,45,6,"createMemoryHistory_1"],[59,29,45,27],[59,32,45,30,"require"],[59,39,45,37],[59,40,45,37,"_dependencyMap"],[59,54,45,37],[59,82,45,61],[59,83,45,62],[60,2,46,0],[60,8,46,6,"getPathFromState_1"],[60,26,46,24],[60,29,46,27,"require"],[60,36,46,34],[60,37,46,34,"_dependencyMap"],[60,51,46,34],[60,76,46,55],[60,77,46,56],[61,2,47,0],[61,8,47,6,"constants_1"],[61,19,47,17],[61,22,47,20,"require"],[61,29,47,27],[61,30,47,27,"_dependencyMap"],[61,44,47,27],[61,63,47,42],[61,64,47,43],[62,2,48,0],[62,8,48,6,"serverLocationContext_1"],[62,31,48,29],[62,34,48,32,"require"],[62,41,48,39],[62,42,48,39,"_dependencyMap"],[62,56,48,39],[62,100,48,79],[62,101,48,80],[63,2,49,0],[63,8,49,6,"storeContext_1"],[63,22,49,20],[63,25,49,23,"require"],[63,32,49,30],[63,33,49,30,"_dependencyMap"],[63,47,49,30],[63,82,49,61],[63,83,49,62],[64,2,50,0],[65,0,51,0],[66,0,52,0],[67,0,53,0],[68,2,54,0],[68,8,54,6,"findMatchingState"],[68,25,54,23],[68,28,54,26,"findMatchingState"],[68,29,54,27,"a"],[68,30,54,28],[68,32,54,30,"b"],[68,33,54,31],[68,38,54,36],[69,4,55,4],[69,8,55,8,"a"],[69,9,55,9],[69,14,55,14,"undefined"],[69,23,55,23],[69,27,55,27,"b"],[69,28,55,28],[69,33,55,33,"undefined"],[69,42,55,42],[69,46,55,46,"a"],[69,47,55,47],[69,48,55,48,"key"],[69,51,55,51],[69,56,55,56,"b"],[69,57,55,57],[69,58,55,58,"key"],[69,61,55,61],[69,63,55,63],[70,6,56,8],[70,13,56,15],[70,14,56,16,"undefined"],[70,23,56,25],[70,25,56,27,"undefined"],[70,34,56,36],[70,35,56,37],[71,4,57,4],[72,4,58,4],[73,4,59,4],[73,10,59,10,"aHistoryLength"],[73,24,59,24],[73,27,59,27,"a"],[73,28,59,28],[73,29,59,29,"history"],[73,36,59,36],[73,39,59,39,"a"],[73,40,59,40],[73,41,59,41,"history"],[73,48,59,48],[73,49,59,49,"length"],[73,55,59,55],[73,58,59,58,"a"],[73,59,59,59],[73,60,59,60,"routes"],[73,66,59,66],[73,67,59,67,"length"],[73,73,59,73],[74,4,60,4],[74,10,60,10,"bHistoryLength"],[74,24,60,24],[74,27,60,27,"b"],[74,28,60,28],[74,29,60,29,"history"],[74,36,60,36],[74,39,60,39,"b"],[74,40,60,40],[74,41,60,41,"history"],[74,48,60,48],[74,49,60,49,"length"],[74,55,60,55],[74,58,60,58,"b"],[74,59,60,59],[74,60,60,60,"routes"],[74,66,60,66],[74,67,60,67,"length"],[74,73,60,73],[75,4,61,4],[75,10,61,10,"aRoute"],[75,16,61,16],[75,19,61,19,"a"],[75,20,61,20],[75,21,61,21,"routes"],[75,27,61,27],[75,28,61,28,"a"],[75,29,61,29],[75,30,61,30,"index"],[75,35,61,35],[75,36,61,36],[76,4,62,4],[76,10,62,10,"bRoute"],[76,16,62,16],[76,19,62,19,"b"],[76,20,62,20],[76,21,62,21,"routes"],[76,27,62,27],[76,28,62,28,"b"],[76,29,62,29],[76,30,62,30,"index"],[76,35,62,35],[76,36,62,36],[77,4,63,4],[77,10,63,10,"aChildState"],[77,21,63,21],[77,24,63,24,"aRoute"],[77,30,63,30],[77,31,63,31,"state"],[77,36,63,36],[78,4,64,4],[78,10,64,10,"bChildState"],[78,21,64,21],[78,24,64,24,"bRoute"],[78,30,64,30],[78,31,64,31,"state"],[78,36,64,36],[79,4,65,4],[80,4,66,4],[81,4,67,4],[82,4,68,4],[83,4,69,4],[84,4,70,4],[84,8,70,8,"aHistoryLength"],[84,22,70,22],[84,27,70,27,"bHistoryLength"],[84,41,70,41],[84,45,71,8,"aRoute"],[84,51,71,14],[84,52,71,15,"key"],[84,55,71,18],[84,60,71,23,"bRoute"],[84,66,71,29],[84,67,71,30,"key"],[84,70,71,33],[84,74,72,8,"aChildState"],[84,85,72,19],[84,90,72,24,"undefined"],[84,99,72,33],[84,103,73,8,"bChildState"],[84,114,73,19],[84,119,73,24,"undefined"],[84,128,73,33],[84,132,74,8,"aChildState"],[84,143,74,19],[84,144,74,20,"key"],[84,147,74,23],[84,152,74,28,"bChildState"],[84,163,74,39],[84,164,74,40,"key"],[84,167,74,43],[84,169,74,45],[85,6,75,8],[85,13,75,15],[85,14,75,16,"a"],[85,15,75,17],[85,17,75,19,"b"],[85,18,75,20],[85,19,75,21],[86,4,76,4],[87,4,77,4],[87,11,77,11,"findMatchingState"],[87,28,77,28],[87,29,77,29,"aChildState"],[87,40,77,40],[87,42,77,42,"bChildState"],[87,53,77,53],[87,54,77,54],[88,2,78,0],[88,3,78,1],[89,2,79,0],[90,0,80,0],[91,0,81,0],[92,2,82,0],[92,8,82,6,"series"],[92,14,82,12],[92,17,82,16,"cb"],[92,19,82,18],[92,23,82,23],[93,4,83,4],[93,8,83,8,"queue"],[93,13,83,13],[93,16,83,16,"Promise"],[93,23,83,23],[93,24,83,24,"resolve"],[93,31,83,31],[93,32,83,32],[93,33,83,33],[94,4,84,4],[94,10,84,10,"callback"],[94,18,84,18],[94,21,84,21,"callback"],[94,22,84,21],[94,27,84,27],[95,6,85,8,"queue"],[95,11,85,13],[95,14,85,16,"queue"],[95,19,85,21],[95,20,85,22,"then"],[95,24,85,26],[95,25,85,27,"cb"],[95,27,85,29],[95,28,85,30],[96,4,86,4],[96,5,86,5],[97,4,87,4],[97,11,87,11,"callback"],[97,19,87,19],[98,2,88,0],[98,3,88,1],[99,2,89,0,"exports"],[99,9,89,7],[99,10,89,8,"series"],[99,16,89,14],[99,19,89,17,"series"],[99,25,89,23],[100,2,90,0],[100,8,90,6,"linkingHandlers"],[100,23,90,21],[100,26,90,24],[100,28,90,26],[101,2,91,0],[101,11,91,9,"useLinking"],[101,21,91,19,"useLinking"],[101,22,91,20,"ref"],[101,25,91,23],[101,27,91,25],[102,4,91,27,"enabled"],[102,11,91,34],[102,14,91,37],[102,18,91,41],[103,4,91,43,"config"],[103,10,91,49],[104,4,91,51,"getStateFromPath"],[104,20,91,67],[104,23,91,70,"native_1"],[104,31,91,78],[104,32,91,79,"getStateFromPath"],[104,48,91,95],[105,4,91,97,"getPathFromState"],[105,20,91,113],[105,23,91,116,"native_1"],[105,31,91,124],[105,32,91,125,"getPathFromState"],[105,48,91,141],[106,4,91,143,"getActionFromState"],[106,22,91,161],[106,25,91,164,"native_1"],[106,33,91,172],[106,34,91,173,"getActionFromState"],[107,2,91,193],[107,3,91,194],[107,5,91,196,"onUnhandledLinking"],[107,23,91,214],[107,25,91,216],[108,4,92,4],[108,10,92,10,"independent"],[108,21,92,21],[108,24,92,24],[108,25,92,25],[108,26,92,26],[108,28,92,28,"native_1"],[108,36,92,36],[108,37,92,37,"useNavigationIndependentTree"],[108,65,92,65],[108,67,92,67],[108,68,92,68],[109,4,93,4],[109,10,93,10,"store"],[109,15,93,15],[109,18,93,18],[109,19,93,19],[109,20,93,20],[109,22,93,22,"storeContext_1"],[109,36,93,36],[109,37,93,37,"useExpoRouterStore"],[109,55,93,55],[109,57,93,57],[109,58,93,58],[110,4,94,4,"React"],[110,9,94,9],[110,10,94,10,"useEffect"],[110,19,94,19],[110,20,94,20],[110,26,94,26],[111,6,95,8],[111,10,95,12,"process"],[111,17,95,19],[111,18,95,20,"env"],[111,21,95,23],[111,22,95,24,"NODE_ENV"],[111,30,95,32],[111,35,95,37],[111,47,95,49],[111,49,95,51],[112,8,96,12],[112,15,96,19,"undefined"],[112,24,96,28],[113,6,97,8],[114,6,98,8],[114,10,98,12,"independent"],[114,21,98,23],[114,23,98,25],[115,8,99,12],[115,15,99,19,"undefined"],[115,24,99,28],[116,6,100,8],[117,6,101,8],[117,10,101,12,"enabled"],[117,17,101,19],[117,22,101,24],[117,27,101,29],[117,31,101,33,"linkingHandlers"],[117,46,101,48],[117,47,101,49,"length"],[117,53,101,55],[117,55,101,57],[118,8,102,12,"console"],[118,15,102,19],[118,16,102,20,"error"],[118,21,102,25],[118,22,102,26],[118,23,103,16],[118,196,103,189],[118,198,104,16],[118,285,104,103],[118,287,105,16],[118,347,105,76],[118,348,106,13],[118,349,107,17,"join"],[118,353,107,21],[118,354,107,22],[118,358,107,26],[118,359,107,27],[118,360,108,17,"trim"],[118,364,108,21],[118,365,108,22],[118,366,108,23],[118,367,108,24],[119,6,109,8],[120,6,110,8],[120,12,110,14,"handler"],[120,19,110,21],[120,22,110,24,"Symbol"],[120,28,110,30],[120,29,110,31],[120,30,110,32],[121,6,111,8],[121,10,111,12,"enabled"],[121,17,111,19],[121,22,111,24],[121,27,111,29],[121,29,111,31],[122,8,112,12,"linkingHandlers"],[122,23,112,27],[122,24,112,28,"push"],[122,28,112,32],[122,29,112,33,"handler"],[122,36,112,40],[122,37,112,41],[123,6,113,8],[124,6,114,8],[124,13,114,15],[124,19,114,21],[125,8,115,12],[125,14,115,18,"index"],[125,19,115,23],[125,22,115,26,"linkingHandlers"],[125,37,115,41],[125,38,115,42,"indexOf"],[125,45,115,49],[125,46,115,50,"handler"],[125,53,115,57],[125,54,115,58],[126,8,116,12],[126,12,116,16,"index"],[126,17,116,21],[126,20,116,24],[126,21,116,25],[126,22,116,26],[126,24,116,28],[127,10,117,16,"linkingHandlers"],[127,25,117,31],[127,26,117,32,"splice"],[127,32,117,38],[127,33,117,39,"index"],[127,38,117,44],[127,40,117,46],[127,41,117,47],[127,42,117,48],[128,8,118,12],[129,6,119,8],[129,7,119,9],[130,4,120,4],[130,5,120,5],[130,7,120,7],[130,8,120,8,"enabled"],[130,15,120,15],[130,17,120,17,"independent"],[130,28,120,28],[130,29,120,29],[130,30,120,30],[131,4,121,4],[131,10,121,10],[131,11,121,11,"history"],[131,18,121,18],[131,19,121,19],[131,22,121,22,"React"],[131,27,121,27],[131,28,121,28,"useState"],[131,36,121,36],[131,37,121,37,"createMemoryHistory_1"],[131,58,121,58],[131,59,121,59,"createMemoryHistory"],[131,78,121,78],[131,79,121,79],[132,4,122,4],[133,4,123,4],[134,4,124,4],[135,4,125,4],[135,10,125,10,"enabledRef"],[135,20,125,20],[135,23,125,23,"React"],[135,28,125,28],[135,29,125,29,"useRef"],[135,35,125,35],[135,36,125,36,"enabled"],[135,43,125,43],[135,44,125,44],[136,4,126,4],[136,10,126,10,"configRef"],[136,19,126,19],[136,22,126,22,"React"],[136,27,126,27],[136,28,126,28,"useRef"],[136,34,126,34],[136,35,126,35,"config"],[136,41,126,41],[136,42,126,42],[137,4,127,4],[137,10,127,10,"getStateFromPathRef"],[137,29,127,29],[137,32,127,32,"React"],[137,37,127,37],[137,38,127,38,"useRef"],[137,44,127,44],[137,45,127,45,"getStateFromPath"],[137,61,127,61],[137,62,127,62],[138,4,128,4],[138,10,128,10,"getPathFromStateRef"],[138,29,128,29],[138,32,128,32,"React"],[138,37,128,37],[138,38,128,38,"useRef"],[138,44,128,44],[138,45,128,45,"getPathFromState"],[138,61,128,61],[138,62,128,62],[139,4,129,4],[139,10,129,10,"getActionFromStateRef"],[139,31,129,31],[139,34,129,34,"React"],[139,39,129,39],[139,40,129,40,"useRef"],[139,46,129,46],[139,47,129,47,"getActionFromState"],[139,65,129,65],[139,66,129,66],[140,4,130,4,"React"],[140,9,130,9],[140,10,130,10,"useEffect"],[140,19,130,19],[140,20,130,20],[140,26,130,26],[141,6,131,8,"enabledRef"],[141,16,131,18],[141,17,131,19,"current"],[141,24,131,26],[141,27,131,29,"enabled"],[141,34,131,36],[142,6,132,8,"configRef"],[142,15,132,17],[142,16,132,18,"current"],[142,23,132,25],[142,26,132,28,"config"],[142,32,132,34],[143,6,133,8,"getStateFromPathRef"],[143,25,133,27],[143,26,133,28,"current"],[143,33,133,35],[143,36,133,38,"getStateFromPath"],[143,52,133,54],[144,6,134,8,"getPathFromStateRef"],[144,25,134,27],[144,26,134,28,"current"],[144,33,134,35],[144,36,134,38,"getPathFromState"],[144,52,134,54],[145,6,135,8,"getActionFromStateRef"],[145,27,135,29],[145,28,135,30,"current"],[145,35,135,37],[145,38,135,40,"getActionFromState"],[145,56,135,58],[146,4,136,4],[146,5,136,5],[146,6,136,6],[147,4,137,4],[147,10,137,10,"validateRoutesNotExistInRootState"],[147,43,137,43],[147,46,137,46,"React"],[147,51,137,51],[147,52,137,52,"useCallback"],[147,63,137,63],[147,64,137,65,"state"],[147,69,137,70],[147,73,137,75],[148,6,138,8],[149,6,139,8],[150,6,140,8],[151,6,141,8],[152,6,142,8],[152,12,142,14,"routeNames"],[152,22,142,24],[152,25,142,27],[152,26,142,28,"constants_1"],[152,37,142,39],[152,38,142,40,"INTERNAL_SLOT_NAME"],[152,56,142,58],[152,57,142,59],[153,6,143,8],[154,6,144,8],[155,6,145,8],[156,6,146,8],[157,6,147,8],[158,6,148,8],[158,13,148,15,"state"],[158,18,148,20],[158,20,148,22,"routes"],[158,26,148,28],[158,27,148,29,"some"],[158,31,148,33],[158,32,148,35,"r"],[158,33,148,36],[158,37,148,41],[158,38,148,42,"routeNames"],[158,48,148,52],[158,49,148,53,"includes"],[158,57,148,61],[158,58,148,62,"r"],[158,59,148,63],[158,60,148,64,"name"],[158,64,148,68],[158,65,148,69],[158,66,148,70],[159,6,149,8],[160,4,150,4],[160,5,150,5],[160,7,150,7],[160,8,150,8,"ref"],[160,11,150,11],[160,12,150,12],[160,13,150,13],[161,4,151,4],[161,10,151,10,"server"],[161,16,151,16],[161,19,151,19,"React"],[161,24,151,24],[161,25,151,25,"use"],[161,28,151,28],[161,29,151,29,"serverLocationContext_1"],[161,52,151,52],[161,53,151,53,"ServerContext"],[161,66,151,66],[161,67,151,67],[162,4,152,4],[162,10,152,10,"getInitialState"],[162,25,152,25],[162,28,152,28,"React"],[162,33,152,33],[162,34,152,34,"useCallback"],[162,45,152,45],[162,46,152,46],[162,52,152,52],[163,6,153,8],[163,10,153,12,"value"],[163,15,153,17],[164,6,154,8],[164,10,154,12,"enabledRef"],[164,20,154,22],[164,21,154,23,"current"],[164,28,154,30],[164,30,154,32],[165,8,155,12],[165,14,155,18,"location"],[165,22,155,26],[165,25,155,29,"server"],[165,31,155,35],[165,33,155,37,"location"],[165,41,155,45],[165,46,155,50],[165,53,155,57,"window"],[165,59,155,63],[165,64,155,68],[165,75,155,79],[165,78,155,82,"window"],[165,84,155,88],[165,85,155,89,"location"],[165,93,155,97],[165,96,155,100,"undefined"],[165,105,155,109],[165,106,155,110],[166,8,156,12],[166,14,156,18,"path"],[166,18,156,22],[166,21,156,25,"location"],[166,29,156,33],[166,32,156,36,"location"],[166,40,156,44],[166,41,156,45,"pathname"],[166,49,156,53],[166,52,156,56,"location"],[166,60,156,64],[166,61,156,65,"search"],[166,67,156,71],[166,70,156,74,"undefined"],[166,79,156,83],[167,8,157,12],[167,12,157,16,"path"],[167,16,157,20],[167,18,157,22],[168,10,158,16,"value"],[168,15,158,21],[168,18,158,24,"getStateFromPathRef"],[168,37,158,43],[168,38,158,44,"current"],[168,45,158,51],[168,46,158,52,"path"],[168,50,158,56],[168,52,158,58,"configRef"],[168,61,158,67],[168,62,158,68,"current"],[168,69,158,75],[168,70,158,76],[169,8,159,12],[170,8,160,12],[171,8,161,12,"onUnhandledLinking"],[171,26,161,30],[171,27,161,31,"path"],[171,31,161,35],[171,32,161,36],[172,6,162,8],[173,6,163,8],[173,12,163,14,"thenable"],[173,20,163,22],[173,23,163,25],[174,8,164,12,"then"],[174,12,164,16,"then"],[174,13,164,17,"onfulfilled"],[174,24,164,28],[174,26,164,30],[175,10,165,16],[175,17,165,23,"Promise"],[175,24,165,30],[175,25,165,31,"resolve"],[175,32,165,38],[175,33,165,39,"onfulfilled"],[175,44,165,50],[175,47,165,53,"onfulfilled"],[175,58,165,64],[175,59,165,65,"value"],[175,64,165,70],[175,65,165,71],[175,68,165,74,"value"],[175,73,165,79],[175,74,165,80],[176,8,166,12],[176,9,166,13],[177,8,167,12,"catch"],[177,13,167,17,"catch"],[177,14,167,17],[177,16,167,20],[178,10,168,16],[178,17,168,23,"thenable"],[178,25,168,31],[179,8,169,12],[180,6,170,8],[180,7,170,9],[181,6,171,8],[181,13,171,15,"thenable"],[181,21,171,23],[182,6,172,8],[183,4,173,4],[183,5,173,5],[183,7,173,7],[183,9,173,9],[183,10,173,10],[184,4,174,4],[184,10,174,10,"previousIndexRef"],[184,26,174,26],[184,29,174,29,"React"],[184,34,174,34],[184,35,174,35,"useRef"],[184,41,174,41],[184,42,174,42,"undefined"],[184,51,174,51],[184,52,174,52],[185,4,175,4],[185,10,175,10,"previousStateRef"],[185,26,175,26],[185,29,175,29,"React"],[185,34,175,34],[185,35,175,35,"useRef"],[185,41,175,41],[185,42,175,42,"undefined"],[185,51,175,51],[185,52,175,52],[186,4,176,4],[186,10,176,10,"pendingPopStatePathRef"],[186,32,176,32],[186,35,176,35,"React"],[186,40,176,40],[186,41,176,41,"useRef"],[186,47,176,47],[186,48,176,48,"undefined"],[186,57,176,57],[186,58,176,58],[187,4,177,4,"React"],[187,9,177,9],[187,10,177,10,"useEffect"],[187,19,177,19],[187,20,177,20],[187,26,177,26],[188,6,178,8,"previousIndexRef"],[188,22,178,24],[188,23,178,25,"current"],[188,30,178,32],[188,33,178,35,"history"],[188,40,178,42],[188,41,178,43,"index"],[188,46,178,48],[189,6,179,8],[189,13,179,15,"history"],[189,20,179,22],[189,21,179,23,"listen"],[189,27,179,29],[189,28,179,30],[189,34,179,36],[190,8,180,12],[190,14,180,18,"navigation"],[190,24,180,28],[190,27,180,31,"ref"],[190,30,180,34],[190,31,180,35,"current"],[190,38,180,42],[191,8,181,12],[191,12,181,16],[191,13,181,17,"navigation"],[191,23,181,27],[191,27,181,31],[191,28,181,32,"enabled"],[191,35,181,39],[191,37,181,41],[192,10,182,16],[193,8,183,12],[194,8,184,12],[194,14,184,18],[195,10,184,20,"location"],[196,8,184,29],[196,9,184,30],[196,12,184,33,"window"],[196,18,184,39],[197,8,185,12],[197,14,185,18,"path"],[197,18,185,22],[197,21,185,25,"location"],[197,29,185,33],[197,30,185,34,"pathname"],[197,38,185,42],[197,41,185,45,"location"],[197,49,185,53],[197,50,185,54,"search"],[197,56,185,60],[197,59,185,63,"location"],[197,67,185,71],[197,68,185,72,"hash"],[197,72,185,76],[198,8,186,12],[198,14,186,18,"index"],[198,19,186,23],[198,22,186,26,"history"],[198,29,186,33],[198,30,186,34,"index"],[198,35,186,39],[199,8,187,12],[199,14,187,18,"previousIndex"],[199,27,187,31],[199,30,187,34,"previousIndexRef"],[199,46,187,50],[199,47,187,51,"current"],[199,54,187,58],[199,58,187,62],[199,59,187,63],[200,8,188,12,"previousIndexRef"],[200,24,188,28],[200,25,188,29,"current"],[200,32,188,36],[200,35,188,39,"index"],[200,40,188,44],[201,8,189,12,"pendingPopStatePathRef"],[201,30,189,34],[201,31,189,35,"current"],[201,38,189,42],[201,41,189,45,"path"],[201,45,189,49],[202,8,190,12],[203,8,191,12],[204,8,192,12],[205,8,193,12],[205,14,193,18,"record"],[205,20,193,24],[205,23,193,27,"history"],[205,30,193,34],[205,31,193,35,"get"],[205,34,193,38],[205,35,193,39,"index"],[205,40,193,44],[205,41,193,45],[206,8,194,12],[206,12,194,16,"record"],[206,18,194,22],[206,20,194,24,"path"],[206,24,194,28],[206,29,194,33,"path"],[206,33,194,37],[206,37,194,41,"record"],[206,43,194,47],[206,45,194,49,"state"],[206,50,194,54],[206,52,194,56],[207,10,195,16,"navigation"],[207,20,195,26],[207,21,195,27,"resetRoot"],[207,30,195,36],[207,31,195,37,"record"],[207,37,195,43],[207,38,195,44,"state"],[207,43,195,49],[207,44,195,50],[208,10,196,16],[209,8,197,12],[210,8,198,12],[210,14,198,18,"state"],[210,19,198,23],[210,22,198,26,"getStateFromPathRef"],[210,41,198,45],[210,42,198,46,"current"],[210,49,198,53],[210,50,198,54,"path"],[210,54,198,58],[210,56,198,60,"configRef"],[210,65,198,69],[210,66,198,70,"current"],[210,73,198,77],[210,74,198,78],[211,8,199,12],[212,8,200,12],[213,8,201,12],[213,12,201,16,"state"],[213,17,201,21],[213,19,201,23],[214,10,202,16],[215,10,203,16,"onUnhandledLinking"],[215,28,203,34],[215,29,203,35,"path"],[215,33,203,39],[215,34,203,40],[216,10,204,16],[217,10,205,16],[218,10,206,16],[218,14,206,20,"validateRoutesNotExistInRootState"],[218,47,206,53],[218,48,206,54,"state"],[218,53,206,59],[218,54,206,60],[218,56,206,62],[219,12,207,20],[220,10,208,16],[221,10,209,16],[221,14,209,20,"index"],[221,19,209,25],[221,22,209,28,"previousIndex"],[221,35,209,41],[222,10,210,20],[223,0,211,0],[224,0,212,0],[225,0,213,0],[226,0,214,0],[227,0,215,0],[228,0,216,0],[229,0,217,0],[230,0,218,0],[231,0,219,0],[232,0,220,0],[233,0,221,0],[234,0,222,0],[235,0,223,0],[236,0,224,0],[237,0,225,0],[238,0,226,0],[239,0,227,0],[240,0,228,0],[241,10,229,21,"index"],[241,15,229,26],[241,20,229,31,"previousIndex"],[241,33,229,44],[241,38,229,49],[241,39,229,50,"record"],[241,45,229,56],[241,49,229,60],[241,52,229,63,"record"],[241,58,229,69],[241,60,229,71,"path"],[241,64,229,75],[241,67,229,78,"location"],[241,75,229,86],[241,76,229,87,"hash"],[241,80,229,91],[241,82,229,93],[241,87,229,98,"path"],[241,91,229,102],[241,92,229,103],[242,10,230,16],[243,10,230,16],[243,12,231,18],[244,12,232,20],[244,18,232,26,"action"],[244,24,232,32],[244,27,232,35,"getActionFromStateRef"],[244,48,232,56],[244,49,232,57,"current"],[244,56,232,64],[244,57,232,65,"state"],[244,62,232,70],[244,64,232,72,"configRef"],[244,73,232,81],[244,74,232,82,"current"],[244,81,232,89],[244,82,232,90],[245,12,233,20],[245,16,233,24,"action"],[245,22,233,30],[245,27,233,35,"undefined"],[245,36,233,44],[245,38,233,46],[246,14,234,24],[246,18,234,28],[247,16,235,28,"navigation"],[247,26,235,38],[247,27,235,39,"dispatch"],[247,35,235,47],[247,36,235,48,"action"],[247,42,235,54],[247,43,235,55],[248,14,236,24],[248,15,236,25],[248,16,237,24],[248,23,237,31,"e"],[248,24,237,32],[248,26,237,34],[249,16,238,28],[250,16,239,28],[251,16,240,28,"console"],[251,23,240,35],[251,24,240,36,"warn"],[251,28,240,40],[251,29,240,41],[251,82,240,94,"path"],[251,86,240,98],[251,92,240,104],[251,99,240,111,"e"],[251,100,240,112],[251,105,240,117],[251,113,240,125],[251,117,240,129,"e"],[251,118,240,130],[251,122,240,134],[251,126,240,138],[251,130,240,142],[251,139,240,151],[251,143,240,155,"e"],[251,144,240,156],[251,147,240,159,"e"],[251,148,240,160],[251,149,240,161,"message"],[251,156,240,168],[251,159,240,171,"e"],[251,160,240,172],[251,162,240,174],[251,163,240,175],[252,14,241,24],[253,12,242,20],[253,13,242,21],[253,19,243,25],[254,14,244,24,"navigation"],[254,24,244,34],[254,25,244,35,"resetRoot"],[254,34,244,44],[254,35,244,45,"state"],[254,40,244,50],[254,41,244,51],[255,12,245,20],[256,10,246,16],[256,11,246,17],[256,17,247,21],[257,12,248,20,"navigation"],[257,22,248,30],[257,23,248,31,"resetRoot"],[257,32,248,40],[257,33,248,41,"state"],[257,38,248,46],[257,39,248,47],[258,10,249,16],[259,8,250,12],[259,9,250,13],[259,15,251,17],[260,10,252,16],[261,10,253,16,"navigation"],[261,20,253,26],[261,21,253,27,"resetRoot"],[261,30,253,36],[261,31,253,37,"state"],[261,36,253,42],[261,37,253,43],[262,8,254,12],[263,6,255,8],[263,7,255,9],[263,8,255,10],[264,4,256,4],[264,5,256,5],[264,7,256,7],[264,8,256,8,"enabled"],[264,15,256,15],[264,17,256,17,"history"],[264,24,256,24],[264,26,256,26,"onUnhandledLinking"],[264,44,256,44],[264,46,256,46,"ref"],[264,49,256,49],[264,51,256,51,"validateRoutesNotExistInRootState"],[264,84,256,84],[264,85,256,85],[264,86,256,86],[265,4,257,4,"React"],[265,9,257,9],[265,10,257,10,"useEffect"],[265,19,257,19],[265,20,257,20],[265,26,257,26],[266,6,258,8],[266,10,258,12],[266,11,258,13,"enabled"],[266,18,258,20],[266,20,258,22],[267,8,259,12],[268,6,260,8],[269,6,261,8],[269,12,261,14,"getPathForRoute"],[269,27,261,29],[269,30,261,32,"getPathForRoute"],[269,31,261,33,"route"],[269,36,261,38],[269,38,261,40,"state"],[269,43,261,45],[269,48,261,50],[270,8,262,12],[270,12,262,16,"path"],[270,16,262,20],[271,8,263,12],[272,8,264,12],[273,8,265,12],[273,12,265,16,"route"],[273,17,265,21],[273,19,265,23,"path"],[273,23,265,27],[273,25,265,29],[274,10,266,16],[274,16,266,22,"stateForPath"],[274,28,266,34],[274,31,266,37,"getStateFromPathRef"],[274,50,266,56],[274,51,266,57,"current"],[274,58,266,64],[274,59,266,65,"route"],[274,64,266,70],[274,65,266,71,"path"],[274,69,266,75],[274,71,266,77,"configRef"],[274,80,266,86],[274,81,266,87,"current"],[274,88,266,94],[274,89,266,95],[275,10,267,16],[275,14,267,20,"stateForPath"],[275,26,267,32],[275,28,267,34],[276,12,268,20],[276,18,268,26,"focusedRoute"],[276,30,268,38],[276,33,268,41],[276,34,268,42],[276,35,268,43],[276,37,268,45,"native_1"],[276,45,268,53],[276,46,268,54,"findFocusedRoute"],[276,62,268,70],[276,64,268,72,"stateForPath"],[276,76,268,84],[276,77,268,85],[277,12,269,20],[277,16,269,24,"focusedRoute"],[277,28,269,36],[277,32,270,24,"focusedRoute"],[277,44,270,36],[277,45,270,37,"name"],[277,49,270,41],[277,54,270,46,"route"],[277,59,270,51],[277,60,270,52,"name"],[277,64,270,56],[277,68,271,24],[277,69,271,25],[277,70,271,26],[277,72,271,28,"fast_deep_equal_1"],[277,89,271,45],[277,90,271,46,"default"],[277,97,271,53],[277,99,271,55],[278,14,271,57],[278,17,271,60,"focusedRoute"],[278,29,271,72],[278,30,271,73,"params"],[279,12,271,80],[279,13,271,81],[279,15,271,83],[280,14,271,85],[280,17,271,88,"route"],[280,22,271,93],[280,23,271,94,"params"],[281,12,271,101],[281,13,271,102],[281,14,271,103],[281,16,271,105],[282,14,272,24],[283,14,273,24],[284,14,274,24,"path"],[284,18,274,28],[284,21,274,31],[284,22,274,32],[284,23,274,33],[284,25,274,35,"getPathFromState_1"],[284,43,274,53],[284,44,274,54,"appendBaseUrl"],[284,57,274,67],[284,59,274,69,"route"],[284,64,274,74],[284,65,274,75,"path"],[284,69,274,79],[284,70,274,80],[285,14,275,24],[286,12,276,20],[287,10,277,16],[288,8,278,12],[289,8,279,12],[289,12,279,16,"path"],[289,16,279,20],[289,20,279,24],[289,24,279,28],[289,26,279,30],[290,10,280,16,"path"],[290,14,280,20],[290,17,280,23,"getPathFromStateRef"],[290,36,280,42],[290,37,280,43,"current"],[290,44,280,50],[290,45,280,51,"state"],[290,50,280,56],[290,52,280,58,"configRef"],[290,61,280,67],[290,62,280,68,"current"],[290,69,280,75],[290,70,280,76],[291,8,281,12],[292,8,282,12],[293,8,283,12],[294,8,284,12],[295,8,285,12],[296,8,286,12],[297,8,287,12],[298,8,288,12],[299,8,289,12],[300,8,290,12],[301,8,291,12],[302,8,292,12],[303,8,293,12],[304,8,294,12],[305,8,295,12],[306,8,296,12],[307,8,297,12],[307,15,297,19,"path"],[307,19,297,23],[308,6,298,8],[308,7,298,9],[309,6,299,8],[309,10,299,12,"ref"],[309,13,299,15],[309,14,299,16,"current"],[309,21,299,23],[309,23,299,25],[310,8,300,12],[311,8,301,12],[312,8,302,12],[313,8,303,12],[314,8,304,12],[315,8,305,12],[315,14,305,18,"rootState"],[315,23,305,27],[315,26,305,30,"ref"],[315,29,305,33],[315,30,305,34,"current"],[315,37,305,41],[315,38,305,42,"getRootState"],[315,50,305,54],[315,51,305,55],[315,52,305,56],[316,8,306,12],[316,14,306,18,"state"],[316,19,306,23],[316,22,306,26,"store"],[316,27,306,31],[316,28,306,32,"state"],[316,33,306,37],[317,8,307,12],[318,8,308,12],[318,12,308,16,"state"],[318,17,308,21],[318,19,308,23],[319,10,309,16],[319,16,309,22,"route"],[319,21,309,27],[319,24,309,30],[319,25,309,31],[319,26,309,32],[319,28,309,34,"native_1"],[319,36,309,42],[319,37,309,43,"findFocusedRoute"],[319,53,309,59],[319,55,309,61,"state"],[319,60,309,66],[319,61,309,67],[320,10,310,16],[320,16,310,22,"path"],[320,20,310,26],[320,23,310,29,"getPathForRoute"],[320,38,310,44],[320,39,310,45,"route"],[320,44,310,50],[320,46,310,52,"state"],[320,51,310,57],[320,52,310,58],[321,10,311,16],[321,14,311,20,"previousStateRef"],[321,30,311,36],[321,31,311,37,"current"],[321,38,311,44],[321,43,311,49,"undefined"],[321,52,311,58],[321,54,311,60],[322,12,312,20],[323,12,313,20],[324,12,314,20,"previousStateRef"],[324,28,314,36],[324,29,314,37,"current"],[324,36,314,44],[324,39,314,47,"rootState"],[324,48,314,56],[325,12,315,20],[326,10,316,16],[327,10,317,16,"history"],[327,17,317,23],[327,18,317,24,"replace"],[327,25,317,31],[327,26,317,32],[328,12,317,34,"path"],[328,16,317,38],[329,12,317,40,"state"],[330,10,317,46],[330,11,317,47],[330,12,317,48],[331,8,318,12],[332,6,319,8],[333,6,320,8],[333,12,320,14,"onStateChange"],[333,25,320,27],[333,28,320,30],[333,34,320,30,"onStateChange"],[333,35,320,30],[333,40,320,42],[334,8,321,12],[334,14,321,18,"navigation"],[334,24,321,28],[334,27,321,31,"ref"],[334,30,321,34],[334,31,321,35,"current"],[334,38,321,42],[335,8,322,12],[335,12,322,16],[335,13,322,17,"navigation"],[335,23,322,27],[335,27,322,31],[335,28,322,32,"enabled"],[335,35,322,39],[335,37,322,41],[336,10,323,16],[337,8,324,12],[338,8,325,12],[338,14,325,18,"previousState"],[338,27,325,31],[338,30,325,34,"previousStateRef"],[338,46,325,50],[338,47,325,51,"current"],[338,54,325,58],[339,8,326,12],[340,8,327,12],[341,8,328,12],[342,8,329,12],[342,14,329,18,"rootState"],[342,23,329,27],[342,26,329,30,"navigation"],[342,36,329,40],[342,37,329,41,"getRootState"],[342,49,329,53],[342,50,329,54],[342,51,329,55],[343,8,330,12],[343,14,330,18,"state"],[343,19,330,23],[343,22,330,26,"store"],[343,27,330,31],[343,28,330,32,"state"],[343,33,330,37],[344,8,331,12],[345,8,332,12],[346,8,333,12],[346,12,333,16],[346,13,333,17,"state"],[346,18,333,22],[346,20,333,24],[347,10,334,16],[348,8,335,12],[349,8,336,12],[349,14,336,18,"pendingPath"],[349,25,336,29],[349,28,336,32,"pendingPopStatePathRef"],[349,50,336,54],[349,51,336,55,"current"],[349,58,336,62],[350,8,337,12],[350,14,337,18,"route"],[350,19,337,23],[350,22,337,26],[350,23,337,27],[350,24,337,28],[350,26,337,30,"native_1"],[350,34,337,38],[350,35,337,39,"findFocusedRoute"],[350,51,337,55],[350,53,337,57,"state"],[350,58,337,62],[350,59,337,63],[351,8,338,12],[351,14,338,18,"path"],[351,18,338,22],[351,21,338,25,"getPathForRoute"],[351,36,338,40],[351,37,338,41,"route"],[351,42,338,46],[351,44,338,48,"state"],[351,49,338,53],[351,50,338,54],[352,8,339,12],[353,8,340,12],[354,8,341,12,"previousStateRef"],[354,24,341,28],[354,25,341,29,"current"],[354,32,341,36],[354,35,341,39,"rootState"],[354,44,341,48],[355,8,342,12],[356,8,343,12,"pendingPopStatePathRef"],[356,30,343,34],[356,31,343,35,"current"],[356,38,343,42],[356,41,343,45,"undefined"],[356,50,343,54],[357,8,344,12],[358,8,345,12],[359,8,346,12],[360,8,347,12],[361,8,348,12],[361,14,348,18],[361,15,348,19,"previousFocusedState"],[361,35,348,39],[361,37,348,41,"focusedState"],[361,49,348,53],[361,50,348,54],[361,53,348,57,"findMatchingState"],[361,70,348,74],[361,71,348,75,"previousState"],[361,84,348,88],[361,86,348,90,"state"],[361,91,348,95],[361,92,348,96],[362,8,349,12],[362,12,349,16,"previousFocusedState"],[362,32,349,36],[362,36,350,16,"focusedState"],[362,48,350,28],[363,8,351,16],[364,8,352,16],[365,8,353,16,"path"],[365,12,353,20],[365,17,353,25,"pendingPath"],[365,28,353,36],[365,30,353,38],[366,10,354,16],[366,16,354,22,"historyDelta"],[366,28,354,34],[366,31,354,37],[366,32,354,38,"focusedState"],[366,44,354,50],[366,45,354,51,"history"],[366,52,354,58],[366,55,354,61,"focusedState"],[366,67,354,73],[366,68,354,74,"history"],[366,75,354,81],[366,76,354,82,"length"],[366,82,354,88],[366,85,354,91,"focusedState"],[366,97,354,103],[366,98,354,104,"routes"],[366,104,354,110],[366,105,354,111,"length"],[366,111,354,117],[366,116,355,21,"previousFocusedState"],[366,136,355,41],[366,137,355,42,"history"],[366,144,355,49],[366,147,356,26,"previousFocusedState"],[366,167,356,46],[366,168,356,47,"history"],[366,175,356,54],[366,176,356,55,"length"],[366,182,356,61],[366,185,357,26,"previousFocusedState"],[366,205,357,46],[366,206,357,47,"routes"],[366,212,357,53],[366,213,357,54,"length"],[366,219,357,60],[366,220,357,61],[367,10,358,16],[367,14,358,20,"historyDelta"],[367,26,358,32],[367,29,358,35],[367,30,358,36],[367,32,358,38],[368,12,359,20],[369,12,360,20],[370,12,361,20,"history"],[370,19,361,27],[370,20,361,28,"push"],[370,24,361,32],[370,25,361,33],[371,14,361,35,"path"],[371,18,361,39],[372,14,361,41,"state"],[373,12,361,47],[373,13,361,48],[373,14,361,49],[374,10,362,16],[374,11,362,17],[374,17,363,21],[374,21,363,25,"historyDelta"],[374,33,363,37],[374,36,363,40],[374,37,363,41],[374,39,363,43],[375,12,364,20],[376,12,365,20],[376,18,365,26,"nextIndex"],[376,27,365,35],[376,30,365,38,"history"],[376,37,365,45],[376,38,365,46,"backIndex"],[376,47,365,55],[376,48,365,56],[377,14,365,58,"path"],[378,12,365,63],[378,13,365,64],[378,14,365,65],[379,12,366,20],[379,18,366,26,"currentIndex"],[379,30,366,38],[379,33,366,41,"history"],[379,40,366,48],[379,41,366,49,"index"],[379,46,366,54],[380,12,367,20],[380,16,367,24],[381,14,368,24],[381,18,368,28,"nextIndex"],[381,27,368,37],[381,32,368,42],[381,33,368,43],[381,34,368,44],[381,38,369,28,"nextIndex"],[381,47,369,37],[381,50,369,40,"currentIndex"],[381,62,369,52],[382,14,370,28],[383,14,371,28,"history"],[383,21,371,35],[383,22,371,36,"get"],[383,25,371,39],[383,26,371,40,"nextIndex"],[383,35,371,49],[383,38,371,52,"currentIndex"],[383,50,371,64],[383,51,371,65],[383,53,371,67],[384,16,372,28],[385,16,373,28],[385,22,373,34,"history"],[385,29,373,41],[385,30,373,42,"go"],[385,32,373,44],[385,33,373,45,"nextIndex"],[385,42,373,54],[385,45,373,57,"currentIndex"],[385,57,373,69],[385,58,373,70],[386,14,374,24],[386,15,374,25],[386,21,375,29],[387,16,376,28],[388,16,377,28],[389,16,378,28],[390,16,379,28],[390,22,379,34,"history"],[390,29,379,41],[390,30,379,42,"go"],[390,32,379,44],[390,33,379,45,"historyDelta"],[390,45,379,57],[390,46,379,58],[391,14,380,24],[392,14,381,24],[393,14,382,24,"history"],[393,21,382,31],[393,22,382,32,"replace"],[393,29,382,39],[393,30,382,40],[394,16,382,42,"path"],[394,20,382,46],[395,16,382,48,"state"],[396,14,382,54],[396,15,382,55],[396,16,382,56],[397,12,383,20],[397,13,383,21],[397,14,384,20],[397,20,384,26],[398,14,385,24],[399,12,385,24],[400,10,387,16],[400,11,387,17],[400,17,388,21],[401,12,389,20],[402,12,390,20,"history"],[402,19,390,27],[402,20,390,28,"replace"],[402,27,390,35],[402,28,390,36],[403,14,390,38,"path"],[403,18,390,42],[404,14,390,44,"state"],[405,12,390,50],[405,13,390,51],[405,14,390,52],[406,10,391,16],[407,8,392,12],[407,9,392,13],[407,15,393,17],[408,10,394,16],[409,10,395,16],[410,10,396,16,"history"],[410,17,396,23],[410,18,396,24,"replace"],[410,25,396,31],[410,26,396,32],[411,12,396,34,"path"],[411,16,396,38],[412,12,396,40,"state"],[413,10,396,46],[413,11,396,47],[413,12,396,48],[414,8,397,12],[415,6,398,8],[415,7,398,9],[416,6,399,8],[417,6,400,8],[418,6,401,8],[419,6,402,8],[419,13,402,15,"ref"],[419,16,402,18],[419,17,402,19,"current"],[419,24,402,26],[419,26,402,28,"addListener"],[419,37,402,39],[419,38,402,40],[419,45,402,47],[419,47,402,49],[419,48,402,50],[419,49,402,51],[419,51,402,53,"exports"],[419,58,402,60],[419,59,402,61,"series"],[419,65,402,67],[419,67,402,69,"onStateChange"],[419,80,402,82],[419,81,402,83],[419,82,402,84],[420,4,403,4],[420,5,403,5],[420,7,403,7],[420,8,403,8,"enabled"],[420,15,403,15],[420,17,403,17,"history"],[420,24,403,24],[420,26,403,26,"ref"],[420,29,403,29],[420,30,403,30],[420,31,403,31],[421,4,404,4],[421,11,404,11],[422,6,405,8,"getInitialState"],[423,4,406,4],[423,5,406,5],[424,2,407,0],[425,2,408,0],[425,11,408,9,"getInitialURLWithTimeout"],[425,35,408,33,"getInitialURLWithTimeout"],[425,36,408,33],[425,38,408,36],[426,4,409,4],[426,11,409,11],[426,18,409,18,"window"],[426,24,409,24],[426,29,409,29],[426,40,409,40],[426,43,409,43],[426,45,409,45],[426,48,409,48,"window"],[426,54,409,54],[426,55,409,55,"location"],[426,63,409,63],[426,64,409,64,"href"],[426,68,409,68],[427,2,410,0],[428,0,410,1],[428,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","findMatchingState","series","callback","useLinking","React.useEffect$argument_0","validateRoutesNotExistInRootState","state.routes.some$argument_0","getInitialState","thenable.then","thenable._catch","history.listen$argument_0","getPathForRoute","onStateChange","getInitialURLWithTimeout"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;wDCC;CDE;0BIiB;CJwB;eKI;qBCE;KDE;CLE;AOG;oBCG;ePoB;SOK;KDC;oBCU;KDM;gEEC;kCCW,mCD;KFE;8CIE;YCY;aDE;YEC;aFE;KJI;oBCI;8BME;SN4E;KDC;oBCC;gCOI;SPqC;8BQsB;SR8E;KDK;CPI;AiBC;CjBE"}},"type":"js/module"}]}