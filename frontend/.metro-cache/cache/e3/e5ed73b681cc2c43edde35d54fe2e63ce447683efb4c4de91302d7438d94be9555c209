{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/NativeModules","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"MRft9soElPgDBIQyAww27iefYeU=","exportNames":["*"]}},{"name":"react-native-web/dist/exports/Platform","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dV3bI3NOD8bfMzaIniMaFGy/nn8=","exportNames":["*"]}},{"name":"./web","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":57},"end":{"line":3,"column":43,"index":100}}],"key":"8hbLzyIXFhqWXguD+C6jDKIcDJ4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.ensureNativeModulesAreInstalled = ensureNativeModulesAreInstalled;\n  var _NativeModules = _interopRequireDefault(require(_dependencyMap[1], \"react-native-web/dist/exports/NativeModules\"));\n  var _Platform = _interopRequireDefault(require(_dependencyMap[2], \"react-native-web/dist/exports/Platform\"));\n  var _web = require(_dependencyMap[3], \"./web\");\n  /**\n   * Ensures that the native modules are installed in the current runtime.\n   * Otherwise, it synchronously calls a native function that installs them.\n   */\n  function ensureNativeModulesAreInstalled() {\n    if (globalThis.expo) {\n      return;\n    }\n    try {\n      if (_Platform.default.OS === 'web') {\n        // Requiring web folder sets up the `globalThis.expo` object.\n        (0, _web.registerWebGlobals)();\n      } else {\n        // TODO: ExpoModulesCore shouldn't be optional here,\n        // but to keep backwards compatibility let's just ignore it in SDK 50.\n        // In most cases the modules were already installed from the native side.\n        _NativeModules.default.ExpoModulesCore?.installModules();\n      }\n    } catch (error) {\n      console.error(`Unable to install Expo modules: ${error}`);\n    }\n  }\n});","lineCount":32,"map":[[9,2,3,0],[9,6,3,0,"_web"],[9,10,3,0],[9,13,3,0,"require"],[9,20,3,0],[9,21,3,0,"_dependencyMap"],[9,35,3,0],[10,2,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,2,9,7],[14,11,9,16,"ensureNativeModulesAreInstalled"],[14,42,9,47,"ensureNativeModulesAreInstalled"],[14,43,9,47],[14,45,9,56],[15,4,10,2],[15,8,10,6,"globalThis"],[15,18,10,16],[15,19,10,17,"expo"],[15,23,10,21],[15,25,10,23],[16,6,11,4],[17,4,12,2],[18,4,13,2],[18,8,13,6],[19,6,14,4],[19,10,14,8,"Platform"],[19,27,14,16],[19,28,14,17,"OS"],[19,30,14,19],[19,35,14,24],[19,40,14,29],[19,42,14,31],[20,8,15,6],[21,8,16,6],[21,12,16,6,"registerWebGlobals"],[21,35,16,24],[21,37,16,25],[21,38,16,26],[22,6,17,4],[22,7,17,5],[22,13,17,11],[23,8,18,6],[24,8,19,6],[25,8,20,6],[26,8,21,6,"NativeModules"],[26,30,21,19],[26,31,21,20,"ExpoModulesCore"],[26,46,21,35],[26,48,21,37,"installModules"],[26,62,21,51],[26,63,21,52],[26,64,21,53],[27,6,22,4],[28,4,23,2],[28,5,23,3],[28,6,23,4],[28,13,23,11,"error"],[28,18,23,16],[28,20,23,18],[29,6,24,4,"console"],[29,13,24,11],[29,14,24,12,"error"],[29,19,24,17],[29,20,24,18],[29,55,24,53,"error"],[29,60,24,58],[29,62,24,60],[29,63,24,61],[30,4,25,2],[31,2,26,0],[32,0,26,1],[32,3]],"functionMap":{"names":["<global>","ensureNativeModulesAreInstalled"],"mappings":"AAA;OCQ;CDiB"}},"type":"js/module"}]}