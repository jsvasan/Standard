{"dependencies":[{"name":"./matchers","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":19,"index":217},"end":{"line":6,"column":40,"index":238}}],"key":"89ylKT57ef0l7ma8+p1HhPaMj94=","exportNames":["*"],"imports":1}},{"name":"./utils/url","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":14,"index":254},"end":{"line":7,"column":36,"index":276}}],"key":"KwepoOiDJIvcZxDqcbtt8RBrwgA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getRoutes = getRoutes;\n  exports.extrapolateGroups = extrapolateGroups;\n  exports.generateDynamic = generateDynamic;\n  const matchers_1 = require(_dependencyMap[0], \"./matchers\");\n  const url_1 = require(_dependencyMap[1], \"./utils/url\");\n  const validPlatforms = new Set(['android', 'ios', 'native', 'web']);\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule, options) {\n    const directoryTree = getDirectoryTree(contextModule, options);\n    // If there are no routes\n    if (!directoryTree) {\n      return null;\n    }\n    const rootNode = flattenDirectoryTreeToRoutes(directoryTree, options);\n    if (!options.ignoreEntryPoints) {\n      crawlAndAppendInitialRoutesAndEntryFiles(rootNode, options);\n    }\n    return rootNode;\n  }\n  /**\n   * Converts the RequireContext keys (file paths) into a directory tree.\n   */\n  function getDirectoryTree(contextModule, options) {\n    const importMode = options.importMode || \"sync\";\n    const ignoreList = [/^\\.\\/\\+(html|native-intent)\\.[tj]sx?$/]; // Ignore the top level ./+html file\n    if (options.ignore) {\n      ignoreList.push(...options.ignore);\n    }\n    if (!options.preserveApiRoutes) {\n      ignoreList.push(/\\+api$/, /\\+api\\.[tj]sx?$/);\n    }\n    const rootDirectory = {\n      files: new Map(),\n      subdirectories: new Map()\n    };\n    let hasRoutes = false;\n    let isValid = false;\n    const contextKeys = contextModule.keys();\n    const redirects = {};\n    const rewrites = {};\n    let validRedirectDestinations;\n    const getValidDestinations = () => {\n      // Loop over contexts once and cache the valid destinations\n      validRedirectDestinations ??= contextKeys.map(key => {\n        return {\n          contextKey: key,\n          nameWithoutInvisible: getNameWithoutInvisibleSegmentsFromRedirectPath((0, matchers_1.removeSupportedExtensions)(key))\n        };\n      });\n      return validRedirectDestinations;\n    };\n    // If we are keeping redirects as valid routes, then we need to add them to the contextKeys\n    // This is useful for generating a sitemap with redirects, or static site generation that includes redirects\n    if (options.preserveRedirectAndRewrites) {\n      if (options.redirects) {\n        for (const redirect of options.redirects) {\n          const sourceContextKey = getSourceContextKeyFromRedirectSource(redirect.source);\n          const sourceName = getNameFromRedirectPath(redirect.source);\n          const isExternalRedirect = (0, url_1.shouldLinkExternally)(redirect.destination);\n          const targetDestinationName = isExternalRedirect ? redirect.destination : getNameWithoutInvisibleSegmentsFromRedirectPath(redirect.destination);\n          if (ignoreList.some(regex => regex.test(sourceContextKey))) {\n            continue;\n          }\n          const validDestination = isExternalRedirect ? undefined : getValidDestinations().find(key => key.nameWithoutInvisible === targetDestinationName);\n          const destination = isExternalRedirect ? targetDestinationName : validDestination?.nameWithoutInvisible;\n          const destinationContextKey = isExternalRedirect ? targetDestinationName : validDestination?.contextKey;\n          if (!destinationContextKey || destination === undefined) {\n            /*\n             * Only throw the error when we are preserving the api routes\n             * When doing a static export, API routes will not exist so the redirect destination may not exist.\n             * The desired behavior for this error is to warn the user when running `expo start`, so its ok if\n             * `expo export` swallows this error.\n             */\n            if (options.preserveApiRoutes) {\n              throw new Error(`Redirect destination \"${redirect.destination}\" does not exist.`);\n            }\n            continue;\n          }\n          contextKeys.push(sourceContextKey);\n          redirects[sourceName] = {\n            source: sourceName,\n            destination,\n            destinationContextKey,\n            permanent: Boolean(redirect.permanent),\n            external: isExternalRedirect,\n            methods: redirect.methods\n          };\n        }\n      }\n      if (options.rewrites) {\n        for (const rewrite of options.rewrites) {\n          const sourceContextKey = getSourceContextKeyFromRedirectSource(rewrite.source);\n          const sourceName = getNameFromRedirectPath(rewrite.source);\n          const targetDestinationName = getNameFromRedirectPath(rewrite.destination);\n          if (ignoreList.some(regex => regex.test(sourceContextKey))) {\n            continue;\n          }\n          const validDestination = getValidDestinations().find(key => key.nameWithoutInvisible === targetDestinationName);\n          const destination = validDestination?.nameWithoutInvisible;\n          const destinationContextKey = validDestination?.contextKey;\n          if (!destinationContextKey || destination === undefined) {\n            /*\n             * Only throw the error when we are preserving the api routes\n             * When doing a static export, API routes will not exist so the redirect destination may not exist.\n             * The desired behavior for this error is to warn the user when running `expo start`, so its ok if\n             * `expo export` swallows this error.\n             */\n            if (options.preserveApiRoutes) {\n              throw new Error(`Rewrite destination \"${rewrite.destination}\" does not exist.`);\n            }\n            continue;\n          }\n          contextKeys.push(sourceContextKey);\n          rewrites[sourceName] = {\n            source: sourceName,\n            destination,\n            destinationContextKey,\n            methods: rewrite.methods\n          };\n        }\n      }\n    }\n    const processedRedirectsRewrites = new Set();\n    for (const filePath of contextKeys) {\n      if (ignoreList.some(regex => regex.test(filePath))) {\n        continue;\n      }\n      isValid = true;\n      const meta = getFileMeta(filePath, options, redirects, rewrites);\n      // This is a file that should be ignored. e.g maybe it has an invalid platform?\n      if (meta.specificity < 0) {\n        continue;\n      }\n      let node = {\n        type: meta.isApi ? 'api' : meta.isLayout ? 'layout' : 'route',\n        loadRoute() {\n          let routeModule;\n          if (options.ignoreRequireErrors) {\n            try {\n              routeModule = contextModule(filePath);\n            } catch {\n              routeModule = {};\n            }\n          } else {\n            routeModule = contextModule(filePath);\n          }\n          if (process.env.NODE_ENV === 'development' && importMode === 'sync') {\n            // In development mode, when async routes are disabled, add some extra error handling to improve the developer experience.\n            // This can be useful when you accidentally use an async function in a route file for the default export.\n            if (routeModule instanceof Promise) {\n              throw new Error(`Route \"${filePath}\" cannot be a promise when async routes is disabled.`);\n            }\n            const defaultExport = routeModule?.default;\n            if (defaultExport instanceof Promise) {\n              throw new Error(`The default export from route \"${filePath}\" is a promise. Ensure the React Component does not use async or promises.`);\n            }\n            // check if default is an async function without invoking it\n            if (defaultExport instanceof Function &&\n            // This only works on web because Hermes support async functions so we have to transform them out.\n            defaultExport.constructor.name === 'AsyncFunction') {\n              throw new Error(`The default export from route \"${filePath}\" is an async function. Ensure the React Component does not use async or promises.`);\n            }\n          }\n          return routeModule;\n        },\n        contextKey: filePath,\n        route: '',\n        // This is overwritten during hoisting based upon the _layout\n        dynamic: null,\n        children: [] // While we are building the directory tree, we don't know the node's children just yet. This is added during hoisting\n      };\n      if (meta.isRedirect) {\n        if (processedRedirectsRewrites.has(meta.route)) {\n          continue;\n        }\n        const redirect = redirects[meta.route];\n        node.destinationContextKey = redirect.destinationContextKey;\n        node.permanent = redirect.permanent;\n        node.generated = true;\n        if (node.type === 'route') {\n          node = options.getSystemRoute({\n            type: 'redirect',\n            route: redirect.destination,\n            defaults: node,\n            redirectConfig: redirect\n          });\n        }\n        if (redirect.methods) {\n          node.methods = redirect.methods;\n        }\n        node.type = 'redirect';\n        processedRedirectsRewrites.add(meta.route);\n      }\n      if (meta.isRewrite) {\n        if (processedRedirectsRewrites.has(meta.route)) {\n          continue;\n        }\n        const rewrite = rewrites[meta.route];\n        node.destinationContextKey = rewrite.destinationContextKey;\n        node.generated = true;\n        if (node.type === 'route') {\n          node = options.getSystemRoute({\n            type: 'rewrite',\n            route: rewrite.destination,\n            defaults: node,\n            rewriteConfig: rewrite\n          });\n        }\n        if (rewrite.methods) {\n          node.methods = rewrite.methods;\n        }\n        node.type = 'rewrite';\n        processedRedirectsRewrites.add(meta.route);\n      }\n      if (process.env.NODE_ENV === 'development') {\n        // If the user has set the `EXPO_ROUTER_IMPORT_MODE` to `sync` then we should\n        // filter the missing routes.\n        if (node.type !== 'api' && importMode === 'sync') {\n          const routeItem = node.loadRoute();\n          // Have a warning for nullish ex\n          const route = routeItem?.default;\n          if (route == null) {\n            // Do not throw an error since a user may just be creating a new route.\n            console.warn(`Route \"${filePath}\" is missing the required default export. Ensure a React component is exported as default.`);\n            continue;\n          }\n          if (['boolean', 'number', 'string'].includes(typeof route)) {\n            throw new Error(`The default export from route \"${filePath}\" is an unsupported type: \"${typeof route}\". Only React Components are supported as default exports from route files.`);\n          }\n        }\n      }\n      /**\n       * A single filepath may be extrapolated into multiple routes if it contains array syntax.\n       * Another way to thinking about is that a filepath node is present in multiple leaves of the directory tree.\n       */\n      for (const route of extrapolateGroups(meta.route)) {\n        // Traverse the directory tree to its leaf node, creating any missing directories along the way\n        const subdirectoryParts = route.split('/').slice(0, -1);\n        // Start at the root directory and traverse the path to the leaf directory\n        let directory = rootDirectory;\n        for (const part of subdirectoryParts) {\n          let subDirectory = directory.subdirectories.get(part);\n          // Create any missing subdirectories\n          if (!subDirectory) {\n            subDirectory = {\n              files: new Map(),\n              subdirectories: new Map()\n            };\n            directory.subdirectories.set(part, subDirectory);\n          }\n          directory = subDirectory;\n        }\n        // Clone the node for this route\n        node = Object.assign({}, node, {\n          route\n        });\n        if (meta.isLayout) {\n          directory.layout ??= [];\n          const existing = directory.layout[meta.specificity];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The layouts \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Remove or rename one of these files.`);\n            }\n          } else {\n            node = getLayoutNode(node, options);\n            directory.layout[meta.specificity] = node;\n          }\n        } else if (meta.isApi) {\n          const fileKey = `${route}+api`;\n          let nodes = directory.files.get(fileKey);\n          if (!nodes) {\n            nodes = [];\n            directory.files.set(fileKey, nodes);\n          }\n          // API Routes have no specificity, they are always the first node\n          const existing = nodes[0];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The API route file \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Remove or rename one of these files.`);\n            }\n          } else {\n            nodes[0] = node;\n          }\n        } else {\n          let nodes = directory.files.get(route);\n          if (!nodes) {\n            nodes = [];\n            directory.files.set(route, nodes);\n          }\n          /**\n           * If there is an existing node with the same specificity, then we have a conflict.\n           * NOTE(Platform Routes):\n           *    We cannot check for specificity conflicts here, as we haven't processed all the context keys yet!\n           *    This will be checked during hoisting, as well as enforcing that all routes have a non-platform route.\n           */\n          const existing = nodes[meta.specificity];\n          if (existing) {\n            // In production, use the first route found\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`The route files \"${filePath}\" and \"${existing.contextKey}\" conflict on the route \"/${route}\". Remove or rename one of these files.`);\n            }\n          } else {\n            hasRoutes ||= true;\n            nodes[meta.specificity] = node;\n          }\n        }\n      }\n    }\n    // If there are no routes/layouts then we should display the tutorial.\n    if (!isValid) {\n      return null;\n    }\n    /**\n     * If there are no top-level _layout, add a default _layout\n     * While this is a generated route, it will still be generated even if skipGenerated is true.\n     */\n    if (!rootDirectory.layout) {\n      rootDirectory.layout = [options.getSystemRoute({\n        type: 'layout',\n        route: ''\n      })];\n    }\n    // Only include the sitemap if there are routes.\n    if (!options.skipGenerated) {\n      if (hasRoutes && options.sitemap !== false) {\n        appendSitemapRoute(rootDirectory, options);\n      }\n      if (options.notFound !== false) {\n        appendNotFoundRoute(rootDirectory, options);\n      }\n    }\n    return rootDirectory;\n  }\n  function getNameFromRedirectPath(path) {\n    // Removing only the filesystem extensions, to be able to handle +api, +html\n    return (0, matchers_1.removeFileSystemExtensions)((0, matchers_1.removeFileSystemDots)(path))\n    // Remove the leading `/`\n    .replace(/^\\//, '');\n  }\n  function getNameWithoutInvisibleSegmentsFromRedirectPath(path) {\n    return (0, matchers_1.stripInvisibleSegmentsFromPath)(getNameFromRedirectPath(path));\n  }\n  // Creates fake context key for redirects and rewrites\n  function getSourceContextKeyFromRedirectSource(source) {\n    const name = getNameFromRedirectPath(source);\n    const prefix = './';\n    const suffix = /\\.[tj]sx?$/.test(name) ? '' : '.js'; // Ensure it has a file extension\n    return `${prefix}${name}${suffix}`;\n  }\n  /**\n   * Flatten the directory tree into routes, hoisting routes to the nearest _layout.\n   */\n  function flattenDirectoryTreeToRoutes(directory, options, /* The nearest _layout file in the directory tree */\n  layout, /* Route names are relative to their layout */\n  pathToRemove = '') {\n    /**\n     * This directory has a _layout file so it becomes the new target for hoisting routes.\n     */\n    if (directory.layout) {\n      const previousLayout = layout;\n      layout = getMostSpecific(directory.layout);\n      // Add the new layout as a child of its parent\n      if (previousLayout) {\n        previousLayout.children.push(layout);\n      }\n      if (options.internal_stripLoadRoute) {\n        delete layout.loadRoute;\n      }\n      // `route` is the absolute pathname. We need to make this relative to the last _layout\n      const newRoute = layout.route.replace(pathToRemove, '');\n      pathToRemove = layout.route ? `${layout.route}/` : '';\n      // Now update this layout with the new relative route and dynamic conventions\n      layout.route = newRoute;\n      layout.dynamic = generateDynamic(layout.contextKey.slice(0));\n    }\n    // This should never occur as there will always be a root layout, but it makes the type system happy\n    if (!layout) throw new Error('Expo Router Internal Error: No nearest layout');\n    for (const routes of directory.files.values()) {\n      const routeNode = getMostSpecific(routes);\n      // `route` is the absolute pathname. We need to make this relative to the nearest layout\n      routeNode.route = routeNode.route.replace(pathToRemove, '');\n      routeNode.dynamic = generateDynamic(routeNode.route);\n      if (options.internal_stripLoadRoute) {\n        delete routeNode.loadRoute;\n      }\n      layout.children.push(routeNode);\n    }\n    // Recursively flatten the subdirectories\n    for (const child of directory.subdirectories.values()) {\n      flattenDirectoryTreeToRoutes(child, options, layout, pathToRemove);\n    }\n    return layout;\n  }\n  function getFileMeta(originalKey, options, redirects, rewrites) {\n    // Remove the leading `./`\n    const key = (0, matchers_1.removeSupportedExtensions)((0, matchers_1.removeFileSystemDots)(originalKey));\n    let route = key;\n    const parts = (0, matchers_1.removeFileSystemDots)(originalKey).split('/');\n    const filename = parts[parts.length - 1];\n    const [filenameWithoutExtensions, platformExtension] = (0, matchers_1.removeSupportedExtensions)(filename).split('.');\n    const isLayout = filenameWithoutExtensions === '_layout';\n    const isApi = originalKey.match(/\\+api\\.(\\w+\\.)?[jt]sx?$/);\n    if (filenameWithoutExtensions.startsWith('(') && filenameWithoutExtensions.endsWith(')')) {\n      throw new Error(`Invalid route ${originalKey}. Routes cannot end with '(group)' syntax`);\n    }\n    // Nested routes cannot start with the '+' character, except for the '+not-found' route\n    if (!isApi && filename.startsWith('+') && filenameWithoutExtensions !== '+not-found') {\n      const renamedRoute = [...parts.slice(0, -1), filename.slice(1)].join('/');\n      throw new Error(`Invalid route ${originalKey}. Route nodes cannot start with the '+' character. \"Rename it to ${renamedRoute}\"`);\n    }\n    let specificity = 0;\n    const hasPlatformExtension = validPlatforms.has(platformExtension);\n    const usePlatformRoutes = options.platformRoutes ?? true;\n    if (hasPlatformExtension) {\n      if (!usePlatformRoutes) {\n        // If the user has disabled platform routes, then we should ignore this file\n        specificity = -1;\n      } else if (!options.platform) {\n        // If we don't have a platform, then we should ignore this file\n        // This used by typed routes, sitemap, etc\n        specificity = -1;\n      } else if (platformExtension === options.platform) {\n        // If the platform extension is the same as the options.platform, then it is the most specific\n        specificity = 2;\n      } else if (platformExtension === 'native' && options.platform !== 'web') {\n        // `native` is allow but isn't as specific as the platform\n        specificity = 1;\n      } else if (platformExtension !== options.platform) {\n        // Somehow we have a platform extension that doesn't match the options.platform and it isn't native\n        // This is an invalid file and we will ignore it\n        specificity = -1;\n      }\n      if (isApi && specificity !== 0) {\n        throw new Error(`API routes cannot have platform extensions. Remove '.${platformExtension}' from '${originalKey}'`);\n      }\n      route = route.replace(new RegExp(`.${platformExtension}$`), '');\n    }\n    return {\n      route,\n      specificity,\n      isLayout,\n      isApi,\n      isRedirect: key in redirects,\n      isRewrite: key in rewrites\n    };\n  }\n  /**\n   * Generates a set of strings which have the router array syntax extrapolated.\n   *\n   * /(a,b)/(c,d)/e.tsx => new Set(['a/c/e.tsx', 'a/d/e.tsx', 'b/c/e.tsx', 'b/d/e.tsx'])\n   */\n  function extrapolateGroups(key, keys = new Set()) {\n    const match = (0, matchers_1.matchArrayGroupName)(key);\n    if (!match) {\n      keys.add(key);\n      return keys;\n    }\n    const groups = match.split(',');\n    const groupsSet = new Set(groups);\n    if (groupsSet.size !== groups.length) {\n      throw new Error(`Array syntax cannot contain duplicate group name \"${groups}\" in \"${key}\".`);\n    }\n    if (groups.length === 1) {\n      keys.add(key);\n      return keys;\n    }\n    for (const group of groups) {\n      extrapolateGroups(key.replace(match, group.trim()), keys);\n    }\n    return keys;\n  }\n  function generateDynamic(path) {\n    const dynamic = path.split('/').map(part => {\n      if (part === '+not-found') {\n        return {\n          name: '+not-found',\n          deep: true,\n          notFound: true\n        };\n      }\n      return (0, matchers_1.matchDynamicName)(part) ?? null;\n    }).filter(part => !!part);\n    return dynamic.length === 0 ? null : dynamic;\n  }\n  function appendSitemapRoute(directory, options) {\n    if (!directory.files.has('_sitemap') && options.getSystemRoute) {\n      directory.files.set('_sitemap', [options.getSystemRoute({\n        type: 'route',\n        route: '_sitemap'\n      })]);\n    }\n  }\n  function appendNotFoundRoute(directory, options) {\n    if (!directory.files.has('+not-found') && options.getSystemRoute) {\n      directory.files.set('+not-found', [options.getSystemRoute({\n        type: 'route',\n        route: '+not-found'\n      })]);\n    }\n  }\n  function getLayoutNode(node, options) {\n    /**\n     * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n     * Each of these layouts will have a different anchor based upon the first group name.\n     */\n    // We may strip loadRoute during testing\n    const groupName = (0, matchers_1.matchLastGroupName)(node.route);\n    const childMatchingGroup = node.children.find(child => {\n      return child.route.replace(/\\/index$/, '') === groupName;\n    });\n    let anchor = childMatchingGroup?.route;\n    const loaded = node.loadRoute();\n    if (loaded?.unstable_settings) {\n      try {\n        // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n        anchor = loaded.unstable_settings.anchor ?? loaded.unstable_settings.initialRouteName ?? anchor;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (!error.message.match(/You cannot dot into a client module/)) {\n            throw error;\n          }\n        }\n      }\n      if (groupName) {\n        // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n        const groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.anchor ?? loaded.unstable_settings?.[groupName]?.initialRouteName;\n        anchor = groupSpecificInitialRouteName ?? anchor;\n      }\n    }\n    return Object.assign({}, node, {\n      route: node.route.replace(/\\/?_layout$/, ''),\n      children: [],\n      // Each layout should have its own children\n      initialRouteName: anchor\n    });\n  }\n  function crawlAndAppendInitialRoutesAndEntryFiles(node, options, entryPoints = []) {\n    if (node.type === 'route') {\n      node.entryPoints = [...new Set([...entryPoints, node.contextKey])];\n    } else if (node.type === 'redirect') {\n      node.entryPoints = [...new Set([...entryPoints, node.destinationContextKey])];\n    } else if (node.type === 'layout') {\n      if (!node.children) {\n        throw new Error(`Layout \"${node.contextKey}\" does not contain any child routes`);\n      }\n      // Every node below this layout will have it as an entryPoint\n      entryPoints = [...entryPoints, node.contextKey];\n      /**\n       * Calculate the initialRouteNode\n       *\n       * A file called `(a,b)/(c)/_layout.tsx` will generate two _layout routes: `(a)/(c)/_layout` and `(b)/(c)/_layout`.\n       * Each of these layouts will have a different anchor based upon the first group.\n       */\n      const groupName = (0, matchers_1.matchGroupName)(node.route);\n      const childMatchingGroup = node.children.find(child => {\n        return child.route.replace(/\\/index$/, '') === groupName;\n      });\n      let anchor = childMatchingGroup?.route;\n      // We may strip loadRoute during testing\n      if (!options.internal_stripLoadRoute) {\n        const loaded = node.loadRoute();\n        if (loaded?.unstable_settings) {\n          try {\n            // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\n            anchor = loaded.unstable_settings.anchor ?? loaded.unstable_settings.initialRouteName ?? anchor;\n          } catch (error) {\n            if (error instanceof Error) {\n              if (!error.message.match(/You cannot dot into a client module/)) {\n                throw error;\n              }\n            }\n          }\n          if (groupName) {\n            // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\n            const groupSpecificInitialRouteName = loaded.unstable_settings?.[groupName]?.anchor ?? loaded.unstable_settings?.[groupName]?.initialRouteName;\n            anchor = groupSpecificInitialRouteName ?? anchor;\n          }\n        }\n      }\n      if (anchor) {\n        const anchorRoute = node.children.find(child => child.route === anchor);\n        if (!anchorRoute) {\n          const validAnchorRoutes = node.children.filter(child => !child.generated).map(child => `'${child.route}'`).join(', ');\n          if (groupName) {\n            throw new Error(`Layout ${node.contextKey} has invalid anchor '${anchor}' for group '(${groupName})'. Valid options are: ${validAnchorRoutes}`);\n          } else {\n            throw new Error(`Layout ${node.contextKey} has invalid anchor '${anchor}'. Valid options are: ${validAnchorRoutes}`);\n          }\n        }\n        // Navigators can add initialsRoutes into the history, so they need to be to be included in the entryPoints\n        node.initialRouteName = anchor;\n        entryPoints.push(anchorRoute.contextKey);\n      }\n      for (const child of node.children) {\n        crawlAndAppendInitialRoutesAndEntryFiles(child, options, entryPoints);\n      }\n    }\n  }\n  function getMostSpecific(routes) {\n    const route = routes[routes.length - 1];\n    if (!routes[0]) {\n      throw new Error(`The file ${route.contextKey} does not have a fallback sibling file without a platform extension.`);\n    }\n    // This works even tho routes is holey array (e.g it might have index 0 and 2 but not 1)\n    // `.length` includes the holes in its count\n    return routes[routes.length - 1];\n  }\n});","lineCount":627,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"getRoutes"],[7,19,3,17],[7,22,3,20,"getRoutes"],[7,31,3,29],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"extrapolateGroups"],[8,27,4,25],[8,30,4,28,"extrapolateGroups"],[8,47,4,45],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"generateDynamic"],[9,25,5,23],[9,28,5,26,"generateDynamic"],[9,43,5,41],[10,2,6,0],[10,8,6,6,"matchers_1"],[10,18,6,16],[10,21,6,19,"require"],[10,28,6,26],[10,29,6,26,"_dependencyMap"],[10,43,6,26],[10,60,6,39],[10,61,6,40],[11,2,7,0],[11,8,7,6,"url_1"],[11,13,7,11],[11,16,7,14,"require"],[11,23,7,21],[11,24,7,21,"_dependencyMap"],[11,38,7,21],[11,56,7,35],[11,57,7,36],[12,2,8,0],[12,8,8,6,"validPlatforms"],[12,22,8,20],[12,25,8,23],[12,29,8,27,"Set"],[12,32,8,30],[12,33,8,31],[12,34,8,32],[12,43,8,41],[12,45,8,43],[12,50,8,48],[12,52,8,50],[12,60,8,58],[12,62,8,60],[12,67,8,65],[12,68,8,66],[12,69,8,67],[13,2,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,2,21,0],[25,11,21,9,"getRoutes"],[25,20,21,18,"getRoutes"],[25,21,21,19,"contextModule"],[25,34,21,32],[25,36,21,34,"options"],[25,43,21,41],[25,45,21,43],[26,4,22,4],[26,10,22,10,"directoryTree"],[26,23,22,23],[26,26,22,26,"getDirectoryTree"],[26,42,22,42],[26,43,22,43,"contextModule"],[26,56,22,56],[26,58,22,58,"options"],[26,65,22,65],[26,66,22,66],[27,4,23,4],[28,4,24,4],[28,8,24,8],[28,9,24,9,"directoryTree"],[28,22,24,22],[28,24,24,24],[29,6,25,8],[29,13,25,15],[29,17,25,19],[30,4,26,4],[31,4,27,4],[31,10,27,10,"rootNode"],[31,18,27,18],[31,21,27,21,"flattenDirectoryTreeToRoutes"],[31,49,27,49],[31,50,27,50,"directoryTree"],[31,63,27,63],[31,65,27,65,"options"],[31,72,27,72],[31,73,27,73],[32,4,28,4],[32,8,28,8],[32,9,28,9,"options"],[32,16,28,16],[32,17,28,17,"ignoreEntryPoints"],[32,34,28,34],[32,36,28,36],[33,6,29,8,"crawlAndAppendInitialRoutesAndEntryFiles"],[33,46,29,48],[33,47,29,49,"rootNode"],[33,55,29,57],[33,57,29,59,"options"],[33,64,29,66],[33,65,29,67],[34,4,30,4],[35,4,31,4],[35,11,31,11,"rootNode"],[35,19,31,19],[36,2,32,0],[37,2,33,0],[38,0,34,0],[39,0,35,0],[40,2,36,0],[40,11,36,9,"getDirectoryTree"],[40,27,36,25,"getDirectoryTree"],[40,28,36,26,"contextModule"],[40,41,36,39],[40,43,36,41,"options"],[40,50,36,48],[40,52,36,50],[41,4,37,4],[41,10,37,10,"importMode"],[41,20,37,20],[41,23,37,23,"options"],[41,30,37,30],[41,31,37,31,"importMode"],[41,41,37,41],[41,51,37,80],[42,4,38,4],[42,10,38,10,"ignoreList"],[42,20,38,20],[42,23,38,23],[42,24,38,24],[42,63,38,63],[42,64,38,64],[42,65,38,65],[42,66,38,66],[43,4,39,4],[43,8,39,8,"options"],[43,15,39,15],[43,16,39,16,"ignore"],[43,22,39,22],[43,24,39,24],[44,6,40,8,"ignoreList"],[44,16,40,18],[44,17,40,19,"push"],[44,21,40,23],[44,22,40,24],[44,25,40,27,"options"],[44,32,40,34],[44,33,40,35,"ignore"],[44,39,40,41],[44,40,40,42],[45,4,41,4],[46,4,42,4],[46,8,42,8],[46,9,42,9,"options"],[46,16,42,16],[46,17,42,17,"preserveApiRoutes"],[46,34,42,34],[46,36,42,36],[47,6,43,8,"ignoreList"],[47,16,43,18],[47,17,43,19,"push"],[47,21,43,23],[47,22,43,24],[47,30,43,32],[47,32,43,34],[47,49,43,51],[47,50,43,52],[48,4,44,4],[49,4,45,4],[49,10,45,10,"rootDirectory"],[49,23,45,23],[49,26,45,26],[50,6,46,8,"files"],[50,11,46,13],[50,13,46,15],[50,17,46,19,"Map"],[50,20,46,22],[50,21,46,23],[50,22,46,24],[51,6,47,8,"subdirectories"],[51,20,47,22],[51,22,47,24],[51,26,47,28,"Map"],[51,29,47,31],[51,30,47,32],[52,4,48,4],[52,5,48,5],[53,4,49,4],[53,8,49,8,"hasRoutes"],[53,17,49,17],[53,20,49,20],[53,25,49,25],[54,4,50,4],[54,8,50,8,"isValid"],[54,15,50,15],[54,18,50,18],[54,23,50,23],[55,4,51,4],[55,10,51,10,"contextKeys"],[55,21,51,21],[55,24,51,24,"contextModule"],[55,37,51,37],[55,38,51,38,"keys"],[55,42,51,42],[55,43,51,43],[55,44,51,44],[56,4,52,4],[56,10,52,10,"redirects"],[56,19,52,19],[56,22,52,22],[56,23,52,23],[56,24,52,24],[57,4,53,4],[57,10,53,10,"rewrites"],[57,18,53,18],[57,21,53,21],[57,22,53,22],[57,23,53,23],[58,4,54,4],[58,8,54,8,"validRedirectDestinations"],[58,33,54,33],[59,4,55,4],[59,10,55,10,"getValidDestinations"],[59,30,55,30],[59,33,55,33,"getValidDestinations"],[59,34,55,33],[59,39,55,39],[60,6,56,8],[61,6,57,8,"validRedirectDestinations"],[61,31,57,33],[61,36,57,38,"contextKeys"],[61,47,57,49],[61,48,57,50,"map"],[61,51,57,53],[61,52,57,55,"key"],[61,55,57,58],[61,59,57,63],[62,8,58,12],[62,15,58,19],[63,10,59,16,"contextKey"],[63,20,59,26],[63,22,59,28,"key"],[63,25,59,31],[64,10,60,16,"nameWithoutInvisible"],[64,30,60,36],[64,32,60,38,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[64,79,60,85],[64,80,60,86],[64,81,60,87],[64,82,60,88],[64,84,60,90,"matchers_1"],[64,94,60,100],[64,95,60,101,"removeSupportedExtensions"],[64,120,60,126],[64,122,60,128,"key"],[64,125,60,131],[64,126,60,132],[65,8,61,12],[65,9,61,13],[66,6,62,8],[66,7,62,9],[66,8,62,10],[67,6,63,8],[67,13,63,15,"validRedirectDestinations"],[67,38,63,40],[68,4,64,4],[68,5,64,5],[69,4,65,4],[70,4,66,4],[71,4,67,4],[71,8,67,8,"options"],[71,15,67,15],[71,16,67,16,"preserveRedirectAndRewrites"],[71,43,67,43],[71,45,67,45],[72,6,68,8],[72,10,68,12,"options"],[72,17,68,19],[72,18,68,20,"redirects"],[72,27,68,29],[72,29,68,31],[73,8,69,12],[73,13,69,17],[73,19,69,23,"redirect"],[73,27,69,31],[73,31,69,35,"options"],[73,38,69,42],[73,39,69,43,"redirects"],[73,48,69,52],[73,50,69,54],[74,10,70,16],[74,16,70,22,"sourceContextKey"],[74,32,70,38],[74,35,70,41,"getSourceContextKeyFromRedirectSource"],[74,72,70,78],[74,73,70,79,"redirect"],[74,81,70,87],[74,82,70,88,"source"],[74,88,70,94],[74,89,70,95],[75,10,71,16],[75,16,71,22,"sourceName"],[75,26,71,32],[75,29,71,35,"getNameFromRedirectPath"],[75,52,71,58],[75,53,71,59,"redirect"],[75,61,71,67],[75,62,71,68,"source"],[75,68,71,74],[75,69,71,75],[76,10,72,16],[76,16,72,22,"isExternalRedirect"],[76,34,72,40],[76,37,72,43],[76,38,72,44],[76,39,72,45],[76,41,72,47,"url_1"],[76,46,72,52],[76,47,72,53,"shouldLinkExternally"],[76,67,72,73],[76,69,72,75,"redirect"],[76,77,72,83],[76,78,72,84,"destination"],[76,89,72,95],[76,90,72,96],[77,10,73,16],[77,16,73,22,"targetDestinationName"],[77,37,73,43],[77,40,73,46,"isExternalRedirect"],[77,58,73,64],[77,61,74,22,"redirect"],[77,69,74,30],[77,70,74,31,"destination"],[77,81,74,42],[77,84,75,22,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[77,131,75,69],[77,132,75,70,"redirect"],[77,140,75,78],[77,141,75,79,"destination"],[77,152,75,90],[77,153,75,91],[78,10,76,16],[78,14,76,20,"ignoreList"],[78,24,76,30],[78,25,76,31,"some"],[78,29,76,35],[78,30,76,37,"regex"],[78,35,76,42],[78,39,76,47,"regex"],[78,44,76,52],[78,45,76,53,"test"],[78,49,76,57],[78,50,76,58,"sourceContextKey"],[78,66,76,74],[78,67,76,75],[78,68,76,76],[78,70,76,78],[79,12,77,20],[80,10,78,16],[81,10,79,16],[81,16,79,22,"validDestination"],[81,32,79,38],[81,35,79,41,"isExternalRedirect"],[81,53,79,59],[81,56,80,22,"undefined"],[81,65,80,31],[81,68,81,22,"getValidDestinations"],[81,88,81,42],[81,89,81,43],[81,90,81,44],[81,91,81,45,"find"],[81,95,81,49],[81,96,81,51,"key"],[81,99,81,54],[81,103,81,59,"key"],[81,106,81,62],[81,107,81,63,"nameWithoutInvisible"],[81,127,81,83],[81,132,81,88,"targetDestinationName"],[81,153,81,109],[81,154,81,110],[82,10,82,16],[82,16,82,22,"destination"],[82,27,82,33],[82,30,82,36,"isExternalRedirect"],[82,48,82,54],[82,51,83,22,"targetDestinationName"],[82,72,83,43],[82,75,84,22,"validDestination"],[82,91,84,38],[82,93,84,40,"nameWithoutInvisible"],[82,113,84,60],[83,10,85,16],[83,16,85,22,"destinationContextKey"],[83,37,85,43],[83,40,85,46,"isExternalRedirect"],[83,58,85,64],[83,61,86,22,"targetDestinationName"],[83,82,86,43],[83,85,87,22,"validDestination"],[83,101,87,38],[83,103,87,40,"contextKey"],[83,113,87,50],[84,10,88,16],[84,14,88,20],[84,15,88,21,"destinationContextKey"],[84,36,88,42],[84,40,88,46,"destination"],[84,51,88,57],[84,56,88,62,"undefined"],[84,65,88,71],[84,67,88,73],[85,12,89,20],[86,0,90,0],[87,0,91,0],[88,0,92,0],[89,0,93,0],[90,0,94,0],[91,12,95,20],[91,16,95,24,"options"],[91,23,95,31],[91,24,95,32,"preserveApiRoutes"],[91,41,95,49],[91,43,95,51],[92,14,96,24],[92,20,96,30],[92,24,96,34,"Error"],[92,29,96,39],[92,30,96,40],[92,55,96,65,"redirect"],[92,63,96,73],[92,64,96,74,"destination"],[92,75,96,85],[92,94,96,104],[92,95,96,105],[93,12,97,20],[94,12,98,20],[95,10,99,16],[96,10,100,16,"contextKeys"],[96,21,100,27],[96,22,100,28,"push"],[96,26,100,32],[96,27,100,33,"sourceContextKey"],[96,43,100,49],[96,44,100,50],[97,10,101,16,"redirects"],[97,19,101,25],[97,20,101,26,"sourceName"],[97,30,101,36],[97,31,101,37],[97,34,101,40],[98,12,102,20,"source"],[98,18,102,26],[98,20,102,28,"sourceName"],[98,30,102,38],[99,12,103,20,"destination"],[99,23,103,31],[100,12,104,20,"destinationContextKey"],[100,33,104,41],[101,12,105,20,"permanent"],[101,21,105,29],[101,23,105,31,"Boolean"],[101,30,105,38],[101,31,105,39,"redirect"],[101,39,105,47],[101,40,105,48,"permanent"],[101,49,105,57],[101,50,105,58],[102,12,106,20,"external"],[102,20,106,28],[102,22,106,30,"isExternalRedirect"],[102,40,106,48],[103,12,107,20,"methods"],[103,19,107,27],[103,21,107,29,"redirect"],[103,29,107,37],[103,30,107,38,"methods"],[104,10,108,16],[104,11,108,17],[105,8,109,12],[106,6,110,8],[107,6,111,8],[107,10,111,12,"options"],[107,17,111,19],[107,18,111,20,"rewrites"],[107,26,111,28],[107,28,111,30],[108,8,112,12],[108,13,112,17],[108,19,112,23,"rewrite"],[108,26,112,30],[108,30,112,34,"options"],[108,37,112,41],[108,38,112,42,"rewrites"],[108,46,112,50],[108,48,112,52],[109,10,113,16],[109,16,113,22,"sourceContextKey"],[109,32,113,38],[109,35,113,41,"getSourceContextKeyFromRedirectSource"],[109,72,113,78],[109,73,113,79,"rewrite"],[109,80,113,86],[109,81,113,87,"source"],[109,87,113,93],[109,88,113,94],[110,10,114,16],[110,16,114,22,"sourceName"],[110,26,114,32],[110,29,114,35,"getNameFromRedirectPath"],[110,52,114,58],[110,53,114,59,"rewrite"],[110,60,114,66],[110,61,114,67,"source"],[110,67,114,73],[110,68,114,74],[111,10,115,16],[111,16,115,22,"targetDestinationName"],[111,37,115,43],[111,40,115,46,"getNameFromRedirectPath"],[111,63,115,69],[111,64,115,70,"rewrite"],[111,71,115,77],[111,72,115,78,"destination"],[111,83,115,89],[111,84,115,90],[112,10,116,16],[112,14,116,20,"ignoreList"],[112,24,116,30],[112,25,116,31,"some"],[112,29,116,35],[112,30,116,37,"regex"],[112,35,116,42],[112,39,116,47,"regex"],[112,44,116,52],[112,45,116,53,"test"],[112,49,116,57],[112,50,116,58,"sourceContextKey"],[112,66,116,74],[112,67,116,75],[112,68,116,76],[112,70,116,78],[113,12,117,20],[114,10,118,16],[115,10,119,16],[115,16,119,22,"validDestination"],[115,32,119,38],[115,35,119,41,"getValidDestinations"],[115,55,119,61],[115,56,119,62],[115,57,119,63],[115,58,119,64,"find"],[115,62,119,68],[115,63,119,70,"key"],[115,66,119,73],[115,70,119,78,"key"],[115,73,119,81],[115,74,119,82,"nameWithoutInvisible"],[115,94,119,102],[115,99,119,107,"targetDestinationName"],[115,120,119,128],[115,121,119,129],[116,10,120,16],[116,16,120,22,"destination"],[116,27,120,33],[116,30,120,36,"validDestination"],[116,46,120,52],[116,48,120,54,"nameWithoutInvisible"],[116,68,120,74],[117,10,121,16],[117,16,121,22,"destinationContextKey"],[117,37,121,43],[117,40,121,46,"validDestination"],[117,56,121,62],[117,58,121,64,"contextKey"],[117,68,121,74],[118,10,122,16],[118,14,122,20],[118,15,122,21,"destinationContextKey"],[118,36,122,42],[118,40,122,46,"destination"],[118,51,122,57],[118,56,122,62,"undefined"],[118,65,122,71],[118,67,122,73],[119,12,123,20],[120,0,124,0],[121,0,125,0],[122,0,126,0],[123,0,127,0],[124,0,128,0],[125,12,129,20],[125,16,129,24,"options"],[125,23,129,31],[125,24,129,32,"preserveApiRoutes"],[125,41,129,49],[125,43,129,51],[126,14,130,24],[126,20,130,30],[126,24,130,34,"Error"],[126,29,130,39],[126,30,130,40],[126,54,130,64,"rewrite"],[126,61,130,71],[126,62,130,72,"destination"],[126,73,130,83],[126,92,130,102],[126,93,130,103],[127,12,131,20],[128,12,132,20],[129,10,133,16],[130,10,134,16,"contextKeys"],[130,21,134,27],[130,22,134,28,"push"],[130,26,134,32],[130,27,134,33,"sourceContextKey"],[130,43,134,49],[130,44,134,50],[131,10,135,16,"rewrites"],[131,18,135,24],[131,19,135,25,"sourceName"],[131,29,135,35],[131,30,135,36],[131,33,135,39],[132,12,136,20,"source"],[132,18,136,26],[132,20,136,28,"sourceName"],[132,30,136,38],[133,12,137,20,"destination"],[133,23,137,31],[134,12,138,20,"destinationContextKey"],[134,33,138,41],[135,12,139,20,"methods"],[135,19,139,27],[135,21,139,29,"rewrite"],[135,28,139,36],[135,29,139,37,"methods"],[136,10,140,16],[136,11,140,17],[137,8,141,12],[138,6,142,8],[139,4,143,4],[140,4,144,4],[140,10,144,10,"processedRedirectsRewrites"],[140,36,144,36],[140,39,144,39],[140,43,144,43,"Set"],[140,46,144,46],[140,47,144,47],[140,48,144,48],[141,4,145,4],[141,9,145,9],[141,15,145,15,"filePath"],[141,23,145,23],[141,27,145,27,"contextKeys"],[141,38,145,38],[141,40,145,40],[142,6,146,8],[142,10,146,12,"ignoreList"],[142,20,146,22],[142,21,146,23,"some"],[142,25,146,27],[142,26,146,29,"regex"],[142,31,146,34],[142,35,146,39,"regex"],[142,40,146,44],[142,41,146,45,"test"],[142,45,146,49],[142,46,146,50,"filePath"],[142,54,146,58],[142,55,146,59],[142,56,146,60],[142,58,146,62],[143,8,147,12],[144,6,148,8],[145,6,149,8,"isValid"],[145,13,149,15],[145,16,149,18],[145,20,149,22],[146,6,150,8],[146,12,150,14,"meta"],[146,16,150,18],[146,19,150,21,"getFileMeta"],[146,30,150,32],[146,31,150,33,"filePath"],[146,39,150,41],[146,41,150,43,"options"],[146,48,150,50],[146,50,150,52,"redirects"],[146,59,150,61],[146,61,150,63,"rewrites"],[146,69,150,71],[146,70,150,72],[147,6,151,8],[148,6,152,8],[148,10,152,12,"meta"],[148,14,152,16],[148,15,152,17,"specificity"],[148,26,152,28],[148,29,152,31],[148,30,152,32],[148,32,152,34],[149,8,153,12],[150,6,154,8],[151,6,155,8],[151,10,155,12,"node"],[151,14,155,16],[151,17,155,19],[152,8,156,12,"type"],[152,12,156,16],[152,14,156,18,"meta"],[152,18,156,22],[152,19,156,23,"isApi"],[152,24,156,28],[152,27,156,31],[152,32,156,36],[152,35,156,39,"meta"],[152,39,156,43],[152,40,156,44,"isLayout"],[152,48,156,52],[152,51,156,55],[152,59,156,63],[152,62,156,66],[152,69,156,73],[153,8,157,12,"loadRoute"],[153,17,157,21,"loadRoute"],[153,18,157,21],[153,20,157,24],[154,10,158,16],[154,14,158,20,"routeModule"],[154,25,158,31],[155,10,159,16],[155,14,159,20,"options"],[155,21,159,27],[155,22,159,28,"ignoreRequireErrors"],[155,41,159,47],[155,43,159,49],[156,12,160,20],[156,16,160,24],[157,14,161,24,"routeModule"],[157,25,161,35],[157,28,161,38,"contextModule"],[157,41,161,51],[157,42,161,52,"filePath"],[157,50,161,60],[157,51,161,61],[158,12,162,20],[158,13,162,21],[158,14,163,20],[158,20,163,26],[159,14,164,24,"routeModule"],[159,25,164,35],[159,28,164,38],[159,29,164,39],[159,30,164,40],[160,12,165,20],[161,10,166,16],[161,11,166,17],[161,17,167,21],[162,12,168,20,"routeModule"],[162,23,168,31],[162,26,168,34,"contextModule"],[162,39,168,47],[162,40,168,48,"filePath"],[162,48,168,56],[162,49,168,57],[163,10,169,16],[164,10,170,16],[164,14,170,20,"process"],[164,21,170,27],[164,22,170,28,"env"],[164,25,170,31],[164,26,170,32,"NODE_ENV"],[164,34,170,40],[164,39,170,45],[164,52,170,58],[164,56,170,62,"importMode"],[164,66,170,72],[164,71,170,77],[164,77,170,83],[164,79,170,85],[165,12,171,20],[166,12,172,20],[167,12,173,20],[167,16,173,24,"routeModule"],[167,27,173,35],[167,39,173,47,"Promise"],[167,46,173,54],[167,48,173,56],[168,14,174,24],[168,20,174,30],[168,24,174,34,"Error"],[168,29,174,39],[168,30,174,40],[168,40,174,50,"filePath"],[168,48,174,58],[168,102,174,112],[168,103,174,113],[169,12,175,20],[170,12,176,20],[170,18,176,26,"defaultExport"],[170,31,176,39],[170,34,176,42,"routeModule"],[170,45,176,53],[170,47,176,55,"default"],[170,54,176,62],[171,12,177,20],[171,16,177,24,"defaultExport"],[171,29,177,37],[171,41,177,49,"Promise"],[171,48,177,56],[171,50,177,58],[172,14,178,24],[172,20,178,30],[172,24,178,34,"Error"],[172,29,178,39],[172,30,178,40],[172,64,178,74,"filePath"],[172,72,178,82],[172,148,178,158],[172,149,178,159],[173,12,179,20],[174,12,180,20],[175,12,181,20],[175,16,181,24,"defaultExport"],[175,29,181,37],[175,41,181,49,"Function"],[175,49,181,57],[176,12,182,24],[177,12,183,24,"defaultExport"],[177,25,183,37],[177,26,183,38,"constructor"],[177,37,183,49],[177,38,183,50,"name"],[177,42,183,54],[177,47,183,59],[177,62,183,74],[177,64,183,76],[178,14,184,24],[178,20,184,30],[178,24,184,34,"Error"],[178,29,184,39],[178,30,184,40],[178,64,184,74,"filePath"],[178,72,184,82],[178,156,184,166],[178,157,184,167],[179,12,185,20],[180,10,186,16],[181,10,187,16],[181,17,187,23,"routeModule"],[181,28,187,34],[182,8,188,12],[182,9,188,13],[183,8,189,12,"contextKey"],[183,18,189,22],[183,20,189,24,"filePath"],[183,28,189,32],[184,8,190,12,"route"],[184,13,190,17],[184,15,190,19],[184,17,190,21],[185,8,190,23],[186,8,191,12,"dynamic"],[186,15,191,19],[186,17,191,21],[186,21,191,25],[187,8,192,12,"children"],[187,16,192,20],[187,18,192,22],[187,20,192,24],[187,21,192,26],[188,6,193,8],[188,7,193,9],[189,6,194,8],[189,10,194,12,"meta"],[189,14,194,16],[189,15,194,17,"isRedirect"],[189,25,194,27],[189,27,194,29],[190,8,195,12],[190,12,195,16,"processedRedirectsRewrites"],[190,38,195,42],[190,39,195,43,"has"],[190,42,195,46],[190,43,195,47,"meta"],[190,47,195,51],[190,48,195,52,"route"],[190,53,195,57],[190,54,195,58],[190,56,195,60],[191,10,196,16],[192,8,197,12],[193,8,198,12],[193,14,198,18,"redirect"],[193,22,198,26],[193,25,198,29,"redirects"],[193,34,198,38],[193,35,198,39,"meta"],[193,39,198,43],[193,40,198,44,"route"],[193,45,198,49],[193,46,198,50],[194,8,199,12,"node"],[194,12,199,16],[194,13,199,17,"destinationContextKey"],[194,34,199,38],[194,37,199,41,"redirect"],[194,45,199,49],[194,46,199,50,"destinationContextKey"],[194,67,199,71],[195,8,200,12,"node"],[195,12,200,16],[195,13,200,17,"permanent"],[195,22,200,26],[195,25,200,29,"redirect"],[195,33,200,37],[195,34,200,38,"permanent"],[195,43,200,47],[196,8,201,12,"node"],[196,12,201,16],[196,13,201,17,"generated"],[196,22,201,26],[196,25,201,29],[196,29,201,33],[197,8,202,12],[197,12,202,16,"node"],[197,16,202,20],[197,17,202,21,"type"],[197,21,202,25],[197,26,202,30],[197,33,202,37],[197,35,202,39],[198,10,203,16,"node"],[198,14,203,20],[198,17,203,23,"options"],[198,24,203,30],[198,25,203,31,"getSystemRoute"],[198,39,203,45],[198,40,203,46],[199,12,204,20,"type"],[199,16,204,24],[199,18,204,26],[199,28,204,36],[200,12,205,20,"route"],[200,17,205,25],[200,19,205,27,"redirect"],[200,27,205,35],[200,28,205,36,"destination"],[200,39,205,47],[201,12,206,20,"defaults"],[201,20,206,28],[201,22,206,30,"node"],[201,26,206,34],[202,12,207,20,"redirectConfig"],[202,26,207,34],[202,28,207,36,"redirect"],[203,10,208,16],[203,11,208,17],[203,12,208,18],[204,8,209,12],[205,8,210,12],[205,12,210,16,"redirect"],[205,20,210,24],[205,21,210,25,"methods"],[205,28,210,32],[205,30,210,34],[206,10,211,16,"node"],[206,14,211,20],[206,15,211,21,"methods"],[206,22,211,28],[206,25,211,31,"redirect"],[206,33,211,39],[206,34,211,40,"methods"],[206,41,211,47],[207,8,212,12],[208,8,213,12,"node"],[208,12,213,16],[208,13,213,17,"type"],[208,17,213,21],[208,20,213,24],[208,30,213,34],[209,8,214,12,"processedRedirectsRewrites"],[209,34,214,38],[209,35,214,39,"add"],[209,38,214,42],[209,39,214,43,"meta"],[209,43,214,47],[209,44,214,48,"route"],[209,49,214,53],[209,50,214,54],[210,6,215,8],[211,6,216,8],[211,10,216,12,"meta"],[211,14,216,16],[211,15,216,17,"isRewrite"],[211,24,216,26],[211,26,216,28],[212,8,217,12],[212,12,217,16,"processedRedirectsRewrites"],[212,38,217,42],[212,39,217,43,"has"],[212,42,217,46],[212,43,217,47,"meta"],[212,47,217,51],[212,48,217,52,"route"],[212,53,217,57],[212,54,217,58],[212,56,217,60],[213,10,218,16],[214,8,219,12],[215,8,220,12],[215,14,220,18,"rewrite"],[215,21,220,25],[215,24,220,28,"rewrites"],[215,32,220,36],[215,33,220,37,"meta"],[215,37,220,41],[215,38,220,42,"route"],[215,43,220,47],[215,44,220,48],[216,8,221,12,"node"],[216,12,221,16],[216,13,221,17,"destinationContextKey"],[216,34,221,38],[216,37,221,41,"rewrite"],[216,44,221,48],[216,45,221,49,"destinationContextKey"],[216,66,221,70],[217,8,222,12,"node"],[217,12,222,16],[217,13,222,17,"generated"],[217,22,222,26],[217,25,222,29],[217,29,222,33],[218,8,223,12],[218,12,223,16,"node"],[218,16,223,20],[218,17,223,21,"type"],[218,21,223,25],[218,26,223,30],[218,33,223,37],[218,35,223,39],[219,10,224,16,"node"],[219,14,224,20],[219,17,224,23,"options"],[219,24,224,30],[219,25,224,31,"getSystemRoute"],[219,39,224,45],[219,40,224,46],[220,12,225,20,"type"],[220,16,225,24],[220,18,225,26],[220,27,225,35],[221,12,226,20,"route"],[221,17,226,25],[221,19,226,27,"rewrite"],[221,26,226,34],[221,27,226,35,"destination"],[221,38,226,46],[222,12,227,20,"defaults"],[222,20,227,28],[222,22,227,30,"node"],[222,26,227,34],[223,12,228,20,"rewriteConfig"],[223,25,228,33],[223,27,228,35,"rewrite"],[224,10,229,16],[224,11,229,17],[224,12,229,18],[225,8,230,12],[226,8,231,12],[226,12,231,16,"rewrite"],[226,19,231,23],[226,20,231,24,"methods"],[226,27,231,31],[226,29,231,33],[227,10,232,16,"node"],[227,14,232,20],[227,15,232,21,"methods"],[227,22,232,28],[227,25,232,31,"rewrite"],[227,32,232,38],[227,33,232,39,"methods"],[227,40,232,46],[228,8,233,12],[229,8,234,12,"node"],[229,12,234,16],[229,13,234,17,"type"],[229,17,234,21],[229,20,234,24],[229,29,234,33],[230,8,235,12,"processedRedirectsRewrites"],[230,34,235,38],[230,35,235,39,"add"],[230,38,235,42],[230,39,235,43,"meta"],[230,43,235,47],[230,44,235,48,"route"],[230,49,235,53],[230,50,235,54],[231,6,236,8],[232,6,237,8],[232,10,237,12,"process"],[232,17,237,19],[232,18,237,20,"env"],[232,21,237,23],[232,22,237,24,"NODE_ENV"],[232,30,237,32],[232,35,237,37],[232,48,237,50],[232,50,237,52],[233,8,238,12],[234,8,239,12],[235,8,240,12],[235,12,240,16,"node"],[235,16,240,20],[235,17,240,21,"type"],[235,21,240,25],[235,26,240,30],[235,31,240,35],[235,35,240,39,"importMode"],[235,45,240,49],[235,50,240,54],[235,56,240,60],[235,58,240,62],[236,10,241,16],[236,16,241,22,"routeItem"],[236,25,241,31],[236,28,241,34,"node"],[236,32,241,38],[236,33,241,39,"loadRoute"],[236,42,241,48],[236,43,241,49],[236,44,241,50],[237,10,242,16],[238,10,243,16],[238,16,243,22,"route"],[238,21,243,27],[238,24,243,30,"routeItem"],[238,33,243,39],[238,35,243,41,"default"],[238,42,243,48],[239,10,244,16],[239,14,244,20,"route"],[239,19,244,25],[239,23,244,29],[239,27,244,33],[239,29,244,35],[240,12,245,20],[241,12,246,20,"console"],[241,19,246,27],[241,20,246,28,"warn"],[241,24,246,32],[241,25,246,33],[241,35,246,43,"filePath"],[241,43,246,51],[241,135,246,143],[241,136,246,144],[242,12,247,20],[243,10,248,16],[244,10,249,16],[244,14,249,20],[244,15,249,21],[244,24,249,30],[244,26,249,32],[244,34,249,40],[244,36,249,42],[244,44,249,50],[244,45,249,51],[244,46,249,52,"includes"],[244,54,249,60],[244,55,249,61],[244,62,249,68,"route"],[244,67,249,73],[244,68,249,74],[244,70,249,76],[245,12,250,20],[245,18,250,26],[245,22,250,30,"Error"],[245,27,250,35],[245,28,250,36],[245,62,250,70,"filePath"],[245,70,250,78],[245,100,250,108],[245,107,250,115,"route"],[245,112,250,120],[245,189,250,197],[245,190,250,198],[246,10,251,16],[247,8,252,12],[248,6,253,8],[249,6,254,8],[250,0,255,0],[251,0,256,0],[252,0,257,0],[253,6,258,8],[253,11,258,13],[253,17,258,19,"route"],[253,22,258,24],[253,26,258,28,"extrapolateGroups"],[253,43,258,45],[253,44,258,46,"meta"],[253,48,258,50],[253,49,258,51,"route"],[253,54,258,56],[253,55,258,57],[253,57,258,59],[254,8,259,12],[255,8,260,12],[255,14,260,18,"subdirectoryParts"],[255,31,260,35],[255,34,260,38,"route"],[255,39,260,43],[255,40,260,44,"split"],[255,45,260,49],[255,46,260,50],[255,49,260,53],[255,50,260,54],[255,51,260,55,"slice"],[255,56,260,60],[255,57,260,61],[255,58,260,62],[255,60,260,64],[255,61,260,65],[255,62,260,66],[255,63,260,67],[256,8,261,12],[257,8,262,12],[257,12,262,16,"directory"],[257,21,262,25],[257,24,262,28,"rootDirectory"],[257,37,262,41],[258,8,263,12],[258,13,263,17],[258,19,263,23,"part"],[258,23,263,27],[258,27,263,31,"subdirectoryParts"],[258,44,263,48],[258,46,263,50],[259,10,264,16],[259,14,264,20,"subDirectory"],[259,26,264,32],[259,29,264,35,"directory"],[259,38,264,44],[259,39,264,45,"subdirectories"],[259,53,264,59],[259,54,264,60,"get"],[259,57,264,63],[259,58,264,64,"part"],[259,62,264,68],[259,63,264,69],[260,10,265,16],[261,10,266,16],[261,14,266,20],[261,15,266,21,"subDirectory"],[261,27,266,33],[261,29,266,35],[262,12,267,20,"subDirectory"],[262,24,267,32],[262,27,267,35],[263,14,268,24,"files"],[263,19,268,29],[263,21,268,31],[263,25,268,35,"Map"],[263,28,268,38],[263,29,268,39],[263,30,268,40],[264,14,269,24,"subdirectories"],[264,28,269,38],[264,30,269,40],[264,34,269,44,"Map"],[264,37,269,47],[264,38,269,48],[265,12,270,20],[265,13,270,21],[266,12,271,20,"directory"],[266,21,271,29],[266,22,271,30,"subdirectories"],[266,36,271,44],[266,37,271,45,"set"],[266,40,271,48],[266,41,271,49,"part"],[266,45,271,53],[266,47,271,55,"subDirectory"],[266,59,271,67],[266,60,271,68],[267,10,272,16],[268,10,273,16,"directory"],[268,19,273,25],[268,22,273,28,"subDirectory"],[268,34,273,40],[269,8,274,12],[270,8,275,12],[271,8,276,12,"node"],[271,12,276,16],[271,15,276,16,"Object"],[271,21,276,16],[271,22,276,16,"assign"],[271,28,276,16],[271,33,276,24,"node"],[271,37,276,28],[272,10,276,30,"route"],[273,8,276,35],[273,10,276,37],[274,8,277,12],[274,12,277,16,"meta"],[274,16,277,20],[274,17,277,21,"isLayout"],[274,25,277,29],[274,27,277,31],[275,10,278,16,"directory"],[275,19,278,25],[275,20,278,26,"layout"],[275,26,278,32],[275,31,278,37],[275,33,278,39],[276,10,279,16],[276,16,279,22,"existing"],[276,24,279,30],[276,27,279,33,"directory"],[276,36,279,42],[276,37,279,43,"layout"],[276,43,279,49],[276,44,279,50,"meta"],[276,48,279,54],[276,49,279,55,"specificity"],[276,60,279,66],[276,61,279,67],[277,10,280,16],[277,14,280,20,"existing"],[277,22,280,28],[277,24,280,30],[278,12,281,20],[279,12,282,20],[279,16,282,24,"process"],[279,23,282,31],[279,24,282,32,"env"],[279,27,282,35],[279,28,282,36,"NODE_ENV"],[279,36,282,44],[279,41,282,49],[279,53,282,61],[279,55,282,63],[280,14,283,24],[280,20,283,30],[280,24,283,34,"Error"],[280,29,283,39],[280,30,283,40],[280,46,283,56,"filePath"],[280,54,283,64],[280,64,283,74,"existing"],[280,72,283,82],[280,73,283,83,"contextKey"],[280,83,283,93],[280,112,283,122,"route"],[280,117,283,127],[280,158,283,168],[280,159,283,169],[281,12,284,20],[282,10,285,16],[282,11,285,17],[282,17,286,21],[283,12,287,20,"node"],[283,16,287,24],[283,19,287,27,"getLayoutNode"],[283,32,287,40],[283,33,287,41,"node"],[283,37,287,45],[283,39,287,47,"options"],[283,46,287,54],[283,47,287,55],[284,12,288,20,"directory"],[284,21,288,29],[284,22,288,30,"layout"],[284,28,288,36],[284,29,288,37,"meta"],[284,33,288,41],[284,34,288,42,"specificity"],[284,45,288,53],[284,46,288,54],[284,49,288,57,"node"],[284,53,288,61],[285,10,289,16],[286,8,290,12],[286,9,290,13],[286,15,291,17],[286,19,291,21,"meta"],[286,23,291,25],[286,24,291,26,"isApi"],[286,29,291,31],[286,31,291,33],[287,10,292,16],[287,16,292,22,"fileKey"],[287,23,292,29],[287,26,292,32],[287,29,292,35,"route"],[287,34,292,40],[287,40,292,46],[288,10,293,16],[288,14,293,20,"nodes"],[288,19,293,25],[288,22,293,28,"directory"],[288,31,293,37],[288,32,293,38,"files"],[288,37,293,43],[288,38,293,44,"get"],[288,41,293,47],[288,42,293,48,"fileKey"],[288,49,293,55],[288,50,293,56],[289,10,294,16],[289,14,294,20],[289,15,294,21,"nodes"],[289,20,294,26],[289,22,294,28],[290,12,295,20,"nodes"],[290,17,295,25],[290,20,295,28],[290,22,295,30],[291,12,296,20,"directory"],[291,21,296,29],[291,22,296,30,"files"],[291,27,296,35],[291,28,296,36,"set"],[291,31,296,39],[291,32,296,40,"fileKey"],[291,39,296,47],[291,41,296,49,"nodes"],[291,46,296,54],[291,47,296,55],[292,10,297,16],[293,10,298,16],[294,10,299,16],[294,16,299,22,"existing"],[294,24,299,30],[294,27,299,33,"nodes"],[294,32,299,38],[294,33,299,39],[294,34,299,40],[294,35,299,41],[295,10,300,16],[295,14,300,20,"existing"],[295,22,300,28],[295,24,300,30],[296,12,301,20],[297,12,302,20],[297,16,302,24,"process"],[297,23,302,31],[297,24,302,32,"env"],[297,27,302,35],[297,28,302,36,"NODE_ENV"],[297,36,302,44],[297,41,302,49],[297,53,302,61],[297,55,302,63],[298,14,303,24],[298,20,303,30],[298,24,303,34,"Error"],[298,29,303,39],[298,30,303,40],[298,53,303,63,"filePath"],[298,61,303,71],[298,71,303,81,"existing"],[298,79,303,89],[298,80,303,90,"contextKey"],[298,90,303,100],[298,119,303,129,"route"],[298,124,303,134],[298,165,303,175],[298,166,303,176],[299,12,304,20],[300,10,305,16],[300,11,305,17],[300,17,306,21],[301,12,307,20,"nodes"],[301,17,307,25],[301,18,307,26],[301,19,307,27],[301,20,307,28],[301,23,307,31,"node"],[301,27,307,35],[302,10,308,16],[303,8,309,12],[303,9,309,13],[303,15,310,17],[304,10,311,16],[304,14,311,20,"nodes"],[304,19,311,25],[304,22,311,28,"directory"],[304,31,311,37],[304,32,311,38,"files"],[304,37,311,43],[304,38,311,44,"get"],[304,41,311,47],[304,42,311,48,"route"],[304,47,311,53],[304,48,311,54],[305,10,312,16],[305,14,312,20],[305,15,312,21,"nodes"],[305,20,312,26],[305,22,312,28],[306,12,313,20,"nodes"],[306,17,313,25],[306,20,313,28],[306,22,313,30],[307,12,314,20,"directory"],[307,21,314,29],[307,22,314,30,"files"],[307,27,314,35],[307,28,314,36,"set"],[307,31,314,39],[307,32,314,40,"route"],[307,37,314,45],[307,39,314,47,"nodes"],[307,44,314,52],[307,45,314,53],[308,10,315,16],[309,10,316,16],[310,0,317,0],[311,0,318,0],[312,0,319,0],[313,0,320,0],[314,0,321,0],[315,10,322,16],[315,16,322,22,"existing"],[315,24,322,30],[315,27,322,33,"nodes"],[315,32,322,38],[315,33,322,39,"meta"],[315,37,322,43],[315,38,322,44,"specificity"],[315,49,322,55],[315,50,322,56],[316,10,323,16],[316,14,323,20,"existing"],[316,22,323,28],[316,24,323,30],[317,12,324,20],[318,12,325,20],[318,16,325,24,"process"],[318,23,325,31],[318,24,325,32,"env"],[318,27,325,35],[318,28,325,36,"NODE_ENV"],[318,36,325,44],[318,41,325,49],[318,53,325,61],[318,55,325,63],[319,14,326,24],[319,20,326,30],[319,24,326,34,"Error"],[319,29,326,39],[319,30,326,40],[319,50,326,60,"filePath"],[319,58,326,68],[319,68,326,78,"existing"],[319,76,326,86],[319,77,326,87,"contextKey"],[319,87,326,97],[319,116,326,126,"route"],[319,121,326,131],[319,162,326,172],[319,163,326,173],[320,12,327,20],[321,10,328,16],[321,11,328,17],[321,17,329,21],[322,12,330,20,"hasRoutes"],[322,21,330,29],[322,26,330,34],[322,30,330,38],[323,12,331,20,"nodes"],[323,17,331,25],[323,18,331,26,"meta"],[323,22,331,30],[323,23,331,31,"specificity"],[323,34,331,42],[323,35,331,43],[323,38,331,46,"node"],[323,42,331,50],[324,10,332,16],[325,8,333,12],[326,6,334,8],[327,4,335,4],[328,4,336,4],[329,4,337,4],[329,8,337,8],[329,9,337,9,"isValid"],[329,16,337,16],[329,18,337,18],[330,6,338,8],[330,13,338,15],[330,17,338,19],[331,4,339,4],[332,4,340,4],[333,0,341,0],[334,0,342,0],[335,0,343,0],[336,4,344,4],[336,8,344,8],[336,9,344,9,"rootDirectory"],[336,22,344,22],[336,23,344,23,"layout"],[336,29,344,29],[336,31,344,31],[337,6,345,8,"rootDirectory"],[337,19,345,21],[337,20,345,22,"layout"],[337,26,345,28],[337,29,345,31],[337,30,346,12,"options"],[337,37,346,19],[337,38,346,20,"getSystemRoute"],[337,52,346,34],[337,53,346,35],[338,8,347,16,"type"],[338,12,347,20],[338,14,347,22],[338,22,347,30],[339,8,348,16,"route"],[339,13,348,21],[339,15,348,23],[340,6,349,12],[340,7,349,13],[340,8,349,14],[340,9,350,9],[341,4,351,4],[342,4,352,4],[343,4,353,4],[343,8,353,8],[343,9,353,9,"options"],[343,16,353,16],[343,17,353,17,"skipGenerated"],[343,30,353,30],[343,32,353,32],[344,6,354,8],[344,10,354,12,"hasRoutes"],[344,19,354,21],[344,23,354,25,"options"],[344,30,354,32],[344,31,354,33,"sitemap"],[344,38,354,40],[344,43,354,45],[344,48,354,50],[344,50,354,52],[345,8,355,12,"appendSitemapRoute"],[345,26,355,30],[345,27,355,31,"rootDirectory"],[345,40,355,44],[345,42,355,46,"options"],[345,49,355,53],[345,50,355,54],[346,6,356,8],[347,6,357,8],[347,10,357,12,"options"],[347,17,357,19],[347,18,357,20,"notFound"],[347,26,357,28],[347,31,357,33],[347,36,357,38],[347,38,357,40],[348,8,358,12,"appendNotFoundRoute"],[348,27,358,31],[348,28,358,32,"rootDirectory"],[348,41,358,45],[348,43,358,47,"options"],[348,50,358,54],[348,51,358,55],[349,6,359,8],[350,4,360,4],[351,4,361,4],[351,11,361,11,"rootDirectory"],[351,24,361,24],[352,2,362,0],[353,2,363,0],[353,11,363,9,"getNameFromRedirectPath"],[353,34,363,32,"getNameFromRedirectPath"],[353,35,363,33,"path"],[353,39,363,37],[353,41,363,39],[354,4,364,4],[355,4,365,4],[355,11,365,12],[355,12,365,13],[355,13,365,14],[355,15,365,16,"matchers_1"],[355,25,365,26],[355,26,365,27,"removeFileSystemExtensions"],[355,52,365,53],[355,54,365,55],[355,55,365,56],[355,56,365,57],[355,58,365,59,"matchers_1"],[355,68,365,69],[355,69,365,70,"removeFileSystemDots"],[355,89,365,90],[355,91,365,92,"path"],[355,95,365,96],[355,96,365,97],[356,4,366,8],[357,4,366,8],[357,5,367,9,"replace"],[357,12,367,16],[357,13,367,17],[357,18,367,22],[357,20,367,24],[357,22,367,26],[357,23,367,27],[358,2,368,0],[359,2,369,0],[359,11,369,9,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[359,58,369,56,"getNameWithoutInvisibleSegmentsFromRedirectPath"],[359,59,369,57,"path"],[359,63,369,61],[359,65,369,63],[360,4,370,4],[360,11,370,11],[360,12,370,12],[360,13,370,13],[360,15,370,15,"matchers_1"],[360,25,370,25],[360,26,370,26,"stripInvisibleSegmentsFromPath"],[360,56,370,56],[360,58,370,58,"getNameFromRedirectPath"],[360,81,370,81],[360,82,370,82,"path"],[360,86,370,86],[360,87,370,87],[360,88,370,88],[361,2,371,0],[362,2,372,0],[363,2,373,0],[363,11,373,9,"getSourceContextKeyFromRedirectSource"],[363,48,373,46,"getSourceContextKeyFromRedirectSource"],[363,49,373,47,"source"],[363,55,373,53],[363,57,373,55],[364,4,374,4],[364,10,374,10,"name"],[364,14,374,14],[364,17,374,17,"getNameFromRedirectPath"],[364,40,374,40],[364,41,374,41,"source"],[364,47,374,47],[364,48,374,48],[365,4,375,4],[365,10,375,10,"prefix"],[365,16,375,16],[365,19,375,19],[365,23,375,23],[366,4,376,4],[366,10,376,10,"suffix"],[366,16,376,16],[366,19,376,19],[366,31,376,31],[366,32,376,32,"test"],[366,36,376,36],[366,37,376,37,"name"],[366,41,376,41],[366,42,376,42],[366,45,376,45],[366,47,376,47],[366,50,376,50],[366,55,376,55],[366,56,376,56],[366,57,376,57],[367,4,377,4],[367,11,377,11],[367,14,377,14,"prefix"],[367,20,377,20],[367,23,377,23,"name"],[367,27,377,27],[367,30,377,30,"suffix"],[367,36,377,36],[367,38,377,38],[368,2,378,0],[369,2,379,0],[370,0,380,0],[371,0,381,0],[372,2,382,0],[372,11,382,9,"flattenDirectoryTreeToRoutes"],[372,39,382,37,"flattenDirectoryTreeToRoutes"],[372,40,382,38,"directory"],[372,49,382,47],[372,51,382,49,"options"],[372,58,382,56],[372,60,383,0],[373,2,384,0,"layout"],[373,8,384,6],[373,10,385,0],[374,2,386,0,"pathToRemove"],[374,14,386,12],[374,17,386,15],[374,19,386,17],[374,21,386,19],[375,4,387,4],[376,0,388,0],[377,0,389,0],[378,4,390,4],[378,8,390,8,"directory"],[378,17,390,17],[378,18,390,18,"layout"],[378,24,390,24],[378,26,390,26],[379,6,391,8],[379,12,391,14,"previousLayout"],[379,26,391,28],[379,29,391,31,"layout"],[379,35,391,37],[380,6,392,8,"layout"],[380,12,392,14],[380,15,392,17,"getMostSpecific"],[380,30,392,32],[380,31,392,33,"directory"],[380,40,392,42],[380,41,392,43,"layout"],[380,47,392,49],[380,48,392,50],[381,6,393,8],[382,6,394,8],[382,10,394,12,"previousLayout"],[382,24,394,26],[382,26,394,28],[383,8,395,12,"previousLayout"],[383,22,395,26],[383,23,395,27,"children"],[383,31,395,35],[383,32,395,36,"push"],[383,36,395,40],[383,37,395,41,"layout"],[383,43,395,47],[383,44,395,48],[384,6,396,8],[385,6,397,8],[385,10,397,12,"options"],[385,17,397,19],[385,18,397,20,"internal_stripLoadRoute"],[385,41,397,43],[385,43,397,45],[386,8,398,12],[386,15,398,19,"layout"],[386,21,398,25],[386,22,398,26,"loadRoute"],[386,31,398,35],[387,6,399,8],[388,6,400,8],[389,6,401,8],[389,12,401,14,"newRoute"],[389,20,401,22],[389,23,401,25,"layout"],[389,29,401,31],[389,30,401,32,"route"],[389,35,401,37],[389,36,401,38,"replace"],[389,43,401,45],[389,44,401,46,"pathToRemove"],[389,56,401,58],[389,58,401,60],[389,60,401,62],[389,61,401,63],[390,6,402,8,"pathToRemove"],[390,18,402,20],[390,21,402,23,"layout"],[390,27,402,29],[390,28,402,30,"route"],[390,33,402,35],[390,36,402,38],[390,39,402,41,"layout"],[390,45,402,47],[390,46,402,48,"route"],[390,51,402,53],[390,54,402,56],[390,57,402,59],[390,59,402,61],[391,6,403,8],[392,6,404,8,"layout"],[392,12,404,14],[392,13,404,15,"route"],[392,18,404,20],[392,21,404,23,"newRoute"],[392,29,404,31],[393,6,405,8,"layout"],[393,12,405,14],[393,13,405,15,"dynamic"],[393,20,405,22],[393,23,405,25,"generateDynamic"],[393,38,405,40],[393,39,405,41,"layout"],[393,45,405,47],[393,46,405,48,"contextKey"],[393,56,405,58],[393,57,405,59,"slice"],[393,62,405,64],[393,63,405,65],[393,64,405,66],[393,65,405,67],[393,66,405,68],[394,4,406,4],[395,4,407,4],[396,4,408,4],[396,8,408,8],[396,9,408,9,"layout"],[396,15,408,15],[396,17,409,8],[396,23,409,14],[396,27,409,18,"Error"],[396,32,409,23],[396,33,409,24],[396,80,409,71],[396,81,409,72],[397,4,410,4],[397,9,410,9],[397,15,410,15,"routes"],[397,21,410,21],[397,25,410,25,"directory"],[397,34,410,34],[397,35,410,35,"files"],[397,40,410,40],[397,41,410,41,"values"],[397,47,410,47],[397,48,410,48],[397,49,410,49],[397,51,410,51],[398,6,411,8],[398,12,411,14,"routeNode"],[398,21,411,23],[398,24,411,26,"getMostSpecific"],[398,39,411,41],[398,40,411,42,"routes"],[398,46,411,48],[398,47,411,49],[399,6,412,8],[400,6,413,8,"routeNode"],[400,15,413,17],[400,16,413,18,"route"],[400,21,413,23],[400,24,413,26,"routeNode"],[400,33,413,35],[400,34,413,36,"route"],[400,39,413,41],[400,40,413,42,"replace"],[400,47,413,49],[400,48,413,50,"pathToRemove"],[400,60,413,62],[400,62,413,64],[400,64,413,66],[400,65,413,67],[401,6,414,8,"routeNode"],[401,15,414,17],[401,16,414,18,"dynamic"],[401,23,414,25],[401,26,414,28,"generateDynamic"],[401,41,414,43],[401,42,414,44,"routeNode"],[401,51,414,53],[401,52,414,54,"route"],[401,57,414,59],[401,58,414,60],[402,6,415,8],[402,10,415,12,"options"],[402,17,415,19],[402,18,415,20,"internal_stripLoadRoute"],[402,41,415,43],[402,43,415,45],[403,8,416,12],[403,15,416,19,"routeNode"],[403,24,416,28],[403,25,416,29,"loadRoute"],[403,34,416,38],[404,6,417,8],[405,6,418,8,"layout"],[405,12,418,14],[405,13,418,15,"children"],[405,21,418,23],[405,22,418,24,"push"],[405,26,418,28],[405,27,418,29,"routeNode"],[405,36,418,38],[405,37,418,39],[406,4,419,4],[407,4,420,4],[408,4,421,4],[408,9,421,9],[408,15,421,15,"child"],[408,20,421,20],[408,24,421,24,"directory"],[408,33,421,33],[408,34,421,34,"subdirectories"],[408,48,421,48],[408,49,421,49,"values"],[408,55,421,55],[408,56,421,56],[408,57,421,57],[408,59,421,59],[409,6,422,8,"flattenDirectoryTreeToRoutes"],[409,34,422,36],[409,35,422,37,"child"],[409,40,422,42],[409,42,422,44,"options"],[409,49,422,51],[409,51,422,53,"layout"],[409,57,422,59],[409,59,422,61,"pathToRemove"],[409,71,422,73],[409,72,422,74],[410,4,423,4],[411,4,424,4],[411,11,424,11,"layout"],[411,17,424,17],[412,2,425,0],[413,2,426,0],[413,11,426,9,"getFileMeta"],[413,22,426,20,"getFileMeta"],[413,23,426,21,"originalKey"],[413,34,426,32],[413,36,426,34,"options"],[413,43,426,41],[413,45,426,43,"redirects"],[413,54,426,52],[413,56,426,54,"rewrites"],[413,64,426,62],[413,66,426,64],[414,4,427,4],[415,4,428,4],[415,10,428,10,"key"],[415,13,428,13],[415,16,428,16],[415,17,428,17],[415,18,428,18],[415,20,428,20,"matchers_1"],[415,30,428,30],[415,31,428,31,"removeSupportedExtensions"],[415,56,428,56],[415,58,428,58],[415,59,428,59],[415,60,428,60],[415,62,428,62,"matchers_1"],[415,72,428,72],[415,73,428,73,"removeFileSystemDots"],[415,93,428,93],[415,95,428,95,"originalKey"],[415,106,428,106],[415,107,428,107],[415,108,428,108],[416,4,429,4],[416,8,429,8,"route"],[416,13,429,13],[416,16,429,16,"key"],[416,19,429,19],[417,4,430,4],[417,10,430,10,"parts"],[417,15,430,15],[417,18,430,18],[417,19,430,19],[417,20,430,20],[417,22,430,22,"matchers_1"],[417,32,430,32],[417,33,430,33,"removeFileSystemDots"],[417,53,430,53],[417,55,430,55,"originalKey"],[417,66,430,66],[417,67,430,67],[417,68,430,68,"split"],[417,73,430,73],[417,74,430,74],[417,77,430,77],[417,78,430,78],[418,4,431,4],[418,10,431,10,"filename"],[418,18,431,18],[418,21,431,21,"parts"],[418,26,431,26],[418,27,431,27,"parts"],[418,32,431,32],[418,33,431,33,"length"],[418,39,431,39],[418,42,431,42],[418,43,431,43],[418,44,431,44],[419,4,432,4],[419,10,432,10],[419,11,432,11,"filenameWithoutExtensions"],[419,36,432,36],[419,38,432,38,"platformExtension"],[419,55,432,55],[419,56,432,56],[419,59,432,59],[419,60,432,60],[419,61,432,61],[419,63,432,63,"matchers_1"],[419,73,432,73],[419,74,432,74,"removeSupportedExtensions"],[419,99,432,99],[419,101,432,101,"filename"],[419,109,432,109],[419,110,432,110],[419,111,432,111,"split"],[419,116,432,116],[419,117,432,117],[419,120,432,120],[419,121,432,121],[420,4,433,4],[420,10,433,10,"isLayout"],[420,18,433,18],[420,21,433,21,"filenameWithoutExtensions"],[420,46,433,46],[420,51,433,51],[420,60,433,60],[421,4,434,4],[421,10,434,10,"isApi"],[421,15,434,15],[421,18,434,18,"originalKey"],[421,29,434,29],[421,30,434,30,"match"],[421,35,434,35],[421,36,434,36],[421,61,434,61],[421,62,434,62],[422,4,435,4],[422,8,435,8,"filenameWithoutExtensions"],[422,33,435,33],[422,34,435,34,"startsWith"],[422,44,435,44],[422,45,435,45],[422,48,435,48],[422,49,435,49],[422,53,435,53,"filenameWithoutExtensions"],[422,78,435,78],[422,79,435,79,"endsWith"],[422,87,435,87],[422,88,435,88],[422,91,435,91],[422,92,435,92],[422,94,435,94],[423,6,436,8],[423,12,436,14],[423,16,436,18,"Error"],[423,21,436,23],[423,22,436,24],[423,39,436,41,"originalKey"],[423,50,436,52],[423,93,436,95],[423,94,436,96],[424,4,437,4],[425,4,438,4],[426,4,439,4],[426,8,439,8],[426,9,439,9,"isApi"],[426,14,439,14],[426,18,439,18,"filename"],[426,26,439,26],[426,27,439,27,"startsWith"],[426,37,439,37],[426,38,439,38],[426,41,439,41],[426,42,439,42],[426,46,439,46,"filenameWithoutExtensions"],[426,71,439,71],[426,76,439,76],[426,88,439,88],[426,90,439,90],[427,6,440,8],[427,12,440,14,"renamedRoute"],[427,24,440,26],[427,27,440,29],[427,28,440,30],[427,31,440,33,"parts"],[427,36,440,38],[427,37,440,39,"slice"],[427,42,440,44],[427,43,440,45],[427,44,440,46],[427,46,440,48],[427,47,440,49],[427,48,440,50],[427,49,440,51],[427,51,440,53,"filename"],[427,59,440,61],[427,60,440,62,"slice"],[427,65,440,67],[427,66,440,68],[427,67,440,69],[427,68,440,70],[427,69,440,71],[427,70,440,72,"join"],[427,74,440,76],[427,75,440,77],[427,78,440,80],[427,79,440,81],[428,6,441,8],[428,12,441,14],[428,16,441,18,"Error"],[428,21,441,23],[428,22,441,24],[428,39,441,41,"originalKey"],[428,50,441,52],[428,118,441,120,"renamedRoute"],[428,130,441,132],[428,133,441,135],[428,134,441,136],[429,4,442,4],[430,4,443,4],[430,8,443,8,"specificity"],[430,19,443,19],[430,22,443,22],[430,23,443,23],[431,4,444,4],[431,10,444,10,"hasPlatformExtension"],[431,30,444,30],[431,33,444,33,"validPlatforms"],[431,47,444,47],[431,48,444,48,"has"],[431,51,444,51],[431,52,444,52,"platformExtension"],[431,69,444,69],[431,70,444,70],[432,4,445,4],[432,10,445,10,"usePlatformRoutes"],[432,27,445,27],[432,30,445,30,"options"],[432,37,445,37],[432,38,445,38,"platformRoutes"],[432,52,445,52],[432,56,445,56],[432,60,445,60],[433,4,446,4],[433,8,446,8,"hasPlatformExtension"],[433,28,446,28],[433,30,446,30],[434,6,447,8],[434,10,447,12],[434,11,447,13,"usePlatformRoutes"],[434,28,447,30],[434,30,447,32],[435,8,448,12],[436,8,449,12,"specificity"],[436,19,449,23],[436,22,449,26],[436,23,449,27],[436,24,449,28],[437,6,450,8],[437,7,450,9],[437,13,451,13],[437,17,451,17],[437,18,451,18,"options"],[437,25,451,25],[437,26,451,26,"platform"],[437,34,451,34],[437,36,451,36],[438,8,452,12],[439,8,453,12],[440,8,454,12,"specificity"],[440,19,454,23],[440,22,454,26],[440,23,454,27],[440,24,454,28],[441,6,455,8],[441,7,455,9],[441,13,456,13],[441,17,456,17,"platformExtension"],[441,34,456,34],[441,39,456,39,"options"],[441,46,456,46],[441,47,456,47,"platform"],[441,55,456,55],[441,57,456,57],[442,8,457,12],[443,8,458,12,"specificity"],[443,19,458,23],[443,22,458,26],[443,23,458,27],[444,6,459,8],[444,7,459,9],[444,13,460,13],[444,17,460,17,"platformExtension"],[444,34,460,34],[444,39,460,39],[444,47,460,47],[444,51,460,51,"options"],[444,58,460,58],[444,59,460,59,"platform"],[444,67,460,67],[444,72,460,72],[444,77,460,77],[444,79,460,79],[445,8,461,12],[446,8,462,12,"specificity"],[446,19,462,23],[446,22,462,26],[446,23,462,27],[447,6,463,8],[447,7,463,9],[447,13,464,13],[447,17,464,17,"platformExtension"],[447,34,464,34],[447,39,464,39,"options"],[447,46,464,46],[447,47,464,47,"platform"],[447,55,464,55],[447,57,464,57],[448,8,465,12],[449,8,466,12],[450,8,467,12,"specificity"],[450,19,467,23],[450,22,467,26],[450,23,467,27],[450,24,467,28],[451,6,468,8],[452,6,469,8],[452,10,469,12,"isApi"],[452,15,469,17],[452,19,469,21,"specificity"],[452,30,469,32],[452,35,469,37],[452,36,469,38],[452,38,469,40],[453,8,470,12],[453,14,470,18],[453,18,470,22,"Error"],[453,23,470,27],[453,24,470,28],[453,80,470,84,"platformExtension"],[453,97,470,101],[453,108,470,112,"originalKey"],[453,119,470,123],[453,122,470,126],[453,123,470,127],[454,6,471,8],[455,6,472,8,"route"],[455,11,472,13],[455,14,472,16,"route"],[455,19,472,21],[455,20,472,22,"replace"],[455,27,472,29],[455,28,472,30],[455,32,472,34,"RegExp"],[455,38,472,40],[455,39,472,41],[455,43,472,45,"platformExtension"],[455,60,472,62],[455,63,472,65],[455,64,472,66],[455,66,472,68],[455,68,472,70],[455,69,472,71],[456,4,473,4],[457,4,474,4],[457,11,474,11],[458,6,475,8,"route"],[458,11,475,13],[459,6,476,8,"specificity"],[459,17,476,19],[460,6,477,8,"isLayout"],[460,14,477,16],[461,6,478,8,"isApi"],[461,11,478,13],[462,6,479,8,"isRedirect"],[462,16,479,18],[462,18,479,20,"key"],[462,21,479,23],[462,25,479,27,"redirects"],[462,34,479,36],[463,6,480,8,"isRewrite"],[463,15,480,17],[463,17,480,19,"key"],[463,20,480,22],[463,24,480,26,"rewrites"],[464,4,481,4],[464,5,481,5],[465,2,482,0],[466,2,483,0],[467,0,484,0],[468,0,485,0],[469,0,486,0],[470,0,487,0],[471,2,488,0],[471,11,488,9,"extrapolateGroups"],[471,28,488,26,"extrapolateGroups"],[471,29,488,27,"key"],[471,32,488,30],[471,34,488,32,"keys"],[471,38,488,36],[471,41,488,39],[471,45,488,43,"Set"],[471,48,488,46],[471,49,488,47],[471,50,488,48],[471,52,488,50],[472,4,489,4],[472,10,489,10,"match"],[472,15,489,15],[472,18,489,18],[472,19,489,19],[472,20,489,20],[472,22,489,22,"matchers_1"],[472,32,489,32],[472,33,489,33,"matchArrayGroupName"],[472,52,489,52],[472,54,489,54,"key"],[472,57,489,57],[472,58,489,58],[473,4,490,4],[473,8,490,8],[473,9,490,9,"match"],[473,14,490,14],[473,16,490,16],[474,6,491,8,"keys"],[474,10,491,12],[474,11,491,13,"add"],[474,14,491,16],[474,15,491,17,"key"],[474,18,491,20],[474,19,491,21],[475,6,492,8],[475,13,492,15,"keys"],[475,17,492,19],[476,4,493,4],[477,4,494,4],[477,10,494,10,"groups"],[477,16,494,16],[477,19,494,19,"match"],[477,24,494,24],[477,25,494,25,"split"],[477,30,494,30],[477,31,494,31],[477,34,494,34],[477,35,494,35],[478,4,495,4],[478,10,495,10,"groupsSet"],[478,19,495,19],[478,22,495,22],[478,26,495,26,"Set"],[478,29,495,29],[478,30,495,30,"groups"],[478,36,495,36],[478,37,495,37],[479,4,496,4],[479,8,496,8,"groupsSet"],[479,17,496,17],[479,18,496,18,"size"],[479,22,496,22],[479,27,496,27,"groups"],[479,33,496,33],[479,34,496,34,"length"],[479,40,496,40],[479,42,496,42],[480,6,497,8],[480,12,497,14],[480,16,497,18,"Error"],[480,21,497,23],[480,22,497,24],[480,75,497,77,"groups"],[480,81,497,83],[480,90,497,92,"key"],[480,93,497,95],[480,97,497,99],[480,98,497,100],[481,4,498,4],[482,4,499,4],[482,8,499,8,"groups"],[482,14,499,14],[482,15,499,15,"length"],[482,21,499,21],[482,26,499,26],[482,27,499,27],[482,29,499,29],[483,6,500,8,"keys"],[483,10,500,12],[483,11,500,13,"add"],[483,14,500,16],[483,15,500,17,"key"],[483,18,500,20],[483,19,500,21],[484,6,501,8],[484,13,501,15,"keys"],[484,17,501,19],[485,4,502,4],[486,4,503,4],[486,9,503,9],[486,15,503,15,"group"],[486,20,503,20],[486,24,503,24,"groups"],[486,30,503,30],[486,32,503,32],[487,6,504,8,"extrapolateGroups"],[487,23,504,25],[487,24,504,26,"key"],[487,27,504,29],[487,28,504,30,"replace"],[487,35,504,37],[487,36,504,38,"match"],[487,41,504,43],[487,43,504,45,"group"],[487,48,504,50],[487,49,504,51,"trim"],[487,53,504,55],[487,54,504,56],[487,55,504,57],[487,56,504,58],[487,58,504,60,"keys"],[487,62,504,64],[487,63,504,65],[488,4,505,4],[489,4,506,4],[489,11,506,11,"keys"],[489,15,506,15],[490,2,507,0],[491,2,508,0],[491,11,508,9,"generateDynamic"],[491,26,508,24,"generateDynamic"],[491,27,508,25,"path"],[491,31,508,29],[491,33,508,31],[492,4,509,4],[492,10,509,10,"dynamic"],[492,17,509,17],[492,20,509,20,"path"],[492,24,509,24],[492,25,510,9,"split"],[492,30,510,14],[492,31,510,15],[492,34,510,18],[492,35,510,19],[492,36,511,9,"map"],[492,39,511,12],[492,40,511,14,"part"],[492,44,511,18],[492,48,511,23],[493,6,512,8],[493,10,512,12,"part"],[493,14,512,16],[493,19,512,21],[493,31,512,33],[493,33,512,35],[494,8,513,12],[494,15,513,19],[495,10,514,16,"name"],[495,14,514,20],[495,16,514,22],[495,28,514,34],[496,10,515,16,"deep"],[496,14,515,20],[496,16,515,22],[496,20,515,26],[497,10,516,16,"notFound"],[497,18,516,24],[497,20,516,26],[498,8,517,12],[498,9,517,13],[499,6,518,8],[500,6,519,8],[500,13,519,15],[500,14,519,16],[500,15,519,17],[500,17,519,19,"matchers_1"],[500,27,519,29],[500,28,519,30,"matchDynamicName"],[500,44,519,46],[500,46,519,48,"part"],[500,50,519,52],[500,51,519,53],[500,55,519,57],[500,59,519,61],[501,4,520,4],[501,5,520,5],[501,6,520,6],[501,7,521,9,"filter"],[501,13,521,15],[501,14,521,17,"part"],[501,18,521,21],[501,22,521,26],[501,23,521,27],[501,24,521,28,"part"],[501,28,521,32],[501,29,521,33],[502,4,522,4],[502,11,522,11,"dynamic"],[502,18,522,18],[502,19,522,19,"length"],[502,25,522,25],[502,30,522,30],[502,31,522,31],[502,34,522,34],[502,38,522,38],[502,41,522,41,"dynamic"],[502,48,522,48],[503,2,523,0],[504,2,524,0],[504,11,524,9,"appendSitemapRoute"],[504,29,524,27,"appendSitemapRoute"],[504,30,524,28,"directory"],[504,39,524,37],[504,41,524,39,"options"],[504,48,524,46],[504,50,524,48],[505,4,525,4],[505,8,525,8],[505,9,525,9,"directory"],[505,18,525,18],[505,19,525,19,"files"],[505,24,525,24],[505,25,525,25,"has"],[505,28,525,28],[505,29,525,29],[505,39,525,39],[505,40,525,40],[505,44,525,44,"options"],[505,51,525,51],[505,52,525,52,"getSystemRoute"],[505,66,525,66],[505,68,525,68],[506,6,526,8,"directory"],[506,15,526,17],[506,16,526,18,"files"],[506,21,526,23],[506,22,526,24,"set"],[506,25,526,27],[506,26,526,28],[506,36,526,38],[506,38,526,40],[506,39,527,12,"options"],[506,46,527,19],[506,47,527,20,"getSystemRoute"],[506,61,527,34],[506,62,527,35],[507,8,528,16,"type"],[507,12,528,20],[507,14,528,22],[507,21,528,29],[508,8,529,16,"route"],[508,13,529,21],[508,15,529,23],[509,6,530,12],[509,7,530,13],[509,8,530,14],[509,9,531,9],[509,10,531,10],[510,4,532,4],[511,2,533,0],[512,2,534,0],[512,11,534,9,"appendNotFoundRoute"],[512,30,534,28,"appendNotFoundRoute"],[512,31,534,29,"directory"],[512,40,534,38],[512,42,534,40,"options"],[512,49,534,47],[512,51,534,49],[513,4,535,4],[513,8,535,8],[513,9,535,9,"directory"],[513,18,535,18],[513,19,535,19,"files"],[513,24,535,24],[513,25,535,25,"has"],[513,28,535,28],[513,29,535,29],[513,41,535,41],[513,42,535,42],[513,46,535,46,"options"],[513,53,535,53],[513,54,535,54,"getSystemRoute"],[513,68,535,68],[513,70,535,70],[514,6,536,8,"directory"],[514,15,536,17],[514,16,536,18,"files"],[514,21,536,23],[514,22,536,24,"set"],[514,25,536,27],[514,26,536,28],[514,38,536,40],[514,40,536,42],[514,41,537,12,"options"],[514,48,537,19],[514,49,537,20,"getSystemRoute"],[514,63,537,34],[514,64,537,35],[515,8,538,16,"type"],[515,12,538,20],[515,14,538,22],[515,21,538,29],[516,8,539,16,"route"],[516,13,539,21],[516,15,539,23],[517,6,540,12],[517,7,540,13],[517,8,540,14],[517,9,541,9],[517,10,541,10],[518,4,542,4],[519,2,543,0],[520,2,544,0],[520,11,544,9,"getLayoutNode"],[520,24,544,22,"getLayoutNode"],[520,25,544,23,"node"],[520,29,544,27],[520,31,544,29,"options"],[520,38,544,36],[520,40,544,38],[521,4,545,4],[522,0,546,0],[523,0,547,0],[524,0,548,0],[525,4,549,4],[526,4,550,4],[526,10,550,10,"groupName"],[526,19,550,19],[526,22,550,22],[526,23,550,23],[526,24,550,24],[526,26,550,26,"matchers_1"],[526,36,550,36],[526,37,550,37,"matchLastGroupName"],[526,55,550,55],[526,57,550,57,"node"],[526,61,550,61],[526,62,550,62,"route"],[526,67,550,67],[526,68,550,68],[527,4,551,4],[527,10,551,10,"childMatchingGroup"],[527,28,551,28],[527,31,551,31,"node"],[527,35,551,35],[527,36,551,36,"children"],[527,44,551,44],[527,45,551,45,"find"],[527,49,551,49],[527,50,551,51,"child"],[527,55,551,56],[527,59,551,61],[528,6,552,8],[528,13,552,15,"child"],[528,18,552,20],[528,19,552,21,"route"],[528,24,552,26],[528,25,552,27,"replace"],[528,32,552,34],[528,33,552,35],[528,43,552,45],[528,45,552,47],[528,47,552,49],[528,48,552,50],[528,53,552,55,"groupName"],[528,62,552,64],[529,4,553,4],[529,5,553,5],[529,6,553,6],[530,4,554,4],[530,8,554,8,"anchor"],[530,14,554,14],[530,17,554,17,"childMatchingGroup"],[530,35,554,35],[530,37,554,37,"route"],[530,42,554,42],[531,4,555,4],[531,10,555,10,"loaded"],[531,16,555,16],[531,19,555,19,"node"],[531,23,555,23],[531,24,555,24,"loadRoute"],[531,33,555,33],[531,34,555,34],[531,35,555,35],[532,4,556,4],[532,8,556,8,"loaded"],[532,14,556,14],[532,16,556,16,"unstable_settings"],[532,33,556,33],[532,35,556,35],[533,6,557,8],[533,10,557,12],[534,8,558,12],[535,8,559,12,"anchor"],[535,14,559,18],[535,17,560,16,"loaded"],[535,23,560,22],[535,24,560,23,"unstable_settings"],[535,41,560,40],[535,42,560,41,"anchor"],[535,48,560,47],[535,52,560,51,"loaded"],[535,58,560,57],[535,59,560,58,"unstable_settings"],[535,76,560,75],[535,77,560,76,"initialRouteName"],[535,93,560,92],[535,97,560,96,"anchor"],[535,103,560,102],[536,6,561,8],[536,7,561,9],[536,8,562,8],[536,15,562,15,"error"],[536,20,562,20],[536,22,562,22],[537,8,563,12],[537,12,563,16,"error"],[537,17,563,21],[537,29,563,33,"Error"],[537,34,563,38],[537,36,563,40],[538,10,564,16],[538,14,564,20],[538,15,564,21,"error"],[538,20,564,26],[538,21,564,27,"message"],[538,28,564,34],[538,29,564,35,"match"],[538,34,564,40],[538,35,564,41],[538,72,564,78],[538,73,564,79],[538,75,564,81],[539,12,565,20],[539,18,565,26,"error"],[539,23,565,31],[540,10,566,16],[541,8,567,12],[542,6,568,8],[543,6,569,8],[543,10,569,12,"groupName"],[543,19,569,21],[543,21,569,23],[544,8,570,12],[545,8,571,12],[545,14,571,18,"groupSpecificInitialRouteName"],[545,43,571,47],[545,46,571,50,"loaded"],[545,52,571,56],[545,53,571,57,"unstable_settings"],[545,70,571,74],[545,73,571,77,"groupName"],[545,82,571,86],[545,83,571,87],[545,85,571,89,"anchor"],[545,91,571,95],[545,95,572,16,"loaded"],[545,101,572,22],[545,102,572,23,"unstable_settings"],[545,119,572,40],[545,122,572,43,"groupName"],[545,131,572,52],[545,132,572,53],[545,134,572,55,"initialRouteName"],[545,150,572,71],[546,8,573,12,"anchor"],[546,14,573,18],[546,17,573,21,"groupSpecificInitialRouteName"],[546,46,573,50],[546,50,573,54,"anchor"],[546,56,573,60],[547,6,574,8],[548,4,575,4],[549,4,576,4],[549,11,576,4,"Object"],[549,17,576,4],[549,18,576,4,"assign"],[549,24,576,4],[549,29,577,11,"node"],[549,33,577,15],[550,6,578,8,"route"],[550,11,578,13],[550,13,578,15,"node"],[550,17,578,19],[550,18,578,20,"route"],[550,23,578,25],[550,24,578,26,"replace"],[550,31,578,33],[550,32,578,34],[550,45,578,47],[550,47,578,49],[550,49,578,51],[550,50,578,52],[551,6,579,8,"children"],[551,14,579,16],[551,16,579,18],[551,18,579,20],[552,6,579,22],[553,6,580,8,"initialRouteName"],[553,22,580,24],[553,24,580,26,"anchor"],[554,4,580,32],[555,2,582,0],[556,2,583,0],[556,11,583,9,"crawlAndAppendInitialRoutesAndEntryFiles"],[556,51,583,49,"crawlAndAppendInitialRoutesAndEntryFiles"],[556,52,583,50,"node"],[556,56,583,54],[556,58,583,56,"options"],[556,65,583,63],[556,67,583,65,"entryPoints"],[556,78,583,76],[556,81,583,79],[556,83,583,81],[556,85,583,83],[557,4,584,4],[557,8,584,8,"node"],[557,12,584,12],[557,13,584,13,"type"],[557,17,584,17],[557,22,584,22],[557,29,584,29],[557,31,584,31],[558,6,585,8,"node"],[558,10,585,12],[558,11,585,13,"entryPoints"],[558,22,585,24],[558,25,585,27],[558,26,585,28],[558,29,585,31],[558,33,585,35,"Set"],[558,36,585,38],[558,37,585,39],[558,38,585,40],[558,41,585,43,"entryPoints"],[558,52,585,54],[558,54,585,56,"node"],[558,58,585,60],[558,59,585,61,"contextKey"],[558,69,585,71],[558,70,585,72],[558,71,585,73],[558,72,585,74],[559,4,586,4],[559,5,586,5],[559,11,587,9],[559,15,587,13,"node"],[559,19,587,17],[559,20,587,18,"type"],[559,24,587,22],[559,29,587,27],[559,39,587,37],[559,41,587,39],[560,6,588,8,"node"],[560,10,588,12],[560,11,588,13,"entryPoints"],[560,22,588,24],[560,25,588,27],[560,26,588,28],[560,29,588,31],[560,33,588,35,"Set"],[560,36,588,38],[560,37,588,39],[560,38,588,40],[560,41,588,43,"entryPoints"],[560,52,588,54],[560,54,588,56,"node"],[560,58,588,60],[560,59,588,61,"destinationContextKey"],[560,80,588,82],[560,81,588,83],[560,82,588,84],[560,83,588,85],[561,4,589,4],[561,5,589,5],[561,11,590,9],[561,15,590,13,"node"],[561,19,590,17],[561,20,590,18,"type"],[561,24,590,22],[561,29,590,27],[561,37,590,35],[561,39,590,37],[562,6,591,8],[562,10,591,12],[562,11,591,13,"node"],[562,15,591,17],[562,16,591,18,"children"],[562,24,591,26],[562,26,591,28],[563,8,592,12],[563,14,592,18],[563,18,592,22,"Error"],[563,23,592,27],[563,24,592,28],[563,35,592,39,"node"],[563,39,592,43],[563,40,592,44,"contextKey"],[563,50,592,54],[563,87,592,91],[563,88,592,92],[564,6,593,8],[565,6,594,8],[566,6,595,8,"entryPoints"],[566,17,595,19],[566,20,595,22],[566,21,595,23],[566,24,595,26,"entryPoints"],[566,35,595,37],[566,37,595,39,"node"],[566,41,595,43],[566,42,595,44,"contextKey"],[566,52,595,54],[566,53,595,55],[567,6,596,8],[568,0,597,0],[569,0,598,0],[570,0,599,0],[571,0,600,0],[572,0,601,0],[573,6,602,8],[573,12,602,14,"groupName"],[573,21,602,23],[573,24,602,26],[573,25,602,27],[573,26,602,28],[573,28,602,30,"matchers_1"],[573,38,602,40],[573,39,602,41,"matchGroupName"],[573,53,602,55],[573,55,602,57,"node"],[573,59,602,61],[573,60,602,62,"route"],[573,65,602,67],[573,66,602,68],[574,6,603,8],[574,12,603,14,"childMatchingGroup"],[574,30,603,32],[574,33,603,35,"node"],[574,37,603,39],[574,38,603,40,"children"],[574,46,603,48],[574,47,603,49,"find"],[574,51,603,53],[574,52,603,55,"child"],[574,57,603,60],[574,61,603,65],[575,8,604,12],[575,15,604,19,"child"],[575,20,604,24],[575,21,604,25,"route"],[575,26,604,30],[575,27,604,31,"replace"],[575,34,604,38],[575,35,604,39],[575,45,604,49],[575,47,604,51],[575,49,604,53],[575,50,604,54],[575,55,604,59,"groupName"],[575,64,604,68],[576,6,605,8],[576,7,605,9],[576,8,605,10],[577,6,606,8],[577,10,606,12,"anchor"],[577,16,606,18],[577,19,606,21,"childMatchingGroup"],[577,37,606,39],[577,39,606,41,"route"],[577,44,606,46],[578,6,607,8],[579,6,608,8],[579,10,608,12],[579,11,608,13,"options"],[579,18,608,20],[579,19,608,21,"internal_stripLoadRoute"],[579,42,608,44],[579,44,608,46],[580,8,609,12],[580,14,609,18,"loaded"],[580,20,609,24],[580,23,609,27,"node"],[580,27,609,31],[580,28,609,32,"loadRoute"],[580,37,609,41],[580,38,609,42],[580,39,609,43],[581,8,610,12],[581,12,610,16,"loaded"],[581,18,610,22],[581,20,610,24,"unstable_settings"],[581,37,610,41],[581,39,610,43],[582,10,611,16],[582,14,611,20],[583,12,612,20],[584,12,613,20,"anchor"],[584,18,613,26],[584,21,614,24,"loaded"],[584,27,614,30],[584,28,614,31,"unstable_settings"],[584,45,614,48],[584,46,614,49,"anchor"],[584,52,614,55],[584,56,614,59,"loaded"],[584,62,614,65],[584,63,614,66,"unstable_settings"],[584,80,614,83],[584,81,614,84,"initialRouteName"],[584,97,614,100],[584,101,614,104,"anchor"],[584,107,614,110],[585,10,615,16],[585,11,615,17],[585,12,616,16],[585,19,616,23,"error"],[585,24,616,28],[585,26,616,30],[586,12,617,20],[586,16,617,24,"error"],[586,21,617,29],[586,33,617,41,"Error"],[586,38,617,46],[586,40,617,48],[587,14,618,24],[587,18,618,28],[587,19,618,29,"error"],[587,24,618,34],[587,25,618,35,"message"],[587,32,618,42],[587,33,618,43,"match"],[587,38,618,48],[587,39,618,49],[587,76,618,86],[587,77,618,87],[587,79,618,89],[588,16,619,28],[588,22,619,34,"error"],[588,27,619,39],[589,14,620,24],[590,12,621,20],[591,10,622,16],[592,10,623,16],[592,14,623,20,"groupName"],[592,23,623,29],[592,25,623,31],[593,12,624,20],[594,12,625,20],[594,18,625,26,"groupSpecificInitialRouteName"],[594,47,625,55],[594,50,625,58,"loaded"],[594,56,625,64],[594,57,625,65,"unstable_settings"],[594,74,625,82],[594,77,625,85,"groupName"],[594,86,625,94],[594,87,625,95],[594,89,625,97,"anchor"],[594,95,625,103],[594,99,626,24,"loaded"],[594,105,626,30],[594,106,626,31,"unstable_settings"],[594,123,626,48],[594,126,626,51,"groupName"],[594,135,626,60],[594,136,626,61],[594,138,626,63,"initialRouteName"],[594,154,626,79],[595,12,627,20,"anchor"],[595,18,627,26],[595,21,627,29,"groupSpecificInitialRouteName"],[595,50,627,58],[595,54,627,62,"anchor"],[595,60,627,68],[596,10,628,16],[597,8,629,12],[598,6,630,8],[599,6,631,8],[599,10,631,12,"anchor"],[599,16,631,18],[599,18,631,20],[600,8,632,12],[600,14,632,18,"anchorRoute"],[600,25,632,29],[600,28,632,32,"node"],[600,32,632,36],[600,33,632,37,"children"],[600,41,632,45],[600,42,632,46,"find"],[600,46,632,50],[600,47,632,52,"child"],[600,52,632,57],[600,56,632,62,"child"],[600,61,632,67],[600,62,632,68,"route"],[600,67,632,73],[600,72,632,78,"anchor"],[600,78,632,84],[600,79,632,85],[601,8,633,12],[601,12,633,16],[601,13,633,17,"anchorRoute"],[601,24,633,28],[601,26,633,30],[602,10,634,16],[602,16,634,22,"validAnchorRoutes"],[602,33,634,39],[602,36,634,42,"node"],[602,40,634,46],[602,41,634,47,"children"],[602,49,634,55],[602,50,635,21,"filter"],[602,56,635,27],[602,57,635,29,"child"],[602,62,635,34],[602,66,635,39],[602,67,635,40,"child"],[602,72,635,45],[602,73,635,46,"generated"],[602,82,635,55],[602,83,635,56],[602,84,636,21,"map"],[602,87,636,24],[602,88,636,26,"child"],[602,93,636,31],[602,97,636,36],[602,101,636,40,"child"],[602,106,636,45],[602,107,636,46,"route"],[602,112,636,51],[602,115,636,54],[602,116,636,55],[602,117,637,21,"join"],[602,121,637,25],[602,122,637,26],[602,126,637,30],[602,127,637,31],[603,10,638,16],[603,14,638,20,"groupName"],[603,23,638,29],[603,25,638,31],[604,12,639,20],[604,18,639,26],[604,22,639,30,"Error"],[604,27,639,35],[604,28,639,36],[604,38,639,46,"node"],[604,42,639,50],[604,43,639,51,"contextKey"],[604,53,639,61],[604,77,639,85,"anchor"],[604,83,639,91],[604,100,639,108,"groupName"],[604,109,639,117],[604,135,639,143,"validAnchorRoutes"],[604,152,639,160],[604,154,639,162],[604,155,639,163],[605,10,640,16],[605,11,640,17],[605,17,641,21],[606,12,642,20],[606,18,642,26],[606,22,642,30,"Error"],[606,27,642,35],[606,28,642,36],[606,38,642,46,"node"],[606,42,642,50],[606,43,642,51,"contextKey"],[606,53,642,61],[606,77,642,85,"anchor"],[606,83,642,91],[606,108,642,116,"validAnchorRoutes"],[606,125,642,133],[606,127,642,135],[606,128,642,136],[607,10,643,16],[608,8,644,12],[609,8,645,12],[610,8,646,12,"node"],[610,12,646,16],[610,13,646,17,"initialRouteName"],[610,29,646,33],[610,32,646,36,"anchor"],[610,38,646,42],[611,8,647,12,"entryPoints"],[611,19,647,23],[611,20,647,24,"push"],[611,24,647,28],[611,25,647,29,"anchorRoute"],[611,36,647,40],[611,37,647,41,"contextKey"],[611,47,647,51],[611,48,647,52],[612,6,648,8],[613,6,649,8],[613,11,649,13],[613,17,649,19,"child"],[613,22,649,24],[613,26,649,28,"node"],[613,30,649,32],[613,31,649,33,"children"],[613,39,649,41],[613,41,649,43],[614,8,650,12,"crawlAndAppendInitialRoutesAndEntryFiles"],[614,48,650,52],[614,49,650,53,"child"],[614,54,650,58],[614,56,650,60,"options"],[614,63,650,67],[614,65,650,69,"entryPoints"],[614,76,650,80],[614,77,650,81],[615,6,651,8],[616,4,652,4],[617,2,653,0],[618,2,654,0],[618,11,654,9,"getMostSpecific"],[618,26,654,24,"getMostSpecific"],[618,27,654,25,"routes"],[618,33,654,31],[618,35,654,33],[619,4,655,4],[619,10,655,10,"route"],[619,15,655,15],[619,18,655,18,"routes"],[619,24,655,24],[619,25,655,25,"routes"],[619,31,655,31],[619,32,655,32,"length"],[619,38,655,38],[619,41,655,41],[619,42,655,42],[619,43,655,43],[620,4,656,4],[620,8,656,8],[620,9,656,9,"routes"],[620,15,656,15],[620,16,656,16],[620,17,656,17],[620,18,656,18],[620,20,656,20],[621,6,657,8],[621,12,657,14],[621,16,657,18,"Error"],[621,21,657,23],[621,22,657,24],[621,34,657,36,"route"],[621,39,657,41],[621,40,657,42,"contextKey"],[621,50,657,52],[621,120,657,122],[621,121,657,123],[622,4,658,4],[623,4,659,4],[624,4,660,4],[625,4,661,4],[625,11,661,11,"routes"],[625,17,661,17],[625,18,661,18,"routes"],[625,24,661,24],[625,25,661,25,"length"],[625,31,661,31],[625,34,661,34],[625,35,661,35],[625,36,661,36],[626,2,662,0],[627,0,662,1],[627,3]],"functionMap":{"names":["<global>","getRoutes","getDirectoryTree","getValidDestinations","contextKeys.map$argument_0","ignoreList.some$argument_0","getValidDestinations.find$argument_0","node.loadRoute","getNameFromRedirectPath","getNameWithoutInvisibleSegmentsFromRedirectPath","getSourceContextKeyFromRedirectSource","flattenDirectoryTreeToRoutes","getFileMeta","extrapolateGroups","generateDynamic","path.split.map$argument_0","path.split.map.filter$argument_0","appendSitemapRoute","appendNotFoundRoute","getLayoutNode","node.children.find$argument_0","crawlAndAppendInitialRoutesAndEntryFiles","node.children.filter$argument_0","node.children.filter.map$argument_0","getMostSpecific"],"mappings":"AAA;ACoB;CDW;AEI;iCCmB;sDCE;SDK;KDE;oCGY,uCH;kDIK,2DJ;oCGmC,uCH;qEIG,2DJ;4BG2B,+BH;YKW;aL+B;CF8K;AQC;CRK;ASC;CTE;AUE;CVK;AWI;CX2C;AYC;CZwD;AaM;CbmB;AcC;aCG;KDS;gBEC,gBF;CdE;AiBC;CjBS;AkBC;ClBS;AmBC;kDCO;KDE;CnB6B;AqBC;sDDoB;SCE;mDD2B,iCC;4BCG,2BD;yBEC,6BF;CrBiB;AwBC;CxBQ"},"hasCjsExports":true},"type":"js/module"}]}