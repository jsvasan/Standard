{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n  'use strict';\n\n  var validateFormat = process.env.NODE_ENV !== \"production\" ? function (format) {\n    if (format === undefined) {\n      throw new Error('invariant(...): Second argument must be a string.');\n    }\n  } : function (format) {};\n  /**\n   * Use invariant() to assert state which your program assumes to be true.\n   *\n   * Provide sprintf-style format (only %s is supported) and arguments to provide\n   * information about what broke and what you were expecting.\n   *\n   * The invariant message will be stripped in production, but the invariant will\n   * remain to ensure logic does not differ in production.\n   */\n\n  function invariant(condition, format) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    validateFormat(format);\n    if (!condition) {\n      var error;\n      if (format === undefined) {\n        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n      } else {\n        var argIndex = 0;\n        error = new Error(format.replace(/%s/g, function () {\n          return String(args[argIndex++]);\n        }));\n        error.name = 'Invariant Violation';\n      }\n      error.framesToPop = 1; // Skip invariant's own stack frame.\n\n      throw error;\n    }\n  }\n  module.exports = invariant;\n});","lineCount":49,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,2,9,0],[10,14,9,12],[12,2,11,0],[12,6,11,4,"validateFormat"],[12,20,11,18],[12,23,11,21,"process"],[12,30,11,28],[12,31,11,29,"env"],[12,34,11,32],[12,35,11,33,"NODE_ENV"],[12,43,11,41],[12,48,11,46],[12,60,11,58],[12,63,11,61],[12,73,11,71,"format"],[12,79,11,77],[12,81,11,79],[13,4,12,2],[13,8,12,6,"format"],[13,14,12,12],[13,19,12,17,"undefined"],[13,28,12,26],[13,30,12,28],[14,6,13,4],[14,12,13,10],[14,16,13,14,"Error"],[14,21,13,19],[14,22,13,20],[14,73,13,71],[14,74,13,72],[15,4,14,2],[16,2,15,0],[16,3,15,1],[16,6,15,4],[16,16,15,14,"format"],[16,22,15,20],[16,24,15,22],[16,25,15,23],[16,26,15,24],[17,2,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[27,2,26,0],[27,11,26,9,"invariant"],[27,20,26,18,"invariant"],[27,21,26,19,"condition"],[27,30,26,28],[27,32,26,30,"format"],[27,38,26,36],[27,40,26,38],[28,4,27,2],[28,9,27,7],[28,13,27,11,"_len"],[28,17,27,15],[28,20,27,18,"arguments"],[28,29,27,27],[28,30,27,28,"length"],[28,36,27,34],[28,38,27,36,"args"],[28,42,27,40],[28,45,27,43],[28,49,27,47,"Array"],[28,54,27,52],[28,55,27,53,"_len"],[28,59,27,57],[28,62,27,60],[28,63,27,61],[28,66,27,64,"_len"],[28,70,27,68],[28,73,27,71],[28,74,27,72],[28,77,27,75],[28,78,27,76],[28,79,27,77],[28,81,27,79,"_key"],[28,85,27,83],[28,88,27,86],[28,89,27,87],[28,91,27,89,"_key"],[28,95,27,93],[28,98,27,96,"_len"],[28,102,27,100],[28,104,27,102,"_key"],[28,108,27,106],[28,110,27,108],[28,112,27,110],[29,6,28,4,"args"],[29,10,28,8],[29,11,28,9,"_key"],[29,15,28,13],[29,18,28,16],[29,19,28,17],[29,20,28,18],[29,23,28,21,"arguments"],[29,32,28,30],[29,33,28,31,"_key"],[29,37,28,35],[29,38,28,36],[30,4,29,2],[31,4,31,2,"validateFormat"],[31,18,31,16],[31,19,31,17,"format"],[31,25,31,23],[31,26,31,24],[32,4,33,2],[32,8,33,6],[32,9,33,7,"condition"],[32,18,33,16],[32,20,33,18],[33,6,34,4],[33,10,34,8,"error"],[33,15,34,13],[34,6,36,4],[34,10,36,8,"format"],[34,16,36,14],[34,21,36,19,"undefined"],[34,30,36,28],[34,32,36,30],[35,8,37,6,"error"],[35,13,37,11],[35,16,37,14],[35,20,37,18,"Error"],[35,25,37,23],[35,26,37,24],[35,94,37,92],[35,97,37,95],[35,158,37,156],[35,159,37,157],[36,6,38,4],[36,7,38,5],[36,13,38,11],[37,8,39,6],[37,12,39,10,"argIndex"],[37,20,39,18],[37,23,39,21],[37,24,39,22],[38,8,40,6,"error"],[38,13,40,11],[38,16,40,14],[38,20,40,18,"Error"],[38,25,40,23],[38,26,40,24,"format"],[38,32,40,30],[38,33,40,31,"replace"],[38,40,40,38],[38,41,40,39],[38,46,40,44],[38,48,40,46],[38,60,40,58],[39,10,41,8],[39,17,41,15,"String"],[39,23,41,21],[39,24,41,22,"args"],[39,28,41,26],[39,29,41,27,"argIndex"],[39,37,41,35],[39,39,41,37],[39,40,41,38],[39,41,41,39],[40,8,42,6],[40,9,42,7],[40,10,42,8],[40,11,42,9],[41,8,43,6,"error"],[41,13,43,11],[41,14,43,12,"name"],[41,18,43,16],[41,21,43,19],[41,42,43,40],[42,6,44,4],[43,6,46,4,"error"],[43,11,46,9],[43,12,46,10,"framesToPop"],[43,23,46,21],[43,26,46,24],[43,27,46,25],[43,28,46,26],[43,29,46,27],[45,6,48,4],[45,12,48,10,"error"],[45,17,48,15],[46,4,49,2],[47,2,50,0],[48,2,52,0,"module"],[48,8,52,6],[48,9,52,7,"exports"],[48,16,52,14],[48,19,52,17,"invariant"],[48,28,52,26],[49,0,52,27],[49,3]],"functionMap":{"names":["<global>","<anonymous>","invariant","format.replace$argument_1"],"mappings":"AAA;6DCU;CDI,GC,oBD;AEW;8CCc;ODE;CFQ"}},"type":"js/module"}]}