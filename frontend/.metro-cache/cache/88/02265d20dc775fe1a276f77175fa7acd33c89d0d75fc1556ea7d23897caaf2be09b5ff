{"dependencies":[{"name":"./errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":173},"end":{"line":7,"column":44,"index":217}}],"key":"rEld05quROH+iA6QLT6kkvqJ/qc=","exportNames":["*"]}},{"name":"./fetchAsync","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":218},"end":{"line":8,"column":42,"index":260}}],"key":"GJrX1EMy+DxI7FSLX0wJbybQg2o=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.fetchThenEvalAsync = fetchThenEvalAsync;\n  var _errors = require(_dependencyMap[0], \"./errors\");\n  var _fetchAsync = require(_dependencyMap[1], \"./fetchAsync\");\n  /**\n   * Copyright Â© 2022 650 Industries.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  /**\n   * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n   *\n   * @param url Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.\n   */\n  function fetchThenEvalAsync(url) {\n    return (0, _fetchAsync.fetchAsync)(url).then(_ref => {\n      var body = _ref.body,\n        status = _ref.status,\n        headers = _ref.headers;\n      if (headers?.has?.('Content-Type') != null && headers.get('Content-Type').includes('application/json')) {\n        // Errors are returned as JSON.\n        throw new Error(JSON.parse(body).message || `Unknown error fetching '${url}'`);\n      }\n      if (status === 200) {\n        // eslint-disable-next-line no-eval\n        return eval(body);\n      } else {\n        // Format Metro errors if possible.\n        if (process.env.NODE_ENV === 'development') {\n          // body can be an error from Metro if a module is missing.\n          // {\"originModulePath\":\"/Users/evanbacon/Documents/GitHub/expo/.\",\"targetModuleName\":\"./http://localhost:8081/node_modules/react-native/index.js\",\"message\":\"...\"}\n          var error = jsonParseOptional(body);\n          if (error) {\n            // TODO: This is essentially like the Metro native red box errors. We should do a better job formatting them so\n            // the user experience doesn't feel bad. This can be tested by loading a split bundle that results in a missing module error from Metro.\n            throw new _errors.MetroServerError(error, url);\n          }\n        }\n        throw new Error(`Failed to load split bundle from URL: ${url}\\n${body}`);\n      }\n    });\n  }\n  function jsonParseOptional(json) {\n    try {\n      return JSON.parse(json);\n    } catch {\n      return null;\n    }\n  }\n});","lineCount":55,"map":[[6,2,7,0],[6,6,7,0,"_errors"],[6,13,7,0],[6,16,7,0,"require"],[6,23,7,0],[6,24,7,0,"_dependencyMap"],[6,38,7,0],[7,2,8,0],[7,6,8,0,"_fetchAsync"],[7,17,8,0],[7,20,8,0,"require"],[7,27,8,0],[7,28,8,0,"_dependencyMap"],[7,42,8,0],[8,2,1,0],[9,0,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[15,2,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,2,14,7],[20,11,14,16,"fetchThenEvalAsync"],[20,29,14,34,"fetchThenEvalAsync"],[20,30,14,35,"url"],[20,33,14,46],[20,35,14,63],[21,4,15,2],[21,11,15,9],[21,15,15,9,"fetchAsync"],[21,37,15,19],[21,39,15,20,"url"],[21,42,15,23],[21,43,15,24],[21,44,15,25,"then"],[21,48,15,29],[21,49,15,30,"_ref"],[21,53,15,30],[21,57,15,61],[22,6,15,61],[22,10,15,33,"body"],[22,14,15,37],[22,17,15,37,"_ref"],[22,21,15,37],[22,22,15,33,"body"],[22,26,15,37],[23,8,15,39,"status"],[23,14,15,45],[23,17,15,45,"_ref"],[23,21,15,45],[23,22,15,39,"status"],[23,28,15,45],[24,8,15,47,"headers"],[24,15,15,54],[24,18,15,54,"_ref"],[24,22,15,54],[24,23,15,47,"headers"],[24,30,15,54],[25,6,16,4],[25,10,17,6,"headers"],[25,17,17,13],[25,19,17,15,"has"],[25,22,17,18],[25,25,17,21],[25,39,17,35],[25,40,17,36],[25,44,17,40],[25,48,17,44],[25,52,18,6,"headers"],[25,59,18,13],[25,60,18,14,"get"],[25,63,18,17],[25,64,18,18],[25,78,18,32],[25,79,18,33],[25,80,18,35,"includes"],[25,88,18,43],[25,89,18,44],[25,107,18,62],[25,108,18,63],[25,110,19,6],[26,8,20,6],[27,8,21,6],[27,14,21,12],[27,18,21,16,"Error"],[27,23,21,21],[27,24,21,22,"JSON"],[27,28,21,26],[27,29,21,27,"parse"],[27,34,21,32],[27,35,21,33,"body"],[27,39,21,37],[27,40,21,38],[27,41,21,39,"message"],[27,48,21,46],[27,52,21,50],[27,79,21,77,"url"],[27,82,21,80],[27,85,21,83],[27,86,21,84],[28,6,22,4],[29,6,24,4],[29,10,24,8,"status"],[29,16,24,14],[29,21,24,19],[29,24,24,22],[29,26,24,24],[30,8,25,6],[31,8,26,6],[31,15,26,13,"eval"],[31,19,26,17],[31,20,26,18,"body"],[31,24,26,22],[31,25,26,23],[32,6,27,4],[32,7,27,5],[32,13,27,11],[33,8,28,6],[34,8,29,6],[34,12,29,10,"process"],[34,19,29,17],[34,20,29,18,"env"],[34,23,29,21],[34,24,29,22,"NODE_ENV"],[34,32,29,30],[34,37,29,35],[34,50,29,48],[34,52,29,50],[35,10,30,8],[36,10,31,8],[37,10,32,8],[37,14,32,14,"error"],[37,19,32,19],[37,22,32,22,"jsonParseOptional"],[37,39,32,39],[37,40,32,40,"body"],[37,44,32,44],[37,45,32,45],[38,10,33,8],[38,14,33,12,"error"],[38,19,33,17],[38,21,33,19],[39,12,34,10],[40,12,35,10],[41,12,36,10],[41,18,36,16],[41,22,36,20,"MetroServerError"],[41,46,36,36],[41,47,36,37,"error"],[41,52,36,42],[41,54,36,44,"url"],[41,57,36,47],[41,58,36,48],[42,10,37,8],[43,8,38,6],[44,8,40,6],[44,14,40,12],[44,18,40,16,"Error"],[44,23,40,21],[44,24,40,22],[44,65,40,63,"url"],[44,68,40,66],[44,73,40,71,"body"],[44,77,40,75],[44,79,40,77],[44,80,40,78],[45,6,41,4],[46,4,42,2],[46,5,42,3],[46,6,42,4],[47,2,43,0],[48,2,45,0],[48,11,45,9,"jsonParseOptional"],[48,28,45,26,"jsonParseOptional"],[48,29,45,27,"json"],[48,33,45,39],[48,35,45,46],[49,4,46,2],[49,8,46,6],[50,6,47,4],[50,13,47,11,"JSON"],[50,17,47,15],[50,18,47,16,"parse"],[50,23,47,21],[50,24,47,22,"json"],[50,28,47,26],[50,29,47,27],[51,4,48,2],[51,5,48,3],[51,6,48,4],[51,12,48,10],[52,6,49,4],[52,13,49,11],[52,17,49,15],[53,4,50,2],[54,2,51,0],[55,0,51,1],[55,3]],"functionMap":{"names":["<global>","fetchThenEvalAsync","fetchAsync.then$argument_0","jsonParseOptional"],"mappings":"AAA;OCa;8BCC;GD2B;CDC;AGE;CHM"}},"type":"js/module"}]}