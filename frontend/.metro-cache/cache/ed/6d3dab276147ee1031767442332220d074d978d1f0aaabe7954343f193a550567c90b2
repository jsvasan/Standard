{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@babel/runtime/helpers/createForOfIteratorHelperLoose","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":100,"index":100}}],"key":"Y/2Rvrgl4aDxeJKdk1U58Vc2xw8=","exportNames":["*"]}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":311},"end":{"line":12,"column":43,"index":354}}],"key":"bGUa+dDG2WEhPiIlobT3urS95UE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _createForOfIteratorHelperLoose2 = _interopRequireDefault(require(_dependencyMap[1], \"@babel/runtime/helpers/createForOfIteratorHelperLoose\"));\n  var _invariant = _interopRequireDefault(require(_dependencyMap[2], \"fbjs/lib/invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  class ChildListCollection {\n    constructor() {\n      this._cellKeyToChildren = new Map();\n      this._childrenToCellKey = new Map();\n    }\n    add(list, cellKey) {\n      var _this$_cellKeyToChild;\n      (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n      var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild !== void 0 ? _this$_cellKeyToChild : new Set();\n      cellLists.add(list);\n      this._cellKeyToChildren.set(cellKey, cellLists);\n      this._childrenToCellKey.set(list, cellKey);\n    }\n    remove(list) {\n      var cellKey = this._childrenToCellKey.get(list);\n      (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');\n      this._childrenToCellKey.delete(list);\n      var cellLists = this._cellKeyToChildren.get(cellKey);\n      (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');\n      cellLists.delete(list);\n      if (cellLists.size === 0) {\n        this._cellKeyToChildren.delete(cellKey);\n      }\n    }\n    forEach(fn) {\n      for (var _iterator = (0, _createForOfIteratorHelperLoose2.default)(this._cellKeyToChildren.values()), _step; !(_step = _iterator()).done;) {\n        var listSet = _step.value;\n        for (var _iterator2 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step2; !(_step2 = _iterator2()).done;) {\n          var list = _step2.value;\n          fn(list);\n        }\n      }\n    }\n    forEachInCell(cellKey, fn) {\n      var _this$_cellKeyToChild2;\n      var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild2 !== void 0 ? _this$_cellKeyToChild2 : [];\n      for (var _iterator3 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step3; !(_step3 = _iterator3()).done;) {\n        var list = _step3.value;\n        fn(list);\n      }\n    }\n    anyInCell(cellKey, fn) {\n      var _this$_cellKeyToChild3;\n      var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild3 !== void 0 ? _this$_cellKeyToChild3 : [];\n      for (var _iterator4 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step4; !(_step4 = _iterator4()).done;) {\n        var list = _step4.value;\n        if (fn(list)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    size() {\n      return this._childrenToCellKey.size;\n    }\n  }\n  exports.default = ChildListCollection;\n});","lineCount":76,"map":[[7,2,1,0],[7,6,1,0,"_createForOfIteratorHelperLoose2"],[7,38,1,0],[7,41,1,0,"_interopRequireDefault"],[7,63,1,0],[7,64,1,0,"require"],[7,71,1,0],[7,72,1,0,"_dependencyMap"],[7,86,1,0],[8,2,12,0],[8,6,12,0,"_invariant"],[8,16,12,0],[8,19,12,0,"_interopRequireDefault"],[8,41,12,0],[8,42,12,0,"require"],[8,49,12,0],[8,50,12,0,"_dependencyMap"],[8,64,12,0],[9,2,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,0,7,0],[15,0,8,0],[16,0,9,0],[17,0,10,0],[19,2,13,15],[19,8,13,21,"ChildListCollection"],[19,27,13,40],[19,28,13,41],[20,4,14,2,"constructor"],[20,15,14,13,"constructor"],[20,16,14,13],[20,18,14,16],[21,6,15,4],[21,10,15,8],[21,11,15,9,"_cellKeyToChildren"],[21,29,15,27],[21,32,15,30],[21,36,15,34,"Map"],[21,39,15,37],[21,40,15,38],[21,41,15,39],[22,6,16,4],[22,10,16,8],[22,11,16,9,"_childrenToCellKey"],[22,29,16,27],[22,32,16,30],[22,36,16,34,"Map"],[22,39,16,37],[22,40,16,38],[22,41,16,39],[23,4,17,2],[24,4,18,2,"add"],[24,7,18,5,"add"],[24,8,18,6,"list"],[24,12,18,10],[24,14,18,12,"cellKey"],[24,21,18,19],[24,23,18,21],[25,6,19,4],[25,10,19,8,"_this$_cellKeyToChild"],[25,31,19,29],[26,6,20,4],[26,10,20,4,"invariant"],[26,28,20,13],[26,30,20,14],[26,31,20,15],[26,35,20,19],[26,36,20,20,"_childrenToCellKey"],[26,54,20,38],[26,55,20,39,"has"],[26,58,20,42],[26,59,20,43,"list"],[26,63,20,47],[26,64,20,48],[26,66,20,50],[26,108,20,92],[26,109,20,93],[27,6,21,4],[27,10,21,8,"cellLists"],[27,19,21,17],[27,22,21,20],[27,23,21,21,"_this$_cellKeyToChild"],[27,44,21,42],[27,47,21,45],[27,51,21,49],[27,52,21,50,"_cellKeyToChildren"],[27,70,21,68],[27,71,21,69,"get"],[27,74,21,72],[27,75,21,73,"cellKey"],[27,82,21,80],[27,83,21,81],[27,89,21,87],[27,93,21,91],[27,97,21,95,"_this$_cellKeyToChild"],[27,118,21,116],[27,123,21,121],[27,128,21,126],[27,129,21,127],[27,132,21,130,"_this$_cellKeyToChild"],[27,153,21,151],[27,156,21,154],[27,160,21,158,"Set"],[27,163,21,161],[27,164,21,162],[27,165,21,163],[28,6,22,4,"cellLists"],[28,15,22,13],[28,16,22,14,"add"],[28,19,22,17],[28,20,22,18,"list"],[28,24,22,22],[28,25,22,23],[29,6,23,4],[29,10,23,8],[29,11,23,9,"_cellKeyToChildren"],[29,29,23,27],[29,30,23,28,"set"],[29,33,23,31],[29,34,23,32,"cellKey"],[29,41,23,39],[29,43,23,41,"cellLists"],[29,52,23,50],[29,53,23,51],[30,6,24,4],[30,10,24,8],[30,11,24,9,"_childrenToCellKey"],[30,29,24,27],[30,30,24,28,"set"],[30,33,24,31],[30,34,24,32,"list"],[30,38,24,36],[30,40,24,38,"cellKey"],[30,47,24,45],[30,48,24,46],[31,4,25,2],[32,4,26,2,"remove"],[32,10,26,8,"remove"],[32,11,26,9,"list"],[32,15,26,13],[32,17,26,15],[33,6,27,4],[33,10,27,8,"cellKey"],[33,17,27,15],[33,20,27,18],[33,24,27,22],[33,25,27,23,"_childrenToCellKey"],[33,43,27,41],[33,44,27,42,"get"],[33,47,27,45],[33,48,27,46,"list"],[33,52,27,50],[33,53,27,51],[34,6,28,4],[34,10,28,4,"invariant"],[34,28,28,13],[34,30,28,14,"cellKey"],[34,37,28,21],[34,41,28,25],[34,45,28,29],[34,47,28,31],[34,88,28,72],[34,89,28,73],[35,6,29,4],[35,10,29,8],[35,11,29,9,"_childrenToCellKey"],[35,29,29,27],[35,30,29,28,"delete"],[35,36,29,34],[35,37,29,35,"list"],[35,41,29,39],[35,42,29,40],[36,6,30,4],[36,10,30,8,"cellLists"],[36,19,30,17],[36,22,30,20],[36,26,30,24],[36,27,30,25,"_cellKeyToChildren"],[36,45,30,43],[36,46,30,44,"get"],[36,49,30,47],[36,50,30,48,"cellKey"],[36,57,30,55],[36,58,30,56],[37,6,31,4],[37,10,31,4,"invariant"],[37,28,31,13],[37,30,31,14,"cellLists"],[37,39,31,23],[37,41,31,25],[37,84,31,68],[37,85,31,69],[38,6,32,4,"cellLists"],[38,15,32,13],[38,16,32,14,"delete"],[38,22,32,20],[38,23,32,21,"list"],[38,27,32,25],[38,28,32,26],[39,6,33,4],[39,10,33,8,"cellLists"],[39,19,33,17],[39,20,33,18,"size"],[39,24,33,22],[39,29,33,27],[39,30,33,28],[39,32,33,30],[40,8,34,6],[40,12,34,10],[40,13,34,11,"_cellKeyToChildren"],[40,31,34,29],[40,32,34,30,"delete"],[40,38,34,36],[40,39,34,37,"cellKey"],[40,46,34,44],[40,47,34,45],[41,6,35,4],[42,4,36,2],[43,4,37,2,"forEach"],[43,11,37,9,"forEach"],[43,12,37,10,"fn"],[43,14,37,12],[43,16,37,14],[44,6,38,4],[44,11,38,9],[44,15,38,13,"_iterator"],[44,24,38,22],[44,27,38,25],[44,31,38,25,"_createForOfIteratorHelperLoose"],[44,71,38,56],[44,73,38,57],[44,77,38,61],[44,78,38,62,"_cellKeyToChildren"],[44,96,38,80],[44,97,38,81,"values"],[44,103,38,87],[44,104,38,88],[44,105,38,89],[44,106,38,90],[44,108,38,92,"_step"],[44,113,38,97],[44,115,38,99],[44,116,38,100],[44,117,38,101,"_step"],[44,122,38,106],[44,125,38,109,"_iterator"],[44,134,38,118],[44,135,38,119],[44,136,38,120],[44,138,38,122,"done"],[44,142,38,126],[44,145,38,129],[45,8,39,6],[45,12,39,10,"listSet"],[45,19,39,17],[45,22,39,20,"_step"],[45,27,39,25],[45,28,39,26,"value"],[45,33,39,31],[46,8,40,6],[46,13,40,11],[46,17,40,15,"_iterator2"],[46,27,40,25],[46,30,40,28],[46,34,40,28,"_createForOfIteratorHelperLoose"],[46,74,40,59],[46,76,40,60,"listSet"],[46,83,40,67],[46,84,40,68],[46,86,40,70,"_step2"],[46,92,40,76],[46,94,40,78],[46,95,40,79],[46,96,40,80,"_step2"],[46,102,40,86],[46,105,40,89,"_iterator2"],[46,115,40,99],[46,116,40,100],[46,117,40,101],[46,119,40,103,"done"],[46,123,40,107],[46,126,40,110],[47,10,41,8],[47,14,41,12,"list"],[47,18,41,16],[47,21,41,19,"_step2"],[47,27,41,25],[47,28,41,26,"value"],[47,33,41,31],[48,10,42,8,"fn"],[48,12,42,10],[48,13,42,11,"list"],[48,17,42,15],[48,18,42,16],[49,8,43,6],[50,6,44,4],[51,4,45,2],[52,4,46,2,"forEachInCell"],[52,17,46,15,"forEachInCell"],[52,18,46,16,"cellKey"],[52,25,46,23],[52,27,46,25,"fn"],[52,29,46,27],[52,31,46,29],[53,6,47,4],[53,10,47,8,"_this$_cellKeyToChild2"],[53,32,47,30],[54,6,48,4],[54,10,48,8,"listSet"],[54,17,48,15],[54,20,48,18],[54,21,48,19,"_this$_cellKeyToChild2"],[54,43,48,41],[54,46,48,44],[54,50,48,48],[54,51,48,49,"_cellKeyToChildren"],[54,69,48,67],[54,70,48,68,"get"],[54,73,48,71],[54,74,48,72,"cellKey"],[54,81,48,79],[54,82,48,80],[54,88,48,86],[54,92,48,90],[54,96,48,94,"_this$_cellKeyToChild2"],[54,118,48,116],[54,123,48,121],[54,128,48,126],[54,129,48,127],[54,132,48,130,"_this$_cellKeyToChild2"],[54,154,48,152],[54,157,48,155],[54,159,48,157],[55,6,49,4],[55,11,49,9],[55,15,49,13,"_iterator3"],[55,25,49,23],[55,28,49,26],[55,32,49,26,"_createForOfIteratorHelperLoose"],[55,72,49,57],[55,74,49,58,"listSet"],[55,81,49,65],[55,82,49,66],[55,84,49,68,"_step3"],[55,90,49,74],[55,92,49,76],[55,93,49,77],[55,94,49,78,"_step3"],[55,100,49,84],[55,103,49,87,"_iterator3"],[55,113,49,97],[55,114,49,98],[55,115,49,99],[55,117,49,101,"done"],[55,121,49,105],[55,124,49,108],[56,8,50,6],[56,12,50,10,"list"],[56,16,50,14],[56,19,50,17,"_step3"],[56,25,50,23],[56,26,50,24,"value"],[56,31,50,29],[57,8,51,6,"fn"],[57,10,51,8],[57,11,51,9,"list"],[57,15,51,13],[57,16,51,14],[58,6,52,4],[59,4,53,2],[60,4,54,2,"anyInCell"],[60,13,54,11,"anyInCell"],[60,14,54,12,"cellKey"],[60,21,54,19],[60,23,54,21,"fn"],[60,25,54,23],[60,27,54,25],[61,6,55,4],[61,10,55,8,"_this$_cellKeyToChild3"],[61,32,55,30],[62,6,56,4],[62,10,56,8,"listSet"],[62,17,56,15],[62,20,56,18],[62,21,56,19,"_this$_cellKeyToChild3"],[62,43,56,41],[62,46,56,44],[62,50,56,48],[62,51,56,49,"_cellKeyToChildren"],[62,69,56,67],[62,70,56,68,"get"],[62,73,56,71],[62,74,56,72,"cellKey"],[62,81,56,79],[62,82,56,80],[62,88,56,86],[62,92,56,90],[62,96,56,94,"_this$_cellKeyToChild3"],[62,118,56,116],[62,123,56,121],[62,128,56,126],[62,129,56,127],[62,132,56,130,"_this$_cellKeyToChild3"],[62,154,56,152],[62,157,56,155],[62,159,56,157],[63,6,57,4],[63,11,57,9],[63,15,57,13,"_iterator4"],[63,25,57,23],[63,28,57,26],[63,32,57,26,"_createForOfIteratorHelperLoose"],[63,72,57,57],[63,74,57,58,"listSet"],[63,81,57,65],[63,82,57,66],[63,84,57,68,"_step4"],[63,90,57,74],[63,92,57,76],[63,93,57,77],[63,94,57,78,"_step4"],[63,100,57,84],[63,103,57,87,"_iterator4"],[63,113,57,97],[63,114,57,98],[63,115,57,99],[63,117,57,101,"done"],[63,121,57,105],[63,124,57,108],[64,8,58,6],[64,12,58,10,"list"],[64,16,58,14],[64,19,58,17,"_step4"],[64,25,58,23],[64,26,58,24,"value"],[64,31,58,29],[65,8,59,6],[65,12,59,10,"fn"],[65,14,59,12],[65,15,59,13,"list"],[65,19,59,17],[65,20,59,18],[65,22,59,20],[66,10,60,8],[66,17,60,15],[66,21,60,19],[67,8,61,6],[68,6,62,4],[69,6,63,4],[69,13,63,11],[69,18,63,16],[70,4,64,2],[71,4,65,2,"size"],[71,8,65,6,"size"],[71,9,65,6],[71,11,65,9],[72,6,66,4],[72,13,66,11],[72,17,66,15],[72,18,66,16,"_childrenToCellKey"],[72,36,66,34],[72,37,66,35,"size"],[72,41,66,39],[73,4,67,2],[74,2,68,0],[75,2,68,1,"exports"],[75,9,68,1],[75,10,68,1,"default"],[75,17,68,1],[75,20,68,1,"ChildListCollection"],[75,39,68,1],[76,0,68,1],[76,3]],"functionMap":{"names":["<global>","ChildListCollection","constructor","add","remove","forEach","forEachInCell","anyInCell","size"],"mappings":"AAA;eCY;ECC;GDG;EEC;GFO;EGC;GHU;EIC;GJQ;EKC;GLO;EMC;GNU;EOC;GPE"}},"type":"js/module"}]}