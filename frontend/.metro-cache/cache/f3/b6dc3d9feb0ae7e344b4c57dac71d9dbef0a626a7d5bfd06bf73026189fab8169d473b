{"dependencies":[{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"./Font","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":45},"end":{"line":2,"column":45,"index":90}}],"key":"uhjJvb2CC+i2amHkDH4+UF8lIHQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"useFonts\", {\n    enumerable: true,\n    get: function () {\n      return useFonts;\n    }\n  });\n  var _react = require(_dependencyMap[0], \"react\");\n  var _Font = require(_dependencyMap[1], \"./Font\");\n  function isMapLoaded(map) {\n    if (typeof map === 'string') {\n      return (0, _Font.isLoaded)(map);\n    } else {\n      return Object.keys(map).every(fontFamily => (0, _Font.isLoaded)(fontFamily));\n    }\n  }\n  function useRuntimeFonts(map) {\n    const [loaded, setLoaded] = (0, _react.useState)(\n    // For web rehydration, we need to check if the fonts are already loaded during the static render.\n    // Native will also benefit from this optimization.\n    isMapLoaded(map));\n    const [error, setError] = (0, _react.useState)(null);\n    (0, _react.useEffect)(() => {\n      let isMounted = true;\n      (0, _Font.loadAsync)(map).then(() => {\n        if (isMounted) {\n          setLoaded(true);\n        }\n      }).catch(error => {\n        if (isMounted) {\n          setError(error);\n        }\n      });\n      return () => {\n        isMounted = false;\n      };\n    }, []);\n    return [loaded, error];\n  }\n  function useStaticFonts(map) {\n    (0, _Font.loadAsync)(map);\n    return [true, null];\n  }\n  // @needsAudit\n  /**\n   * Load a map of fonts at runtime with [`loadAsync`](#loadasyncfontfamilyorfontmap-source). This returns a `boolean` if the fonts are\n   * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n   *\n   * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n   *\n   * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n   * use the key in the `fontFamily` style prop of a `Text` element.\n   *\n   * @return\n   * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n   * loading.\n   * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n   *\n   * @example\n   * ```tsx\n   * const [loaded, error] = useFonts({\n   *   'Inter-Black': require('./assets/fonts/Inter-Black.otf'),\n   * });\n   * ```\n   */\n  const useFonts = true ? useStaticFonts : useRuntimeFonts;\n});","lineCount":72,"map":[[7,2,62,0,"Object"],[7,8,62,0],[7,9,62,0,"defineProperty"],[7,23,62,0],[7,24,62,0,"exports"],[7,31,62,0],[8,4,62,0,"enumerable"],[8,14,62,0],[9,4,62,0,"get"],[9,7,62,0],[9,18,62,0,"get"],[9,19,62,0],[10,6,62,0],[10,13,62,0,"useFonts"],[10,21,62,0],[11,4,62,0],[12,2,62,0],[13,2,1,0],[13,6,1,0,"_react"],[13,12,1,0],[13,15,1,0,"require"],[13,22,1,0],[13,23,1,0,"_dependencyMap"],[13,37,1,0],[14,2,2,0],[14,6,2,0,"_Font"],[14,11,2,0],[14,14,2,0,"require"],[14,21,2,0],[14,22,2,0,"_dependencyMap"],[14,36,2,0],[15,2,3,0],[15,11,3,9,"isMapLoaded"],[15,22,3,20,"isMapLoaded"],[15,23,3,21,"map"],[15,26,3,24],[15,28,3,26],[16,4,4,4],[16,8,4,8],[16,15,4,15,"map"],[16,18,4,18],[16,23,4,23],[16,31,4,31],[16,33,4,33],[17,6,5,8],[17,13,5,15],[17,17,5,15,"isLoaded"],[17,22,5,23],[17,23,5,23,"isLoaded"],[17,31,5,23],[17,33,5,24,"map"],[17,36,5,27],[17,37,5,28],[18,4,6,4],[18,5,6,5],[18,11,7,9],[19,6,8,8],[19,13,8,15,"Object"],[19,19,8,21],[19,20,8,22,"keys"],[19,24,8,26],[19,25,8,27,"map"],[19,28,8,30],[19,29,8,31],[19,30,8,32,"every"],[19,35,8,37],[19,36,8,39,"fontFamily"],[19,46,8,49],[19,50,8,54],[19,54,8,54,"isLoaded"],[19,59,8,62],[19,60,8,62,"isLoaded"],[19,68,8,62],[19,70,8,63,"fontFamily"],[19,80,8,73],[19,81,8,74],[19,82,8,75],[20,4,9,4],[21,2,10,0],[22,2,11,0],[22,11,11,9,"useRuntimeFonts"],[22,26,11,24,"useRuntimeFonts"],[22,27,11,25,"map"],[22,30,11,28],[22,32,11,30],[23,4,12,4],[23,10,12,10],[23,11,12,11,"loaded"],[23,17,12,17],[23,19,12,19,"setLoaded"],[23,28,12,28],[23,29,12,29],[23,32,12,32],[23,36,12,32,"useState"],[23,42,12,40],[23,43,12,40,"useState"],[23,51,12,40],[24,4,13,4],[25,4,14,4],[26,4,15,4,"isMapLoaded"],[26,15,15,15],[26,16,15,16,"map"],[26,19,15,19],[26,20,15,20],[26,21,15,21],[27,4,16,4],[27,10,16,10],[27,11,16,11,"error"],[27,16,16,16],[27,18,16,18,"setError"],[27,26,16,26],[27,27,16,27],[27,30,16,30],[27,34,16,30,"useState"],[27,40,16,38],[27,41,16,38,"useState"],[27,49,16,38],[27,51,16,39],[27,55,16,43],[27,56,16,44],[28,4,17,4],[28,8,17,4,"useEffect"],[28,14,17,13],[28,15,17,13,"useEffect"],[28,24,17,13],[28,26,17,14],[28,32,17,20],[29,6,18,8],[29,10,18,12,"isMounted"],[29,19,18,21],[29,22,18,24],[29,26,18,28],[30,6,19,8],[30,10,19,8,"loadAsync"],[30,15,19,17],[30,16,19,17,"loadAsync"],[30,25,19,17],[30,27,19,18,"map"],[30,30,19,21],[30,31,19,22],[30,32,20,13,"then"],[30,36,20,17],[30,37,20,18],[30,43,20,24],[31,8,21,12],[31,12,21,16,"isMounted"],[31,21,21,25],[31,23,21,27],[32,10,22,16,"setLoaded"],[32,19,22,25],[32,20,22,26],[32,24,22,30],[32,25,22,31],[33,8,23,12],[34,6,24,8],[34,7,24,9],[34,8,24,10],[34,9,25,13,"catch"],[34,14,25,18],[34,15,25,20,"error"],[34,20,25,25],[34,24,25,30],[35,8,26,12],[35,12,26,16,"isMounted"],[35,21,26,25],[35,23,26,27],[36,10,27,16,"setError"],[36,18,27,24],[36,19,27,25,"error"],[36,24,27,30],[36,25,27,31],[37,8,28,12],[38,6,29,8],[38,7,29,9],[38,8,29,10],[39,6,30,8],[39,13,30,15],[39,19,30,21],[40,8,31,12,"isMounted"],[40,17,31,21],[40,20,31,24],[40,25,31,29],[41,6,32,8],[41,7,32,9],[42,4,33,4],[42,5,33,5],[42,7,33,7],[42,9,33,9],[42,10,33,10],[43,4,34,4],[43,11,34,11],[43,12,34,12,"loaded"],[43,18,34,18],[43,20,34,20,"error"],[43,25,34,25],[43,26,34,26],[44,2,35,0],[45,2,36,0],[45,11,36,9,"useStaticFonts"],[45,25,36,23,"useStaticFonts"],[45,26,36,24,"map"],[45,29,36,27],[45,31,36,29],[46,4,37,4],[46,8,37,4,"loadAsync"],[46,13,37,13],[46,14,37,13,"loadAsync"],[46,23,37,13],[46,25,37,14,"map"],[46,28,37,17],[46,29,37,18],[47,4,38,4],[47,11,38,11],[47,12,38,12],[47,16,38,16],[47,18,38,18],[47,22,38,22],[47,23,38,23],[48,2,39,0],[49,2,40,0],[50,2,41,0],[51,0,42,0],[52,0,43,0],[53,0,44,0],[54,0,45,0],[55,0,46,0],[56,0,47,0],[57,0,48,0],[58,0,49,0],[59,0,50,0],[60,0,51,0],[61,0,52,0],[62,0,53,0],[63,0,54,0],[64,0,55,0],[65,0,56,0],[66,0,57,0],[67,0,58,0],[68,0,59,0],[69,0,60,0],[70,0,61,0],[71,2,62,7],[71,8,62,13,"useFonts"],[71,16,62,21],[71,19,62,24],[71,26,62,56,"useStaticFonts"],[71,40,62,70],[71,43,62,73,"useRuntimeFonts"],[71,58,62,88],[72,0,62,89],[72,3]],"functionMap":{"names":["<global>","isMapLoaded","Object.keys.every$argument_0","useRuntimeFonts","useEffect$argument_0","loadAsync.then$argument_0","loadAsync.then._catch$argument_0","<anonymous>","useStaticFonts"],"mappings":"AAA;ACE;sCCK,oCD;CDE;AGC;cCM;kBCG;SDI;mBEC;SFI;eGC;SHE;KDC;CHE;AQC;CRG"},"hasCjsExports":false},"type":"js/module"}]}