{"dependencies":[{"name":"./getRoutesCore","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":24,"index":235},"end":{"line":6,"column":50,"index":261}},{"start":{"line":95,"column":22,"index":3984},"end":{"line":95,"column":48,"index":4010}}],"key":"gOO2v0sl1XvYI6QH2o9IVEEjbmQ=","exportNames":["*"]}},{"name":"./views/Navigator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":27,"column":33,"index":1282},"end":{"line":27,"column":61,"index":1310}}],"key":"PBpeZlMTHxnI1L+/mUlv77sLyo4=","exportNames":["*"]}},{"name":"./views/Sitemap","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":59,"index":1874},"end":{"line":41,"column":85,"index":1900}}],"key":"G8ud5EPcJ8MF2dMhl1o+nfNHuTs=","exportNames":["*"]}},{"name":"./views/Unmatched","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":56,"column":42,"index":2480},"end":{"line":56,"column":70,"index":2508}}],"key":"i1x8xpZw0K+kAMz1gUdMaXw0H74=","exportNames":["*"]}},{"name":"./getRoutesRedirects","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":71,"column":31,"index":3113},"end":{"line":71,"column":62,"index":3144}},{"start":{"line":80,"column":31,"index":3492},"end":{"line":80,"column":62,"index":3523}}],"key":"E6xJvmMQ8Tg9oU66GfkFALUrP4w=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.extrapolateGroups = exports.generateDynamic = void 0;\n  exports.getRoutes = getRoutes;\n  exports.getExactRoutes = getExactRoutes;\n  const getRoutesCore_1 = require(_dependencyMap[0], \"./getRoutesCore\");\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule, options = {}) {\n    return (0, getRoutesCore_1.getRoutes)(contextModule, {\n      getSystemRoute({\n        route,\n        type,\n        defaults,\n        redirectConfig,\n        rewriteConfig\n      }) {\n        if (route === '' && type === 'layout') {\n          // Root layout when no layout is defined.\n          return {\n            type: 'layout',\n            loadRoute: () => ({\n              default: require(_dependencyMap[1], \"./views/Navigator\").DefaultNavigator\n            }),\n            // Generate a fake file name for the directory\n            contextKey: 'expo-router/build/views/Navigator.js',\n            route: '',\n            generated: true,\n            dynamic: null,\n            children: []\n          };\n        } else if (route === '_sitemap' && type === 'route') {\n          return {\n            loadRoute() {\n              const {\n                Sitemap,\n                getNavOptions\n              } = require(_dependencyMap[2], \"./views/Sitemap\");\n              return {\n                default: Sitemap,\n                getNavOptions\n              };\n            },\n            route: '_sitemap',\n            type: 'route',\n            contextKey: 'expo-router/build/views/Sitemap.js',\n            generated: true,\n            internal: true,\n            dynamic: null,\n            children: []\n          };\n        } else if (route === '+not-found' && type === 'route') {\n          return {\n            loadRoute() {\n              return {\n                default: require(_dependencyMap[3], \"./views/Unmatched\").Unmatched\n              };\n            },\n            type: 'route',\n            route: '+not-found',\n            contextKey: 'expo-router/build/views/Unmatched.js',\n            generated: true,\n            internal: true,\n            dynamic: [{\n              name: '+not-found',\n              deep: true,\n              notFound: true\n            }],\n            children: []\n          };\n        } else if (type === 'redirect' && redirectConfig && defaults) {\n          return {\n            ...defaults,\n            loadRoute() {\n              return require(_dependencyMap[4], \"./getRoutesRedirects\").getRedirectModule(redirectConfig);\n            }\n          };\n        } else if (type === 'rewrite' && rewriteConfig && defaults) {\n          return {\n            ...defaults,\n            loadRoute() {\n              // TODO: Replace with rewrite module\n              return require(_dependencyMap[4], \"./getRoutesRedirects\").getRedirectModule(rewriteConfig);\n            }\n          };\n        }\n        throw new Error(`Unknown system route: ${route} and type: ${type} and redirectConfig: ${redirectConfig} and rewriteConfig: ${rewriteConfig}`);\n      },\n      ...options\n    });\n  }\n  function getExactRoutes(contextModule, options = {}) {\n    return getRoutes(contextModule, {\n      ...options,\n      skipGenerated: true\n    });\n  }\n  var getRoutesCore_2 = require(_dependencyMap[0], \"./getRoutesCore\");\n  Object.defineProperty(exports, \"generateDynamic\", {\n    enumerable: true,\n    get: function () {\n      return getRoutesCore_2.generateDynamic;\n    }\n  });\n  Object.defineProperty(exports, \"extrapolateGroups\", {\n    enumerable: true,\n    get: function () {\n      return getRoutesCore_2.extrapolateGroups;\n    }\n  });\n});","lineCount":125,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"extrapolateGroups"],[7,27,3,25],[7,30,3,28,"exports"],[7,37,3,35],[7,38,3,36,"generateDynamic"],[7,53,3,51],[7,56,3,54],[7,61,3,59],[7,62,3,60],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"getRoutes"],[8,19,4,17],[8,22,4,20,"getRoutes"],[8,31,4,29],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"getExactRoutes"],[9,24,5,22],[9,27,5,25,"getExactRoutes"],[9,41,5,39],[10,2,6,0],[10,8,6,6,"getRoutesCore_1"],[10,23,6,21],[10,26,6,24,"require"],[10,33,6,31],[10,34,6,31,"_dependencyMap"],[10,48,6,31],[10,70,6,49],[10,71,6,50],[11,2,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,2,19,0],[23,11,19,9,"getRoutes"],[23,20,19,18,"getRoutes"],[23,21,19,19,"contextModule"],[23,34,19,32],[23,36,19,34,"options"],[23,43,19,41],[23,46,19,44],[23,47,19,45],[23,48,19,46],[23,50,19,48],[24,4,20,4],[24,11,20,11],[24,12,20,12],[24,13,20,13],[24,15,20,15,"getRoutesCore_1"],[24,30,20,30],[24,31,20,31,"getRoutes"],[24,40,20,40],[24,42,20,42,"contextModule"],[24,55,20,55],[24,57,20,57],[25,6,21,8,"getSystemRoute"],[25,20,21,22,"getSystemRoute"],[25,21,21,23],[26,8,21,25,"route"],[26,13,21,30],[27,8,21,32,"type"],[27,12,21,36],[28,8,21,38,"defaults"],[28,16,21,46],[29,8,21,48,"redirectConfig"],[29,22,21,62],[30,8,21,64,"rewriteConfig"],[31,6,21,78],[31,7,21,79],[31,9,21,81],[32,8,22,12],[32,12,22,16,"route"],[32,17,22,21],[32,22,22,26],[32,24,22,28],[32,28,22,32,"type"],[32,32,22,36],[32,37,22,41],[32,45,22,49],[32,47,22,51],[33,10,23,16],[34,10,24,16],[34,17,24,23],[35,12,25,20,"type"],[35,16,25,24],[35,18,25,26],[35,26,25,34],[36,12,26,20,"loadRoute"],[36,21,26,29],[36,23,26,31,"loadRoute"],[36,24,26,31],[36,30,26,38],[37,14,27,24,"default"],[37,21,27,31],[37,23,27,33,"require"],[37,30,27,40],[37,31,27,40,"_dependencyMap"],[37,45,27,40],[37,69,27,60],[37,70,27,61],[37,71,28,29,"DefaultNavigator"],[38,12,29,20],[38,13,29,21],[38,14,29,22],[39,12,30,20],[40,12,31,20,"contextKey"],[40,22,31,30],[40,24,31,32],[40,62,31,70],[41,12,32,20,"route"],[41,17,32,25],[41,19,32,27],[41,21,32,29],[42,12,33,20,"generated"],[42,21,33,29],[42,23,33,31],[42,27,33,35],[43,12,34,20,"dynamic"],[43,19,34,27],[43,21,34,29],[43,25,34,33],[44,12,35,20,"children"],[44,20,35,28],[44,22,35,30],[45,10,36,16],[45,11,36,17],[46,8,37,12],[46,9,37,13],[46,15,38,17],[46,19,38,21,"route"],[46,24,38,26],[46,29,38,31],[46,39,38,41],[46,43,38,45,"type"],[46,47,38,49],[46,52,38,54],[46,59,38,61],[46,61,38,63],[47,10,39,16],[47,17,39,23],[48,12,40,20,"loadRoute"],[48,21,40,29,"loadRoute"],[48,22,40,29],[48,24,40,32],[49,14,41,24],[49,20,41,30],[50,16,41,32,"Sitemap"],[50,23,41,39],[51,16,41,41,"getNavOptions"],[52,14,41,55],[52,15,41,56],[52,18,41,59,"require"],[52,25,41,66],[52,26,41,66,"_dependencyMap"],[52,40,41,66],[52,62,41,84],[52,63,41,85],[53,14,42,24],[53,21,42,31],[54,16,42,33,"default"],[54,23,42,40],[54,25,42,42,"Sitemap"],[54,32,42,49],[55,16,42,51,"getNavOptions"],[56,14,42,65],[56,15,42,66],[57,12,43,20],[57,13,43,21],[58,12,44,20,"route"],[58,17,44,25],[58,19,44,27],[58,29,44,37],[59,12,45,20,"type"],[59,16,45,24],[59,18,45,26],[59,25,45,33],[60,12,46,20,"contextKey"],[60,22,46,30],[60,24,46,32],[60,60,46,68],[61,12,47,20,"generated"],[61,21,47,29],[61,23,47,31],[61,27,47,35],[62,12,48,20,"internal"],[62,20,48,28],[62,22,48,30],[62,26,48,34],[63,12,49,20,"dynamic"],[63,19,49,27],[63,21,49,29],[63,25,49,33],[64,12,50,20,"children"],[64,20,50,28],[64,22,50,30],[65,10,51,16],[65,11,51,17],[66,8,52,12],[66,9,52,13],[66,15,53,17],[66,19,53,21,"route"],[66,24,53,26],[66,29,53,31],[66,41,53,43],[66,45,53,47,"type"],[66,49,53,51],[66,54,53,56],[66,61,53,63],[66,63,53,65],[67,10,54,16],[67,17,54,23],[68,12,55,20,"loadRoute"],[68,21,55,29,"loadRoute"],[68,22,55,29],[68,24,55,32],[69,14,56,24],[69,21,56,31],[70,16,56,33,"default"],[70,23,56,40],[70,25,56,42,"require"],[70,32,56,49],[70,33,56,49,"_dependencyMap"],[70,47,56,49],[70,71,56,69],[70,72,56,70],[70,73,56,71,"Unmatched"],[71,14,56,81],[71,15,56,82],[72,12,57,20],[72,13,57,21],[73,12,58,20,"type"],[73,16,58,24],[73,18,58,26],[73,25,58,33],[74,12,59,20,"route"],[74,17,59,25],[74,19,59,27],[74,31,59,39],[75,12,60,20,"contextKey"],[75,22,60,30],[75,24,60,32],[75,62,60,70],[76,12,61,20,"generated"],[76,21,61,29],[76,23,61,31],[76,27,61,35],[77,12,62,20,"internal"],[77,20,62,28],[77,22,62,30],[77,26,62,34],[78,12,63,20,"dynamic"],[78,19,63,27],[78,21,63,29],[78,22,63,30],[79,14,63,32,"name"],[79,18,63,36],[79,20,63,38],[79,32,63,50],[80,14,63,52,"deep"],[80,18,63,56],[80,20,63,58],[80,24,63,62],[81,14,63,64,"notFound"],[81,22,63,72],[81,24,63,74],[82,12,63,79],[82,13,63,80],[82,14,63,81],[83,12,64,20,"children"],[83,20,64,28],[83,22,64,30],[84,10,65,16],[84,11,65,17],[85,8,66,12],[85,9,66,13],[85,15,67,17],[85,19,67,21,"type"],[85,23,67,25],[85,28,67,30],[85,38,67,40],[85,42,67,44,"redirectConfig"],[85,56,67,58],[85,60,67,62,"defaults"],[85,68,67,70],[85,70,67,72],[86,10,68,16],[86,17,68,23],[87,12,69,20],[87,15,69,23,"defaults"],[87,23,69,31],[88,12,70,20,"loadRoute"],[88,21,70,29,"loadRoute"],[88,22,70,29],[88,24,70,32],[89,14,71,24],[89,21,71,31,"require"],[89,28,71,38],[89,29,71,38,"_dependencyMap"],[89,43,71,38],[89,70,71,61],[89,71,71,62],[89,72,71,63,"getRedirectModule"],[89,89,71,80],[89,90,71,81,"redirectConfig"],[89,104,71,95],[89,105,71,96],[90,12,72,20],[91,10,73,16],[91,11,73,17],[92,8,74,12],[92,9,74,13],[92,15,75,17],[92,19,75,21,"type"],[92,23,75,25],[92,28,75,30],[92,37,75,39],[92,41,75,43,"rewriteConfig"],[92,54,75,56],[92,58,75,60,"defaults"],[92,66,75,68],[92,68,75,70],[93,10,76,16],[93,17,76,23],[94,12,77,20],[94,15,77,23,"defaults"],[94,23,77,31],[95,12,78,20,"loadRoute"],[95,21,78,29,"loadRoute"],[95,22,78,29],[95,24,78,32],[96,14,79,24],[97,14,80,24],[97,21,80,31,"require"],[97,28,80,38],[97,29,80,38,"_dependencyMap"],[97,43,80,38],[97,70,80,61],[97,71,80,62],[97,72,80,63,"getRedirectModule"],[97,89,80,80],[97,90,80,81,"rewriteConfig"],[97,103,80,94],[97,104,80,95],[98,12,81,20],[99,10,82,16],[99,11,82,17],[100,8,83,12],[101,8,84,12],[101,14,84,18],[101,18,84,22,"Error"],[101,23,84,27],[101,24,84,28],[101,49,84,53,"route"],[101,54,84,58],[101,68,84,72,"type"],[101,72,84,76],[101,96,84,100,"redirectConfig"],[101,110,84,114],[101,133,84,137,"rewriteConfig"],[101,146,84,150],[101,148,84,152],[101,149,84,153],[102,6,85,8],[102,7,85,9],[103,6,86,8],[103,9,86,11,"options"],[104,4,87,4],[104,5,87,5],[104,6,87,6],[105,2,88,0],[106,2,89,0],[106,11,89,9,"getExactRoutes"],[106,25,89,23,"getExactRoutes"],[106,26,89,24,"contextModule"],[106,39,89,37],[106,41,89,39,"options"],[106,48,89,46],[106,51,89,49],[106,52,89,50],[106,53,89,51],[106,55,89,53],[107,4,90,4],[107,11,90,11,"getRoutes"],[107,20,90,20],[107,21,90,21,"contextModule"],[107,34,90,34],[107,36,90,36],[108,6,91,8],[108,9,91,11,"options"],[108,16,91,18],[109,6,92,8,"skipGenerated"],[109,19,92,21],[109,21,92,23],[110,4,93,4],[110,5,93,5],[110,6,93,6],[111,2,94,0],[112,2,95,0],[112,6,95,4,"getRoutesCore_2"],[112,21,95,19],[112,24,95,22,"require"],[112,31,95,29],[112,32,95,29,"_dependencyMap"],[112,46,95,29],[112,68,95,47],[112,69,95,48],[113,2,96,0,"Object"],[113,8,96,6],[113,9,96,7,"defineProperty"],[113,23,96,21],[113,24,96,22,"exports"],[113,31,96,29],[113,33,96,31],[113,50,96,48],[113,52,96,50],[114,4,96,52,"enumerable"],[114,14,96,62],[114,16,96,64],[114,20,96,68],[115,4,96,70,"get"],[115,7,96,73],[115,9,96,75],[115,18,96,75,"get"],[115,19,96,75],[115,21,96,87],[116,6,96,89],[116,13,96,96,"getRoutesCore_2"],[116,28,96,111],[116,29,96,112,"generateDynamic"],[116,44,96,127],[117,4,96,129],[118,2,96,131],[118,3,96,132],[118,4,96,133],[119,2,97,0,"Object"],[119,8,97,6],[119,9,97,7,"defineProperty"],[119,23,97,21],[119,24,97,22,"exports"],[119,31,97,29],[119,33,97,31],[119,52,97,50],[119,54,97,52],[120,4,97,54,"enumerable"],[120,14,97,64],[120,16,97,66],[120,20,97,70],[121,4,97,72,"get"],[121,7,97,75],[121,9,97,77],[121,18,97,77,"get"],[121,19,97,77],[121,21,97,89],[122,6,97,91],[122,13,97,98,"getRoutesCore_2"],[122,28,97,113],[122,29,97,114,"extrapolateGroups"],[122,46,97,131],[123,4,97,133],[124,2,97,135],[124,3,97,136],[124,4,97,137],[125,0,97,138],[125,3]],"functionMap":{"names":["<global>","getRoutes","getSystemRoute","loadRoute","getExactRoutes","Object.defineProperty$argument_2.get"],"mappings":"AAA;ACkB;QCE;+BCK;sBDG;oBCW;qBDG;oBCY;qBDE;oBCa;qBDE;oBCM;qBDG;SDI;CDG;AIC;CJK;2EKE,uDL;6EKC,yDL"}},"type":"js/module"}]}