{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return EventEmitter;\n    }\n  });\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  /**\n   * EventEmitter manages listeners and publishes events to them.\n   *\n   * EventEmitter accepts a single type parameter that defines the valid events\n   * and associated listener argument(s).\n   *\n   * @example\n   *\n   *   const emitter = new EventEmitter<{\n   *     success: [number, string],\n   *     error: [Error],\n   *   }>();\n   *\n   *   emitter.on('success', (statusCode, responseText) => {...});\n   *   emitter.emit('success', 200, '...');\n   *\n   *   emitter.on('error', error => {...});\n   *   emitter.emit('error', new Error('Resource not found'));\n   *\n   */\n  class EventEmitter {\n    constructor() {\n      this._registry = {};\n    }\n    /**\n     * Registers a listener that is called when the supplied event is emitted.\n     * Returns a subscription that has a `remove` method to undo registration.\n     */\n    addListener(eventType, listener, context) {\n      var registrations = allocate(this._registry, eventType);\n      var registration = {\n        context,\n        listener,\n        remove() {\n          registrations.delete(registration);\n        }\n      };\n      registrations.add(registration);\n      return registration;\n    }\n\n    /**\n     * Emits the supplied event. Additional arguments supplied to `emit` will be\n     * passed through to each of the registered listeners.\n     *\n     * If a listener modifies the listeners registered for the same event, those\n     * changes will not be reflected in the current invocation of `emit`.\n     */\n    emit(eventType) {\n      var registrations = this._registry[eventType];\n      if (registrations != null) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        for (var _i = 0, _arr = [...registrations]; _i < _arr.length; _i++) {\n          var registration = _arr[_i];\n          registration.listener.apply(registration.context, args);\n        }\n      }\n    }\n\n    /**\n     * Removes all registered listeners.\n     */\n    removeAllListeners(eventType) {\n      if (eventType == null) {\n        this._registry = {};\n      } else {\n        delete this._registry[eventType];\n      }\n    }\n\n    /**\n     * Returns the number of registered listeners for the supplied event.\n     */\n    listenerCount(eventType) {\n      var registrations = this._registry[eventType];\n      return registrations == null ? 0 : registrations.size;\n    }\n  }\n  function allocate(registry, eventType) {\n    var registrations = registry[eventType];\n    if (registrations == null) {\n      registrations = new Set();\n      registry[eventType] = registrations;\n    }\n    return registrations;\n  }\n});","lineCount":111,"map":[[7,2,31,15,"Object"],[7,8,31,15],[7,9,31,15,"defineProperty"],[7,23,31,15],[7,24,31,15,"exports"],[7,31,31,15],[8,4,31,15,"enumerable"],[8,14,31,15],[9,4,31,15,"get"],[9,7,31,15],[9,18,31,15,"get"],[9,19,31,15],[10,6,31,15],[10,13,31,15,"EventEmitter"],[10,25,31,15],[11,4,31,15],[12,2,31,15],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[23,2,11,0],[24,0,12,0],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,2,31,15],[43,8,31,21,"EventEmitter"],[43,20,31,33],[43,21,31,34],[44,4,32,2,"constructor"],[44,15,32,13,"constructor"],[44,16,32,13],[44,18,32,16],[45,6,33,4],[45,10,33,8],[45,11,33,9,"_registry"],[45,20,33,18],[45,23,33,21],[45,24,33,22],[45,25,33,23],[46,4,34,2],[47,4,35,2],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,4,39,2,"addListener"],[51,15,39,13,"addListener"],[51,16,39,14,"eventType"],[51,25,39,23],[51,27,39,25,"listener"],[51,35,39,33],[51,37,39,35,"context"],[51,44,39,42],[51,46,39,44],[52,6,40,4],[52,10,40,8,"registrations"],[52,23,40,21],[52,26,40,24,"allocate"],[52,34,40,32],[52,35,40,33],[52,39,40,37],[52,40,40,38,"_registry"],[52,49,40,47],[52,51,40,49,"eventType"],[52,60,40,58],[52,61,40,59],[53,6,41,4],[53,10,41,8,"registration"],[53,22,41,20],[53,25,41,23],[54,8,42,6,"context"],[54,15,42,13],[55,8,43,6,"listener"],[55,16,43,14],[56,8,44,6,"remove"],[56,14,44,12,"remove"],[56,15,44,12],[56,17,44,15],[57,10,45,8,"registrations"],[57,23,45,21],[57,24,45,22,"delete"],[57,30,45,28],[57,31,45,29,"registration"],[57,43,45,41],[57,44,45,42],[58,8,46,6],[59,6,47,4],[59,7,47,5],[60,6,48,4,"registrations"],[60,19,48,17],[60,20,48,18,"add"],[60,23,48,21],[60,24,48,22,"registration"],[60,36,48,34],[60,37,48,35],[61,6,49,4],[61,13,49,11,"registration"],[61,25,49,23],[62,4,50,2],[64,4,52,2],[65,0,53,0],[66,0,54,0],[67,0,55,0],[68,0,56,0],[69,0,57,0],[70,0,58,0],[71,4,59,2,"emit"],[71,8,59,6,"emit"],[71,9,59,7,"eventType"],[71,18,59,16],[71,20,59,18],[72,6,60,4],[72,10,60,8,"registrations"],[72,23,60,21],[72,26,60,24],[72,30,60,28],[72,31,60,29,"_registry"],[72,40,60,38],[72,41,60,39,"eventType"],[72,50,60,48],[72,51,60,49],[73,6,61,4],[73,10,61,8,"registrations"],[73,23,61,21],[73,27,61,25],[73,31,61,29],[73,33,61,31],[74,8,62,6],[74,13,62,11],[74,17,62,15,"_len"],[74,21,62,19],[74,24,62,22,"arguments"],[74,33,62,31],[74,34,62,32,"length"],[74,40,62,38],[74,42,62,40,"args"],[74,46,62,44],[74,49,62,47],[74,53,62,51,"Array"],[74,58,62,56],[74,59,62,57,"_len"],[74,63,62,61],[74,66,62,64],[74,67,62,65],[74,70,62,68,"_len"],[74,74,62,72],[74,77,62,75],[74,78,62,76],[74,81,62,79],[74,82,62,80],[74,83,62,81],[74,85,62,83,"_key"],[74,89,62,87],[74,92,62,90],[74,93,62,91],[74,95,62,93,"_key"],[74,99,62,97],[74,102,62,100,"_len"],[74,106,62,104],[74,108,62,106,"_key"],[74,112,62,110],[74,114,62,112],[74,116,62,114],[75,10,63,8,"args"],[75,14,63,12],[75,15,63,13,"_key"],[75,19,63,17],[75,22,63,20],[75,23,63,21],[75,24,63,22],[75,27,63,25,"arguments"],[75,36,63,34],[75,37,63,35,"_key"],[75,41,63,39],[75,42,63,40],[76,8,64,6],[77,8,65,6],[77,13,65,11],[77,17,65,15,"_i"],[77,19,65,17],[77,22,65,20],[77,23,65,21],[77,25,65,23,"_arr"],[77,29,65,27],[77,32,65,30],[77,33,65,31],[77,36,65,34,"registrations"],[77,49,65,47],[77,50,65,48],[77,52,65,50,"_i"],[77,54,65,52],[77,57,65,55,"_arr"],[77,61,65,59],[77,62,65,60,"length"],[77,68,65,66],[77,70,65,68,"_i"],[77,72,65,70],[77,74,65,72],[77,76,65,74],[78,10,66,8],[78,14,66,12,"registration"],[78,26,66,24],[78,29,66,27,"_arr"],[78,33,66,31],[78,34,66,32,"_i"],[78,36,66,34],[78,37,66,35],[79,10,67,8,"registration"],[79,22,67,20],[79,23,67,21,"listener"],[79,31,67,29],[79,32,67,30,"apply"],[79,37,67,35],[79,38,67,36,"registration"],[79,50,67,48],[79,51,67,49,"context"],[79,58,67,56],[79,60,67,58,"args"],[79,64,67,62],[79,65,67,63],[80,8,68,6],[81,6,69,4],[82,4,70,2],[84,4,72,2],[85,0,73,0],[86,0,74,0],[87,4,75,2,"removeAllListeners"],[87,22,75,20,"removeAllListeners"],[87,23,75,21,"eventType"],[87,32,75,30],[87,34,75,32],[88,6,76,4],[88,10,76,8,"eventType"],[88,19,76,17],[88,23,76,21],[88,27,76,25],[88,29,76,27],[89,8,77,6],[89,12,77,10],[89,13,77,11,"_registry"],[89,22,77,20],[89,25,77,23],[89,26,77,24],[89,27,77,25],[90,6,78,4],[90,7,78,5],[90,13,78,11],[91,8,79,6],[91,15,79,13],[91,19,79,17],[91,20,79,18,"_registry"],[91,29,79,27],[91,30,79,28,"eventType"],[91,39,79,37],[91,40,79,38],[92,6,80,4],[93,4,81,2],[95,4,83,2],[96,0,84,0],[97,0,85,0],[98,4,86,2,"listenerCount"],[98,17,86,15,"listenerCount"],[98,18,86,16,"eventType"],[98,27,86,25],[98,29,86,27],[99,6,87,4],[99,10,87,8,"registrations"],[99,23,87,21],[99,26,87,24],[99,30,87,28],[99,31,87,29,"_registry"],[99,40,87,38],[99,41,87,39,"eventType"],[99,50,87,48],[99,51,87,49],[100,6,88,4],[100,13,88,11,"registrations"],[100,26,88,24],[100,30,88,28],[100,34,88,32],[100,37,88,35],[100,38,88,36],[100,41,88,39,"registrations"],[100,54,88,52],[100,55,88,53,"size"],[100,59,88,57],[101,4,89,2],[102,2,90,0],[103,2,91,0],[103,11,91,9,"allocate"],[103,19,91,17,"allocate"],[103,20,91,18,"registry"],[103,28,91,26],[103,30,91,28,"eventType"],[103,39,91,37],[103,41,91,39],[104,4,92,2],[104,8,92,6,"registrations"],[104,21,92,19],[104,24,92,22,"registry"],[104,32,92,30],[104,33,92,31,"eventType"],[104,42,92,40],[104,43,92,41],[105,4,93,2],[105,8,93,6,"registrations"],[105,21,93,19],[105,25,93,23],[105,29,93,27],[105,31,93,29],[106,6,94,4,"registrations"],[106,19,94,17],[106,22,94,20],[106,26,94,24,"Set"],[106,29,94,27],[106,30,94,28],[106,31,94,29],[107,6,95,4,"registry"],[107,14,95,12],[107,15,95,13,"eventType"],[107,24,95,22],[107,25,95,23],[107,28,95,26,"registrations"],[107,41,95,39],[108,4,96,2],[109,4,97,2],[109,11,97,9,"registrations"],[109,24,97,22],[110,2,98,0],[111,0,98,1],[111,3]],"functionMap":{"names":["<global>","EventEmitter","constructor","addListener","registration.remove","emit","removeAllListeners","listenerCount","allocate"],"mappings":"AAA;eC8B;ECC;GDE;EEK;MCK;ODE;GFI;EIS;GJW;EKK;GLM;EMK;GNG;CDC;AQC"},"hasCjsExports":false},"type":"js/module"}]}