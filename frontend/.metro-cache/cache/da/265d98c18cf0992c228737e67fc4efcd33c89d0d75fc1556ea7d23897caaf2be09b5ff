{"dependencies":[{"name":"./errors","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":173},"end":{"line":7,"column":44,"index":217}}],"key":"rEld05quROH+iA6QLT6kkvqJ/qc=","exportNames":["*"]}},{"name":"./fetchAsync","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":218},"end":{"line":8,"column":42,"index":260}}],"key":"GJrX1EMy+DxI7FSLX0wJbybQg2o=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.fetchThenEvalAsync = fetchThenEvalAsync;\n  var _errors = require(_dependencyMap[0], \"./errors\");\n  var _fetchAsync = require(_dependencyMap[1], \"./fetchAsync\");\n  /**\n   * Copyright Â© 2022 650 Industries.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  /**\n   * Load a bundle for a URL using fetch + eval on native and script tag injection on web.\n   *\n   * @param url Given a statement like `import('./Bacon')` `bundlePath` would be `Bacon`.\n   */\n  function fetchThenEvalAsync(url) {\n    return (0, _fetchAsync.fetchAsync)(url).then(({\n      body,\n      status,\n      headers\n    }) => {\n      if (headers?.has?.('Content-Type') != null && headers.get('Content-Type').includes('application/json')) {\n        // Errors are returned as JSON.\n        throw new Error(JSON.parse(body).message || `Unknown error fetching '${url}'`);\n      }\n      if (status === 200) {\n        // eslint-disable-next-line no-eval\n        return eval(body);\n      } else {\n        // Format Metro errors if possible.\n        if (process.env.NODE_ENV === 'development') {\n          // body can be an error from Metro if a module is missing.\n          // {\"originModulePath\":\"/Users/evanbacon/Documents/GitHub/expo/.\",\"targetModuleName\":\"./http://localhost:8081/node_modules/react-native/index.js\",\"message\":\"...\"}\n          const error = jsonParseOptional(body);\n          if (error) {\n            // TODO: This is essentially like the Metro native red box errors. We should do a better job formatting them so\n            // the user experience doesn't feel bad. This can be tested by loading a split bundle that results in a missing module error from Metro.\n            throw new _errors.MetroServerError(error, url);\n          }\n        }\n        throw new Error(`Failed to load split bundle from URL: ${url}\\n${body}`);\n      }\n    });\n  }\n  function jsonParseOptional(json) {\n    try {\n      return JSON.parse(json);\n    } catch {\n      return null;\n    }\n  }\n});","lineCount":56,"map":[[6,2,7,0],[6,6,7,0,"_errors"],[6,13,7,0],[6,16,7,0,"require"],[6,23,7,0],[6,24,7,0,"_dependencyMap"],[6,38,7,0],[7,2,8,0],[7,6,8,0,"_fetchAsync"],[7,17,8,0],[7,20,8,0,"require"],[7,27,8,0],[7,28,8,0,"_dependencyMap"],[7,42,8,0],[8,2,1,0],[9,0,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[15,2,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[19,0,13,0],[20,2,14,7],[20,11,14,16,"fetchThenEvalAsync"],[20,29,14,34,"fetchThenEvalAsync"],[20,30,14,35,"url"],[20,33,14,46],[20,35,14,63],[21,4,15,2],[21,11,15,9],[21,15,15,9,"fetchAsync"],[21,37,15,19],[21,39,15,20,"url"],[21,42,15,23],[21,43,15,24],[21,44,15,25,"then"],[21,48,15,29],[21,49,15,30],[21,50,15,31],[22,6,15,33,"body"],[22,10,15,37],[23,6,15,39,"status"],[23,12,15,45],[24,6,15,47,"headers"],[25,4,15,55],[25,5,15,56],[25,10,15,61],[26,6,16,4],[26,10,17,6,"headers"],[26,17,17,13],[26,19,17,15,"has"],[26,22,17,18],[26,25,17,21],[26,39,17,35],[26,40,17,36],[26,44,17,40],[26,48,17,44],[26,52,18,6,"headers"],[26,59,18,13],[26,60,18,14,"get"],[26,63,18,17],[26,64,18,18],[26,78,18,32],[26,79,18,33],[26,80,18,35,"includes"],[26,88,18,43],[26,89,18,44],[26,107,18,62],[26,108,18,63],[26,110,19,6],[27,8,20,6],[28,8,21,6],[28,14,21,12],[28,18,21,16,"Error"],[28,23,21,21],[28,24,21,22,"JSON"],[28,28,21,26],[28,29,21,27,"parse"],[28,34,21,32],[28,35,21,33,"body"],[28,39,21,37],[28,40,21,38],[28,41,21,39,"message"],[28,48,21,46],[28,52,21,50],[28,79,21,77,"url"],[28,82,21,80],[28,85,21,83],[28,86,21,84],[29,6,22,4],[30,6,24,4],[30,10,24,8,"status"],[30,16,24,14],[30,21,24,19],[30,24,24,22],[30,26,24,24],[31,8,25,6],[32,8,26,6],[32,15,26,13,"eval"],[32,19,26,17],[32,20,26,18,"body"],[32,24,26,22],[32,25,26,23],[33,6,27,4],[33,7,27,5],[33,13,27,11],[34,8,28,6],[35,8,29,6],[35,12,29,10,"process"],[35,19,29,17],[35,20,29,18,"env"],[35,23,29,21],[35,24,29,22,"NODE_ENV"],[35,32,29,30],[35,37,29,35],[35,50,29,48],[35,52,29,50],[36,10,30,8],[37,10,31,8],[38,10,32,8],[38,16,32,14,"error"],[38,21,32,19],[38,24,32,22,"jsonParseOptional"],[38,41,32,39],[38,42,32,40,"body"],[38,46,32,44],[38,47,32,45],[39,10,33,8],[39,14,33,12,"error"],[39,19,33,17],[39,21,33,19],[40,12,34,10],[41,12,35,10],[42,12,36,10],[42,18,36,16],[42,22,36,20,"MetroServerError"],[42,46,36,36],[42,47,36,37,"error"],[42,52,36,42],[42,54,36,44,"url"],[42,57,36,47],[42,58,36,48],[43,10,37,8],[44,8,38,6],[45,8,40,6],[45,14,40,12],[45,18,40,16,"Error"],[45,23,40,21],[45,24,40,22],[45,65,40,63,"url"],[45,68,40,66],[45,73,40,71,"body"],[45,77,40,75],[45,79,40,77],[45,80,40,78],[46,6,41,4],[47,4,42,2],[47,5,42,3],[47,6,42,4],[48,2,43,0],[49,2,45,0],[49,11,45,9,"jsonParseOptional"],[49,28,45,26,"jsonParseOptional"],[49,29,45,27,"json"],[49,33,45,39],[49,35,45,46],[50,4,46,2],[50,8,46,6],[51,6,47,4],[51,13,47,11,"JSON"],[51,17,47,15],[51,18,47,16,"parse"],[51,23,47,21],[51,24,47,22,"json"],[51,28,47,26],[51,29,47,27],[52,4,48,2],[52,5,48,3],[52,6,48,4],[52,12,48,10],[53,6,49,4],[53,13,49,11],[53,17,49,15],[54,4,50,2],[55,2,51,0],[56,0,51,1],[56,3]],"functionMap":{"names":["<global>","fetchThenEvalAsync","fetchAsync.then$argument_0","jsonParseOptional"],"mappings":"AAA;OCa;8BCC;GD2B;CDC;AGE;CHM"}},"type":"js/module"}]}