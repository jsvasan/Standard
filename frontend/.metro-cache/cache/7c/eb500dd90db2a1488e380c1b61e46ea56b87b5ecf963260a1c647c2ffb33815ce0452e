{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // This alphabet uses `A-Za-z0-9_-` symbols.\n  // The order of characters is optimized for better gzip and brotli compression.\n  // References to the same file (works both for gzip and brotli):\n  // `'use`, `andom`, and `rict'`\n  // References to the brotli default dictionary:\n  // `-26T`, `1983`, `40px`, `75px`, `bush`, `jack`, `mind`, `very`, and `wolf`\n  let urlAlphabet = 'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';\n  let customAlphabet = (alphabet, defaultSize = 21) => {\n    return (size = defaultSize) => {\n      let id = '';\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let i = size | 0;\n      while (i--) {\n        // `| 0` is more compact and faster than `Math.floor()`.\n        id += alphabet[Math.random() * alphabet.length | 0];\n      }\n      return id;\n    };\n  };\n  let nanoid = (size = 21) => {\n    let id = '';\n    // A compact alternative for `for (var i = 0; i < step; i++)`.\n    let i = size | 0;\n    while (i--) {\n      // `| 0` is more compact and faster than `Math.floor()`.\n      id += urlAlphabet[Math.random() * 64 | 0];\n    }\n    return id;\n  };\n  module.exports = {\n    nanoid,\n    customAlphabet\n  };\n});","lineCount":35,"map":[[2,2,1,0],[3,2,2,0],[4,2,3,0],[5,2,4,0],[6,2,5,0],[7,2,6,0],[8,2,7,0],[8,6,7,4,"urlAlphabet"],[8,17,7,15],[8,20,8,2],[8,86,8,68],[9,2,10,0],[9,6,10,4,"customAlphabet"],[9,20,10,18],[9,23,10,21,"customAlphabet"],[9,24,10,22,"alphabet"],[9,32,10,30],[9,34,10,32,"defaultSize"],[9,45,10,43],[9,48,10,46],[9,50,10,48],[9,55,10,53],[10,4,11,2],[10,11,11,9],[10,12,11,10,"size"],[10,16,11,14],[10,19,11,17,"defaultSize"],[10,30,11,28],[10,35,11,33],[11,6,12,4],[11,10,12,8,"id"],[11,12,12,10],[11,15,12,13],[11,17,12,15],[12,6,13,4],[13,6,14,4],[13,10,14,8,"i"],[13,11,14,9],[13,14,14,12,"size"],[13,18,14,16],[13,21,14,19],[13,22,14,20],[14,6,15,4],[14,13,15,11,"i"],[14,14,15,12],[14,16,15,14],[14,18,15,16],[15,8,16,6],[16,8,17,6,"id"],[16,10,17,8],[16,14,17,12,"alphabet"],[16,22,17,20],[16,23,17,22,"Math"],[16,27,17,26],[16,28,17,27,"random"],[16,34,17,33],[16,35,17,34],[16,36,17,35],[16,39,17,38,"alphabet"],[16,47,17,46],[16,48,17,47,"length"],[16,54,17,53],[16,57,17,57],[16,58,17,58],[16,59,17,59],[17,6,18,4],[18,6,19,4],[18,13,19,11,"id"],[18,15,19,13],[19,4,20,2],[19,5,20,3],[20,2,21,0],[20,3,21,1],[21,2,23,0],[21,6,23,4,"nanoid"],[21,12,23,10],[21,15,23,13,"nanoid"],[21,16,23,14,"size"],[21,20,23,18],[21,23,23,21],[21,25,23,23],[21,30,23,28],[22,4,24,2],[22,8,24,6,"id"],[22,10,24,8],[22,13,24,11],[22,15,24,13],[23,4,25,2],[24,4,26,2],[24,8,26,6,"i"],[24,9,26,7],[24,12,26,10,"size"],[24,16,26,14],[24,19,26,17],[24,20,26,18],[25,4,27,2],[25,11,27,9,"i"],[25,12,27,10],[25,14,27,12],[25,16,27,14],[26,6,28,4],[27,6,29,4,"id"],[27,8,29,6],[27,12,29,10,"urlAlphabet"],[27,23,29,21],[27,24,29,23,"Math"],[27,28,29,27],[27,29,29,28,"random"],[27,35,29,34],[27,36,29,35],[27,37,29,36],[27,40,29,39],[27,42,29,41],[27,45,29,45],[27,46,29,46],[27,47,29,47],[28,4,30,2],[29,4,31,2],[29,11,31,9,"id"],[29,13,31,11],[30,2,32,0],[30,3,32,1],[31,2,34,0,"module"],[31,8,34,6],[31,9,34,7,"exports"],[31,16,34,14],[31,19,34,17],[32,4,34,19,"nanoid"],[32,10,34,25],[33,4,34,27,"customAlphabet"],[34,2,34,42],[34,3,34,43],[35,0,34,43],[35,3]],"functionMap":{"names":["<global>","customAlphabet","<anonymous>","nanoid"],"mappings":"AAA;qBCS;SCC;GDS;CDC;aGE;CHS"}},"type":"js/module"}]}