{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"./createResponderEvent","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":134,"column":0,"index":7431},"end":{"line":134,"column":58,"index":7489}}],"key":"WVoiSaZWjjHByaCD8pXurvduFWM=","exportNames":["*"]}},{"name":"./ResponderEventTypes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":135,"column":0,"index":7490},"end":{"line":135,"column":114,"index":7604}}],"key":"vBlYL6aBF9Cu7j4MJjDSbmFqyNY=","exportNames":["*"]}},{"name":"./utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":136,"column":0,"index":7605},"end":{"line":136,"column":144,"index":7749}}],"key":"fIqjJ6Rx8c7Khc/wm9kX7hQXC5I=","exportNames":["*"]}},{"name":"./ResponderTouchHistoryStore","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":137,"column":0,"index":7750},"end":{"line":137,"column":74,"index":7824}}],"key":"Oc38LKkYGlEOOMvyz1Oz6HYHQCE=","exportNames":["*"]}},{"name":"../canUseDom","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":138,"column":0,"index":7825},"end":{"line":138,"column":37,"index":7862}}],"key":"NAgv5vx4h/J1uxoLSWxqZG/Z81Y=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.addNode = addNode;\n  exports.attachListeners = attachListeners;\n  exports.getResponderNode = getResponderNode;\n  exports.removeNode = removeNode;\n  exports.terminateResponder = terminateResponder;\n  var _createResponderEvent = _interopRequireDefault(require(_dependencyMap[1], \"./createResponderEvent\"));\n  var _ResponderEventTypes = require(_dependencyMap[2], \"./ResponderEventTypes\");\n  var _utils = require(_dependencyMap[3], \"./utils\");\n  var _ResponderTouchHistoryStore = require(_dependencyMap[4], \"./ResponderTouchHistoryStore\");\n  var _canUseDom = _interopRequireDefault(require(_dependencyMap[5], \"../canUseDom\"));\n  /**\n   * Copyright (c) Nicolas Gallagher\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\n  /**\n   * RESPONDER EVENT SYSTEM\n   *\n   * A single, global \"interaction lock\" on views. For a view to be the \"responder\" means\n   * that pointer interactions are exclusive to that view and none other. The \"interaction\n   * lock\" can be transferred (only) to ancestors of the current \"responder\" as long as\n   * pointers continue to be active.\n   *\n   * Responder being granted:\n   *\n   * A view can become the \"responder\" after the following events:\n   *  * \"pointerdown\" (implemented using \"touchstart\", \"mousedown\")\n   *  * \"pointermove\" (implemented using \"touchmove\", \"mousemove\")\n   *  * \"scroll\" (while a pointer is down)\n   *  * \"selectionchange\" (while a pointer is down)\n   *\n   * If nothing is already the \"responder\", the event propagates to (capture) and from\n   * (bubble) the event target until a view returns `true` for\n   * `on*ShouldSetResponder(Capture)`.\n   *\n   * If something is already the responder, the event propagates to (capture) and from\n   * (bubble) the lowest common ancestor of the event target and the current \"responder\".\n   * Then negotiation happens between the current \"responder\" and a view that wants to\n   * become the \"responder\": see the timing diagram below.\n   *\n   * (NOTE: Scrolled views either automatically become the \"responder\" or release the\n   * \"interaction lock\". A native scroll view that isn't built on top of the responder\n   * system must result in the current \"responder\" being notified that it no longer has\n   * the \"interaction lock\" - the native system has taken over.\n   *\n   * Responder being released:\n   *\n   * As soon as there are no more active pointers that *started* inside descendants\n   * of the *current* \"responder\", an `onResponderRelease` event is dispatched to the\n   * current \"responder\", and the responder lock is released.\n   *\n   * Typical sequence of events:\n   *  * startShouldSetResponder\n   *  * responderGrant/Reject\n   *  * responderStart\n   *  * responderMove\n   *  * responderEnd\n   *  * responderRelease\n   */\n\n  /*                                             Negotiation Performed\n                                               +-----------------------+\n                                              /                         \\\n  Process low level events to    +     Current Responder      +   wantsResponderID\n  determine who to perform negot-|   (if any exists at all)   |\n  iation/transition              | Otherwise just pass through|\n  -------------------------------+----------------------------+------------------+\n  Bubble to find first ID        |                            |\n  to return true:wantsResponderID|                            |\n                                 |                            |\n       +--------------+          |                            |\n       | onTouchStart |          |                            |\n       +------+-------+    none  |                            |\n              |            return|                            |\n  +-----------v-------------+true| +------------------------+ |\n  |onStartShouldSetResponder|----->| onResponderStart (cur) |<-----------+\n  +-----------+-------------+    | +------------------------+ |          |\n              |                  |                            | +--------+-------+\n              | returned true for|       false:REJECT +-------->|onResponderReject\n              | wantsResponderID |                    |       | +----------------+\n              | (now attempt     | +------------------+-----+ |\n              |  handoff)        | | onResponder            | |\n              +------------------->|    TerminationRequest  | |\n                                 | +------------------+-----+ |\n                                 |                    |       | +----------------+\n                                 |         true:GRANT +-------->|onResponderGrant|\n                                 |                            | +--------+-------+\n                                 | +------------------------+ |          |\n                                 | | onResponderTerminate   |<-----------+\n                                 | +------------------+-----+ |\n                                 |                    |       | +----------------+\n                                 |                    +-------->|onResponderStart|\n                                 |                            | +----------------+\n  Bubble to find first ID        |                            |\n  to return true:wantsResponderID|                            |\n                                 |                            |\n       +-------------+           |                            |\n       | onTouchMove |           |                            |\n       +------+------+     none  |                            |\n              |            return|                            |\n  +-----------v-------------+true| +------------------------+ |\n  |onMoveShouldSetResponder |----->| onResponderMove (cur)  |<-----------+\n  +-----------+-------------+    | +------------------------+ |          |\n              |                  |                            | +--------+-------+\n              | returned true for|       false:REJECT +-------->|onResponderReject\n              | wantsResponderID |                    |       | +----------------+\n              | (now attempt     | +------------------+-----+ |\n              |  handoff)        | |   onResponder          | |\n              +------------------->|      TerminationRequest| |\n                                 | +------------------+-----+ |\n                                 |                    |       | +----------------+\n                                 |         true:GRANT +-------->|onResponderGrant|\n                                 |                            | +--------+-------+\n                                 | +------------------------+ |          |\n                                 | |   onResponderTerminate |<-----------+\n                                 | +------------------+-----+ |\n                                 |                    |       | +----------------+\n                                 |                    +-------->|onResponderMove |\n                                 |                            | +----------------+\n                                 |                            |\n                                 |                            |\n        Some active touch started|                            |\n        inside current responder | +------------------------+ |\n        +------------------------->|      onResponderEnd    | |\n        |                        | +------------------------+ |\n    +---+---------+              |                            |\n    | onTouchEnd  |              |                            |\n    +---+---------+              |                            |\n        |                        | +------------------------+ |\n        +------------------------->|     onResponderEnd     | |\n        No active touches started| +-----------+------------+ |\n        inside current responder |             |              |\n                                 |             v              |\n                                 | +------------------------+ |\n                                 | |    onResponderRelease  | |\n                                 | +------------------------+ |\n                                 |                            |\n                                 +                            + */\n\n  /* ------------ TYPES ------------ */\n\n  var emptyObject = {};\n\n  /* ------------ IMPLEMENTATION ------------ */\n\n  var startRegistration = ['onStartShouldSetResponderCapture', 'onStartShouldSetResponder', {\n    bubbles: true\n  }];\n  var moveRegistration = ['onMoveShouldSetResponderCapture', 'onMoveShouldSetResponder', {\n    bubbles: true\n  }];\n  var scrollRegistration = ['onScrollShouldSetResponderCapture', 'onScrollShouldSetResponder', {\n    bubbles: false\n  }];\n  var shouldSetResponderEvents = {\n    touchstart: startRegistration,\n    mousedown: startRegistration,\n    touchmove: moveRegistration,\n    mousemove: moveRegistration,\n    scroll: scrollRegistration\n  };\n  var emptyResponder = {\n    id: null,\n    idPath: null,\n    node: null\n  };\n  var responderListenersMap = new Map();\n  var isEmulatingMouseEvents = false;\n  var trackedTouchCount = 0;\n  var currentResponder = {\n    id: null,\n    node: null,\n    idPath: null\n  };\n  var responderTouchHistoryStore = new _ResponderTouchHistoryStore.ResponderTouchHistoryStore();\n  function changeCurrentResponder(responder) {\n    currentResponder = responder;\n  }\n  function getResponderConfig(id) {\n    var config = responderListenersMap.get(id);\n    return config != null ? config : emptyObject;\n  }\n\n  /**\n   * Process native events\n   *\n   * A single event listener is used to manage the responder system.\n   * All pointers are tracked in the ResponderTouchHistoryStore. Native events\n   * are interpreted in terms of the Responder System and checked to see if\n   * the responder should be transferred. Each host node that is attached to\n   * the Responder System has an ID, which is used to look up its associated\n   * callbacks.\n   */\n  function eventListener(domEvent) {\n    var eventType = domEvent.type;\n    var eventTarget = domEvent.target;\n\n    /**\n     * Manage emulated events and early bailout.\n     * Since PointerEvent is not used yet (lack of support in older Safari), it's\n     * necessary to manually manage the mess of browser touch/mouse events.\n     * And bailout early for termination events when there is no active responder.\n     */\n\n    // Flag when browser may produce emulated events\n    if (eventType === 'touchstart') {\n      isEmulatingMouseEvents = true;\n    }\n    // Remove flag when browser will not produce emulated events\n    if (eventType === 'touchmove' || trackedTouchCount > 1) {\n      isEmulatingMouseEvents = false;\n    }\n    // Ignore various events in particular circumstances\n    if (\n    // Ignore browser emulated mouse events\n    eventType === 'mousedown' && isEmulatingMouseEvents || eventType === 'mousemove' && isEmulatingMouseEvents ||\n    // Ignore mousemove if a mousedown didn't occur first\n    eventType === 'mousemove' && trackedTouchCount < 1) {\n      return;\n    }\n    // Remove flag after emulated events are finished\n    if (isEmulatingMouseEvents && eventType === 'mouseup') {\n      if (trackedTouchCount === 0) {\n        isEmulatingMouseEvents = false;\n      }\n      return;\n    }\n    var isStartEvent = (0, _ResponderEventTypes.isStartish)(eventType) && (0, _utils.isPrimaryPointerDown)(domEvent);\n    var isMoveEvent = (0, _ResponderEventTypes.isMoveish)(eventType);\n    var isEndEvent = (0, _ResponderEventTypes.isEndish)(eventType);\n    var isScrollEvent = (0, _ResponderEventTypes.isScroll)(eventType);\n    var isSelectionChangeEvent = (0, _ResponderEventTypes.isSelectionChange)(eventType);\n    var responderEvent = (0, _createResponderEvent.default)(domEvent, responderTouchHistoryStore);\n\n    /**\n     * Record the state of active pointers\n     */\n\n    if (isStartEvent || isMoveEvent || isEndEvent) {\n      if (domEvent.touches) {\n        trackedTouchCount = domEvent.touches.length;\n      } else {\n        if (isStartEvent) {\n          trackedTouchCount = 1;\n        } else if (isEndEvent) {\n          trackedTouchCount = 0;\n        }\n      }\n      responderTouchHistoryStore.recordTouchTrack(eventType, responderEvent.nativeEvent);\n    }\n\n    /**\n     * Responder System logic\n     */\n\n    var eventPaths = (0, _utils.getResponderPaths)(domEvent);\n    var wasNegotiated = false;\n    var wantsResponder;\n\n    // If an event occured that might change the current responder...\n    if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {\n      // If there is already a responder, prune the event paths to the lowest common ancestor\n      // of the existing responder and deepest target of the event.\n      var currentResponderIdPath = currentResponder.idPath;\n      var eventIdPath = eventPaths.idPath;\n      if (currentResponderIdPath != null && eventIdPath != null) {\n        var lowestCommonAncestor = (0, _utils.getLowestCommonAncestor)(currentResponderIdPath, eventIdPath);\n        if (lowestCommonAncestor != null) {\n          var indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor);\n          // Skip the current responder so it doesn't receive unexpected \"shouldSet\" events.\n          var index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);\n          eventPaths = {\n            idPath: eventIdPath.slice(index),\n            nodePath: eventPaths.nodePath.slice(index)\n          };\n        } else {\n          eventPaths = null;\n        }\n      }\n      if (eventPaths != null) {\n        // If a node wants to become the responder, attempt to transfer.\n        wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);\n        if (wantsResponder != null) {\n          // Sets responder if none exists, or negotates with existing responder.\n          attemptTransfer(responderEvent, wantsResponder);\n          wasNegotiated = true;\n        }\n      }\n    }\n\n    // If there is now a responder, invoke its callbacks for the lifecycle of the gesture.\n    if (currentResponder.id != null && currentResponder.node != null) {\n      var _currentResponder = currentResponder,\n        id = _currentResponder.id,\n        node = _currentResponder.node;\n      var _getResponderConfig = getResponderConfig(id),\n        onResponderStart = _getResponderConfig.onResponderStart,\n        onResponderMove = _getResponderConfig.onResponderMove,\n        onResponderEnd = _getResponderConfig.onResponderEnd,\n        onResponderRelease = _getResponderConfig.onResponderRelease,\n        onResponderTerminate = _getResponderConfig.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig.onResponderTerminationRequest;\n      responderEvent.bubbles = false;\n      responderEvent.cancelable = false;\n      responderEvent.currentTarget = node;\n\n      // Start\n      if (isStartEvent) {\n        if (onResponderStart != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderStart';\n          onResponderStart(responderEvent);\n        }\n      }\n      // Move\n      else if (isMoveEvent) {\n        if (onResponderMove != null) {\n          responderEvent.dispatchConfig.registrationName = 'onResponderMove';\n          onResponderMove(responderEvent);\n        }\n      } else {\n        var isTerminateEvent = (0, _ResponderEventTypes.isCancelish)(eventType) ||\n        // native context menu\n        eventType === 'contextmenu' ||\n        // window blur\n        eventType === 'blur' && eventTarget === window ||\n        // responder (or ancestors) blur\n        eventType === 'blur' && eventTarget.contains(node) && domEvent.relatedTarget !== node ||\n        // native scroll without using a pointer\n        isScrollEvent && trackedTouchCount === 0 ||\n        // native scroll on node that is parent of the responder (allow siblings to scroll)\n        isScrollEvent && eventTarget.contains(node) && eventTarget !== node ||\n        // native select/selectionchange on node\n        isSelectionChangeEvent && (0, _utils.hasValidSelection)(domEvent);\n        var isReleaseEvent = isEndEvent && !isTerminateEvent && !(0, _utils.hasTargetTouches)(node, domEvent.touches);\n\n        // End\n        if (isEndEvent) {\n          if (onResponderEnd != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderEnd';\n            onResponderEnd(responderEvent);\n          }\n        }\n        // Release\n        if (isReleaseEvent) {\n          if (onResponderRelease != null) {\n            responderEvent.dispatchConfig.registrationName = 'onResponderRelease';\n            onResponderRelease(responderEvent);\n          }\n          changeCurrentResponder(emptyResponder);\n        }\n        // Terminate\n        if (isTerminateEvent) {\n          var shouldTerminate = true;\n\n          // Responders can still avoid termination but only for these events.\n          if (eventType === 'contextmenu' || eventType === 'scroll' || eventType === 'selectionchange') {\n            // Only call this function is it wasn't already called during negotiation.\n            if (wasNegotiated) {\n              shouldTerminate = false;\n            } else if (onResponderTerminationRequest != null) {\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n              if (onResponderTerminationRequest(responderEvent) === false) {\n                shouldTerminate = false;\n              }\n            }\n          }\n          if (shouldTerminate) {\n            if (onResponderTerminate != null) {\n              responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n              onResponderTerminate(responderEvent);\n            }\n            changeCurrentResponder(emptyResponder);\n            isEmulatingMouseEvents = false;\n            trackedTouchCount = 0;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Walk the event path to/from the target node. At each node, stop and call the\n   * relevant \"shouldSet\" functions for the given event type. If any of those functions\n   * call \"stopPropagation\" on the event, stop searching for a responder.\n   */\n  function findWantsResponder(eventPaths, domEvent, responderEvent) {\n    var shouldSetCallbacks = shouldSetResponderEvents[domEvent.type]; // for Flow\n\n    if (shouldSetCallbacks != null) {\n      var idPath = eventPaths.idPath,\n        nodePath = eventPaths.nodePath;\n      var shouldSetCallbackCaptureName = shouldSetCallbacks[0];\n      var shouldSetCallbackBubbleName = shouldSetCallbacks[1];\n      var bubbles = shouldSetCallbacks[2].bubbles;\n      var check = function check(id, node, callbackName) {\n        var config = getResponderConfig(id);\n        var shouldSetCallback = config[callbackName];\n        if (shouldSetCallback != null) {\n          responderEvent.currentTarget = node;\n          if (shouldSetCallback(responderEvent) === true) {\n            // Start the path from the potential responder\n            var prunedIdPath = idPath.slice(idPath.indexOf(id));\n            return {\n              id,\n              node,\n              idPath: prunedIdPath\n            };\n          }\n        }\n      };\n\n      // capture\n      for (var i = idPath.length - 1; i >= 0; i--) {\n        var id = idPath[i];\n        var node = nodePath[i];\n        var result = check(id, node, shouldSetCallbackCaptureName);\n        if (result != null) {\n          return result;\n        }\n        if (responderEvent.isPropagationStopped() === true) {\n          return;\n        }\n      }\n\n      // bubble\n      if (bubbles) {\n        for (var _i = 0; _i < idPath.length; _i++) {\n          var _id = idPath[_i];\n          var _node = nodePath[_i];\n          var _result = check(_id, _node, shouldSetCallbackBubbleName);\n          if (_result != null) {\n            return _result;\n          }\n          if (responderEvent.isPropagationStopped() === true) {\n            return;\n          }\n        }\n      } else {\n        var _id2 = idPath[0];\n        var _node2 = nodePath[0];\n        var target = domEvent.target;\n        if (target === _node2) {\n          return check(_id2, _node2, shouldSetCallbackBubbleName);\n        }\n      }\n    }\n  }\n\n  /**\n   * Attempt to transfer the responder.\n   */\n  function attemptTransfer(responderEvent, wantsResponder) {\n    var _currentResponder2 = currentResponder,\n      currentId = _currentResponder2.id,\n      currentNode = _currentResponder2.node;\n    var id = wantsResponder.id,\n      node = wantsResponder.node;\n    var _getResponderConfig2 = getResponderConfig(id),\n      onResponderGrant = _getResponderConfig2.onResponderGrant,\n      onResponderReject = _getResponderConfig2.onResponderReject;\n    responderEvent.bubbles = false;\n    responderEvent.cancelable = false;\n    responderEvent.currentTarget = node;\n\n    // Set responder\n    if (currentId == null) {\n      if (onResponderGrant != null) {\n        responderEvent.currentTarget = node;\n        responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n        onResponderGrant(responderEvent);\n      }\n      changeCurrentResponder(wantsResponder);\n    }\n    // Negotiate with current responder\n    else {\n      var _getResponderConfig3 = getResponderConfig(currentId),\n        onResponderTerminate = _getResponderConfig3.onResponderTerminate,\n        onResponderTerminationRequest = _getResponderConfig3.onResponderTerminationRequest;\n      var allowTransfer = true;\n      if (onResponderTerminationRequest != null) {\n        responderEvent.currentTarget = currentNode;\n        responderEvent.dispatchConfig.registrationName = 'onResponderTerminationRequest';\n        if (onResponderTerminationRequest(responderEvent) === false) {\n          allowTransfer = false;\n        }\n      }\n      if (allowTransfer) {\n        // Terminate existing responder\n        if (onResponderTerminate != null) {\n          responderEvent.currentTarget = currentNode;\n          responderEvent.dispatchConfig.registrationName = 'onResponderTerminate';\n          onResponderTerminate(responderEvent);\n        }\n        // Grant next responder\n        if (onResponderGrant != null) {\n          responderEvent.currentTarget = node;\n          responderEvent.dispatchConfig.registrationName = 'onResponderGrant';\n          onResponderGrant(responderEvent);\n        }\n        changeCurrentResponder(wantsResponder);\n      } else {\n        // Reject responder request\n        if (onResponderReject != null) {\n          responderEvent.currentTarget = node;\n          responderEvent.dispatchConfig.registrationName = 'onResponderReject';\n          onResponderReject(responderEvent);\n        }\n      }\n    }\n  }\n\n  /* ------------ PUBLIC API ------------ */\n\n  /**\n   * Attach Listeners\n   *\n   * Use native events as ReactDOM doesn't have a non-plugin API to implement\n   * this system.\n   */\n  var documentEventsCapturePhase = ['blur', 'scroll'];\n  var documentEventsBubblePhase = [\n  // mouse\n  'mousedown', 'mousemove', 'mouseup', 'dragstart',\n  // touch\n  'touchstart', 'touchmove', 'touchend', 'touchcancel',\n  // other\n  'contextmenu', 'select', 'selectionchange'];\n  function attachListeners() {\n    if (_canUseDom.default && window.__reactResponderSystemActive == null) {\n      window.addEventListener('blur', eventListener);\n      documentEventsBubblePhase.forEach(eventType => {\n        document.addEventListener(eventType, eventListener);\n      });\n      documentEventsCapturePhase.forEach(eventType => {\n        document.addEventListener(eventType, eventListener, true);\n      });\n      window.__reactResponderSystemActive = true;\n    }\n  }\n\n  /**\n   * Register a node with the ResponderSystem.\n   */\n  function addNode(id, node, config) {\n    (0, _utils.setResponderId)(node, id);\n    responderListenersMap.set(id, config);\n  }\n\n  /**\n   * Unregister a node with the ResponderSystem.\n   */\n  function removeNode(id) {\n    if (currentResponder.id === id) {\n      terminateResponder();\n    }\n    if (responderListenersMap.has(id)) {\n      responderListenersMap.delete(id);\n    }\n  }\n\n  /**\n   * Allow the current responder to be terminated from within components to support\n   * more complex requirements, such as use with other React libraries for working\n   * with scroll views, input views, etc.\n   */\n  function terminateResponder() {\n    var _currentResponder3 = currentResponder,\n      id = _currentResponder3.id,\n      node = _currentResponder3.node;\n    if (id != null && node != null) {\n      var _getResponderConfig4 = getResponderConfig(id),\n        onResponderTerminate = _getResponderConfig4.onResponderTerminate;\n      if (onResponderTerminate != null) {\n        var event = (0, _createResponderEvent.default)({}, responderTouchHistoryStore);\n        event.currentTarget = node;\n        onResponderTerminate(event);\n      }\n      changeCurrentResponder(emptyResponder);\n    }\n    isEmulatingMouseEvents = false;\n    trackedTouchCount = 0;\n  }\n\n  /**\n   * Allow unit tests to inspect the current responder in the system.\n   * FOR TESTING ONLY.\n   */\n  function getResponderNode() {\n    return currentResponder.node;\n  }\n});","lineCount":600,"map":[[11,2,134,0],[11,6,134,0,"_createResponderEvent"],[11,27,134,0],[11,30,134,0,"_interopRequireDefault"],[11,52,134,0],[11,53,134,0,"require"],[11,60,134,0],[11,61,134,0,"_dependencyMap"],[11,75,134,0],[12,2,135,0],[12,6,135,0,"_ResponderEventTypes"],[12,26,135,0],[12,29,135,0,"require"],[12,36,135,0],[12,37,135,0,"_dependencyMap"],[12,51,135,0],[13,2,136,0],[13,6,136,0,"_utils"],[13,12,136,0],[13,15,136,0,"require"],[13,22,136,0],[13,23,136,0,"_dependencyMap"],[13,37,136,0],[14,2,137,0],[14,6,137,0,"_ResponderTouchHistoryStore"],[14,33,137,0],[14,36,137,0,"require"],[14,43,137,0],[14,44,137,0,"_dependencyMap"],[14,58,137,0],[15,2,138,0],[15,6,138,0,"_canUseDom"],[15,16,138,0],[15,19,138,0,"_interopRequireDefault"],[15,41,138,0],[15,42,138,0,"require"],[15,49,138,0],[15,50,138,0,"_dependencyMap"],[15,64,138,0],[16,2,1,0],[17,0,2,0],[18,0,3,0],[19,0,4,0],[20,0,5,0],[21,0,6,0],[22,0,7,0],[23,0,8,0],[25,2,10,0],[26,0,11,0],[27,0,12,0],[28,0,13,0],[29,0,14,0],[30,0,15,0],[31,0,16,0],[32,0,17,0],[33,0,18,0],[34,0,19,0],[35,0,20,0],[36,0,21,0],[37,0,22,0],[38,0,23,0],[39,0,24,0],[40,0,25,0],[41,0,26,0],[42,0,27,0],[43,0,28,0],[44,0,29,0],[45,0,30,0],[46,0,31,0],[47,0,32,0],[48,0,33,0],[49,0,34,0],[50,0,35,0],[51,0,36,0],[52,0,37,0],[53,0,38,0],[54,0,39,0],[55,0,40,0],[56,0,41,0],[57,0,42,0],[58,0,43,0],[59,0,44,0],[60,0,45,0],[61,0,46,0],[62,0,47,0],[63,0,48,0],[64,0,49,0],[65,0,50,0],[66,0,51,0],[67,0,52,0],[68,0,53,0],[70,2,55,0],[71,0,56,0],[72,0,57,0],[73,0,58,0],[74,0,59,0],[75,0,60,0],[76,0,61,0],[77,0,62,0],[78,0,63,0],[79,0,64,0],[80,0,65,0],[81,0,66,0],[82,0,67,0],[83,0,68,0],[84,0,69,0],[85,0,70,0],[86,0,71,0],[87,0,72,0],[88,0,73,0],[89,0,74,0],[90,0,75,0],[91,0,76,0],[92,0,77,0],[93,0,78,0],[94,0,79,0],[95,0,80,0],[96,0,81,0],[97,0,82,0],[98,0,83,0],[99,0,84,0],[100,0,85,0],[101,0,86,0],[102,0,87,0],[103,0,88,0],[104,0,89,0],[105,0,90,0],[106,0,91,0],[107,0,92,0],[108,0,93,0],[109,0,94,0],[110,0,95,0],[111,0,96,0],[112,0,97,0],[113,0,98,0],[114,0,99,0],[115,0,100,0],[116,0,101,0],[117,0,102,0],[118,0,103,0],[119,0,104,0],[120,0,105,0],[121,0,106,0],[122,0,107,0],[123,0,108,0],[124,0,109,0],[125,0,110,0],[126,0,111,0],[127,0,112,0],[128,0,113,0],[129,0,114,0],[130,0,115,0],[131,0,116,0],[132,0,117,0],[133,0,118,0],[134,0,119,0],[135,0,120,0],[136,0,121,0],[137,0,122,0],[138,0,123,0],[139,0,124,0],[140,0,125,0],[141,0,126,0],[142,0,127,0],[143,0,128,0],[144,0,129,0],[145,0,130,0],[146,0,131,0],[147,0,132,0],[149,2,140,0],[151,2,142,0],[151,6,142,4,"emptyObject"],[151,17,142,15],[151,20,142,18],[151,21,142,19],[151,22,142,20],[153,2,144,0],[155,2,146,0],[155,6,146,4,"startRegistration"],[155,23,146,21],[155,26,146,24],[155,27,146,25],[155,61,146,59],[155,63,146,61],[155,90,146,88],[155,92,146,90],[156,4,147,2,"bubbles"],[156,11,147,9],[156,13,147,11],[157,2,148,0],[157,3,148,1],[157,4,148,2],[158,2,149,0],[158,6,149,4,"moveRegistration"],[158,22,149,20],[158,25,149,23],[158,26,149,24],[158,59,149,57],[158,61,149,59],[158,87,149,85],[158,89,149,87],[159,4,150,2,"bubbles"],[159,11,150,9],[159,13,150,11],[160,2,151,0],[160,3,151,1],[160,4,151,2],[161,2,152,0],[161,6,152,4,"scrollRegistration"],[161,24,152,22],[161,27,152,25],[161,28,152,26],[161,63,152,61],[161,65,152,63],[161,93,152,91],[161,95,152,93],[162,4,153,2,"bubbles"],[162,11,153,9],[162,13,153,11],[163,2,154,0],[163,3,154,1],[163,4,154,2],[164,2,155,0],[164,6,155,4,"shouldSetResponderEvents"],[164,30,155,28],[164,33,155,31],[165,4,156,2,"touchstart"],[165,14,156,12],[165,16,156,14,"startRegistration"],[165,33,156,31],[166,4,157,2,"mousedown"],[166,13,157,11],[166,15,157,13,"startRegistration"],[166,32,157,30],[167,4,158,2,"touchmove"],[167,13,158,11],[167,15,158,13,"moveRegistration"],[167,31,158,29],[168,4,159,2,"mousemove"],[168,13,159,11],[168,15,159,13,"moveRegistration"],[168,31,159,29],[169,4,160,2,"scroll"],[169,10,160,8],[169,12,160,10,"scrollRegistration"],[170,2,161,0],[170,3,161,1],[171,2,162,0],[171,6,162,4,"emptyResponder"],[171,20,162,18],[171,23,162,21],[172,4,163,2,"id"],[172,6,163,4],[172,8,163,6],[172,12,163,10],[173,4,164,2,"idPath"],[173,10,164,8],[173,12,164,10],[173,16,164,14],[174,4,165,2,"node"],[174,8,165,6],[174,10,165,8],[175,2,166,0],[175,3,166,1],[176,2,167,0],[176,6,167,4,"responderListenersMap"],[176,27,167,25],[176,30,167,28],[176,34,167,32,"Map"],[176,37,167,35],[176,38,167,36],[176,39,167,37],[177,2,168,0],[177,6,168,4,"isEmulatingMouseEvents"],[177,28,168,26],[177,31,168,29],[177,36,168,34],[178,2,169,0],[178,6,169,4,"trackedTouchCount"],[178,23,169,21],[178,26,169,24],[178,27,169,25],[179,2,170,0],[179,6,170,4,"currentResponder"],[179,22,170,20],[179,25,170,23],[180,4,171,2,"id"],[180,6,171,4],[180,8,171,6],[180,12,171,10],[181,4,172,2,"node"],[181,8,172,6],[181,10,172,8],[181,14,172,12],[182,4,173,2,"idPath"],[182,10,173,8],[182,12,173,10],[183,2,174,0],[183,3,174,1],[184,2,175,0],[184,6,175,4,"responderTouchHistoryStore"],[184,32,175,30],[184,35,175,33],[184,39,175,37,"ResponderTouchHistoryStore"],[184,93,175,63],[184,94,175,64],[184,95,175,65],[185,2,176,0],[185,11,176,9,"changeCurrentResponder"],[185,33,176,31,"changeCurrentResponder"],[185,34,176,32,"responder"],[185,43,176,41],[185,45,176,43],[186,4,177,2,"currentResponder"],[186,20,177,18],[186,23,177,21,"responder"],[186,32,177,30],[187,2,178,0],[188,2,179,0],[188,11,179,9,"getResponderConfig"],[188,29,179,27,"getResponderConfig"],[188,30,179,28,"id"],[188,32,179,30],[188,34,179,32],[189,4,180,2],[189,8,180,6,"config"],[189,14,180,12],[189,17,180,15,"responderListenersMap"],[189,38,180,36],[189,39,180,37,"get"],[189,42,180,40],[189,43,180,41,"id"],[189,45,180,43],[189,46,180,44],[190,4,181,2],[190,11,181,9,"config"],[190,17,181,15],[190,21,181,19],[190,25,181,23],[190,28,181,26,"config"],[190,34,181,32],[190,37,181,35,"emptyObject"],[190,48,181,46],[191,2,182,0],[193,2,184,0],[194,0,185,0],[195,0,186,0],[196,0,187,0],[197,0,188,0],[198,0,189,0],[199,0,190,0],[200,0,191,0],[201,0,192,0],[202,0,193,0],[203,2,194,0],[203,11,194,9,"eventListener"],[203,24,194,22,"eventListener"],[203,25,194,23,"domEvent"],[203,33,194,31],[203,35,194,33],[204,4,195,2],[204,8,195,6,"eventType"],[204,17,195,15],[204,20,195,18,"domEvent"],[204,28,195,26],[204,29,195,27,"type"],[204,33,195,31],[205,4,196,2],[205,8,196,6,"eventTarget"],[205,19,196,17],[205,22,196,20,"domEvent"],[205,30,196,28],[205,31,196,29,"target"],[205,37,196,35],[207,4,198,2],[208,0,199,0],[209,0,200,0],[210,0,201,0],[211,0,202,0],[212,0,203,0],[214,4,205,2],[215,4,206,2],[215,8,206,6,"eventType"],[215,17,206,15],[215,22,206,20],[215,34,206,32],[215,36,206,34],[216,6,207,4,"isEmulatingMouseEvents"],[216,28,207,26],[216,31,207,29],[216,35,207,33],[217,4,208,2],[218,4,209,2],[219,4,210,2],[219,8,210,6,"eventType"],[219,17,210,15],[219,22,210,20],[219,33,210,31],[219,37,210,35,"trackedTouchCount"],[219,54,210,52],[219,57,210,55],[219,58,210,56],[219,60,210,58],[220,6,211,4,"isEmulatingMouseEvents"],[220,28,211,26],[220,31,211,29],[220,36,211,34],[221,4,212,2],[222,4,213,2],[223,4,214,2],[224,4,215,2],[225,4,216,2,"eventType"],[225,13,216,11],[225,18,216,16],[225,29,216,27],[225,33,216,31,"isEmulatingMouseEvents"],[225,55,216,53],[225,59,216,57,"eventType"],[225,68,216,66],[225,73,216,71],[225,84,216,82],[225,88,216,86,"isEmulatingMouseEvents"],[225,110,216,108],[226,4,217,2],[227,4,218,2,"eventType"],[227,13,218,11],[227,18,218,16],[227,29,218,27],[227,33,218,31,"trackedTouchCount"],[227,50,218,48],[227,53,218,51],[227,54,218,52],[227,56,218,54],[228,6,219,4],[229,4,220,2],[230,4,221,2],[231,4,222,2],[231,8,222,6,"isEmulatingMouseEvents"],[231,30,222,28],[231,34,222,32,"eventType"],[231,43,222,41],[231,48,222,46],[231,57,222,55],[231,59,222,57],[232,6,223,4],[232,10,223,8,"trackedTouchCount"],[232,27,223,25],[232,32,223,30],[232,33,223,31],[232,35,223,33],[233,8,224,6,"isEmulatingMouseEvents"],[233,30,224,28],[233,33,224,31],[233,38,224,36],[234,6,225,4],[235,6,226,4],[236,4,227,2],[237,4,228,2],[237,8,228,6,"isStartEvent"],[237,20,228,18],[237,23,228,21],[237,27,228,21,"isStartish"],[237,58,228,31],[237,60,228,32,"eventType"],[237,69,228,41],[237,70,228,42],[237,74,228,46],[237,78,228,46,"isPrimaryPointerDown"],[237,105,228,66],[237,107,228,67,"domEvent"],[237,115,228,75],[237,116,228,76],[238,4,229,2],[238,8,229,6,"isMoveEvent"],[238,19,229,17],[238,22,229,20],[238,26,229,20,"isMoveish"],[238,56,229,29],[238,58,229,30,"eventType"],[238,67,229,39],[238,68,229,40],[239,4,230,2],[239,8,230,6,"isEndEvent"],[239,18,230,16],[239,21,230,19],[239,25,230,19,"isEndish"],[239,54,230,27],[239,56,230,28,"eventType"],[239,65,230,37],[239,66,230,38],[240,4,231,2],[240,8,231,6,"isScrollEvent"],[240,21,231,19],[240,24,231,22],[240,28,231,22,"isScroll"],[240,57,231,30],[240,59,231,31,"eventType"],[240,68,231,40],[240,69,231,41],[241,4,232,2],[241,8,232,6,"isSelectionChangeEvent"],[241,30,232,28],[241,33,232,31],[241,37,232,31,"isSelectionChange"],[241,75,232,48],[241,77,232,49,"eventType"],[241,86,232,58],[241,87,232,59],[242,4,233,2],[242,8,233,6,"responderEvent"],[242,22,233,20],[242,25,233,23],[242,29,233,23,"createResponderEvent"],[242,58,233,43],[242,60,233,44,"domEvent"],[242,68,233,52],[242,70,233,54,"responderTouchHistoryStore"],[242,96,233,80],[242,97,233,81],[244,4,235,2],[245,0,236,0],[246,0,237,0],[248,4,239,2],[248,8,239,6,"isStartEvent"],[248,20,239,18],[248,24,239,22,"isMoveEvent"],[248,35,239,33],[248,39,239,37,"isEndEvent"],[248,49,239,47],[248,51,239,49],[249,6,240,4],[249,10,240,8,"domEvent"],[249,18,240,16],[249,19,240,17,"touches"],[249,26,240,24],[249,28,240,26],[250,8,241,6,"trackedTouchCount"],[250,25,241,23],[250,28,241,26,"domEvent"],[250,36,241,34],[250,37,241,35,"touches"],[250,44,241,42],[250,45,241,43,"length"],[250,51,241,49],[251,6,242,4],[251,7,242,5],[251,13,242,11],[252,8,243,6],[252,12,243,10,"isStartEvent"],[252,24,243,22],[252,26,243,24],[253,10,244,8,"trackedTouchCount"],[253,27,244,25],[253,30,244,28],[253,31,244,29],[254,8,245,6],[254,9,245,7],[254,15,245,13],[254,19,245,17,"isEndEvent"],[254,29,245,27],[254,31,245,29],[255,10,246,8,"trackedTouchCount"],[255,27,246,25],[255,30,246,28],[255,31,246,29],[256,8,247,6],[257,6,248,4],[258,6,249,4,"responderTouchHistoryStore"],[258,32,249,30],[258,33,249,31,"recordTouchTrack"],[258,49,249,47],[258,50,249,48,"eventType"],[258,59,249,57],[258,61,249,59,"responderEvent"],[258,75,249,73],[258,76,249,74,"nativeEvent"],[258,87,249,85],[258,88,249,86],[259,4,250,2],[261,4,252,2],[262,0,253,0],[263,0,254,0],[265,4,256,2],[265,8,256,6,"eventPaths"],[265,18,256,16],[265,21,256,19],[265,25,256,19,"getResponderPaths"],[265,49,256,36],[265,51,256,37,"domEvent"],[265,59,256,45],[265,60,256,46],[266,4,257,2],[266,8,257,6,"wasNegotiated"],[266,21,257,19],[266,24,257,22],[266,29,257,27],[267,4,258,2],[267,8,258,6,"wantsResponder"],[267,22,258,20],[269,4,260,2],[270,4,261,2],[270,8,261,6,"isStartEvent"],[270,20,261,18],[270,24,261,22,"isMoveEvent"],[270,35,261,33],[270,39,261,37,"isScrollEvent"],[270,52,261,50],[270,56,261,54,"trackedTouchCount"],[270,73,261,71],[270,76,261,74],[270,77,261,75],[270,79,261,77],[271,6,262,4],[272,6,263,4],[273,6,264,4],[273,10,264,8,"currentResponderIdPath"],[273,32,264,30],[273,35,264,33,"currentResponder"],[273,51,264,49],[273,52,264,50,"idPath"],[273,58,264,56],[274,6,265,4],[274,10,265,8,"eventIdPath"],[274,21,265,19],[274,24,265,22,"eventPaths"],[274,34,265,32],[274,35,265,33,"idPath"],[274,41,265,39],[275,6,266,4],[275,10,266,8,"currentResponderIdPath"],[275,32,266,30],[275,36,266,34],[275,40,266,38],[275,44,266,42,"eventIdPath"],[275,55,266,53],[275,59,266,57],[275,63,266,61],[275,65,266,63],[276,8,267,6],[276,12,267,10,"lowestCommonAncestor"],[276,32,267,30],[276,35,267,33],[276,39,267,33,"getLowestCommonAncestor"],[276,69,267,56],[276,71,267,57,"currentResponderIdPath"],[276,93,267,79],[276,95,267,81,"eventIdPath"],[276,106,267,92],[276,107,267,93],[277,8,268,6],[277,12,268,10,"lowestCommonAncestor"],[277,32,268,30],[277,36,268,34],[277,40,268,38],[277,42,268,40],[278,10,269,8],[278,14,269,12,"indexOfLowestCommonAncestor"],[278,41,269,39],[278,44,269,42,"eventIdPath"],[278,55,269,53],[278,56,269,54,"indexOf"],[278,63,269,61],[278,64,269,62,"lowestCommonAncestor"],[278,84,269,82],[278,85,269,83],[279,10,270,8],[280,10,271,8],[280,14,271,12,"index"],[280,19,271,17],[280,22,271,20,"indexOfLowestCommonAncestor"],[280,49,271,47],[280,53,271,51,"lowestCommonAncestor"],[280,73,271,71],[280,78,271,76,"currentResponder"],[280,94,271,92],[280,95,271,93,"id"],[280,97,271,95],[280,100,271,98],[280,101,271,99],[280,104,271,102],[280,105,271,103],[280,106,271,104],[281,10,272,8,"eventPaths"],[281,20,272,18],[281,23,272,21],[282,12,273,10,"idPath"],[282,18,273,16],[282,20,273,18,"eventIdPath"],[282,31,273,29],[282,32,273,30,"slice"],[282,37,273,35],[282,38,273,36,"index"],[282,43,273,41],[282,44,273,42],[283,12,274,10,"nodePath"],[283,20,274,18],[283,22,274,20,"eventPaths"],[283,32,274,30],[283,33,274,31,"nodePath"],[283,41,274,39],[283,42,274,40,"slice"],[283,47,274,45],[283,48,274,46,"index"],[283,53,274,51],[284,10,275,8],[284,11,275,9],[285,8,276,6],[285,9,276,7],[285,15,276,13],[286,10,277,8,"eventPaths"],[286,20,277,18],[286,23,277,21],[286,27,277,25],[287,8,278,6],[288,6,279,4],[289,6,280,4],[289,10,280,8,"eventPaths"],[289,20,280,18],[289,24,280,22],[289,28,280,26],[289,30,280,28],[290,8,281,6],[291,8,282,6,"wantsResponder"],[291,22,282,20],[291,25,282,23,"findWantsResponder"],[291,43,282,41],[291,44,282,42,"eventPaths"],[291,54,282,52],[291,56,282,54,"domEvent"],[291,64,282,62],[291,66,282,64,"responderEvent"],[291,80,282,78],[291,81,282,79],[292,8,283,6],[292,12,283,10,"wantsResponder"],[292,26,283,24],[292,30,283,28],[292,34,283,32],[292,36,283,34],[293,10,284,8],[294,10,285,8,"attemptTransfer"],[294,25,285,23],[294,26,285,24,"responderEvent"],[294,40,285,38],[294,42,285,40,"wantsResponder"],[294,56,285,54],[294,57,285,55],[295,10,286,8,"wasNegotiated"],[295,23,286,21],[295,26,286,24],[295,30,286,28],[296,8,287,6],[297,6,288,4],[298,4,289,2],[300,4,291,2],[301,4,292,2],[301,8,292,6,"currentResponder"],[301,24,292,22],[301,25,292,23,"id"],[301,27,292,25],[301,31,292,29],[301,35,292,33],[301,39,292,37,"currentResponder"],[301,55,292,53],[301,56,292,54,"node"],[301,60,292,58],[301,64,292,62],[301,68,292,66],[301,70,292,68],[302,6,293,4],[302,10,293,8,"_currentResponder"],[302,27,293,25],[302,30,293,28,"currentResponder"],[302,46,293,44],[303,8,294,6,"id"],[303,10,294,8],[303,13,294,11,"_currentResponder"],[303,30,294,28],[303,31,294,29,"id"],[303,33,294,31],[304,8,295,6,"node"],[304,12,295,10],[304,15,295,13,"_currentResponder"],[304,32,295,30],[304,33,295,31,"node"],[304,37,295,35],[305,6,296,4],[305,10,296,8,"_getResponderConfig"],[305,29,296,27],[305,32,296,30,"getResponderConfig"],[305,50,296,48],[305,51,296,49,"id"],[305,53,296,51],[305,54,296,52],[306,8,297,6,"onResponderStart"],[306,24,297,22],[306,27,297,25,"_getResponderConfig"],[306,46,297,44],[306,47,297,45,"onResponderStart"],[306,63,297,61],[307,8,298,6,"onResponderMove"],[307,23,298,21],[307,26,298,24,"_getResponderConfig"],[307,45,298,43],[307,46,298,44,"onResponderMove"],[307,61,298,59],[308,8,299,6,"onResponderEnd"],[308,22,299,20],[308,25,299,23,"_getResponderConfig"],[308,44,299,42],[308,45,299,43,"onResponderEnd"],[308,59,299,57],[309,8,300,6,"onResponderRelease"],[309,26,300,24],[309,29,300,27,"_getResponderConfig"],[309,48,300,46],[309,49,300,47,"onResponderRelease"],[309,67,300,65],[310,8,301,6,"onResponderTerminate"],[310,28,301,26],[310,31,301,29,"_getResponderConfig"],[310,50,301,48],[310,51,301,49,"onResponderTerminate"],[310,71,301,69],[311,8,302,6,"onResponderTerminationRequest"],[311,37,302,35],[311,40,302,38,"_getResponderConfig"],[311,59,302,57],[311,60,302,58,"onResponderTerminationRequest"],[311,89,302,87],[312,6,303,4,"responderEvent"],[312,20,303,18],[312,21,303,19,"bubbles"],[312,28,303,26],[312,31,303,29],[312,36,303,34],[313,6,304,4,"responderEvent"],[313,20,304,18],[313,21,304,19,"cancelable"],[313,31,304,29],[313,34,304,32],[313,39,304,37],[314,6,305,4,"responderEvent"],[314,20,305,18],[314,21,305,19,"currentTarget"],[314,34,305,32],[314,37,305,35,"node"],[314,41,305,39],[316,6,307,4],[317,6,308,4],[317,10,308,8,"isStartEvent"],[317,22,308,20],[317,24,308,22],[318,8,309,6],[318,12,309,10,"onResponderStart"],[318,28,309,26],[318,32,309,30],[318,36,309,34],[318,38,309,36],[319,10,310,8,"responderEvent"],[319,24,310,22],[319,25,310,23,"dispatchConfig"],[319,39,310,37],[319,40,310,38,"registrationName"],[319,56,310,54],[319,59,310,57],[319,77,310,75],[320,10,311,8,"onResponderStart"],[320,26,311,24],[320,27,311,25,"responderEvent"],[320,41,311,39],[320,42,311,40],[321,8,312,6],[322,6,313,4],[323,6,314,4],[324,6,314,4],[324,11,315,9],[324,15,315,13,"isMoveEvent"],[324,26,315,24],[324,28,315,26],[325,8,316,6],[325,12,316,10,"onResponderMove"],[325,27,316,25],[325,31,316,29],[325,35,316,33],[325,37,316,35],[326,10,317,8,"responderEvent"],[326,24,317,22],[326,25,317,23,"dispatchConfig"],[326,39,317,37],[326,40,317,38,"registrationName"],[326,56,317,54],[326,59,317,57],[326,76,317,74],[327,10,318,8,"onResponderMove"],[327,25,318,23],[327,26,318,24,"responderEvent"],[327,40,318,38],[327,41,318,39],[328,8,319,6],[329,6,320,4],[329,7,320,5],[329,13,320,11],[330,8,321,6],[330,12,321,10,"isTerminateEvent"],[330,28,321,26],[330,31,321,29],[330,35,321,29,"isCancelish"],[330,67,321,40],[330,69,321,41,"eventType"],[330,78,321,50],[330,79,321,51],[331,8,322,6],[332,8,323,6,"eventType"],[332,17,323,15],[332,22,323,20],[332,35,323,33],[333,8,324,6],[334,8,325,6,"eventType"],[334,17,325,15],[334,22,325,20],[334,28,325,26],[334,32,325,30,"eventTarget"],[334,43,325,41],[334,48,325,46,"window"],[334,54,325,52],[335,8,326,6],[336,8,327,6,"eventType"],[336,17,327,15],[336,22,327,20],[336,28,327,26],[336,32,327,30,"eventTarget"],[336,43,327,41],[336,44,327,42,"contains"],[336,52,327,50],[336,53,327,51,"node"],[336,57,327,55],[336,58,327,56],[336,62,327,60,"domEvent"],[336,70,327,68],[336,71,327,69,"relatedTarget"],[336,84,327,82],[336,89,327,87,"node"],[336,93,327,91],[337,8,328,6],[338,8,329,6,"isScrollEvent"],[338,21,329,19],[338,25,329,23,"trackedTouchCount"],[338,42,329,40],[338,47,329,45],[338,48,329,46],[339,8,330,6],[340,8,331,6,"isScrollEvent"],[340,21,331,19],[340,25,331,23,"eventTarget"],[340,36,331,34],[340,37,331,35,"contains"],[340,45,331,43],[340,46,331,44,"node"],[340,50,331,48],[340,51,331,49],[340,55,331,53,"eventTarget"],[340,66,331,64],[340,71,331,69,"node"],[340,75,331,73],[341,8,332,6],[342,8,333,6,"isSelectionChangeEvent"],[342,30,333,28],[342,34,333,32],[342,38,333,32,"hasValidSelection"],[342,62,333,49],[342,64,333,50,"domEvent"],[342,72,333,58],[342,73,333,59],[343,8,334,6],[343,12,334,10,"isReleaseEvent"],[343,26,334,24],[343,29,334,27,"isEndEvent"],[343,39,334,37],[343,43,334,41],[343,44,334,42,"isTerminateEvent"],[343,60,334,58],[343,64,334,62],[343,65,334,63],[343,69,334,63,"hasTargetTouches"],[343,92,334,79],[343,94,334,80,"node"],[343,98,334,84],[343,100,334,86,"domEvent"],[343,108,334,94],[343,109,334,95,"touches"],[343,116,334,102],[343,117,334,103],[345,8,336,6],[346,8,337,6],[346,12,337,10,"isEndEvent"],[346,22,337,20],[346,24,337,22],[347,10,338,8],[347,14,338,12,"onResponderEnd"],[347,28,338,26],[347,32,338,30],[347,36,338,34],[347,38,338,36],[348,12,339,10,"responderEvent"],[348,26,339,24],[348,27,339,25,"dispatchConfig"],[348,41,339,39],[348,42,339,40,"registrationName"],[348,58,339,56],[348,61,339,59],[348,77,339,75],[349,12,340,10,"onResponderEnd"],[349,26,340,24],[349,27,340,25,"responderEvent"],[349,41,340,39],[349,42,340,40],[350,10,341,8],[351,8,342,6],[352,8,343,6],[353,8,344,6],[353,12,344,10,"isReleaseEvent"],[353,26,344,24],[353,28,344,26],[354,10,345,8],[354,14,345,12,"onResponderRelease"],[354,32,345,30],[354,36,345,34],[354,40,345,38],[354,42,345,40],[355,12,346,10,"responderEvent"],[355,26,346,24],[355,27,346,25,"dispatchConfig"],[355,41,346,39],[355,42,346,40,"registrationName"],[355,58,346,56],[355,61,346,59],[355,81,346,79],[356,12,347,10,"onResponderRelease"],[356,30,347,28],[356,31,347,29,"responderEvent"],[356,45,347,43],[356,46,347,44],[357,10,348,8],[358,10,349,8,"changeCurrentResponder"],[358,32,349,30],[358,33,349,31,"emptyResponder"],[358,47,349,45],[358,48,349,46],[359,8,350,6],[360,8,351,6],[361,8,352,6],[361,12,352,10,"isTerminateEvent"],[361,28,352,26],[361,30,352,28],[362,10,353,8],[362,14,353,12,"shouldTerminate"],[362,29,353,27],[362,32,353,30],[362,36,353,34],[364,10,355,8],[365,10,356,8],[365,14,356,12,"eventType"],[365,23,356,21],[365,28,356,26],[365,41,356,39],[365,45,356,43,"eventType"],[365,54,356,52],[365,59,356,57],[365,67,356,65],[365,71,356,69,"eventType"],[365,80,356,78],[365,85,356,83],[365,102,356,100],[365,104,356,102],[366,12,357,10],[367,12,358,10],[367,16,358,14,"wasNegotiated"],[367,29,358,27],[367,31,358,29],[368,14,359,12,"shouldTerminate"],[368,29,359,27],[368,32,359,30],[368,37,359,35],[369,12,360,10],[369,13,360,11],[369,19,360,17],[369,23,360,21,"onResponderTerminationRequest"],[369,52,360,50],[369,56,360,54],[369,60,360,58],[369,62,360,60],[370,14,361,12,"responderEvent"],[370,28,361,26],[370,29,361,27,"dispatchConfig"],[370,43,361,41],[370,44,361,42,"registrationName"],[370,60,361,58],[370,63,361,61],[370,94,361,92],[371,14,362,12],[371,18,362,16,"onResponderTerminationRequest"],[371,47,362,45],[371,48,362,46,"responderEvent"],[371,62,362,60],[371,63,362,61],[371,68,362,66],[371,73,362,71],[371,75,362,73],[372,16,363,14,"shouldTerminate"],[372,31,363,29],[372,34,363,32],[372,39,363,37],[373,14,364,12],[374,12,365,10],[375,10,366,8],[376,10,367,8],[376,14,367,12,"shouldTerminate"],[376,29,367,27],[376,31,367,29],[377,12,368,10],[377,16,368,14,"onResponderTerminate"],[377,36,368,34],[377,40,368,38],[377,44,368,42],[377,46,368,44],[378,14,369,12,"responderEvent"],[378,28,369,26],[378,29,369,27,"dispatchConfig"],[378,43,369,41],[378,44,369,42,"registrationName"],[378,60,369,58],[378,63,369,61],[378,85,369,83],[379,14,370,12,"onResponderTerminate"],[379,34,370,32],[379,35,370,33,"responderEvent"],[379,49,370,47],[379,50,370,48],[380,12,371,10],[381,12,372,10,"changeCurrentResponder"],[381,34,372,32],[381,35,372,33,"emptyResponder"],[381,49,372,47],[381,50,372,48],[382,12,373,10,"isEmulatingMouseEvents"],[382,34,373,32],[382,37,373,35],[382,42,373,40],[383,12,374,10,"trackedTouchCount"],[383,29,374,27],[383,32,374,30],[383,33,374,31],[384,10,375,8],[385,8,376,6],[386,6,377,4],[387,4,378,2],[388,2,379,0],[390,2,381,0],[391,0,382,0],[392,0,383,0],[393,0,384,0],[394,0,385,0],[395,2,386,0],[395,11,386,9,"findWantsResponder"],[395,29,386,27,"findWantsResponder"],[395,30,386,28,"eventPaths"],[395,40,386,38],[395,42,386,40,"domEvent"],[395,50,386,48],[395,52,386,50,"responderEvent"],[395,66,386,64],[395,68,386,66],[396,4,387,2],[396,8,387,6,"shouldSetCallbacks"],[396,26,387,24],[396,29,387,27,"shouldSetResponderEvents"],[396,53,387,51],[396,54,387,52,"domEvent"],[396,62,387,60],[396,63,387,61,"type"],[396,67,387,65],[396,68,387,66],[396,69,387,67],[396,70,387,68],[398,4,389,2],[398,8,389,6,"shouldSetCallbacks"],[398,26,389,24],[398,30,389,28],[398,34,389,32],[398,36,389,34],[399,6,390,4],[399,10,390,8,"idPath"],[399,16,390,14],[399,19,390,17,"eventPaths"],[399,29,390,27],[399,30,390,28,"idPath"],[399,36,390,34],[400,8,391,6,"nodePath"],[400,16,391,14],[400,19,391,17,"eventPaths"],[400,29,391,27],[400,30,391,28,"nodePath"],[400,38,391,36],[401,6,392,4],[401,10,392,8,"shouldSetCallbackCaptureName"],[401,38,392,36],[401,41,392,39,"shouldSetCallbacks"],[401,59,392,57],[401,60,392,58],[401,61,392,59],[401,62,392,60],[402,6,393,4],[402,10,393,8,"shouldSetCallbackBubbleName"],[402,37,393,35],[402,40,393,38,"shouldSetCallbacks"],[402,58,393,56],[402,59,393,57],[402,60,393,58],[402,61,393,59],[403,6,394,4],[403,10,394,8,"bubbles"],[403,17,394,15],[403,20,394,18,"shouldSetCallbacks"],[403,38,394,36],[403,39,394,37],[403,40,394,38],[403,41,394,39],[403,42,394,40,"bubbles"],[403,49,394,47],[404,6,395,4],[404,10,395,8,"check"],[404,15,395,13],[404,18,395,16],[404,27,395,25,"check"],[404,32,395,30,"check"],[404,33,395,31,"id"],[404,35,395,33],[404,37,395,35,"node"],[404,41,395,39],[404,43,395,41,"callbackName"],[404,55,395,53],[404,57,395,55],[405,8,396,6],[405,12,396,10,"config"],[405,18,396,16],[405,21,396,19,"getResponderConfig"],[405,39,396,37],[405,40,396,38,"id"],[405,42,396,40],[405,43,396,41],[406,8,397,6],[406,12,397,10,"shouldSetCallback"],[406,29,397,27],[406,32,397,30,"config"],[406,38,397,36],[406,39,397,37,"callbackName"],[406,51,397,49],[406,52,397,50],[407,8,398,6],[407,12,398,10,"shouldSetCallback"],[407,29,398,27],[407,33,398,31],[407,37,398,35],[407,39,398,37],[408,10,399,8,"responderEvent"],[408,24,399,22],[408,25,399,23,"currentTarget"],[408,38,399,36],[408,41,399,39,"node"],[408,45,399,43],[409,10,400,8],[409,14,400,12,"shouldSetCallback"],[409,31,400,29],[409,32,400,30,"responderEvent"],[409,46,400,44],[409,47,400,45],[409,52,400,50],[409,56,400,54],[409,58,400,56],[410,12,401,10],[411,12,402,10],[411,16,402,14,"prunedIdPath"],[411,28,402,26],[411,31,402,29,"idPath"],[411,37,402,35],[411,38,402,36,"slice"],[411,43,402,41],[411,44,402,42,"idPath"],[411,50,402,48],[411,51,402,49,"indexOf"],[411,58,402,56],[411,59,402,57,"id"],[411,61,402,59],[411,62,402,60],[411,63,402,61],[412,12,403,10],[412,19,403,17],[413,14,404,12,"id"],[413,16,404,14],[414,14,405,12,"node"],[414,18,405,16],[415,14,406,12,"idPath"],[415,20,406,18],[415,22,406,20,"prunedIdPath"],[416,12,407,10],[416,13,407,11],[417,10,408,8],[418,8,409,6],[419,6,410,4],[419,7,410,5],[421,6,412,4],[422,6,413,4],[422,11,413,9],[422,15,413,13,"i"],[422,16,413,14],[422,19,413,17,"idPath"],[422,25,413,23],[422,26,413,24,"length"],[422,32,413,30],[422,35,413,33],[422,36,413,34],[422,38,413,36,"i"],[422,39,413,37],[422,43,413,41],[422,44,413,42],[422,46,413,44,"i"],[422,47,413,45],[422,49,413,47],[422,51,413,49],[423,8,414,6],[423,12,414,10,"id"],[423,14,414,12],[423,17,414,15,"idPath"],[423,23,414,21],[423,24,414,22,"i"],[423,25,414,23],[423,26,414,24],[424,8,415,6],[424,12,415,10,"node"],[424,16,415,14],[424,19,415,17,"nodePath"],[424,27,415,25],[424,28,415,26,"i"],[424,29,415,27],[424,30,415,28],[425,8,416,6],[425,12,416,10,"result"],[425,18,416,16],[425,21,416,19,"check"],[425,26,416,24],[425,27,416,25,"id"],[425,29,416,27],[425,31,416,29,"node"],[425,35,416,33],[425,37,416,35,"shouldSetCallbackCaptureName"],[425,65,416,63],[425,66,416,64],[426,8,417,6],[426,12,417,10,"result"],[426,18,417,16],[426,22,417,20],[426,26,417,24],[426,28,417,26],[427,10,418,8],[427,17,418,15,"result"],[427,23,418,21],[428,8,419,6],[429,8,420,6],[429,12,420,10,"responderEvent"],[429,26,420,24],[429,27,420,25,"isPropagationStopped"],[429,47,420,45],[429,48,420,46],[429,49,420,47],[429,54,420,52],[429,58,420,56],[429,60,420,58],[430,10,421,8],[431,8,422,6],[432,6,423,4],[434,6,425,4],[435,6,426,4],[435,10,426,8,"bubbles"],[435,17,426,15],[435,19,426,17],[436,8,427,6],[436,13,427,11],[436,17,427,15,"_i"],[436,19,427,17],[436,22,427,20],[436,23,427,21],[436,25,427,23,"_i"],[436,27,427,25],[436,30,427,28,"idPath"],[436,36,427,34],[436,37,427,35,"length"],[436,43,427,41],[436,45,427,43,"_i"],[436,47,427,45],[436,49,427,47],[436,51,427,49],[437,10,428,8],[437,14,428,12,"_id"],[437,17,428,15],[437,20,428,18,"idPath"],[437,26,428,24],[437,27,428,25,"_i"],[437,29,428,27],[437,30,428,28],[438,10,429,8],[438,14,429,12,"_node"],[438,19,429,17],[438,22,429,20,"nodePath"],[438,30,429,28],[438,31,429,29,"_i"],[438,33,429,31],[438,34,429,32],[439,10,430,8],[439,14,430,12,"_result"],[439,21,430,19],[439,24,430,22,"check"],[439,29,430,27],[439,30,430,28,"_id"],[439,33,430,31],[439,35,430,33,"_node"],[439,40,430,38],[439,42,430,40,"shouldSetCallbackBubbleName"],[439,69,430,67],[439,70,430,68],[440,10,431,8],[440,14,431,12,"_result"],[440,21,431,19],[440,25,431,23],[440,29,431,27],[440,31,431,29],[441,12,432,10],[441,19,432,17,"_result"],[441,26,432,24],[442,10,433,8],[443,10,434,8],[443,14,434,12,"responderEvent"],[443,28,434,26],[443,29,434,27,"isPropagationStopped"],[443,49,434,47],[443,50,434,48],[443,51,434,49],[443,56,434,54],[443,60,434,58],[443,62,434,60],[444,12,435,10],[445,10,436,8],[446,8,437,6],[447,6,438,4],[447,7,438,5],[447,13,438,11],[448,8,439,6],[448,12,439,10,"_id2"],[448,16,439,14],[448,19,439,17,"idPath"],[448,25,439,23],[448,26,439,24],[448,27,439,25],[448,28,439,26],[449,8,440,6],[449,12,440,10,"_node2"],[449,18,440,16],[449,21,440,19,"nodePath"],[449,29,440,27],[449,30,440,28],[449,31,440,29],[449,32,440,30],[450,8,441,6],[450,12,441,10,"target"],[450,18,441,16],[450,21,441,19,"domEvent"],[450,29,441,27],[450,30,441,28,"target"],[450,36,441,34],[451,8,442,6],[451,12,442,10,"target"],[451,18,442,16],[451,23,442,21,"_node2"],[451,29,442,27],[451,31,442,29],[452,10,443,8],[452,17,443,15,"check"],[452,22,443,20],[452,23,443,21,"_id2"],[452,27,443,25],[452,29,443,27,"_node2"],[452,35,443,33],[452,37,443,35,"shouldSetCallbackBubbleName"],[452,64,443,62],[452,65,443,63],[453,8,444,6],[454,6,445,4],[455,4,446,2],[456,2,447,0],[458,2,449,0],[459,0,450,0],[460,0,451,0],[461,2,452,0],[461,11,452,9,"attemptTransfer"],[461,26,452,24,"attemptTransfer"],[461,27,452,25,"responderEvent"],[461,41,452,39],[461,43,452,41,"wantsResponder"],[461,57,452,55],[461,59,452,57],[462,4,453,2],[462,8,453,6,"_currentResponder2"],[462,26,453,24],[462,29,453,27,"currentResponder"],[462,45,453,43],[463,6,454,4,"currentId"],[463,15,454,13],[463,18,454,16,"_currentResponder2"],[463,36,454,34],[463,37,454,35,"id"],[463,39,454,37],[464,6,455,4,"currentNode"],[464,17,455,15],[464,20,455,18,"_currentResponder2"],[464,38,455,36],[464,39,455,37,"node"],[464,43,455,41],[465,4,456,2],[465,8,456,6,"id"],[465,10,456,8],[465,13,456,11,"wantsResponder"],[465,27,456,25],[465,28,456,26,"id"],[465,30,456,28],[466,6,457,4,"node"],[466,10,457,8],[466,13,457,11,"wantsResponder"],[466,27,457,25],[466,28,457,26,"node"],[466,32,457,30],[467,4,458,2],[467,8,458,6,"_getResponderConfig2"],[467,28,458,26],[467,31,458,29,"getResponderConfig"],[467,49,458,47],[467,50,458,48,"id"],[467,52,458,50],[467,53,458,51],[468,6,459,4,"onResponderGrant"],[468,22,459,20],[468,25,459,23,"_getResponderConfig2"],[468,45,459,43],[468,46,459,44,"onResponderGrant"],[468,62,459,60],[469,6,460,4,"onResponderReject"],[469,23,460,21],[469,26,460,24,"_getResponderConfig2"],[469,46,460,44],[469,47,460,45,"onResponderReject"],[469,64,460,62],[470,4,461,2,"responderEvent"],[470,18,461,16],[470,19,461,17,"bubbles"],[470,26,461,24],[470,29,461,27],[470,34,461,32],[471,4,462,2,"responderEvent"],[471,18,462,16],[471,19,462,17,"cancelable"],[471,29,462,27],[471,32,462,30],[471,37,462,35],[472,4,463,2,"responderEvent"],[472,18,463,16],[472,19,463,17,"currentTarget"],[472,32,463,30],[472,35,463,33,"node"],[472,39,463,37],[474,4,465,2],[475,4,466,2],[475,8,466,6,"currentId"],[475,17,466,15],[475,21,466,19],[475,25,466,23],[475,27,466,25],[476,6,467,4],[476,10,467,8,"onResponderGrant"],[476,26,467,24],[476,30,467,28],[476,34,467,32],[476,36,467,34],[477,8,468,6,"responderEvent"],[477,22,468,20],[477,23,468,21,"currentTarget"],[477,36,468,34],[477,39,468,37,"node"],[477,43,468,41],[478,8,469,6,"responderEvent"],[478,22,469,20],[478,23,469,21,"dispatchConfig"],[478,37,469,35],[478,38,469,36,"registrationName"],[478,54,469,52],[478,57,469,55],[478,75,469,73],[479,8,470,6,"onResponderGrant"],[479,24,470,22],[479,25,470,23,"responderEvent"],[479,39,470,37],[479,40,470,38],[480,6,471,4],[481,6,472,4,"changeCurrentResponder"],[481,28,472,26],[481,29,472,27,"wantsResponder"],[481,43,472,41],[481,44,472,42],[482,4,473,2],[483,4,474,2],[484,4,474,2],[484,9,475,7],[485,6,476,4],[485,10,476,8,"_getResponderConfig3"],[485,30,476,28],[485,33,476,31,"getResponderConfig"],[485,51,476,49],[485,52,476,50,"currentId"],[485,61,476,59],[485,62,476,60],[486,8,477,6,"onResponderTerminate"],[486,28,477,26],[486,31,477,29,"_getResponderConfig3"],[486,51,477,49],[486,52,477,50,"onResponderTerminate"],[486,72,477,70],[487,8,478,6,"onResponderTerminationRequest"],[487,37,478,35],[487,40,478,38,"_getResponderConfig3"],[487,60,478,58],[487,61,478,59,"onResponderTerminationRequest"],[487,90,478,88],[488,6,479,4],[488,10,479,8,"allowTransfer"],[488,23,479,21],[488,26,479,24],[488,30,479,28],[489,6,480,4],[489,10,480,8,"onResponderTerminationRequest"],[489,39,480,37],[489,43,480,41],[489,47,480,45],[489,49,480,47],[490,8,481,6,"responderEvent"],[490,22,481,20],[490,23,481,21,"currentTarget"],[490,36,481,34],[490,39,481,37,"currentNode"],[490,50,481,48],[491,8,482,6,"responderEvent"],[491,22,482,20],[491,23,482,21,"dispatchConfig"],[491,37,482,35],[491,38,482,36,"registrationName"],[491,54,482,52],[491,57,482,55],[491,88,482,86],[492,8,483,6],[492,12,483,10,"onResponderTerminationRequest"],[492,41,483,39],[492,42,483,40,"responderEvent"],[492,56,483,54],[492,57,483,55],[492,62,483,60],[492,67,483,65],[492,69,483,67],[493,10,484,8,"allowTransfer"],[493,23,484,21],[493,26,484,24],[493,31,484,29],[494,8,485,6],[495,6,486,4],[496,6,487,4],[496,10,487,8,"allowTransfer"],[496,23,487,21],[496,25,487,23],[497,8,488,6],[498,8,489,6],[498,12,489,10,"onResponderTerminate"],[498,32,489,30],[498,36,489,34],[498,40,489,38],[498,42,489,40],[499,10,490,8,"responderEvent"],[499,24,490,22],[499,25,490,23,"currentTarget"],[499,38,490,36],[499,41,490,39,"currentNode"],[499,52,490,50],[500,10,491,8,"responderEvent"],[500,24,491,22],[500,25,491,23,"dispatchConfig"],[500,39,491,37],[500,40,491,38,"registrationName"],[500,56,491,54],[500,59,491,57],[500,81,491,79],[501,10,492,8,"onResponderTerminate"],[501,30,492,28],[501,31,492,29,"responderEvent"],[501,45,492,43],[501,46,492,44],[502,8,493,6],[503,8,494,6],[504,8,495,6],[504,12,495,10,"onResponderGrant"],[504,28,495,26],[504,32,495,30],[504,36,495,34],[504,38,495,36],[505,10,496,8,"responderEvent"],[505,24,496,22],[505,25,496,23,"currentTarget"],[505,38,496,36],[505,41,496,39,"node"],[505,45,496,43],[506,10,497,8,"responderEvent"],[506,24,497,22],[506,25,497,23,"dispatchConfig"],[506,39,497,37],[506,40,497,38,"registrationName"],[506,56,497,54],[506,59,497,57],[506,77,497,75],[507,10,498,8,"onResponderGrant"],[507,26,498,24],[507,27,498,25,"responderEvent"],[507,41,498,39],[507,42,498,40],[508,8,499,6],[509,8,500,6,"changeCurrentResponder"],[509,30,500,28],[509,31,500,29,"wantsResponder"],[509,45,500,43],[509,46,500,44],[510,6,501,4],[510,7,501,5],[510,13,501,11],[511,8,502,6],[512,8,503,6],[512,12,503,10,"onResponderReject"],[512,29,503,27],[512,33,503,31],[512,37,503,35],[512,39,503,37],[513,10,504,8,"responderEvent"],[513,24,504,22],[513,25,504,23,"currentTarget"],[513,38,504,36],[513,41,504,39,"node"],[513,45,504,43],[514,10,505,8,"responderEvent"],[514,24,505,22],[514,25,505,23,"dispatchConfig"],[514,39,505,37],[514,40,505,38,"registrationName"],[514,56,505,54],[514,59,505,57],[514,78,505,76],[515,10,506,8,"onResponderReject"],[515,27,506,25],[515,28,506,26,"responderEvent"],[515,42,506,40],[515,43,506,41],[516,8,507,6],[517,6,508,4],[518,4,509,2],[519,2,510,0],[521,2,512,0],[523,2,514,0],[524,0,515,0],[525,0,516,0],[526,0,517,0],[527,0,518,0],[528,0,519,0],[529,2,520,0],[529,6,520,4,"documentEventsCapturePhase"],[529,32,520,30],[529,35,520,33],[529,36,520,34],[529,42,520,40],[529,44,520,42],[529,52,520,50],[529,53,520,51],[530,2,521,0],[530,6,521,4,"documentEventsBubblePhase"],[530,31,521,29],[530,34,521,32],[531,2,522,0],[532,2,523,0],[532,13,523,11],[532,15,523,13],[532,26,523,24],[532,28,523,26],[532,37,523,35],[532,39,523,37],[532,50,523,48],[533,2,524,0],[534,2,525,0],[534,14,525,12],[534,16,525,14],[534,27,525,25],[534,29,525,27],[534,39,525,37],[534,41,525,39],[534,54,525,52],[535,2,526,0],[536,2,527,0],[536,15,527,13],[536,17,527,15],[536,25,527,23],[536,27,527,25],[536,44,527,42],[536,45,527,43],[537,2,528,7],[537,11,528,16,"attachListeners"],[537,26,528,31,"attachListeners"],[537,27,528,31],[537,29,528,34],[538,4,529,2],[538,8,529,6,"canUseDOM"],[538,26,529,15],[538,30,529,19,"window"],[538,36,529,25],[538,37,529,26,"__reactResponderSystemActive"],[538,65,529,54],[538,69,529,58],[538,73,529,62],[538,75,529,64],[539,6,530,4,"window"],[539,12,530,10],[539,13,530,11,"addEventListener"],[539,29,530,27],[539,30,530,28],[539,36,530,34],[539,38,530,36,"eventListener"],[539,51,530,49],[539,52,530,50],[540,6,531,4,"documentEventsBubblePhase"],[540,31,531,29],[540,32,531,30,"forEach"],[540,39,531,37],[540,40,531,38,"eventType"],[540,49,531,47],[540,53,531,51],[541,8,532,6,"document"],[541,16,532,14],[541,17,532,15,"addEventListener"],[541,33,532,31],[541,34,532,32,"eventType"],[541,43,532,41],[541,45,532,43,"eventListener"],[541,58,532,56],[541,59,532,57],[542,6,533,4],[542,7,533,5],[542,8,533,6],[543,6,534,4,"documentEventsCapturePhase"],[543,32,534,30],[543,33,534,31,"forEach"],[543,40,534,38],[543,41,534,39,"eventType"],[543,50,534,48],[543,54,534,52],[544,8,535,6,"document"],[544,16,535,14],[544,17,535,15,"addEventListener"],[544,33,535,31],[544,34,535,32,"eventType"],[544,43,535,41],[544,45,535,43,"eventListener"],[544,58,535,56],[544,60,535,58],[544,64,535,62],[544,65,535,63],[545,6,536,4],[545,7,536,5],[545,8,536,6],[546,6,537,4,"window"],[546,12,537,10],[546,13,537,11,"__reactResponderSystemActive"],[546,41,537,39],[546,44,537,42],[546,48,537,46],[547,4,538,2],[548,2,539,0],[550,2,541,0],[551,0,542,0],[552,0,543,0],[553,2,544,7],[553,11,544,16,"addNode"],[553,18,544,23,"addNode"],[553,19,544,24,"id"],[553,21,544,26],[553,23,544,28,"node"],[553,27,544,32],[553,29,544,34,"config"],[553,35,544,40],[553,37,544,42],[554,4,545,2],[554,8,545,2,"setResponderId"],[554,29,545,16],[554,31,545,17,"node"],[554,35,545,21],[554,37,545,23,"id"],[554,39,545,25],[554,40,545,26],[555,4,546,2,"responderListenersMap"],[555,25,546,23],[555,26,546,24,"set"],[555,29,546,27],[555,30,546,28,"id"],[555,32,546,30],[555,34,546,32,"config"],[555,40,546,38],[555,41,546,39],[556,2,547,0],[558,2,549,0],[559,0,550,0],[560,0,551,0],[561,2,552,7],[561,11,552,16,"removeNode"],[561,21,552,26,"removeNode"],[561,22,552,27,"id"],[561,24,552,29],[561,26,552,31],[562,4,553,2],[562,8,553,6,"currentResponder"],[562,24,553,22],[562,25,553,23,"id"],[562,27,553,25],[562,32,553,30,"id"],[562,34,553,32],[562,36,553,34],[563,6,554,4,"terminateResponder"],[563,24,554,22],[563,25,554,23],[563,26,554,24],[564,4,555,2],[565,4,556,2],[565,8,556,6,"responderListenersMap"],[565,29,556,27],[565,30,556,28,"has"],[565,33,556,31],[565,34,556,32,"id"],[565,36,556,34],[565,37,556,35],[565,39,556,37],[566,6,557,4,"responderListenersMap"],[566,27,557,25],[566,28,557,26,"delete"],[566,34,557,32],[566,35,557,33,"id"],[566,37,557,35],[566,38,557,36],[567,4,558,2],[568,2,559,0],[570,2,561,0],[571,0,562,0],[572,0,563,0],[573,0,564,0],[574,0,565,0],[575,2,566,7],[575,11,566,16,"terminateResponder"],[575,29,566,34,"terminateResponder"],[575,30,566,34],[575,32,566,37],[576,4,567,2],[576,8,567,6,"_currentResponder3"],[576,26,567,24],[576,29,567,27,"currentResponder"],[576,45,567,43],[577,6,568,4,"id"],[577,8,568,6],[577,11,568,9,"_currentResponder3"],[577,29,568,27],[577,30,568,28,"id"],[577,32,568,30],[578,6,569,4,"node"],[578,10,569,8],[578,13,569,11,"_currentResponder3"],[578,31,569,29],[578,32,569,30,"node"],[578,36,569,34],[579,4,570,2],[579,8,570,6,"id"],[579,10,570,8],[579,14,570,12],[579,18,570,16],[579,22,570,20,"node"],[579,26,570,24],[579,30,570,28],[579,34,570,32],[579,36,570,34],[580,6,571,4],[580,10,571,8,"_getResponderConfig4"],[580,30,571,28],[580,33,571,31,"getResponderConfig"],[580,51,571,49],[580,52,571,50,"id"],[580,54,571,52],[580,55,571,53],[581,8,572,6,"onResponderTerminate"],[581,28,572,26],[581,31,572,29,"_getResponderConfig4"],[581,51,572,49],[581,52,572,50,"onResponderTerminate"],[581,72,572,70],[582,6,573,4],[582,10,573,8,"onResponderTerminate"],[582,30,573,28],[582,34,573,32],[582,38,573,36],[582,40,573,38],[583,8,574,6],[583,12,574,10,"event"],[583,17,574,15],[583,20,574,18],[583,24,574,18,"createResponderEvent"],[583,53,574,38],[583,55,574,39],[583,56,574,40],[583,57,574,41],[583,59,574,43,"responderTouchHistoryStore"],[583,85,574,69],[583,86,574,70],[584,8,575,6,"event"],[584,13,575,11],[584,14,575,12,"currentTarget"],[584,27,575,25],[584,30,575,28,"node"],[584,34,575,32],[585,8,576,6,"onResponderTerminate"],[585,28,576,26],[585,29,576,27,"event"],[585,34,576,32],[585,35,576,33],[586,6,577,4],[587,6,578,4,"changeCurrentResponder"],[587,28,578,26],[587,29,578,27,"emptyResponder"],[587,43,578,41],[587,44,578,42],[588,4,579,2],[589,4,580,2,"isEmulatingMouseEvents"],[589,26,580,24],[589,29,580,27],[589,34,580,32],[590,4,581,2,"trackedTouchCount"],[590,21,581,19],[590,24,581,22],[590,25,581,23],[591,2,582,0],[593,2,584,0],[594,0,585,0],[595,0,586,0],[596,0,587,0],[597,2,588,7],[597,11,588,16,"getResponderNode"],[597,27,588,32,"getResponderNode"],[597,28,588,32],[597,30,588,35],[598,4,589,2],[598,11,589,9,"currentResponder"],[598,27,589,25],[598,28,589,26,"node"],[598,32,589,30],[599,2,590,0],[600,0,590,1],[600,3]],"functionMap":{"names":["<global>","changeCurrentResponder","getResponderConfig","eventListener","findWantsResponder","check","attemptTransfer","attachListeners","documentEventsBubblePhase.forEach$argument_0","documentEventsCapturePhase.forEach$argument_0","addNode","removeNode","terminateResponder","getResponderNode"],"mappings":"AAA;AC+K;CDE;AEC;CFG;AGY;CHyL;AIO;gBCS;KDe;CJqC;AMK;CN0D;OOkB;sCCG;KDE;uCEC;KFE;CPG;OUK;CVG;OWK;CXO;OYO;CZgB;OaM"}},"type":"js/module"}]}