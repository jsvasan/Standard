{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"../../../exports/InteractionManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":225},"end":{"line":13,"column":69,"index":294}}],"key":"xCxB1zW50yE4RuPd5KrkShI1yG4=","exportNames":["*"]}},{"name":"../TouchHistoryMath","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":295},"end":{"line":14,"column":51,"index":346}}],"key":"+lrQiafFPnfTWQvj2Bd8oxLYcHA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  'use strict';\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _InteractionManager = _interopRequireDefault(require(_dependencyMap[1], \"../../../exports/InteractionManager\"));\n  var _TouchHistoryMath = _interopRequireDefault(require(_dependencyMap[2], \"../TouchHistoryMath\"));\n  var currentCentroidXOfTouchesChangedAfter = _TouchHistoryMath.default.currentCentroidXOfTouchesChangedAfter;\n  var currentCentroidYOfTouchesChangedAfter = _TouchHistoryMath.default.currentCentroidYOfTouchesChangedAfter;\n  var previousCentroidXOfTouchesChangedAfter = _TouchHistoryMath.default.previousCentroidXOfTouchesChangedAfter;\n  var previousCentroidYOfTouchesChangedAfter = _TouchHistoryMath.default.previousCentroidYOfTouchesChangedAfter;\n  var currentCentroidX = _TouchHistoryMath.default.currentCentroidX;\n  var currentCentroidY = _TouchHistoryMath.default.currentCentroidY;\n\n  /**\n   * `PanResponder` reconciles several touches into a single gesture. It makes\n   * single-touch gestures resilient to extra touches, and can be used to\n   * recognize simple multi-touch gestures.\n   *\n   * By default, `PanResponder` holds an `InteractionManager` handle to block\n   * long-running JS events from interrupting active gestures.\n   *\n   * It provides a predictable wrapper of the responder handlers provided by the\n   * [gesture responder system](docs/gesture-responder-system.html).\n   * For each handler, it provides a new `gestureState` object alongside the\n   * native event object:\n   *\n   * ```\n   * onPanResponderMove: (event, gestureState) => {}\n   * ```\n   *\n   * A native event is a synthetic touch event with the following form:\n   *\n   *  - `nativeEvent`\n   *      + `changedTouches` - Array of all touch events that have changed since the last event\n   *      + `identifier` - The ID of the touch\n   *      + `locationX` - The X position of the touch, relative to the element\n   *      + `locationY` - The Y position of the touch, relative to the element\n   *      + `pageX` - The X position of the touch, relative to the root element\n   *      + `pageY` - The Y position of the touch, relative to the root element\n   *      + `target` - The node id of the element receiving the touch event\n   *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n   *      + `touches` - Array of all current touches on the screen\n   *\n   * A `gestureState` object has the following:\n   *\n   *  - `stateID` - ID of the gestureState- persisted as long as there at least\n   *     one touch on screen\n   *  - `moveX` - the latest screen coordinates of the recently-moved touch\n   *  - `moveY` - the latest screen coordinates of the recently-moved touch\n   *  - `x0` - the screen coordinates of the responder grant\n   *  - `y0` - the screen coordinates of the responder grant\n   *  - `dx` - accumulated distance of the gesture since the touch started\n   *  - `dy` - accumulated distance of the gesture since the touch started\n   *  - `vx` - current velocity of the gesture\n   *  - `vy` - current velocity of the gesture\n   *  - `numberActiveTouches` - Number of touches currently on screen\n   *\n   * ### Basic Usage\n   *\n   * ```\n   *   componentWillMount: function() {\n   *     this._panResponder = PanResponder.create({\n   *       // Ask to be the responder:\n   *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n   *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n   *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n   *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n   *\n   *       onPanResponderGrant: (evt, gestureState) => {\n   *         // The gesture has started. Show visual feedback so the user knows\n   *         // what is happening!\n   *\n   *         // gestureState.d{x,y} will be set to zero now\n   *       },\n   *       onPanResponderMove: (evt, gestureState) => {\n   *         // The most recent move distance is gestureState.move{X,Y}\n   *\n   *         // The accumulated gesture distance since becoming responder is\n   *         // gestureState.d{x,y}\n   *       },\n   *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n   *       onPanResponderRelease: (evt, gestureState) => {\n   *         // The user has released all touches while this view is the\n   *         // responder. This typically means a gesture has succeeded\n   *       },\n   *       onPanResponderTerminate: (evt, gestureState) => {\n   *         // Another component has become the responder, so this gesture\n   *         // should be cancelled\n   *       },\n   *       onShouldBlockNativeResponder: (evt, gestureState) => {\n   *         // Returns whether this component should block native components from becoming the JS\n   *         // responder. Returns true by default. Is currently only supported on android.\n   *         return true;\n   *       },\n   *     });\n   *   },\n   *\n   *   render: function() {\n   *     return (\n   *       <View {...this._panResponder.panHandlers} />\n   *     );\n   *   },\n   *\n   * ```\n   *\n   * ### Working Example\n   *\n   * To see it in action, try the\n   * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n   */\n\n  var PanResponder = {\n    /**\n     *\n     * A graphical explanation of the touch data flow:\n     *\n     * +----------------------------+             +--------------------------------+\n     * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n     * +----------------------------+             +----------+---------------------+\n     * |Global store of touchHistory|             |Allocation-less math util       |\n     * |including activeness, start |             |on touch history (centroids     |\n     * |position, prev/cur position.|             |and multitouch movement etc)    |\n     * |                            |             |                                |\n     * +----^-----------------------+             +----^---------------------------+\n     *      |                                          |\n     *      | (records relevant history                |\n     *      |  of touches relevant for                 |\n     *      |  implementing higher level               |\n     *      |  gestures)                               |\n     *      |                                          |\n     * +----+-----------------------+             +----|---------------------------+\n     * | ResponderEventPlugin       |             |    |   Your App/Component      |\n     * +----------------------------+             +----|---------------------------+\n     * |Negotiates which view gets  | Low level   |    |             High level    |\n     * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n     * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n     * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n     * +----------------------------+ attached to |  |         |     distance and  |\n     *                                 each event |  +---------+     velocity.     |\n     *                                            |                                |\n     *                                            |                                |\n     *                                            +--------------------------------+\n     *\n     *\n     *\n     * Gesture that calculates cumulative movement over time in a way that just\n     * \"does the right thing\" for multiple touches. The \"right thing\" is very\n     * nuanced. When moving two touches in opposite directions, the cumulative\n     * distance is zero in each dimension. When two touches move in parallel five\n     * pixels in the same direction, the cumulative distance is five, not ten. If\n     * two touches start, one moves five in a direction, then stops and the other\n     * touch moves fives in the same direction, the cumulative distance is ten.\n     *\n     * This logic requires a kind of processing of time \"clusters\" of touch events\n     * so that two touch moves that essentially occur in parallel but move every\n     * other frame respectively, are considered part of the same movement.\n     *\n     * Explanation of some of the non-obvious fields:\n     *\n     * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n     *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n     *   centroid of the most recently moved \"cluster\" of active touches.\n     *   (Currently all move have the same timeStamp, but later we should add some\n     *   threshold for what is considered to be \"moving\"). If a palm is\n     *   accidentally counted as a touch, but a finger is moving greatly, the palm\n     *   will move slightly, but we only want to count the single moving touch.\n     * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n     *   responder.\n     * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n     *   distance. Accounts for touch moves that are clustered together in time,\n     *   moving the same direction. Only valid when currently responder (otherwise,\n     *   it only represents the drag distance below the threshold).\n     * - vx/vy: Velocity.\n     */\n\n    _initializeGestureState(gestureState) {\n      gestureState.moveX = 0;\n      gestureState.moveY = 0;\n      gestureState.x0 = 0;\n      gestureState.y0 = 0;\n      gestureState.dx = 0;\n      gestureState.dy = 0;\n      gestureState.vx = 0;\n      gestureState.vy = 0;\n      gestureState.numberActiveTouches = 0;\n      // All `gestureState` accounts for timeStamps up until:\n      gestureState._accountsForMovesUpTo = 0;\n    },\n    /**\n     * This is nuanced and is necessary. It is incorrect to continuously take all\n     * active *and* recently moved touches, find the centroid, and track how that\n     * result changes over time. Instead, we must take all recently moved\n     * touches, and calculate how the centroid has changed just for those\n     * recently moved touches, and append that change to an accumulator. This is\n     * to (at least) handle the case where the user is moving three fingers, and\n     * then one of the fingers stops but the other two continue.\n     *\n     * This is very different than taking all of the recently moved touches and\n     * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n     * changes* in the centroid of recently moved touches.\n     *\n     * There is also some nuance with how we handle multiple moved touches in a\n     * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n     * individual events, multiple touches generate two 'move' events, each of\n     * them triggering `onResponderMove`. But with the way `PanResponder` works,\n     * all of the gesture inference is performed on the first dispatch, since it\n     * looks at all of the touches (even the ones for which there hasn't been a\n     * native dispatch yet). Therefore, `PanResponder` does not call\n     * `onResponderMove` passed the first dispatch. This diverges from the\n     * typical responder callback pattern (without using `PanResponder`), but\n     * avoids more dispatches than necessary.\n     */\n    _updateGestureStateOnMove(gestureState, touchHistory) {\n      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n      var movedAfter = gestureState._accountsForMovesUpTo;\n      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n      var nextDX = gestureState.dx + (x - prevX);\n      var nextDY = gestureState.dy + (y - prevY);\n\n      // TODO: This must be filtered intelligently.\n      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n      gestureState.vx = (nextDX - gestureState.dx) / dt;\n      gestureState.vy = (nextDY - gestureState.dy) / dt;\n      gestureState.dx = nextDX;\n      gestureState.dy = nextDY;\n      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n    },\n    /**\n     * @param {object} config Enhanced versions of all of the responder callbacks\n     * that provide not only the typical `ResponderSyntheticEvent`, but also the\n     * `PanResponder` gesture state.  Simply replace the word `Responder` with\n     * `PanResponder` in each of the typical `onResponder*` callbacks. For\n     * example, the `config` object would look like:\n     *\n     *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onPanResponderReject: (e, gestureState) => {...}`\n     *  - `onPanResponderGrant: (e, gestureState) => {...}`\n     *  - `onPanResponderStart: (e, gestureState) => {...}`\n     *  - `onPanResponderEnd: (e, gestureState) => {...}`\n     *  - `onPanResponderRelease: (e, gestureState) => {...}`\n     *  - `onPanResponderMove: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n     *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n     *\n     *  In general, for events that have capture equivalents, we update the\n     *  gestureState once in the capture phase and can use it in the bubble phase\n     *  as well.\n     *\n     *  Be careful with onStartShould* callbacks. They only reflect updated\n     *  `gestureState` for start/end events that bubble/capture to the Node.\n     *  Once the node is the responder, you can rely on every start/end event\n     *  being processed by the gesture and `gestureState` being updated\n     *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n     *  are the responder.\n     */\n    create(config) {\n      var interactionState = {\n        handle: null,\n        shouldCancelClick: false,\n        timeout: null\n      };\n      var gestureState = {\n        // Useful for debugging\n        stateID: Math.random(),\n        moveX: 0,\n        moveY: 0,\n        x0: 0,\n        y0: 0,\n        dx: 0,\n        dy: 0,\n        vx: 0,\n        vy: 0,\n        numberActiveTouches: 0,\n        _accountsForMovesUpTo: 0\n      };\n      var panHandlers = {\n        onStartShouldSetResponder(event) {\n          return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n        },\n        onMoveShouldSetResponder(event) {\n          return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n        },\n        onStartShouldSetResponderCapture(event) {\n          // TODO: Actually, we should reinitialize the state any time\n          // touches.length increases from 0 active to > 0 active.\n          if (event.nativeEvent.touches.length === 1) {\n            PanResponder._initializeGestureState(gestureState);\n          }\n          gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n          return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n        },\n        onMoveShouldSetResponderCapture(event) {\n          var touchHistory = event.touchHistory;\n          // Responder system incorrectly dispatches should* to current responder\n          // Filter out any touch moves past the first one - we would have\n          // already processed multi-touch geometry during the first event.\n          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n            return false;\n          }\n          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n        },\n        onResponderGrant(event) {\n          if (!interactionState.handle) {\n            interactionState.handle = _InteractionManager.default.createInteractionHandle();\n          }\n          if (interactionState.timeout) {\n            clearInteractionTimeout(interactionState);\n          }\n          interactionState.shouldCancelClick = true;\n          gestureState.x0 = currentCentroidX(event.touchHistory);\n          gestureState.y0 = currentCentroidY(event.touchHistory);\n          gestureState.dx = 0;\n          gestureState.dy = 0;\n          if (config.onPanResponderGrant) {\n            config.onPanResponderGrant(event, gestureState);\n          }\n          // TODO: t7467124 investigate if this can be removed\n          return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n        },\n        onResponderReject(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n        },\n        onResponderRelease(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n          setInteractionTimeout(interactionState);\n          PanResponder._initializeGestureState(gestureState);\n        },\n        onResponderStart(event) {\n          var touchHistory = event.touchHistory;\n          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n          if (config.onPanResponderStart) {\n            config.onPanResponderStart(event, gestureState);\n          }\n        },\n        onResponderMove(event) {\n          var touchHistory = event.touchHistory;\n          // Guard against the dispatch of two touch moves when there are two\n          // simultaneously changed touches.\n          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n            return;\n          }\n          // Filter out any touch moves past the first one - we would have\n          // already processed multi-touch geometry during the first event.\n          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n          if (config.onPanResponderMove) {\n            config.onPanResponderMove(event, gestureState);\n          }\n        },\n        onResponderEnd(event) {\n          var touchHistory = event.touchHistory;\n          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n          clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n        },\n        onResponderTerminate(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n          setInteractionTimeout(interactionState);\n          PanResponder._initializeGestureState(gestureState);\n        },\n        onResponderTerminationRequest(event) {\n          return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n        },\n        // We do not want to trigger 'click' activated gestures or native behaviors\n        // on any pan target that is under a mouse cursor when it is released.\n        // Browsers will natively cancel 'click' events on a target if a non-mouse\n        // active pointer moves.\n        onClickCapture: event => {\n          if (interactionState.shouldCancelClick === true) {\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        }\n      };\n      return {\n        panHandlers,\n        getInteractionHandle() {\n          return interactionState.handle;\n        }\n      };\n    }\n  };\n  function clearInteractionHandle(interactionState, callback, event, gestureState) {\n    if (interactionState.handle) {\n      _InteractionManager.default.clearInteractionHandle(interactionState.handle);\n      interactionState.handle = null;\n    }\n    if (callback) {\n      callback(event, gestureState);\n    }\n  }\n  function clearInteractionTimeout(interactionState) {\n    clearTimeout(interactionState.timeout);\n  }\n  function setInteractionTimeout(interactionState) {\n    interactionState.timeout = setTimeout(() => {\n      interactionState.shouldCancelClick = false;\n    }, 250);\n  }\n  var _default = exports.default = PanResponder;\n});","lineCount":423,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_interopRequireDefault"],[14,28,11,13],[14,31,11,13,"require"],[14,38,11,13],[14,39,11,13,"_dependencyMap"],[14,53,11,13],[15,2,11,13,"Object"],[15,8,11,13],[15,9,11,13,"defineProperty"],[15,23,11,13],[15,24,11,13,"exports"],[15,31,11,13],[16,4,11,13,"value"],[16,9,11,13],[17,2,11,13],[18,2,11,13,"exports"],[18,9,11,13],[18,10,11,13,"default"],[18,17,11,13],[19,2,13,0],[19,6,13,0,"_InteractionManager"],[19,25,13,0],[19,28,13,0,"_interopRequireDefault"],[19,50,13,0],[19,51,13,0,"require"],[19,58,13,0],[19,59,13,0,"_dependencyMap"],[19,73,13,0],[20,2,14,0],[20,6,14,0,"_TouchHistoryMath"],[20,23,14,0],[20,26,14,0,"_interopRequireDefault"],[20,48,14,0],[20,49,14,0,"require"],[20,56,14,0],[20,57,14,0,"_dependencyMap"],[20,71,14,0],[21,2,15,0],[21,6,15,4,"currentCentroidXOfTouchesChangedAfter"],[21,43,15,41],[21,46,15,44,"TouchHistoryMath"],[21,71,15,60],[21,72,15,61,"currentCentroidXOfTouchesChangedAfter"],[21,109,15,98],[22,2,16,0],[22,6,16,4,"currentCentroidYOfTouchesChangedAfter"],[22,43,16,41],[22,46,16,44,"TouchHistoryMath"],[22,71,16,60],[22,72,16,61,"currentCentroidYOfTouchesChangedAfter"],[22,109,16,98],[23,2,17,0],[23,6,17,4,"previousCentroidXOfTouchesChangedAfter"],[23,44,17,42],[23,47,17,45,"TouchHistoryMath"],[23,72,17,61],[23,73,17,62,"previousCentroidXOfTouchesChangedAfter"],[23,111,17,100],[24,2,18,0],[24,6,18,4,"previousCentroidYOfTouchesChangedAfter"],[24,44,18,42],[24,47,18,45,"TouchHistoryMath"],[24,72,18,61],[24,73,18,62,"previousCentroidYOfTouchesChangedAfter"],[24,111,18,100],[25,2,19,0],[25,6,19,4,"currentCentroidX"],[25,22,19,20],[25,25,19,23,"TouchHistoryMath"],[25,50,19,39],[25,51,19,40,"currentCentroidX"],[25,67,19,56],[26,2,20,0],[26,6,20,4,"currentCentroidY"],[26,22,20,20],[26,25,20,23,"TouchHistoryMath"],[26,50,20,39],[26,51,20,40,"currentCentroidY"],[26,67,20,56],[28,2,22,0],[29,0,23,0],[30,0,24,0],[31,0,25,0],[32,0,26,0],[33,0,27,0],[34,0,28,0],[35,0,29,0],[36,0,30,0],[37,0,31,0],[38,0,32,0],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,0,38,0],[45,0,39,0],[46,0,40,0],[47,0,41,0],[48,0,42,0],[49,0,43,0],[50,0,44,0],[51,0,45,0],[52,0,46,0],[53,0,47,0],[54,0,48,0],[55,0,49,0],[56,0,50,0],[57,0,51,0],[58,0,52,0],[59,0,53,0],[60,0,54,0],[61,0,55,0],[62,0,56,0],[63,0,57,0],[64,0,58,0],[65,0,59,0],[66,0,60,0],[67,0,61,0],[68,0,62,0],[69,0,63,0],[70,0,64,0],[71,0,65,0],[72,0,66,0],[73,0,67,0],[74,0,68,0],[75,0,69,0],[76,0,70,0],[77,0,71,0],[78,0,72,0],[79,0,73,0],[80,0,74,0],[81,0,75,0],[82,0,76,0],[83,0,77,0],[84,0,78,0],[85,0,79,0],[86,0,80,0],[87,0,81,0],[88,0,82,0],[89,0,83,0],[90,0,84,0],[91,0,85,0],[92,0,86,0],[93,0,87,0],[94,0,88,0],[95,0,89,0],[96,0,90,0],[97,0,91,0],[98,0,92,0],[99,0,93,0],[100,0,94,0],[101,0,95,0],[102,0,96,0],[103,0,97,0],[104,0,98,0],[105,0,99,0],[106,0,100,0],[107,0,101,0],[108,0,102,0],[109,0,103,0],[110,0,104,0],[111,0,105,0],[112,0,106,0],[113,0,107,0],[114,0,108,0],[115,0,109,0],[116,0,110,0],[117,0,111,0],[118,0,112,0],[119,0,113,0],[120,0,114,0],[121,0,115,0],[122,0,116,0],[123,0,117,0],[124,0,118,0],[126,2,120,0],[126,6,120,4,"PanResponder"],[126,18,120,16],[126,21,120,19],[127,4,121,2],[128,0,122,0],[129,0,123,0],[130,0,124,0],[131,0,125,0],[132,0,126,0],[133,0,127,0],[134,0,128,0],[135,0,129,0],[136,0,130,0],[137,0,131,0],[138,0,132,0],[139,0,133,0],[140,0,134,0],[141,0,135,0],[142,0,136,0],[143,0,137,0],[144,0,138,0],[145,0,139,0],[146,0,140,0],[147,0,141,0],[148,0,142,0],[149,0,143,0],[150,0,144,0],[151,0,145,0],[152,0,146,0],[153,0,147,0],[154,0,148,0],[155,0,149,0],[156,0,150,0],[157,0,151,0],[158,0,152,0],[159,0,153,0],[160,0,154,0],[161,0,155,0],[162,0,156,0],[163,0,157,0],[164,0,158,0],[165,0,159,0],[166,0,160,0],[167,0,161,0],[168,0,162,0],[169,0,163,0],[170,0,164,0],[171,0,165,0],[172,0,166,0],[173,0,167,0],[174,0,168,0],[175,0,169,0],[176,0,170,0],[177,0,171,0],[178,0,172,0],[179,0,173,0],[180,0,174,0],[181,0,175,0],[182,0,176,0],[183,0,177,0],[184,0,178,0],[185,0,179,0],[186,0,180,0],[187,0,181,0],[188,0,182,0],[190,4,184,2,"_initializeGestureState"],[190,27,184,25,"_initializeGestureState"],[190,28,184,26,"gestureState"],[190,40,184,38],[190,42,184,40],[191,6,185,4,"gestureState"],[191,18,185,16],[191,19,185,17,"moveX"],[191,24,185,22],[191,27,185,25],[191,28,185,26],[192,6,186,4,"gestureState"],[192,18,186,16],[192,19,186,17,"moveY"],[192,24,186,22],[192,27,186,25],[192,28,186,26],[193,6,187,4,"gestureState"],[193,18,187,16],[193,19,187,17,"x0"],[193,21,187,19],[193,24,187,22],[193,25,187,23],[194,6,188,4,"gestureState"],[194,18,188,16],[194,19,188,17,"y0"],[194,21,188,19],[194,24,188,22],[194,25,188,23],[195,6,189,4,"gestureState"],[195,18,189,16],[195,19,189,17,"dx"],[195,21,189,19],[195,24,189,22],[195,25,189,23],[196,6,190,4,"gestureState"],[196,18,190,16],[196,19,190,17,"dy"],[196,21,190,19],[196,24,190,22],[196,25,190,23],[197,6,191,4,"gestureState"],[197,18,191,16],[197,19,191,17,"vx"],[197,21,191,19],[197,24,191,22],[197,25,191,23],[198,6,192,4,"gestureState"],[198,18,192,16],[198,19,192,17,"vy"],[198,21,192,19],[198,24,192,22],[198,25,192,23],[199,6,193,4,"gestureState"],[199,18,193,16],[199,19,193,17,"numberActiveTouches"],[199,38,193,36],[199,41,193,39],[199,42,193,40],[200,6,194,4],[201,6,195,4,"gestureState"],[201,18,195,16],[201,19,195,17,"_accountsForMovesUpTo"],[201,40,195,38],[201,43,195,41],[201,44,195,42],[202,4,196,2],[202,5,196,3],[203,4,197,2],[204,0,198,0],[205,0,199,0],[206,0,200,0],[207,0,201,0],[208,0,202,0],[209,0,203,0],[210,0,204,0],[211,0,205,0],[212,0,206,0],[213,0,207,0],[214,0,208,0],[215,0,209,0],[216,0,210,0],[217,0,211,0],[218,0,212,0],[219,0,213,0],[220,0,214,0],[221,0,215,0],[222,0,216,0],[223,0,217,0],[224,0,218,0],[225,0,219,0],[226,0,220,0],[227,4,221,2,"_updateGestureStateOnMove"],[227,29,221,27,"_updateGestureStateOnMove"],[227,30,221,28,"gestureState"],[227,42,221,40],[227,44,221,42,"touchHistory"],[227,56,221,54],[227,58,221,56],[228,6,222,4,"gestureState"],[228,18,222,16],[228,19,222,17,"numberActiveTouches"],[228,38,222,36],[228,41,222,39,"touchHistory"],[228,53,222,51],[228,54,222,52,"numberActiveTouches"],[228,73,222,71],[229,6,223,4,"gestureState"],[229,18,223,16],[229,19,223,17,"moveX"],[229,24,223,22],[229,27,223,25,"currentCentroidXOfTouchesChangedAfter"],[229,64,223,62],[229,65,223,63,"touchHistory"],[229,77,223,75],[229,79,223,77,"gestureState"],[229,91,223,89],[229,92,223,90,"_accountsForMovesUpTo"],[229,113,223,111],[229,114,223,112],[230,6,224,4,"gestureState"],[230,18,224,16],[230,19,224,17,"moveY"],[230,24,224,22],[230,27,224,25,"currentCentroidYOfTouchesChangedAfter"],[230,64,224,62],[230,65,224,63,"touchHistory"],[230,77,224,75],[230,79,224,77,"gestureState"],[230,91,224,89],[230,92,224,90,"_accountsForMovesUpTo"],[230,113,224,111],[230,114,224,112],[231,6,225,4],[231,10,225,8,"movedAfter"],[231,20,225,18],[231,23,225,21,"gestureState"],[231,35,225,33],[231,36,225,34,"_accountsForMovesUpTo"],[231,57,225,55],[232,6,226,4],[232,10,226,8,"prevX"],[232,15,226,13],[232,18,226,16,"previousCentroidXOfTouchesChangedAfter"],[232,56,226,54],[232,57,226,55,"touchHistory"],[232,69,226,67],[232,71,226,69,"movedAfter"],[232,81,226,79],[232,82,226,80],[233,6,227,4],[233,10,227,8,"x"],[233,11,227,9],[233,14,227,12,"currentCentroidXOfTouchesChangedAfter"],[233,51,227,49],[233,52,227,50,"touchHistory"],[233,64,227,62],[233,66,227,64,"movedAfter"],[233,76,227,74],[233,77,227,75],[234,6,228,4],[234,10,228,8,"prevY"],[234,15,228,13],[234,18,228,16,"previousCentroidYOfTouchesChangedAfter"],[234,56,228,54],[234,57,228,55,"touchHistory"],[234,69,228,67],[234,71,228,69,"movedAfter"],[234,81,228,79],[234,82,228,80],[235,6,229,4],[235,10,229,8,"y"],[235,11,229,9],[235,14,229,12,"currentCentroidYOfTouchesChangedAfter"],[235,51,229,49],[235,52,229,50,"touchHistory"],[235,64,229,62],[235,66,229,64,"movedAfter"],[235,76,229,74],[235,77,229,75],[236,6,230,4],[236,10,230,8,"nextDX"],[236,16,230,14],[236,19,230,17,"gestureState"],[236,31,230,29],[236,32,230,30,"dx"],[236,34,230,32],[236,38,230,36,"x"],[236,39,230,37],[236,42,230,40,"prevX"],[236,47,230,45],[236,48,230,46],[237,6,231,4],[237,10,231,8,"nextDY"],[237,16,231,14],[237,19,231,17,"gestureState"],[237,31,231,29],[237,32,231,30,"dy"],[237,34,231,32],[237,38,231,36,"y"],[237,39,231,37],[237,42,231,40,"prevY"],[237,47,231,45],[237,48,231,46],[239,6,233,4],[240,6,234,4],[240,10,234,8,"dt"],[240,12,234,10],[240,15,234,13,"touchHistory"],[240,27,234,25],[240,28,234,26,"mostRecentTimeStamp"],[240,47,234,45],[240,50,234,48,"gestureState"],[240,62,234,60],[240,63,234,61,"_accountsForMovesUpTo"],[240,84,234,82],[241,6,235,4,"gestureState"],[241,18,235,16],[241,19,235,17,"vx"],[241,21,235,19],[241,24,235,22],[241,25,235,23,"nextDX"],[241,31,235,29],[241,34,235,32,"gestureState"],[241,46,235,44],[241,47,235,45,"dx"],[241,49,235,47],[241,53,235,51,"dt"],[241,55,235,53],[242,6,236,4,"gestureState"],[242,18,236,16],[242,19,236,17,"vy"],[242,21,236,19],[242,24,236,22],[242,25,236,23,"nextDY"],[242,31,236,29],[242,34,236,32,"gestureState"],[242,46,236,44],[242,47,236,45,"dy"],[242,49,236,47],[242,53,236,51,"dt"],[242,55,236,53],[243,6,237,4,"gestureState"],[243,18,237,16],[243,19,237,17,"dx"],[243,21,237,19],[243,24,237,22,"nextDX"],[243,30,237,28],[244,6,238,4,"gestureState"],[244,18,238,16],[244,19,238,17,"dy"],[244,21,238,19],[244,24,238,22,"nextDY"],[244,30,238,28],[245,6,239,4,"gestureState"],[245,18,239,16],[245,19,239,17,"_accountsForMovesUpTo"],[245,40,239,38],[245,43,239,41,"touchHistory"],[245,55,239,53],[245,56,239,54,"mostRecentTimeStamp"],[245,75,239,73],[246,4,240,2],[246,5,240,3],[247,4,241,2],[248,0,242,0],[249,0,243,0],[250,0,244,0],[251,0,245,0],[252,0,246,0],[253,0,247,0],[254,0,248,0],[255,0,249,0],[256,0,250,0],[257,0,251,0],[258,0,252,0],[259,0,253,0],[260,0,254,0],[261,0,255,0],[262,0,256,0],[263,0,257,0],[264,0,258,0],[265,0,259,0],[266,0,260,0],[267,0,261,0],[268,0,262,0],[269,0,263,0],[270,0,264,0],[271,0,265,0],[272,0,266,0],[273,0,267,0],[274,0,268,0],[275,0,269,0],[276,0,270,0],[277,0,271,0],[278,0,272,0],[279,4,273,2,"create"],[279,10,273,8,"create"],[279,11,273,9,"config"],[279,17,273,15],[279,19,273,17],[280,6,274,4],[280,10,274,8,"interactionState"],[280,26,274,24],[280,29,274,27],[281,8,275,6,"handle"],[281,14,275,12],[281,16,275,14],[281,20,275,18],[282,8,276,6,"shouldCancelClick"],[282,25,276,23],[282,27,276,25],[282,32,276,30],[283,8,277,6,"timeout"],[283,15,277,13],[283,17,277,15],[284,6,278,4],[284,7,278,5],[285,6,279,4],[285,10,279,8,"gestureState"],[285,22,279,20],[285,25,279,23],[286,8,280,6],[287,8,281,6,"stateID"],[287,15,281,13],[287,17,281,15,"Math"],[287,21,281,19],[287,22,281,20,"random"],[287,28,281,26],[287,29,281,27],[287,30,281,28],[288,8,282,6,"moveX"],[288,13,282,11],[288,15,282,13],[288,16,282,14],[289,8,283,6,"moveY"],[289,13,283,11],[289,15,283,13],[289,16,283,14],[290,8,284,6,"x0"],[290,10,284,8],[290,12,284,10],[290,13,284,11],[291,8,285,6,"y0"],[291,10,285,8],[291,12,285,10],[291,13,285,11],[292,8,286,6,"dx"],[292,10,286,8],[292,12,286,10],[292,13,286,11],[293,8,287,6,"dy"],[293,10,287,8],[293,12,287,10],[293,13,287,11],[294,8,288,6,"vx"],[294,10,288,8],[294,12,288,10],[294,13,288,11],[295,8,289,6,"vy"],[295,10,289,8],[295,12,289,10],[295,13,289,11],[296,8,290,6,"numberActiveTouches"],[296,27,290,25],[296,29,290,27],[296,30,290,28],[297,8,291,6,"_accountsForMovesUpTo"],[297,29,291,27],[297,31,291,29],[298,6,292,4],[298,7,292,5],[299,6,293,4],[299,10,293,8,"panHandlers"],[299,21,293,19],[299,24,293,22],[300,8,294,6,"onStartShouldSetResponder"],[300,33,294,31,"onStartShouldSetResponder"],[300,34,294,32,"event"],[300,39,294,37],[300,41,294,39],[301,10,295,8],[301,17,295,15,"config"],[301,23,295,21],[301,24,295,22,"onStartShouldSetPanResponder"],[301,52,295,50],[301,56,295,54],[301,60,295,58],[301,63,295,61],[301,68,295,66],[301,71,295,69,"config"],[301,77,295,75],[301,78,295,76,"onStartShouldSetPanResponder"],[301,106,295,104],[301,107,295,105,"event"],[301,112,295,110],[301,114,295,112,"gestureState"],[301,126,295,124],[301,127,295,125],[302,8,296,6],[302,9,296,7],[303,8,297,6,"onMoveShouldSetResponder"],[303,32,297,30,"onMoveShouldSetResponder"],[303,33,297,31,"event"],[303,38,297,36],[303,40,297,38],[304,10,298,8],[304,17,298,15,"config"],[304,23,298,21],[304,24,298,22,"onMoveShouldSetPanResponder"],[304,51,298,49],[304,55,298,53],[304,59,298,57],[304,62,298,60],[304,67,298,65],[304,70,298,68,"config"],[304,76,298,74],[304,77,298,75,"onMoveShouldSetPanResponder"],[304,104,298,102],[304,105,298,103,"event"],[304,110,298,108],[304,112,298,110,"gestureState"],[304,124,298,122],[304,125,298,123],[305,8,299,6],[305,9,299,7],[306,8,300,6,"onStartShouldSetResponderCapture"],[306,40,300,38,"onStartShouldSetResponderCapture"],[306,41,300,39,"event"],[306,46,300,44],[306,48,300,46],[307,10,301,8],[308,10,302,8],[309,10,303,8],[309,14,303,12,"event"],[309,19,303,17],[309,20,303,18,"nativeEvent"],[309,31,303,29],[309,32,303,30,"touches"],[309,39,303,37],[309,40,303,38,"length"],[309,46,303,44],[309,51,303,49],[309,52,303,50],[309,54,303,52],[310,12,304,10,"PanResponder"],[310,24,304,22],[310,25,304,23,"_initializeGestureState"],[310,48,304,46],[310,49,304,47,"gestureState"],[310,61,304,59],[310,62,304,60],[311,10,305,8],[312,10,306,8,"gestureState"],[312,22,306,20],[312,23,306,21,"numberActiveTouches"],[312,42,306,40],[312,45,306,43,"event"],[312,50,306,48],[312,51,306,49,"touchHistory"],[312,63,306,61],[312,64,306,62,"numberActiveTouches"],[312,83,306,81],[313,10,307,8],[313,17,307,15,"config"],[313,23,307,21],[313,24,307,22,"onStartShouldSetPanResponderCapture"],[313,59,307,57],[313,63,307,61],[313,67,307,65],[313,70,307,68,"config"],[313,76,307,74],[313,77,307,75,"onStartShouldSetPanResponderCapture"],[313,112,307,110],[313,113,307,111,"event"],[313,118,307,116],[313,120,307,118,"gestureState"],[313,132,307,130],[313,133,307,131],[313,136,307,134],[313,141,307,139],[314,8,308,6],[314,9,308,7],[315,8,309,6,"onMoveShouldSetResponderCapture"],[315,39,309,37,"onMoveShouldSetResponderCapture"],[315,40,309,38,"event"],[315,45,309,43],[315,47,309,45],[316,10,310,8],[316,14,310,12,"touchHistory"],[316,26,310,24],[316,29,310,27,"event"],[316,34,310,32],[316,35,310,33,"touchHistory"],[316,47,310,45],[317,10,311,8],[318,10,312,8],[319,10,313,8],[320,10,314,8],[320,14,314,12,"gestureState"],[320,26,314,24],[320,27,314,25,"_accountsForMovesUpTo"],[320,48,314,46],[320,53,314,51,"touchHistory"],[320,65,314,63],[320,66,314,64,"mostRecentTimeStamp"],[320,85,314,83],[320,87,314,85],[321,12,315,10],[321,19,315,17],[321,24,315,22],[322,10,316,8],[323,10,317,8,"PanResponder"],[323,22,317,20],[323,23,317,21,"_updateGestureStateOnMove"],[323,48,317,46],[323,49,317,47,"gestureState"],[323,61,317,59],[323,63,317,61,"touchHistory"],[323,75,317,73],[323,76,317,74],[324,10,318,8],[324,17,318,15,"config"],[324,23,318,21],[324,24,318,22,"onMoveShouldSetPanResponderCapture"],[324,58,318,56],[324,61,318,59,"config"],[324,67,318,65],[324,68,318,66,"onMoveShouldSetPanResponderCapture"],[324,102,318,100],[324,103,318,101,"event"],[324,108,318,106],[324,110,318,108,"gestureState"],[324,122,318,120],[324,123,318,121],[324,126,318,124],[324,131,318,129],[325,8,319,6],[325,9,319,7],[326,8,320,6,"onResponderGrant"],[326,24,320,22,"onResponderGrant"],[326,25,320,23,"event"],[326,30,320,28],[326,32,320,30],[327,10,321,8],[327,14,321,12],[327,15,321,13,"interactionState"],[327,31,321,29],[327,32,321,30,"handle"],[327,38,321,36],[327,40,321,38],[328,12,322,10,"interactionState"],[328,28,322,26],[328,29,322,27,"handle"],[328,35,322,33],[328,38,322,36,"InteractionManager"],[328,65,322,54],[328,66,322,55,"createInteractionHandle"],[328,89,322,78],[328,90,322,79],[328,91,322,80],[329,10,323,8],[330,10,324,8],[330,14,324,12,"interactionState"],[330,30,324,28],[330,31,324,29,"timeout"],[330,38,324,36],[330,40,324,38],[331,12,325,10,"clearInteractionTimeout"],[331,35,325,33],[331,36,325,34,"interactionState"],[331,52,325,50],[331,53,325,51],[332,10,326,8],[333,10,327,8,"interactionState"],[333,26,327,24],[333,27,327,25,"shouldCancelClick"],[333,44,327,42],[333,47,327,45],[333,51,327,49],[334,10,328,8,"gestureState"],[334,22,328,20],[334,23,328,21,"x0"],[334,25,328,23],[334,28,328,26,"currentCentroidX"],[334,44,328,42],[334,45,328,43,"event"],[334,50,328,48],[334,51,328,49,"touchHistory"],[334,63,328,61],[334,64,328,62],[335,10,329,8,"gestureState"],[335,22,329,20],[335,23,329,21,"y0"],[335,25,329,23],[335,28,329,26,"currentCentroidY"],[335,44,329,42],[335,45,329,43,"event"],[335,50,329,48],[335,51,329,49,"touchHistory"],[335,63,329,61],[335,64,329,62],[336,10,330,8,"gestureState"],[336,22,330,20],[336,23,330,21,"dx"],[336,25,330,23],[336,28,330,26],[336,29,330,27],[337,10,331,8,"gestureState"],[337,22,331,20],[337,23,331,21,"dy"],[337,25,331,23],[337,28,331,26],[337,29,331,27],[338,10,332,8],[338,14,332,12,"config"],[338,20,332,18],[338,21,332,19,"onPanResponderGrant"],[338,40,332,38],[338,42,332,40],[339,12,333,10,"config"],[339,18,333,16],[339,19,333,17,"onPanResponderGrant"],[339,38,333,36],[339,39,333,37,"event"],[339,44,333,42],[339,46,333,44,"gestureState"],[339,58,333,56],[339,59,333,57],[340,10,334,8],[341,10,335,8],[342,10,336,8],[342,17,336,15,"config"],[342,23,336,21],[342,24,336,22,"onShouldBlockNativeResponder"],[342,52,336,50],[342,56,336,54],[342,60,336,58],[342,63,336,61],[342,67,336,65],[342,70,336,68,"config"],[342,76,336,74],[342,77,336,75,"onShouldBlockNativeResponder"],[342,105,336,103],[342,106,336,104,"event"],[342,111,336,109],[342,113,336,111,"gestureState"],[342,125,336,123],[342,126,336,124],[343,8,337,6],[343,9,337,7],[344,8,338,6,"onResponderReject"],[344,25,338,23,"onResponderReject"],[344,26,338,24,"event"],[344,31,338,29],[344,33,338,31],[345,10,339,8,"clearInteractionHandle"],[345,32,339,30],[345,33,339,31,"interactionState"],[345,49,339,47],[345,51,339,49,"config"],[345,57,339,55],[345,58,339,56,"onPanResponderReject"],[345,78,339,76],[345,80,339,78,"event"],[345,85,339,83],[345,87,339,85,"gestureState"],[345,99,339,97],[345,100,339,98],[346,8,340,6],[346,9,340,7],[347,8,341,6,"onResponderRelease"],[347,26,341,24,"onResponderRelease"],[347,27,341,25,"event"],[347,32,341,30],[347,34,341,32],[348,10,342,8,"clearInteractionHandle"],[348,32,342,30],[348,33,342,31,"interactionState"],[348,49,342,47],[348,51,342,49,"config"],[348,57,342,55],[348,58,342,56,"onPanResponderRelease"],[348,79,342,77],[348,81,342,79,"event"],[348,86,342,84],[348,88,342,86,"gestureState"],[348,100,342,98],[348,101,342,99],[349,10,343,8,"setInteractionTimeout"],[349,31,343,29],[349,32,343,30,"interactionState"],[349,48,343,46],[349,49,343,47],[350,10,344,8,"PanResponder"],[350,22,344,20],[350,23,344,21,"_initializeGestureState"],[350,46,344,44],[350,47,344,45,"gestureState"],[350,59,344,57],[350,60,344,58],[351,8,345,6],[351,9,345,7],[352,8,346,6,"onResponderStart"],[352,24,346,22,"onResponderStart"],[352,25,346,23,"event"],[352,30,346,28],[352,32,346,30],[353,10,347,8],[353,14,347,12,"touchHistory"],[353,26,347,24],[353,29,347,27,"event"],[353,34,347,32],[353,35,347,33,"touchHistory"],[353,47,347,45],[354,10,348,8,"gestureState"],[354,22,348,20],[354,23,348,21,"numberActiveTouches"],[354,42,348,40],[354,45,348,43,"touchHistory"],[354,57,348,55],[354,58,348,56,"numberActiveTouches"],[354,77,348,75],[355,10,349,8],[355,14,349,12,"config"],[355,20,349,18],[355,21,349,19,"onPanResponderStart"],[355,40,349,38],[355,42,349,40],[356,12,350,10,"config"],[356,18,350,16],[356,19,350,17,"onPanResponderStart"],[356,38,350,36],[356,39,350,37,"event"],[356,44,350,42],[356,46,350,44,"gestureState"],[356,58,350,56],[356,59,350,57],[357,10,351,8],[358,8,352,6],[358,9,352,7],[359,8,353,6,"onResponderMove"],[359,23,353,21,"onResponderMove"],[359,24,353,22,"event"],[359,29,353,27],[359,31,353,29],[360,10,354,8],[360,14,354,12,"touchHistory"],[360,26,354,24],[360,29,354,27,"event"],[360,34,354,32],[360,35,354,33,"touchHistory"],[360,47,354,45],[361,10,355,8],[362,10,356,8],[363,10,357,8],[363,14,357,12,"gestureState"],[363,26,357,24],[363,27,357,25,"_accountsForMovesUpTo"],[363,48,357,46],[363,53,357,51,"touchHistory"],[363,65,357,63],[363,66,357,64,"mostRecentTimeStamp"],[363,85,357,83],[363,87,357,85],[364,12,358,10],[365,10,359,8],[366,10,360,8],[367,10,361,8],[368,10,362,8,"PanResponder"],[368,22,362,20],[368,23,362,21,"_updateGestureStateOnMove"],[368,48,362,46],[368,49,362,47,"gestureState"],[368,61,362,59],[368,63,362,61,"touchHistory"],[368,75,362,73],[368,76,362,74],[369,10,363,8],[369,14,363,12,"config"],[369,20,363,18],[369,21,363,19,"onPanResponderMove"],[369,39,363,37],[369,41,363,39],[370,12,364,10,"config"],[370,18,364,16],[370,19,364,17,"onPanResponderMove"],[370,37,364,35],[370,38,364,36,"event"],[370,43,364,41],[370,45,364,43,"gestureState"],[370,57,364,55],[370,58,364,56],[371,10,365,8],[372,8,366,6],[372,9,366,7],[373,8,367,6,"onResponderEnd"],[373,22,367,20,"onResponderEnd"],[373,23,367,21,"event"],[373,28,367,26],[373,30,367,28],[374,10,368,8],[374,14,368,12,"touchHistory"],[374,26,368,24],[374,29,368,27,"event"],[374,34,368,32],[374,35,368,33,"touchHistory"],[374,47,368,45],[375,10,369,8,"gestureState"],[375,22,369,20],[375,23,369,21,"numberActiveTouches"],[375,42,369,40],[375,45,369,43,"touchHistory"],[375,57,369,55],[375,58,369,56,"numberActiveTouches"],[375,77,369,75],[376,10,370,8,"clearInteractionHandle"],[376,32,370,30],[376,33,370,31,"interactionState"],[376,49,370,47],[376,51,370,49,"config"],[376,57,370,55],[376,58,370,56,"onPanResponderEnd"],[376,75,370,73],[376,77,370,75,"event"],[376,82,370,80],[376,84,370,82,"gestureState"],[376,96,370,94],[376,97,370,95],[377,8,371,6],[377,9,371,7],[378,8,372,6,"onResponderTerminate"],[378,28,372,26,"onResponderTerminate"],[378,29,372,27,"event"],[378,34,372,32],[378,36,372,34],[379,10,373,8,"clearInteractionHandle"],[379,32,373,30],[379,33,373,31,"interactionState"],[379,49,373,47],[379,51,373,49,"config"],[379,57,373,55],[379,58,373,56,"onPanResponderTerminate"],[379,81,373,79],[379,83,373,81,"event"],[379,88,373,86],[379,90,373,88,"gestureState"],[379,102,373,100],[379,103,373,101],[380,10,374,8,"setInteractionTimeout"],[380,31,374,29],[380,32,374,30,"interactionState"],[380,48,374,46],[380,49,374,47],[381,10,375,8,"PanResponder"],[381,22,375,20],[381,23,375,21,"_initializeGestureState"],[381,46,375,44],[381,47,375,45,"gestureState"],[381,59,375,57],[381,60,375,58],[382,8,376,6],[382,9,376,7],[383,8,377,6,"onResponderTerminationRequest"],[383,37,377,35,"onResponderTerminationRequest"],[383,38,377,36,"event"],[383,43,377,41],[383,45,377,43],[384,10,378,8],[384,17,378,15,"config"],[384,23,378,21],[384,24,378,22,"onPanResponderTerminationRequest"],[384,56,378,54],[384,60,378,58],[384,64,378,62],[384,67,378,65],[384,71,378,69],[384,74,378,72,"config"],[384,80,378,78],[384,81,378,79,"onPanResponderTerminationRequest"],[384,113,378,111],[384,114,378,112,"event"],[384,119,378,117],[384,121,378,119,"gestureState"],[384,133,378,131],[384,134,378,132],[385,8,379,6],[385,9,379,7],[386,8,380,6],[387,8,381,6],[388,8,382,6],[389,8,383,6],[390,8,384,6,"onClickCapture"],[390,22,384,20],[390,24,384,22,"event"],[390,29,384,27],[390,33,384,31],[391,10,385,8],[391,14,385,12,"interactionState"],[391,30,385,28],[391,31,385,29,"shouldCancelClick"],[391,48,385,46],[391,53,385,51],[391,57,385,55],[391,59,385,57],[392,12,386,10,"event"],[392,17,386,15],[392,18,386,16,"stopPropagation"],[392,33,386,31],[392,34,386,32],[392,35,386,33],[393,12,387,10,"event"],[393,17,387,15],[393,18,387,16,"preventDefault"],[393,32,387,30],[393,33,387,31],[393,34,387,32],[394,10,388,8],[395,8,389,6],[396,6,390,4],[396,7,390,5],[397,6,391,4],[397,13,391,11],[398,8,392,6,"panHandlers"],[398,19,392,17],[399,8,393,6,"getInteractionHandle"],[399,28,393,26,"getInteractionHandle"],[399,29,393,26],[399,31,393,29],[400,10,394,8],[400,17,394,15,"interactionState"],[400,33,394,31],[400,34,394,32,"handle"],[400,40,394,38],[401,8,395,6],[402,6,396,4],[402,7,396,5],[403,4,397,2],[404,2,398,0],[404,3,398,1],[405,2,399,0],[405,11,399,9,"clearInteractionHandle"],[405,33,399,31,"clearInteractionHandle"],[405,34,399,32,"interactionState"],[405,50,399,48],[405,52,399,50,"callback"],[405,60,399,58],[405,62,399,60,"event"],[405,67,399,65],[405,69,399,67,"gestureState"],[405,81,399,79],[405,83,399,81],[406,4,400,2],[406,8,400,6,"interactionState"],[406,24,400,22],[406,25,400,23,"handle"],[406,31,400,29],[406,33,400,31],[407,6,401,4,"InteractionManager"],[407,33,401,22],[407,34,401,23,"clearInteractionHandle"],[407,56,401,45],[407,57,401,46,"interactionState"],[407,73,401,62],[407,74,401,63,"handle"],[407,80,401,69],[407,81,401,70],[408,6,402,4,"interactionState"],[408,22,402,20],[408,23,402,21,"handle"],[408,29,402,27],[408,32,402,30],[408,36,402,34],[409,4,403,2],[410,4,404,2],[410,8,404,6,"callback"],[410,16,404,14],[410,18,404,16],[411,6,405,4,"callback"],[411,14,405,12],[411,15,405,13,"event"],[411,20,405,18],[411,22,405,20,"gestureState"],[411,34,405,32],[411,35,405,33],[412,4,406,2],[413,2,407,0],[414,2,408,0],[414,11,408,9,"clearInteractionTimeout"],[414,34,408,32,"clearInteractionTimeout"],[414,35,408,33,"interactionState"],[414,51,408,49],[414,53,408,51],[415,4,409,2,"clearTimeout"],[415,16,409,14],[415,17,409,15,"interactionState"],[415,33,409,31],[415,34,409,32,"timeout"],[415,41,409,39],[415,42,409,40],[416,2,410,0],[417,2,411,0],[417,11,411,9,"setInteractionTimeout"],[417,32,411,30,"setInteractionTimeout"],[417,33,411,31,"interactionState"],[417,49,411,47],[417,51,411,49],[418,4,412,2,"interactionState"],[418,20,412,18],[418,21,412,19,"timeout"],[418,28,412,26],[418,31,412,29,"setTimeout"],[418,41,412,39],[418,42,412,40],[418,48,412,46],[419,6,413,4,"interactionState"],[419,22,413,20],[419,23,413,21,"shouldCancelClick"],[419,40,413,38],[419,43,413,41],[419,48,413,46],[420,4,414,2],[420,5,414,3],[420,7,414,5],[420,10,414,8],[420,11,414,9],[421,2,415,0],[422,2,415,1],[422,6,415,1,"_default"],[422,14,415,1],[422,17,415,1,"exports"],[422,24,415,1],[422,25,415,1,"default"],[422,32,415,1],[422,35,416,15,"PanResponder"],[422,47,416,27],[423,0,416,27],[423,3]],"functionMap":{"names":["<global>","PanResponder._initializeGestureState","PanResponder._updateGestureStateOnMove","PanResponder.create","panHandlers.onStartShouldSetResponder","panHandlers.onMoveShouldSetResponder","panHandlers.onStartShouldSetResponderCapture","panHandlers.onMoveShouldSetResponderCapture","panHandlers.onResponderGrant","panHandlers.onResponderReject","panHandlers.onResponderRelease","panHandlers.onResponderStart","panHandlers.onResponderMove","panHandlers.onResponderEnd","panHandlers.onResponderTerminate","panHandlers.onResponderTerminationRequest","panHandlers.onClickCapture","getInteractionHandle","clearInteractionHandle","clearInteractionTimeout","setInteractionTimeout","setTimeout$argument_0"],"mappings":"AAA;ECuL;GDY;EEyB;GFmB;EGiC;MCqB;ODE;MEC;OFE;MGC;OHQ;MIC;OJU;MKC;OLiB;MMC;ONE;MOC;OPI;MQC;ORM;MSC;OTa;MUC;OVI;MWC;OXI;MYC;OZE;sBaK;ObK;McI;OdE;GHE;AkBE;ClBQ;AmBC;CnBE;AoBC;wCCC;GDE;CpBC"}},"type":"js/module"}]}