{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"@react-navigation/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":227,"index":242}}],"key":"Wm75LgE4xYscVWo0KoLFlflJQCo=","exportNames":["*"]}},{"name":"fast-deep-equal","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":243},"end":{"line":4,"column":38,"index":281}}],"key":"kmUMBZlZK8fLQ5NsiSOBIMofZVo=","exportNames":["*"]}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":282},"end":{"line":5,"column":31,"index":313}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"]}},{"name":"./createMemoryHistory.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":314},"end":{"line":6,"column":63,"index":377}}],"key":"A5sfS3fG0SatnHOyroudNhe0KN0=","exportNames":["*"]}},{"name":"./ServerContext.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":378},"end":{"line":7,"column":51,"index":429}}],"key":"+Hz1a4I7q6hCkPilSOm0KYt2/D0=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.series = void 0;\n  exports.useLinking = useLinking;\n  var _core = require(_dependencyMap[1], \"@react-navigation/core\");\n  var _fastDeepEqual = _interopRequireDefault(require(_dependencyMap[2], \"fast-deep-equal\"));\n  var React = _interopRequireWildcard(require(_dependencyMap[3], \"react\"));\n  var _createMemoryHistory = require(_dependencyMap[4], \"./createMemoryHistory.js\");\n  var _ServerContext = require(_dependencyMap[5], \"./ServerContext.js\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  /**\n   * Find the matching navigation state that changed between 2 navigation states\n   * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n   */\n  const findMatchingState = (a, b) => {\n    if (a === undefined || b === undefined || a.key !== b.key) {\n      return [undefined, undefined];\n    }\n\n    // Tab and drawer will have `history` property, but stack will have history in `routes`\n    const aHistoryLength = a.history ? a.history.length : a.routes.length;\n    const bHistoryLength = b.history ? b.history.length : b.routes.length;\n    const aRoute = a.routes[a.index];\n    const bRoute = b.routes[b.index];\n    const aChildState = aRoute.state;\n    const bChildState = bRoute.state;\n\n    // Stop here if this is the state object that changed:\n    // - history length is different\n    // - focused routes are different\n    // - one of them doesn't have child state\n    // - child state keys are different\n    if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n      return [a, b];\n    }\n    return findMatchingState(aChildState, bChildState);\n  };\n\n  /**\n   * Run async function in series as it's called.\n   */\n  const series = cb => {\n    let queue = Promise.resolve();\n    const callback = () => {\n      // eslint-disable-next-line promise/no-callback-in-promise\n      queue = queue.then(cb);\n    };\n    return callback;\n  };\n  exports.series = series;\n  const linkingHandlers = [];\n  function useLinking(ref, {\n    enabled = true,\n    config,\n    getStateFromPath = _core.getStateFromPath,\n    getPathFromState = _core.getPathFromState,\n    getActionFromState = _core.getActionFromState\n  }, onUnhandledLinking) {\n    const independent = (0, _core.useNavigationIndependentTree)();\n    React.useEffect(() => {\n      if (process.env.NODE_ENV === 'production') {\n        return undefined;\n      }\n      if (independent) {\n        return undefined;\n      }\n      if (enabled !== false && linkingHandlers.length) {\n        console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n      }\n      const handler = Symbol();\n      if (enabled !== false) {\n        linkingHandlers.push(handler);\n      }\n      return () => {\n        const index = linkingHandlers.indexOf(handler);\n        if (index > -1) {\n          linkingHandlers.splice(index, 1);\n        }\n      };\n    }, [enabled, independent]);\n    const [history] = React.useState(_createMemoryHistory.createMemoryHistory);\n\n    // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n    // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n    // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n    const enabledRef = React.useRef(enabled);\n    const configRef = React.useRef(config);\n    const getStateFromPathRef = React.useRef(getStateFromPath);\n    const getPathFromStateRef = React.useRef(getPathFromState);\n    const getActionFromStateRef = React.useRef(getActionFromState);\n    React.useEffect(() => {\n      enabledRef.current = enabled;\n      configRef.current = config;\n      getStateFromPathRef.current = getStateFromPath;\n      getPathFromStateRef.current = getPathFromState;\n      getActionFromStateRef.current = getActionFromState;\n    });\n    const validateRoutesNotExistInRootState = React.useCallback(state => {\n      const navigation = ref.current;\n      const rootState = navigation?.getRootState();\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      return state?.routes.some(r => !rootState?.routeNames.includes(r.name));\n    }, [ref]);\n    const server = React.useContext(_ServerContext.ServerContext);\n    const getInitialState = React.useCallback(() => {\n      let value;\n      if (enabledRef.current) {\n        const location = server?.location ?? (false ? window.location : undefined);\n        const path = location ? location.pathname + location.search : undefined;\n        if (path) {\n          value = getStateFromPathRef.current(path, configRef.current);\n        }\n\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n      }\n      const thenable = {\n        then(onfulfilled) {\n          return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n        },\n        catch() {\n          return thenable;\n        }\n      };\n      return thenable;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const previousIndexRef = React.useRef(undefined);\n    const previousStateRef = React.useRef(undefined);\n    const pendingPopStatePathRef = React.useRef(undefined);\n    React.useEffect(() => {\n      previousIndexRef.current = history.index;\n      return history.listen(() => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const {\n          location\n        } = window;\n        const path = location.pathname + location.search;\n        const index = history.index;\n        const previousIndex = previousIndexRef.current ?? 0;\n        previousIndexRef.current = index;\n        pendingPopStatePathRef.current = path;\n\n        // When browser back/forward is clicked, we first need to check if state object for this index exists\n        // If it does we'll reset to that state object\n        // Otherwise, we'll handle it like a regular deep link\n        const record = history.get(index);\n        if (record?.path === path && record?.state) {\n          navigation.resetRoot(record.state);\n          return;\n        }\n        const state = getStateFromPathRef.current(path, configRef.current);\n\n        // We should only dispatch an action when going forward\n        // Otherwise the action will likely add items to history, which would mess things up\n        if (state) {\n          // If the link were handled, it gets cleared in NavigationContainer\n          onUnhandledLinking(path);\n          // Make sure that the routes in the state exist in the root navigator\n          // Otherwise there's an error in the linking configuration\n          if (validateRoutesNotExistInRootState(state)) {\n            return;\n          }\n          if (index > previousIndex) {\n            const action = getActionFromStateRef.current(state, configRef.current);\n            if (action !== undefined) {\n              try {\n                navigation.dispatch(action);\n              } catch (e) {\n                // Ignore any errors from deep linking.\n                // This could happen in case of malformed links, navigation object not being initialized etc.\n                console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n              }\n            } else {\n              navigation.resetRoot(state);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          // if current path didn't return any state, we should revert to initial state\n          navigation.resetRoot(state);\n        }\n      });\n    }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n    React.useEffect(() => {\n      if (!enabled) {\n        return;\n      }\n      const getPathForRoute = (route, state) => {\n        let path;\n\n        // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n        // This makes sure that we preserve the original URL for wildcard routes\n        if (route?.path) {\n          const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n          if (stateForPath) {\n            const focusedRoute = (0, _core.findFocusedRoute)(stateForPath);\n            if (focusedRoute && focusedRoute.name === route.name && (0, _fastDeepEqual.default)(focusedRoute.params, route.params)) {\n              path = route.path;\n            }\n          }\n        }\n        if (path == null) {\n          path = getPathFromStateRef.current(state, configRef.current);\n        }\n        const previousRoute = previousStateRef.current ? (0, _core.findFocusedRoute)(previousStateRef.current) : undefined;\n\n        // Preserve the hash if the route didn't change\n        if (previousRoute && route && 'key' in previousRoute && 'key' in route && previousRoute.key === route.key) {\n          path = path + location.hash;\n        }\n        return path;\n      };\n      if (ref.current) {\n        // We need to record the current metadata on the first render if they aren't set\n        // This will allow the initial state to be in the history entry\n        const state = ref.current.getRootState();\n        if (state) {\n          const route = (0, _core.findFocusedRoute)(state);\n          const path = getPathForRoute(route, state);\n          if (previousStateRef.current === undefined) {\n            previousStateRef.current = state;\n          }\n          history.replace({\n            path,\n            state\n          });\n        }\n      }\n      const onStateChange = async () => {\n        const navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        const previousState = previousStateRef.current;\n        const state = navigation.getRootState();\n\n        // root state may not available, for example when root navigators switch inside the container\n        if (!state) {\n          return;\n        }\n        const pendingPath = pendingPopStatePathRef.current;\n        const route = (0, _core.findFocusedRoute)(state);\n        const path = getPathForRoute(route, state);\n        previousStateRef.current = state;\n        pendingPopStatePathRef.current = undefined;\n\n        // To detect the kind of state change, we need to:\n        // - Find the common focused navigation state in previous and current state\n        // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n        // - If no common focused navigation state found, it's a replace\n        const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n        if (previousFocusedState && focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath) {\n          const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n          if (historyDelta > 0) {\n            // If history length is increased, we should pushState\n            // Note that path might not actually change here, for example, drawer open should pushState\n            history.push({\n              path,\n              state\n            });\n          } else if (historyDelta < 0) {\n            // If history length is decreased, i.e. entries were removed, we want to go back\n\n            const nextIndex = history.backIndex({\n              path\n            });\n            const currentIndex = history.index;\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex)) {\n                // An existing entry for this path exists and it's less than current index, go back to that\n                await history.go(nextIndex - currentIndex);\n              } else {\n                // We couldn't find an existing entry to go back to, so we'll go back by the delta\n                // This won't be correct if multiple routes were pushed in one go before\n                // Usually this shouldn't happen and this is a fallback for that\n                await history.go(historyDelta);\n              }\n\n              // Store the updated state as well as fix the path if incorrect\n              history.replace({\n                path,\n                state\n              });\n            } catch (e) {\n              // The navigation was interrupted\n            }\n          } else {\n            // If history length is unchanged, we want to replaceState\n            history.replace({\n              path,\n              state\n            });\n          }\n        } else {\n          // If no common navigation state was found, assume it's a replace\n          // This would happen if the user did a reset/conditionally changed navigators\n          history.replace({\n            path,\n            state\n          });\n        }\n      };\n\n      // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n      // This could happen since `history.go(n)` is asynchronous\n      // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n      return ref.current?.addListener('state', series(onStateChange));\n    }, [enabled, history, ref]);\n    return {\n      getInitialState\n    };\n  }\n});","lineCount":329,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"series"],[8,16,1,13],[9,2,1,13,"exports"],[9,9,1,13],[9,10,1,13,"useLinking"],[9,20,1,13],[9,23,1,13,"useLinking"],[9,33,1,13],[10,2,3,0],[10,6,3,0,"_core"],[10,11,3,0],[10,14,3,0,"require"],[10,21,3,0],[10,22,3,0,"_dependencyMap"],[10,36,3,0],[11,2,4,0],[11,6,4,0,"_fastDeepEqual"],[11,20,4,0],[11,23,4,0,"_interopRequireDefault"],[11,45,4,0],[11,46,4,0,"require"],[11,53,4,0],[11,54,4,0,"_dependencyMap"],[11,68,4,0],[12,2,5,0],[12,6,5,0,"React"],[12,11,5,0],[12,14,5,0,"_interopRequireWildcard"],[12,37,5,0],[12,38,5,0,"require"],[12,45,5,0],[12,46,5,0,"_dependencyMap"],[12,60,5,0],[13,2,6,0],[13,6,6,0,"_createMemoryHistory"],[13,26,6,0],[13,29,6,0,"require"],[13,36,6,0],[13,37,6,0,"_dependencyMap"],[13,51,6,0],[14,2,7,0],[14,6,7,0,"_ServerContext"],[14,20,7,0],[14,23,7,0,"require"],[14,30,7,0],[14,31,7,0,"_dependencyMap"],[14,45,7,0],[15,2,7,51],[15,11,7,51,"_interopRequireWildcard"],[15,35,7,51,"e"],[15,36,7,51],[15,38,7,51,"t"],[15,39,7,51],[15,68,7,51,"WeakMap"],[15,75,7,51],[15,81,7,51,"r"],[15,82,7,51],[15,89,7,51,"WeakMap"],[15,96,7,51],[15,100,7,51,"n"],[15,101,7,51],[15,108,7,51,"WeakMap"],[15,115,7,51],[15,127,7,51,"_interopRequireWildcard"],[15,150,7,51],[15,162,7,51,"_interopRequireWildcard"],[15,163,7,51,"e"],[15,164,7,51],[15,166,7,51,"t"],[15,167,7,51],[15,176,7,51,"t"],[15,177,7,51],[15,181,7,51,"e"],[15,182,7,51],[15,186,7,51,"e"],[15,187,7,51],[15,188,7,51,"__esModule"],[15,198,7,51],[15,207,7,51,"e"],[15,208,7,51],[15,214,7,51,"o"],[15,215,7,51],[15,217,7,51,"i"],[15,218,7,51],[15,220,7,51,"f"],[15,221,7,51],[15,226,7,51,"__proto__"],[15,235,7,51],[15,243,7,51,"default"],[15,250,7,51],[15,252,7,51,"e"],[15,253,7,51],[15,270,7,51,"e"],[15,271,7,51],[15,294,7,51,"e"],[15,295,7,51],[15,320,7,51,"e"],[15,321,7,51],[15,330,7,51,"f"],[15,331,7,51],[15,337,7,51,"o"],[15,338,7,51],[15,341,7,51,"t"],[15,342,7,51],[15,345,7,51,"n"],[15,346,7,51],[15,349,7,51,"r"],[15,350,7,51],[15,358,7,51,"o"],[15,359,7,51],[15,360,7,51,"has"],[15,363,7,51],[15,364,7,51,"e"],[15,365,7,51],[15,375,7,51,"o"],[15,376,7,51],[15,377,7,51,"get"],[15,380,7,51],[15,381,7,51,"e"],[15,382,7,51],[15,385,7,51,"o"],[15,386,7,51],[15,387,7,51,"set"],[15,390,7,51],[15,391,7,51,"e"],[15,392,7,51],[15,394,7,51,"f"],[15,395,7,51],[15,411,7,51,"t"],[15,412,7,51],[15,416,7,51,"e"],[15,417,7,51],[15,433,7,51,"t"],[15,434,7,51],[15,441,7,51,"hasOwnProperty"],[15,455,7,51],[15,456,7,51,"call"],[15,460,7,51],[15,461,7,51,"e"],[15,462,7,51],[15,464,7,51,"t"],[15,465,7,51],[15,472,7,51,"i"],[15,473,7,51],[15,477,7,51,"o"],[15,478,7,51],[15,481,7,51,"Object"],[15,487,7,51],[15,488,7,51,"defineProperty"],[15,502,7,51],[15,507,7,51,"Object"],[15,513,7,51],[15,514,7,51,"getOwnPropertyDescriptor"],[15,538,7,51],[15,539,7,51,"e"],[15,540,7,51],[15,542,7,51,"t"],[15,543,7,51],[15,550,7,51,"i"],[15,551,7,51],[15,552,7,51,"get"],[15,555,7,51],[15,559,7,51,"i"],[15,560,7,51],[15,561,7,51,"set"],[15,564,7,51],[15,568,7,51,"o"],[15,569,7,51],[15,570,7,51,"f"],[15,571,7,51],[15,573,7,51,"t"],[15,574,7,51],[15,576,7,51,"i"],[15,577,7,51],[15,581,7,51,"f"],[15,582,7,51],[15,583,7,51,"t"],[15,584,7,51],[15,588,7,51,"e"],[15,589,7,51],[15,590,7,51,"t"],[15,591,7,51],[15,602,7,51,"f"],[15,603,7,51],[15,608,7,51,"e"],[15,609,7,51],[15,611,7,51,"t"],[15,612,7,51],[16,2,8,0],[17,0,9,0],[18,0,10,0],[19,0,11,0],[20,2,12,0],[20,8,12,6,"findMatchingState"],[20,25,12,23],[20,28,12,26,"findMatchingState"],[20,29,12,27,"a"],[20,30,12,28],[20,32,12,30,"b"],[20,33,12,31],[20,38,12,36],[21,4,13,2],[21,8,13,6,"a"],[21,9,13,7],[21,14,13,12,"undefined"],[21,23,13,21],[21,27,13,25,"b"],[21,28,13,26],[21,33,13,31,"undefined"],[21,42,13,40],[21,46,13,44,"a"],[21,47,13,45],[21,48,13,46,"key"],[21,51,13,49],[21,56,13,54,"b"],[21,57,13,55],[21,58,13,56,"key"],[21,61,13,59],[21,63,13,61],[22,6,14,4],[22,13,14,11],[22,14,14,12,"undefined"],[22,23,14,21],[22,25,14,23,"undefined"],[22,34,14,32],[22,35,14,33],[23,4,15,2],[25,4,17,2],[26,4,18,2],[26,10,18,8,"aHistoryLength"],[26,24,18,22],[26,27,18,25,"a"],[26,28,18,26],[26,29,18,27,"history"],[26,36,18,34],[26,39,18,37,"a"],[26,40,18,38],[26,41,18,39,"history"],[26,48,18,46],[26,49,18,47,"length"],[26,55,18,53],[26,58,18,56,"a"],[26,59,18,57],[26,60,18,58,"routes"],[26,66,18,64],[26,67,18,65,"length"],[26,73,18,71],[27,4,19,2],[27,10,19,8,"bHistoryLength"],[27,24,19,22],[27,27,19,25,"b"],[27,28,19,26],[27,29,19,27,"history"],[27,36,19,34],[27,39,19,37,"b"],[27,40,19,38],[27,41,19,39,"history"],[27,48,19,46],[27,49,19,47,"length"],[27,55,19,53],[27,58,19,56,"b"],[27,59,19,57],[27,60,19,58,"routes"],[27,66,19,64],[27,67,19,65,"length"],[27,73,19,71],[28,4,20,2],[28,10,20,8,"aRoute"],[28,16,20,14],[28,19,20,17,"a"],[28,20,20,18],[28,21,20,19,"routes"],[28,27,20,25],[28,28,20,26,"a"],[28,29,20,27],[28,30,20,28,"index"],[28,35,20,33],[28,36,20,34],[29,4,21,2],[29,10,21,8,"bRoute"],[29,16,21,14],[29,19,21,17,"b"],[29,20,21,18],[29,21,21,19,"routes"],[29,27,21,25],[29,28,21,26,"b"],[29,29,21,27],[29,30,21,28,"index"],[29,35,21,33],[29,36,21,34],[30,4,22,2],[30,10,22,8,"aChildState"],[30,21,22,19],[30,24,22,22,"aRoute"],[30,30,22,28],[30,31,22,29,"state"],[30,36,22,34],[31,4,23,2],[31,10,23,8,"bChildState"],[31,21,23,19],[31,24,23,22,"bRoute"],[31,30,23,28],[31,31,23,29,"state"],[31,36,23,34],[33,4,25,2],[34,4,26,2],[35,4,27,2],[36,4,28,2],[37,4,29,2],[38,4,30,2],[38,8,30,6,"aHistoryLength"],[38,22,30,20],[38,27,30,25,"bHistoryLength"],[38,41,30,39],[38,45,30,43,"aRoute"],[38,51,30,49],[38,52,30,50,"key"],[38,55,30,53],[38,60,30,58,"bRoute"],[38,66,30,64],[38,67,30,65,"key"],[38,70,30,68],[38,74,30,72,"aChildState"],[38,85,30,83],[38,90,30,88,"undefined"],[38,99,30,97],[38,103,30,101,"bChildState"],[38,114,30,112],[38,119,30,117,"undefined"],[38,128,30,126],[38,132,30,130,"aChildState"],[38,143,30,141],[38,144,30,142,"key"],[38,147,30,145],[38,152,30,150,"bChildState"],[38,163,30,161],[38,164,30,162,"key"],[38,167,30,165],[38,169,30,167],[39,6,31,4],[39,13,31,11],[39,14,31,12,"a"],[39,15,31,13],[39,17,31,15,"b"],[39,18,31,16],[39,19,31,17],[40,4,32,2],[41,4,33,2],[41,11,33,9,"findMatchingState"],[41,28,33,26],[41,29,33,27,"aChildState"],[41,40,33,38],[41,42,33,40,"bChildState"],[41,53,33,51],[41,54,33,52],[42,2,34,0],[42,3,34,1],[44,2,36,0],[45,0,37,0],[46,0,38,0],[47,2,39,7],[47,8,39,13,"series"],[47,14,39,19],[47,17,39,22,"cb"],[47,19,39,24],[47,23,39,28],[48,4,40,2],[48,8,40,6,"queue"],[48,13,40,11],[48,16,40,14,"Promise"],[48,23,40,21],[48,24,40,22,"resolve"],[48,31,40,29],[48,32,40,30],[48,33,40,31],[49,4,41,2],[49,10,41,8,"callback"],[49,18,41,16],[49,21,41,19,"callback"],[49,22,41,19],[49,27,41,25],[50,6,42,4],[51,6,43,4,"queue"],[51,11,43,9],[51,14,43,12,"queue"],[51,19,43,17],[51,20,43,18,"then"],[51,24,43,22],[51,25,43,23,"cb"],[51,27,43,25],[51,28,43,26],[52,4,44,2],[52,5,44,3],[53,4,45,2],[53,11,45,9,"callback"],[53,19,45,17],[54,2,46,0],[54,3,46,1],[55,2,46,2,"exports"],[55,9,46,2],[55,10,46,2,"series"],[55,16,46,2],[55,19,46,2,"series"],[55,25,46,2],[56,2,47,0],[56,8,47,6,"linkingHandlers"],[56,23,47,21],[56,26,47,24],[56,28,47,26],[57,2,48,7],[57,11,48,16,"useLinking"],[57,21,48,26,"useLinking"],[57,22,48,27,"ref"],[57,25,48,30],[57,27,48,32],[58,4,49,2,"enabled"],[58,11,49,9],[58,14,49,12],[58,18,49,16],[59,4,50,2,"config"],[59,10,50,8],[60,4,51,2,"getStateFromPath"],[60,20,51,18],[60,23,51,21,"getStateFromPathDefault"],[60,45,51,44],[61,4,52,2,"getPathFromState"],[61,20,52,18],[61,23,52,21,"getPathFromStateDefault"],[61,45,52,44],[62,4,53,2,"getActionFromState"],[62,22,53,20],[62,25,53,23,"getActionFromStateDefault"],[63,2,54,0],[63,3,54,1],[63,5,54,3,"onUnhandledLinking"],[63,23,54,21],[63,25,54,23],[64,4,55,2],[64,10,55,8,"independent"],[64,21,55,19],[64,24,55,22],[64,28,55,22,"useNavigationIndependentTree"],[64,62,55,50],[64,64,55,51],[64,65,55,52],[65,4,56,2,"React"],[65,9,56,7],[65,10,56,8,"useEffect"],[65,19,56,17],[65,20,56,18],[65,26,56,24],[66,6,57,4],[66,10,57,8,"process"],[66,17,57,15],[66,18,57,16,"env"],[66,21,57,19],[66,22,57,20,"NODE_ENV"],[66,30,57,28],[66,35,57,33],[66,47,57,45],[66,49,57,47],[67,8,58,6],[67,15,58,13,"undefined"],[67,24,58,22],[68,6,59,4],[69,6,60,4],[69,10,60,8,"independent"],[69,21,60,19],[69,23,60,21],[70,8,61,6],[70,15,61,13,"undefined"],[70,24,61,22],[71,6,62,4],[72,6,63,4],[72,10,63,8,"enabled"],[72,17,63,15],[72,22,63,20],[72,27,63,25],[72,31,63,29,"linkingHandlers"],[72,46,63,44],[72,47,63,45,"length"],[72,53,63,51],[72,55,63,53],[73,8,64,6,"console"],[73,15,64,13],[73,16,64,14,"error"],[73,21,64,19],[73,22,64,20],[73,23,64,21],[73,196,64,194],[73,198,64,196],[73,285,64,283],[73,287,64,285],[73,347,64,345],[73,348,64,346],[73,349,64,347,"join"],[73,353,64,351],[73,354,64,352],[73,358,64,356],[73,359,64,357],[73,360,64,358,"trim"],[73,364,64,362],[73,365,64,363],[73,366,64,364],[73,367,64,365],[74,6,65,4],[75,6,66,4],[75,12,66,10,"handler"],[75,19,66,17],[75,22,66,20,"Symbol"],[75,28,66,26],[75,29,66,27],[75,30,66,28],[76,6,67,4],[76,10,67,8,"enabled"],[76,17,67,15],[76,22,67,20],[76,27,67,25],[76,29,67,27],[77,8,68,6,"linkingHandlers"],[77,23,68,21],[77,24,68,22,"push"],[77,28,68,26],[77,29,68,27,"handler"],[77,36,68,34],[77,37,68,35],[78,6,69,4],[79,6,70,4],[79,13,70,11],[79,19,70,17],[80,8,71,6],[80,14,71,12,"index"],[80,19,71,17],[80,22,71,20,"linkingHandlers"],[80,37,71,35],[80,38,71,36,"indexOf"],[80,45,71,43],[80,46,71,44,"handler"],[80,53,71,51],[80,54,71,52],[81,8,72,6],[81,12,72,10,"index"],[81,17,72,15],[81,20,72,18],[81,21,72,19],[81,22,72,20],[81,24,72,22],[82,10,73,8,"linkingHandlers"],[82,25,73,23],[82,26,73,24,"splice"],[82,32,73,30],[82,33,73,31,"index"],[82,38,73,36],[82,40,73,38],[82,41,73,39],[82,42,73,40],[83,8,74,6],[84,6,75,4],[84,7,75,5],[85,4,76,2],[85,5,76,3],[85,7,76,5],[85,8,76,6,"enabled"],[85,15,76,13],[85,17,76,15,"independent"],[85,28,76,26],[85,29,76,27],[85,30,76,28],[86,4,77,2],[86,10,77,8],[86,11,77,9,"history"],[86,18,77,16],[86,19,77,17],[86,22,77,20,"React"],[86,27,77,25],[86,28,77,26,"useState"],[86,36,77,34],[86,37,77,35,"createMemoryHistory"],[86,77,77,54],[86,78,77,55],[88,4,79,2],[89,4,80,2],[90,4,81,2],[91,4,82,2],[91,10,82,8,"enabledRef"],[91,20,82,18],[91,23,82,21,"React"],[91,28,82,26],[91,29,82,27,"useRef"],[91,35,82,33],[91,36,82,34,"enabled"],[91,43,82,41],[91,44,82,42],[92,4,83,2],[92,10,83,8,"configRef"],[92,19,83,17],[92,22,83,20,"React"],[92,27,83,25],[92,28,83,26,"useRef"],[92,34,83,32],[92,35,83,33,"config"],[92,41,83,39],[92,42,83,40],[93,4,84,2],[93,10,84,8,"getStateFromPathRef"],[93,29,84,27],[93,32,84,30,"React"],[93,37,84,35],[93,38,84,36,"useRef"],[93,44,84,42],[93,45,84,43,"getStateFromPath"],[93,61,84,59],[93,62,84,60],[94,4,85,2],[94,10,85,8,"getPathFromStateRef"],[94,29,85,27],[94,32,85,30,"React"],[94,37,85,35],[94,38,85,36,"useRef"],[94,44,85,42],[94,45,85,43,"getPathFromState"],[94,61,85,59],[94,62,85,60],[95,4,86,2],[95,10,86,8,"getActionFromStateRef"],[95,31,86,29],[95,34,86,32,"React"],[95,39,86,37],[95,40,86,38,"useRef"],[95,46,86,44],[95,47,86,45,"getActionFromState"],[95,65,86,63],[95,66,86,64],[96,4,87,2,"React"],[96,9,87,7],[96,10,87,8,"useEffect"],[96,19,87,17],[96,20,87,18],[96,26,87,24],[97,6,88,4,"enabledRef"],[97,16,88,14],[97,17,88,15,"current"],[97,24,88,22],[97,27,88,25,"enabled"],[97,34,88,32],[98,6,89,4,"configRef"],[98,15,89,13],[98,16,89,14,"current"],[98,23,89,21],[98,26,89,24,"config"],[98,32,89,30],[99,6,90,4,"getStateFromPathRef"],[99,25,90,23],[99,26,90,24,"current"],[99,33,90,31],[99,36,90,34,"getStateFromPath"],[99,52,90,50],[100,6,91,4,"getPathFromStateRef"],[100,25,91,23],[100,26,91,24,"current"],[100,33,91,31],[100,36,91,34,"getPathFromState"],[100,52,91,50],[101,6,92,4,"getActionFromStateRef"],[101,27,92,25],[101,28,92,26,"current"],[101,35,92,33],[101,38,92,36,"getActionFromState"],[101,56,92,54],[102,4,93,2],[102,5,93,3],[102,6,93,4],[103,4,94,2],[103,10,94,8,"validateRoutesNotExistInRootState"],[103,43,94,41],[103,46,94,44,"React"],[103,51,94,49],[103,52,94,50,"useCallback"],[103,63,94,61],[103,64,94,62,"state"],[103,69,94,67],[103,73,94,71],[104,6,95,4],[104,12,95,10,"navigation"],[104,22,95,20],[104,25,95,23,"ref"],[104,28,95,26],[104,29,95,27,"current"],[104,36,95,34],[105,6,96,4],[105,12,96,10,"rootState"],[105,21,96,19],[105,24,96,22,"navigation"],[105,34,96,32],[105,36,96,34,"getRootState"],[105,48,96,46],[105,49,96,47],[105,50,96,48],[106,6,97,4],[107,6,98,4],[108,6,99,4],[108,13,99,11,"state"],[108,18,99,16],[108,20,99,18,"routes"],[108,26,99,24],[108,27,99,25,"some"],[108,31,99,29],[108,32,99,30,"r"],[108,33,99,31],[108,37,99,35],[108,38,99,36,"rootState"],[108,47,99,45],[108,49,99,47,"routeNames"],[108,59,99,57],[108,60,99,58,"includes"],[108,68,99,66],[108,69,99,67,"r"],[108,70,99,68],[108,71,99,69,"name"],[108,75,99,73],[108,76,99,74],[108,77,99,75],[109,4,100,2],[109,5,100,3],[109,7,100,5],[109,8,100,6,"ref"],[109,11,100,9],[109,12,100,10],[109,13,100,11],[110,4,101,2],[110,10,101,8,"server"],[110,16,101,14],[110,19,101,17,"React"],[110,24,101,22],[110,25,101,23,"useContext"],[110,35,101,33],[110,36,101,34,"ServerContext"],[110,64,101,47],[110,65,101,48],[111,4,102,2],[111,10,102,8,"getInitialState"],[111,25,102,23],[111,28,102,26,"React"],[111,33,102,31],[111,34,102,32,"useCallback"],[111,45,102,43],[111,46,102,44],[111,52,102,50],[112,6,103,4],[112,10,103,8,"value"],[112,15,103,13],[113,6,104,4],[113,10,104,8,"enabledRef"],[113,20,104,18],[113,21,104,19,"current"],[113,28,104,26],[113,30,104,28],[114,8,105,6],[114,14,105,12,"location"],[114,22,105,20],[114,25,105,23,"server"],[114,31,105,29],[114,33,105,31,"location"],[114,41,105,39],[114,46,105,44],[114,54,105,76,"window"],[114,60,105,82],[114,61,105,83,"location"],[114,69,105,91],[114,72,105,94,"undefined"],[114,81,105,103],[114,82,105,104],[115,8,106,6],[115,14,106,12,"path"],[115,18,106,16],[115,21,106,19,"location"],[115,29,106,27],[115,32,106,30,"location"],[115,40,106,38],[115,41,106,39,"pathname"],[115,49,106,47],[115,52,106,50,"location"],[115,60,106,58],[115,61,106,59,"search"],[115,67,106,65],[115,70,106,68,"undefined"],[115,79,106,77],[116,8,107,6],[116,12,107,10,"path"],[116,16,107,14],[116,18,107,16],[117,10,108,8,"value"],[117,15,108,13],[117,18,108,16,"getStateFromPathRef"],[117,37,108,35],[117,38,108,36,"current"],[117,45,108,43],[117,46,108,44,"path"],[117,50,108,48],[117,52,108,50,"configRef"],[117,61,108,59],[117,62,108,60,"current"],[117,69,108,67],[117,70,108,68],[118,8,109,6],[120,8,111,6],[121,8,112,6,"onUnhandledLinking"],[121,26,112,24],[121,27,112,25,"path"],[121,31,112,29],[121,32,112,30],[122,6,113,4],[123,6,114,4],[123,12,114,10,"thenable"],[123,20,114,18],[123,23,114,21],[124,8,115,6,"then"],[124,12,115,10,"then"],[124,13,115,11,"onfulfilled"],[124,24,115,22],[124,26,115,24],[125,10,116,8],[125,17,116,15,"Promise"],[125,24,116,22],[125,25,116,23,"resolve"],[125,32,116,30],[125,33,116,31,"onfulfilled"],[125,44,116,42],[125,47,116,45,"onfulfilled"],[125,58,116,56],[125,59,116,57,"value"],[125,64,116,62],[125,65,116,63],[125,68,116,66,"value"],[125,73,116,71],[125,74,116,72],[126,8,117,6],[126,9,117,7],[127,8,118,6,"catch"],[127,13,118,11,"catch"],[127,14,118,11],[127,16,118,14],[128,10,119,8],[128,17,119,15,"thenable"],[128,25,119,23],[129,8,120,6],[130,6,121,4],[130,7,121,5],[131,6,122,4],[131,13,122,11,"thenable"],[131,21,122,19],[132,6,123,4],[133,4,124,2],[133,5,124,3],[133,7,124,5],[133,9,124,7],[133,10,124,8],[134,4,125,2],[134,10,125,8,"previousIndexRef"],[134,26,125,24],[134,29,125,27,"React"],[134,34,125,32],[134,35,125,33,"useRef"],[134,41,125,39],[134,42,125,40,"undefined"],[134,51,125,49],[134,52,125,50],[135,4,126,2],[135,10,126,8,"previousStateRef"],[135,26,126,24],[135,29,126,27,"React"],[135,34,126,32],[135,35,126,33,"useRef"],[135,41,126,39],[135,42,126,40,"undefined"],[135,51,126,49],[135,52,126,50],[136,4,127,2],[136,10,127,8,"pendingPopStatePathRef"],[136,32,127,30],[136,35,127,33,"React"],[136,40,127,38],[136,41,127,39,"useRef"],[136,47,127,45],[136,48,127,46,"undefined"],[136,57,127,55],[136,58,127,56],[137,4,128,2,"React"],[137,9,128,7],[137,10,128,8,"useEffect"],[137,19,128,17],[137,20,128,18],[137,26,128,24],[138,6,129,4,"previousIndexRef"],[138,22,129,20],[138,23,129,21,"current"],[138,30,129,28],[138,33,129,31,"history"],[138,40,129,38],[138,41,129,39,"index"],[138,46,129,44],[139,6,130,4],[139,13,130,11,"history"],[139,20,130,18],[139,21,130,19,"listen"],[139,27,130,25],[139,28,130,26],[139,34,130,32],[140,8,131,6],[140,14,131,12,"navigation"],[140,24,131,22],[140,27,131,25,"ref"],[140,30,131,28],[140,31,131,29,"current"],[140,38,131,36],[141,8,132,6],[141,12,132,10],[141,13,132,11,"navigation"],[141,23,132,21],[141,27,132,25],[141,28,132,26,"enabled"],[141,35,132,33],[141,37,132,35],[142,10,133,8],[143,8,134,6],[144,8,135,6],[144,14,135,12],[145,10,136,8,"location"],[146,8,137,6],[146,9,137,7],[146,12,137,10,"window"],[146,18,137,16],[147,8,138,6],[147,14,138,12,"path"],[147,18,138,16],[147,21,138,19,"location"],[147,29,138,27],[147,30,138,28,"pathname"],[147,38,138,36],[147,41,138,39,"location"],[147,49,138,47],[147,50,138,48,"search"],[147,56,138,54],[148,8,139,6],[148,14,139,12,"index"],[148,19,139,17],[148,22,139,20,"history"],[148,29,139,27],[148,30,139,28,"index"],[148,35,139,33],[149,8,140,6],[149,14,140,12,"previousIndex"],[149,27,140,25],[149,30,140,28,"previousIndexRef"],[149,46,140,44],[149,47,140,45,"current"],[149,54,140,52],[149,58,140,56],[149,59,140,57],[150,8,141,6,"previousIndexRef"],[150,24,141,22],[150,25,141,23,"current"],[150,32,141,30],[150,35,141,33,"index"],[150,40,141,38],[151,8,142,6,"pendingPopStatePathRef"],[151,30,142,28],[151,31,142,29,"current"],[151,38,142,36],[151,41,142,39,"path"],[151,45,142,43],[153,8,144,6],[154,8,145,6],[155,8,146,6],[156,8,147,6],[156,14,147,12,"record"],[156,20,147,18],[156,23,147,21,"history"],[156,30,147,28],[156,31,147,29,"get"],[156,34,147,32],[156,35,147,33,"index"],[156,40,147,38],[156,41,147,39],[157,8,148,6],[157,12,148,10,"record"],[157,18,148,16],[157,20,148,18,"path"],[157,24,148,22],[157,29,148,27,"path"],[157,33,148,31],[157,37,148,35,"record"],[157,43,148,41],[157,45,148,43,"state"],[157,50,148,48],[157,52,148,50],[158,10,149,8,"navigation"],[158,20,149,18],[158,21,149,19,"resetRoot"],[158,30,149,28],[158,31,149,29,"record"],[158,37,149,35],[158,38,149,36,"state"],[158,43,149,41],[158,44,149,42],[159,10,150,8],[160,8,151,6],[161,8,152,6],[161,14,152,12,"state"],[161,19,152,17],[161,22,152,20,"getStateFromPathRef"],[161,41,152,39],[161,42,152,40,"current"],[161,49,152,47],[161,50,152,48,"path"],[161,54,152,52],[161,56,152,54,"configRef"],[161,65,152,63],[161,66,152,64,"current"],[161,73,152,71],[161,74,152,72],[163,8,154,6],[164,8,155,6],[165,8,156,6],[165,12,156,10,"state"],[165,17,156,15],[165,19,156,17],[166,10,157,8],[167,10,158,8,"onUnhandledLinking"],[167,28,158,26],[167,29,158,27,"path"],[167,33,158,31],[167,34,158,32],[168,10,159,8],[169,10,160,8],[170,10,161,8],[170,14,161,12,"validateRoutesNotExistInRootState"],[170,47,161,45],[170,48,161,46,"state"],[170,53,161,51],[170,54,161,52],[170,56,161,54],[171,12,162,10],[172,10,163,8],[173,10,164,8],[173,14,164,12,"index"],[173,19,164,17],[173,22,164,20,"previousIndex"],[173,35,164,33],[173,37,164,35],[174,12,165,10],[174,18,165,16,"action"],[174,24,165,22],[174,27,165,25,"getActionFromStateRef"],[174,48,165,46],[174,49,165,47,"current"],[174,56,165,54],[174,57,165,55,"state"],[174,62,165,60],[174,64,165,62,"configRef"],[174,73,165,71],[174,74,165,72,"current"],[174,81,165,79],[174,82,165,80],[175,12,166,10],[175,16,166,14,"action"],[175,22,166,20],[175,27,166,25,"undefined"],[175,36,166,34],[175,38,166,36],[176,14,167,12],[176,18,167,16],[177,16,168,14,"navigation"],[177,26,168,24],[177,27,168,25,"dispatch"],[177,35,168,33],[177,36,168,34,"action"],[177,42,168,40],[177,43,168,41],[178,14,169,12],[178,15,169,13],[178,16,169,14],[178,23,169,21,"e"],[178,24,169,22],[178,26,169,24],[179,16,170,14],[180,16,171,14],[181,16,172,14,"console"],[181,23,172,21],[181,24,172,22,"warn"],[181,28,172,26],[181,29,172,27],[181,82,172,80,"path"],[181,86,172,84],[181,92,172,90],[181,99,172,97,"e"],[181,100,172,98],[181,105,172,103],[181,113,172,111],[181,117,172,115,"e"],[181,118,172,116],[181,122,172,120],[181,126,172,124],[181,130,172,128],[181,139,172,137],[181,143,172,141,"e"],[181,144,172,142],[181,147,172,145,"e"],[181,148,172,146],[181,149,172,147,"message"],[181,156,172,154],[181,159,172,157,"e"],[181,160,172,158],[181,162,172,160],[181,163,172,161],[182,14,173,12],[183,12,174,10],[183,13,174,11],[183,19,174,17],[184,14,175,12,"navigation"],[184,24,175,22],[184,25,175,23,"resetRoot"],[184,34,175,32],[184,35,175,33,"state"],[184,40,175,38],[184,41,175,39],[185,12,176,10],[186,10,177,8],[186,11,177,9],[186,17,177,15],[187,12,178,10,"navigation"],[187,22,178,20],[187,23,178,21,"resetRoot"],[187,32,178,30],[187,33,178,31,"state"],[187,38,178,36],[187,39,178,37],[188,10,179,8],[189,8,180,6],[189,9,180,7],[189,15,180,13],[190,10,181,8],[191,10,182,8,"navigation"],[191,20,182,18],[191,21,182,19,"resetRoot"],[191,30,182,28],[191,31,182,29,"state"],[191,36,182,34],[191,37,182,35],[192,8,183,6],[193,6,184,4],[193,7,184,5],[193,8,184,6],[194,4,185,2],[194,5,185,3],[194,7,185,5],[194,8,185,6,"enabled"],[194,15,185,13],[194,17,185,15,"history"],[194,24,185,22],[194,26,185,24,"onUnhandledLinking"],[194,44,185,42],[194,46,185,44,"ref"],[194,49,185,47],[194,51,185,49,"validateRoutesNotExistInRootState"],[194,84,185,82],[194,85,185,83],[194,86,185,84],[195,4,186,2,"React"],[195,9,186,7],[195,10,186,8,"useEffect"],[195,19,186,17],[195,20,186,18],[195,26,186,24],[196,6,187,4],[196,10,187,8],[196,11,187,9,"enabled"],[196,18,187,16],[196,20,187,18],[197,8,188,6],[198,6,189,4],[199,6,190,4],[199,12,190,10,"getPathForRoute"],[199,27,190,25],[199,30,190,28,"getPathForRoute"],[199,31,190,29,"route"],[199,36,190,34],[199,38,190,36,"state"],[199,43,190,41],[199,48,190,46],[200,8,191,6],[200,12,191,10,"path"],[200,16,191,14],[202,8,193,6],[203,8,194,6],[204,8,195,6],[204,12,195,10,"route"],[204,17,195,15],[204,19,195,17,"path"],[204,23,195,21],[204,25,195,23],[205,10,196,8],[205,16,196,14,"stateForPath"],[205,28,196,26],[205,31,196,29,"getStateFromPathRef"],[205,50,196,48],[205,51,196,49,"current"],[205,58,196,56],[205,59,196,57,"route"],[205,64,196,62],[205,65,196,63,"path"],[205,69,196,67],[205,71,196,69,"configRef"],[205,80,196,78],[205,81,196,79,"current"],[205,88,196,86],[205,89,196,87],[206,10,197,8],[206,14,197,12,"stateForPath"],[206,26,197,24],[206,28,197,26],[207,12,198,10],[207,18,198,16,"focusedRoute"],[207,30,198,28],[207,33,198,31],[207,37,198,31,"findFocusedRoute"],[207,59,198,47],[207,61,198,48,"stateForPath"],[207,73,198,60],[207,74,198,61],[208,12,199,10],[208,16,199,14,"focusedRoute"],[208,28,199,26],[208,32,199,30,"focusedRoute"],[208,44,199,42],[208,45,199,43,"name"],[208,49,199,47],[208,54,199,52,"route"],[208,59,199,57],[208,60,199,58,"name"],[208,64,199,62],[208,68,199,66],[208,72,199,66,"isEqual"],[208,94,199,73],[208,96,199,74,"focusedRoute"],[208,108,199,86],[208,109,199,87,"params"],[208,115,199,93],[208,117,199,95,"route"],[208,122,199,100],[208,123,199,101,"params"],[208,129,199,107],[208,130,199,108],[208,132,199,110],[209,14,200,12,"path"],[209,18,200,16],[209,21,200,19,"route"],[209,26,200,24],[209,27,200,25,"path"],[209,31,200,29],[210,12,201,10],[211,10,202,8],[212,8,203,6],[213,8,204,6],[213,12,204,10,"path"],[213,16,204,14],[213,20,204,18],[213,24,204,22],[213,26,204,24],[214,10,205,8,"path"],[214,14,205,12],[214,17,205,15,"getPathFromStateRef"],[214,36,205,34],[214,37,205,35,"current"],[214,44,205,42],[214,45,205,43,"state"],[214,50,205,48],[214,52,205,50,"configRef"],[214,61,205,59],[214,62,205,60,"current"],[214,69,205,67],[214,70,205,68],[215,8,206,6],[216,8,207,6],[216,14,207,12,"previousRoute"],[216,27,207,25],[216,30,207,28,"previousStateRef"],[216,46,207,44],[216,47,207,45,"current"],[216,54,207,52],[216,57,207,55],[216,61,207,55,"findFocusedRoute"],[216,83,207,71],[216,85,207,72,"previousStateRef"],[216,101,207,88],[216,102,207,89,"current"],[216,109,207,96],[216,110,207,97],[216,113,207,100,"undefined"],[216,122,207,109],[218,8,209,6],[219,8,210,6],[219,12,210,10,"previousRoute"],[219,25,210,23],[219,29,210,27,"route"],[219,34,210,32],[219,38,210,36],[219,43,210,41],[219,47,210,45,"previousRoute"],[219,60,210,58],[219,64,210,62],[219,69,210,67],[219,73,210,71,"route"],[219,78,210,76],[219,82,210,80,"previousRoute"],[219,95,210,93],[219,96,210,94,"key"],[219,99,210,97],[219,104,210,102,"route"],[219,109,210,107],[219,110,210,108,"key"],[219,113,210,111],[219,115,210,113],[220,10,211,8,"path"],[220,14,211,12],[220,17,211,15,"path"],[220,21,211,19],[220,24,211,22,"location"],[220,32,211,30],[220,33,211,31,"hash"],[220,37,211,35],[221,8,212,6],[222,8,213,6],[222,15,213,13,"path"],[222,19,213,17],[223,6,214,4],[223,7,214,5],[224,6,215,4],[224,10,215,8,"ref"],[224,13,215,11],[224,14,215,12,"current"],[224,21,215,19],[224,23,215,21],[225,8,216,6],[226,8,217,6],[227,8,218,6],[227,14,218,12,"state"],[227,19,218,17],[227,22,218,20,"ref"],[227,25,218,23],[227,26,218,24,"current"],[227,33,218,31],[227,34,218,32,"getRootState"],[227,46,218,44],[227,47,218,45],[227,48,218,46],[228,8,219,6],[228,12,219,10,"state"],[228,17,219,15],[228,19,219,17],[229,10,220,8],[229,16,220,14,"route"],[229,21,220,19],[229,24,220,22],[229,28,220,22,"findFocusedRoute"],[229,50,220,38],[229,52,220,39,"state"],[229,57,220,44],[229,58,220,45],[230,10,221,8],[230,16,221,14,"path"],[230,20,221,18],[230,23,221,21,"getPathForRoute"],[230,38,221,36],[230,39,221,37,"route"],[230,44,221,42],[230,46,221,44,"state"],[230,51,221,49],[230,52,221,50],[231,10,222,8],[231,14,222,12,"previousStateRef"],[231,30,222,28],[231,31,222,29,"current"],[231,38,222,36],[231,43,222,41,"undefined"],[231,52,222,50],[231,54,222,52],[232,12,223,10,"previousStateRef"],[232,28,223,26],[232,29,223,27,"current"],[232,36,223,34],[232,39,223,37,"state"],[232,44,223,42],[233,10,224,8],[234,10,225,8,"history"],[234,17,225,15],[234,18,225,16,"replace"],[234,25,225,23],[234,26,225,24],[235,12,226,10,"path"],[235,16,226,14],[236,12,227,10,"state"],[237,10,228,8],[237,11,228,9],[237,12,228,10],[238,8,229,6],[239,6,230,4],[240,6,231,4],[240,12,231,10,"onStateChange"],[240,25,231,23],[240,28,231,26],[240,34,231,26,"onStateChange"],[240,35,231,26],[240,40,231,38],[241,8,232,6],[241,14,232,12,"navigation"],[241,24,232,22],[241,27,232,25,"ref"],[241,30,232,28],[241,31,232,29,"current"],[241,38,232,36],[242,8,233,6],[242,12,233,10],[242,13,233,11,"navigation"],[242,23,233,21],[242,27,233,25],[242,28,233,26,"enabled"],[242,35,233,33],[242,37,233,35],[243,10,234,8],[244,8,235,6],[245,8,236,6],[245,14,236,12,"previousState"],[245,27,236,25],[245,30,236,28,"previousStateRef"],[245,46,236,44],[245,47,236,45,"current"],[245,54,236,52],[246,8,237,6],[246,14,237,12,"state"],[246,19,237,17],[246,22,237,20,"navigation"],[246,32,237,30],[246,33,237,31,"getRootState"],[246,45,237,43],[246,46,237,44],[246,47,237,45],[248,8,239,6],[249,8,240,6],[249,12,240,10],[249,13,240,11,"state"],[249,18,240,16],[249,20,240,18],[250,10,241,8],[251,8,242,6],[252,8,243,6],[252,14,243,12,"pendingPath"],[252,25,243,23],[252,28,243,26,"pendingPopStatePathRef"],[252,50,243,48],[252,51,243,49,"current"],[252,58,243,56],[253,8,244,6],[253,14,244,12,"route"],[253,19,244,17],[253,22,244,20],[253,26,244,20,"findFocusedRoute"],[253,48,244,36],[253,50,244,37,"state"],[253,55,244,42],[253,56,244,43],[254,8,245,6],[254,14,245,12,"path"],[254,18,245,16],[254,21,245,19,"getPathForRoute"],[254,36,245,34],[254,37,245,35,"route"],[254,42,245,40],[254,44,245,42,"state"],[254,49,245,47],[254,50,245,48],[255,8,246,6,"previousStateRef"],[255,24,246,22],[255,25,246,23,"current"],[255,32,246,30],[255,35,246,33,"state"],[255,40,246,38],[256,8,247,6,"pendingPopStatePathRef"],[256,30,247,28],[256,31,247,29,"current"],[256,38,247,36],[256,41,247,39,"undefined"],[256,50,247,48],[258,8,249,6],[259,8,250,6],[260,8,251,6],[261,8,252,6],[262,8,253,6],[262,14,253,12],[262,15,253,13,"previousFocusedState"],[262,35,253,33],[262,37,253,35,"focusedState"],[262,49,253,47],[262,50,253,48],[262,53,253,51,"findMatchingState"],[262,70,253,68],[262,71,253,69,"previousState"],[262,84,253,82],[262,86,253,84,"state"],[262,91,253,89],[262,92,253,90],[263,8,254,6],[263,12,254,10,"previousFocusedState"],[263,32,254,30],[263,36,254,34,"focusedState"],[263,48,254,46],[264,8,255,6],[265,8,256,6],[266,8,257,6,"path"],[266,12,257,10],[266,17,257,15,"pendingPath"],[266,28,257,26],[266,30,257,28],[267,10,258,8],[267,16,258,14,"historyDelta"],[267,28,258,26],[267,31,258,29],[267,32,258,30,"focusedState"],[267,44,258,42],[267,45,258,43,"history"],[267,52,258,50],[267,55,258,53,"focusedState"],[267,67,258,65],[267,68,258,66,"history"],[267,75,258,73],[267,76,258,74,"length"],[267,82,258,80],[267,85,258,83,"focusedState"],[267,97,258,95],[267,98,258,96,"routes"],[267,104,258,102],[267,105,258,103,"length"],[267,111,258,109],[267,116,258,114,"previousFocusedState"],[267,136,258,134],[267,137,258,135,"history"],[267,144,258,142],[267,147,258,145,"previousFocusedState"],[267,167,258,165],[267,168,258,166,"history"],[267,175,258,173],[267,176,258,174,"length"],[267,182,258,180],[267,185,258,183,"previousFocusedState"],[267,205,258,203],[267,206,258,204,"routes"],[267,212,258,210],[267,213,258,211,"length"],[267,219,258,217],[267,220,258,218],[268,10,259,8],[268,14,259,12,"historyDelta"],[268,26,259,24],[268,29,259,27],[268,30,259,28],[268,32,259,30],[269,12,260,10],[270,12,261,10],[271,12,262,10,"history"],[271,19,262,17],[271,20,262,18,"push"],[271,24,262,22],[271,25,262,23],[272,14,263,12,"path"],[272,18,263,16],[273,14,264,12,"state"],[274,12,265,10],[274,13,265,11],[274,14,265,12],[275,10,266,8],[275,11,266,9],[275,17,266,15],[275,21,266,19,"historyDelta"],[275,33,266,31],[275,36,266,34],[275,37,266,35],[275,39,266,37],[276,12,267,10],[278,12,269,10],[278,18,269,16,"nextIndex"],[278,27,269,25],[278,30,269,28,"history"],[278,37,269,35],[278,38,269,36,"backIndex"],[278,47,269,45],[278,48,269,46],[279,14,270,12,"path"],[280,12,271,10],[280,13,271,11],[280,14,271,12],[281,12,272,10],[281,18,272,16,"currentIndex"],[281,30,272,28],[281,33,272,31,"history"],[281,40,272,38],[281,41,272,39,"index"],[281,46,272,44],[282,12,273,10],[282,16,273,14],[283,14,274,12],[283,18,274,16,"nextIndex"],[283,27,274,25],[283,32,274,30],[283,33,274,31],[283,34,274,32],[283,38,274,36,"nextIndex"],[283,47,274,45],[283,50,274,48,"currentIndex"],[283,62,274,60],[284,14,275,12],[285,14,276,12,"history"],[285,21,276,19],[285,22,276,20,"get"],[285,25,276,23],[285,26,276,24,"nextIndex"],[285,35,276,33],[285,36,276,34],[285,38,276,36],[286,16,277,14],[287,16,278,14],[287,22,278,20,"history"],[287,29,278,27],[287,30,278,28,"go"],[287,32,278,30],[287,33,278,31,"nextIndex"],[287,42,278,40],[287,45,278,43,"currentIndex"],[287,57,278,55],[287,58,278,56],[288,14,279,12],[288,15,279,13],[288,21,279,19],[289,16,280,14],[290,16,281,14],[291,16,282,14],[292,16,283,14],[292,22,283,20,"history"],[292,29,283,27],[292,30,283,28,"go"],[292,32,283,30],[292,33,283,31,"historyDelta"],[292,45,283,43],[292,46,283,44],[293,14,284,12],[295,14,286,12],[296,14,287,12,"history"],[296,21,287,19],[296,22,287,20,"replace"],[296,29,287,27],[296,30,287,28],[297,16,288,14,"path"],[297,20,288,18],[298,16,289,14,"state"],[299,14,290,12],[299,15,290,13],[299,16,290,14],[300,12,291,10],[300,13,291,11],[300,14,291,12],[300,21,291,19,"e"],[300,22,291,20],[300,24,291,22],[301,14,292,12],[302,12,292,12],[303,10,294,8],[303,11,294,9],[303,17,294,15],[304,12,295,10],[305,12,296,10,"history"],[305,19,296,17],[305,20,296,18,"replace"],[305,27,296,25],[305,28,296,26],[306,14,297,12,"path"],[306,18,297,16],[307,14,298,12,"state"],[308,12,299,10],[308,13,299,11],[308,14,299,12],[309,10,300,8],[310,8,301,6],[310,9,301,7],[310,15,301,13],[311,10,302,8],[312,10,303,8],[313,10,304,8,"history"],[313,17,304,15],[313,18,304,16,"replace"],[313,25,304,23],[313,26,304,24],[314,12,305,10,"path"],[314,16,305,14],[315,12,306,10,"state"],[316,10,307,8],[316,11,307,9],[316,12,307,10],[317,8,308,6],[318,6,309,4],[318,7,309,5],[320,6,311,4],[321,6,312,4],[322,6,313,4],[323,6,314,4],[323,13,314,11,"ref"],[323,16,314,14],[323,17,314,15,"current"],[323,24,314,22],[323,26,314,24,"addListener"],[323,37,314,35],[323,38,314,36],[323,45,314,43],[323,47,314,45,"series"],[323,53,314,51],[323,54,314,52,"onStateChange"],[323,67,314,65],[323,68,314,66],[323,69,314,67],[324,4,315,2],[324,5,315,3],[324,7,315,5],[324,8,315,6,"enabled"],[324,15,315,13],[324,17,315,15,"history"],[324,24,315,22],[324,26,315,24,"ref"],[324,29,315,27],[324,30,315,28],[324,31,315,29],[325,4,316,2],[325,11,316,9],[326,6,317,4,"getInitialState"],[327,4,318,2],[327,5,318,3],[328,2,319,0],[329,0,319,1],[329,3]],"functionMap":{"names":["<global>","findMatchingState","series","callback","useLinking","React.useEffect$argument_0","<anonymous>","validateRoutesNotExistInRootState","state.routes.some$argument_0","getInitialState","thenable.then","thenable._catch","history.listen$argument_0","getPathForRoute","onStateChange"],"mappings":"AAA;0BCW;CDsB;sBEK;mBCE;GDG;CFE;OIE;kBCQ;WCc;KDK;GDC;kBCW;GDM;8DGC;8BCK,4CD;GHC;4CKE;MCa;ODE;MEC;OFE;GLI;kBCI;0BOE;KPsD;GDC;kBCC;4BQI;KRwB;0BSiB;KT8E;GDM;CJI"}},"type":"js/module"}]}