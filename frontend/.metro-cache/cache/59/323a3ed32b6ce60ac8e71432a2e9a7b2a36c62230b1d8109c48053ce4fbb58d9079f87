{"dependencies":[{"name":"query-string","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":39,"column":33,"index":1606},"end":{"line":39,"column":56,"index":1629}}],"key":"CQ4f6+ZdkmuRCkqw6zIINc/cka0=","exportNames":["*"]}},{"name":"./getPathFromState-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":40,"column":26,"index":1658},"end":{"line":40,"column":61,"index":1693}}],"key":"t0FyaMgwHS2Lt2mTiJkOs7AsCtY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function () {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var ownKeys = function (o) {\n      ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getPathFromState = getPathFromState;\n  exports.getPathDataFromState = getPathDataFromState;\n  exports.appendBaseUrl = appendBaseUrl;\n  const queryString = __importStar(require(_dependencyMap[0], \"query-string\"));\n  const expo = __importStar(require(_dependencyMap[1], \"./getPathFromState-forks\"));\n  // END FORK\n  const getActiveRoute = state => {\n    const route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n    return route;\n  };\n  let cachedNormalizedConfigs = [undefined, {}];\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, options) {\n    return getPathDataFromState(state, options).path;\n  }\n  function getPathDataFromState(state, options) {\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n    if (options) {\n      // START FORK\n      expo.validatePathConfig(options);\n      // validatePathConfig(options);\n      // END FORK\n    }\n    // Create a normalized configs object which will be easier to use\n    if (cachedNormalizedConfigs[0] !== options?.screens) {\n      cachedNormalizedConfigs = [options?.screens, options?.screens ? createNormalizedConfigs(options.screens) : {}];\n    }\n    const configs = cachedNormalizedConfigs[1];\n    let path = '/';\n    let current = state;\n    const allParams = {};\n    while (current) {\n      let index = typeof current.index === 'number' ? current.index : 0;\n      let route = current.routes[index];\n      let pattern;\n      let focusedParams;\n      const focusedRoute = getActiveRoute(state);\n      let currentOptions = configs;\n      // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n      const nestedRouteNames = [];\n      let hasNext = true;\n      while (route.name in currentOptions && hasNext) {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          const stringify = currentOptions[route.name]?.stringify;\n          // START FORK\n          // This mutates allParams\n          const currentParams = expo.fixCurrentParams(allParams, route, stringify);\n          // const currentParams = Object.fromEntries(\n          //   Object.entries(route.params).map(([key, value]) => [\n          //     key,\n          //     stringify?.[key] ? stringify[key](value) : String(value),\n          //   ])\n          // );\n          // if (pattern) {\n          //   Object.assign(allParams, currentParams);\n          // }\n          // END FORK\n          if (focusedRoute === route) {\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = {\n              ...currentParams\n            };\n            pattern?.split('/').filter(p => expo.isDynamicPart(p))\n            // eslint-disable-next-line no-loop-func\n            .forEach(p => {\n              const name = expo.getParamName(p);\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n          }\n        }\n        // If there is no `screens` property or no nested state, we return pattern\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          // START FORK\n          // Expo Router allows you to navigate to a (group) and not specify a target screen\n          // This is different from React Navigation, which requires a target screen\n          // We need to handle this case here, by selecting either the index screen or the first screen of the group\n          // IMPORTANT: This does not affect groups that use _layout files with initialRouteNames\n          // Layout files create a new route config. This only affects groups without layouts that have their screens\n          // hoisted.\n          // Example:\n          // - /home/_layout\n          // - /home/(a|b|c)/index          --> Hoisted to /home/_layout navigator\n          // - /home/(a|b|c)/other          --> Hoisted to /home/_layout navigator\n          // - /home/(profile)/me           --> Hoisted to /home/_layout navigator\n          //\n          // route.push('/home/(a)')        --> This should navigate to /home/(a)/index\n          // route.push('/home/(profile)')  --> This should navigate to /home/(profile)/me\n          const screens = currentOptions[route.name].screens;\n          // Determine what screen the user wants to navigate to. If no screen is specified, assume there is an index screen\n          // In the examples above, this ensures that /home/(a) navigates to /home/(a)/index\n          const targetScreen =\n          // This is typed as unknown, so we need to add these extra assertions\n          route.params && 'screen' in route.params && typeof route.params.screen === 'string' ? route.params.screen : 'index';\n          // If the target screen is not in the screens object, default to the first screen\n          // In the examples above, this ensures that /home/(profile) navigates to /home/(profile)/me\n          // As there is no index screen in the group\n          const screen = screens ? screens[targetScreen] ? targetScreen : Object.keys(screens)[0] : undefined;\n          if (screen && screens && currentOptions[route.name].screens?.[screen]) {\n            route = {\n              ...screens[screen],\n              name: screen,\n              key: screen\n            };\n            currentOptions = screens;\n          } else {\n            hasNext = false;\n          }\n          // hasNext = false;\n          // END FORK\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          const nextRoute = route.state.routes[index];\n          const nestedConfig = currentOptions[route.name].screens;\n          // if there is config for next route name, we go deeper\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            // If not, there is no sense in going deeper in config\n            hasNext = false;\n          }\n        }\n      }\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n      if (currentOptions[route.name] !== undefined) {\n        // START FORK\n        path += expo.getPathWithConventionsCollapsed({\n          ...options,\n          pattern,\n          route,\n          params: allParams,\n          initialRouteName: configs[route.name]?.initialRouteName\n        });\n        // path += pattern\n        //   .split('/')\n        //   .map((p) => {\n        //     const name = getParamName(p);\n        //     // We don't know what to show for wildcard patterns\n        //     // Showing the route name seems ok, though whatever we show here will be incorrect\n        //     // Since the page doesn't actually exist\n        //     if (p === '*') {\n        //       return route.name;\n        //     }\n        //     // If the path has a pattern for a param, put the param in the path\n        //     if (p.startsWith(':')) {\n        //       const value = allParams[name];\n        //       if (value === undefined && p.endsWith('?')) {\n        //         // Optional params without value assigned in route.params should be ignored\n        //         return '';\n        //       }\n        //       // Valid characters according to\n        //       // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n        //       return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, (char) =>\n        //         encodeURIComponent(char)\n        //       );\n        //     }\n        //     return encodeURIComponent(p);\n        //   })\n        //   .join('/');\n        // } else {\n      } else if (!route.name.startsWith('+')) {\n        path += encodeURIComponent(route.name);\n      }\n      // END FORK\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (const param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n        // START FORK\n        delete focusedParams['#'];\n        // END FORK\n        const query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      current = route.state;\n    }\n    // Remove multiple as well as trailing slashes\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n    // Include the root path if specified\n    if (options?.path) {\n      path = joinPaths(options.path, path);\n    }\n    // START FORK\n    path = expo.appendBaseUrl(path);\n    if (allParams['#']) {\n      path += `#${allParams['#']}`;\n    }\n    // END FORK\n    // START FORK\n    return {\n      path,\n      params: allParams\n    };\n    // END FORK\n  }\n  // const getParamName = (pattern: string) => pattern.replace(/^:/, '').replace(/\\?$/, '');\n  const joinPaths = (...paths) => [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n  const createConfigItem = (config, parentPattern) => {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      return {\n        pattern\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    const pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    const screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n    return {\n      // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n      pattern: pattern?.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens\n    };\n  };\n  const createNormalizedConfigs = (options, pattern) => Object.fromEntries(Object.entries(options).map(([name, c]) => {\n    const result = createConfigItem(c, pattern);\n    return [name, result];\n  }));\n  function appendBaseUrl(path, baseUrl = \"\") {\n    if (process.env.NODE_ENV !== 'development') {\n      if (baseUrl) {\n        return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n      }\n    }\n    return path;\n  }\n});","lineCount":334,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__createBinding"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__createBinding"],[4,52,2,51],[4,57,2,57,"Object"],[4,63,2,63],[4,64,2,64,"create"],[4,70,2,70],[4,73,2,74],[4,83,2,83,"o"],[4,84,2,84],[4,86,2,86,"m"],[4,87,2,87],[4,89,2,89,"k"],[4,90,2,90],[4,92,2,92,"k2"],[4,94,2,94],[4,96,2,96],[5,4,3,4],[5,8,3,8,"k2"],[5,10,3,10],[5,15,3,15,"undefined"],[5,24,3,24],[5,26,3,26,"k2"],[5,28,3,28],[5,31,3,31,"k"],[5,32,3,32],[6,4,4,4],[6,8,4,8,"desc"],[6,12,4,12],[6,15,4,15,"Object"],[6,21,4,21],[6,22,4,22,"getOwnPropertyDescriptor"],[6,46,4,46],[6,47,4,47,"m"],[6,48,4,48],[6,50,4,50,"k"],[6,51,4,51],[6,52,4,52],[7,4,5,4],[7,8,5,8],[7,9,5,9,"desc"],[7,13,5,13],[7,18,5,18],[7,23,5,23],[7,27,5,27,"desc"],[7,31,5,31],[7,34,5,34],[7,35,5,35,"m"],[7,36,5,36],[7,37,5,37,"__esModule"],[7,47,5,47],[7,50,5,50,"desc"],[7,54,5,54],[7,55,5,55,"writable"],[7,63,5,63],[7,67,5,67,"desc"],[7,71,5,71],[7,72,5,72,"configurable"],[7,84,5,84],[7,85,5,85],[7,87,5,87],[8,6,6,6,"desc"],[8,10,6,10],[8,13,6,13],[9,8,6,15,"enumerable"],[9,18,6,25],[9,20,6,27],[9,24,6,31],[10,8,6,33,"get"],[10,11,6,36],[10,13,6,38],[10,22,6,38,"get"],[10,23,6,38],[10,25,6,49],[11,10,6,51],[11,17,6,58,"m"],[11,18,6,59],[11,19,6,60,"k"],[11,20,6,61],[11,21,6,62],[12,8,6,64],[13,6,6,66],[13,7,6,67],[14,4,7,4],[15,4,8,4,"Object"],[15,10,8,10],[15,11,8,11,"defineProperty"],[15,25,8,25],[15,26,8,26,"o"],[15,27,8,27],[15,29,8,29,"k2"],[15,31,8,31],[15,33,8,33,"desc"],[15,37,8,37],[15,38,8,38],[16,2,9,0],[16,3,9,1],[16,6,9,6],[16,16,9,15,"o"],[16,17,9,16],[16,19,9,18,"m"],[16,20,9,19],[16,22,9,21,"k"],[16,23,9,22],[16,25,9,24,"k2"],[16,27,9,26],[16,29,9,28],[17,4,10,4],[17,8,10,8,"k2"],[17,10,10,10],[17,15,10,15,"undefined"],[17,24,10,24],[17,26,10,26,"k2"],[17,28,10,28],[17,31,10,31,"k"],[17,32,10,32],[18,4,11,4,"o"],[18,5,11,5],[18,6,11,6,"k2"],[18,8,11,8],[18,9,11,9],[18,12,11,12,"m"],[18,13,11,13],[18,14,11,14,"k"],[18,15,11,15],[18,16,11,16],[19,2,12,0],[19,3,12,2],[19,4,12,3],[20,2,13,0],[20,6,13,4,"__setModuleDefault"],[20,24,13,22],[20,27,13,26],[20,31,13,30],[20,35,13,34],[20,39,13,38],[20,40,13,39,"__setModuleDefault"],[20,58,13,57],[20,63,13,63,"Object"],[20,69,13,69],[20,70,13,70,"create"],[20,76,13,76],[20,79,13,80],[20,89,13,89,"o"],[20,90,13,90],[20,92,13,92,"v"],[20,93,13,93],[20,95,13,95],[21,4,14,4,"Object"],[21,10,14,10],[21,11,14,11,"defineProperty"],[21,25,14,25],[21,26,14,26,"o"],[21,27,14,27],[21,29,14,29],[21,38,14,38],[21,40,14,40],[22,6,14,42,"enumerable"],[22,16,14,52],[22,18,14,54],[22,22,14,58],[23,6,14,60,"value"],[23,11,14,65],[23,13,14,67,"v"],[24,4,14,69],[24,5,14,70],[24,6,14,71],[25,2,15,0],[25,3,15,1],[25,6,15,5],[25,16,15,14,"o"],[25,17,15,15],[25,19,15,17,"v"],[25,20,15,18],[25,22,15,20],[26,4,16,4,"o"],[26,5,16,5],[26,6,16,6],[26,15,16,15],[26,16,16,16],[26,19,16,19,"v"],[26,20,16,20],[27,2,17,0],[27,3,17,1],[27,4,17,2],[28,2,18,0],[28,6,18,4,"__importStar"],[28,18,18,16],[28,21,18,20],[28,25,18,24],[28,29,18,28],[28,33,18,32],[28,34,18,33,"__importStar"],[28,46,18,45],[28,50,18,51],[28,62,18,63],[29,4,19,4],[29,8,19,8,"ownKeys"],[29,15,19,15],[29,18,19,18],[29,27,19,18,"ownKeys"],[29,28,19,27,"o"],[29,29,19,28],[29,31,19,30],[30,6,20,8,"ownKeys"],[30,13,20,15],[30,16,20,18,"Object"],[30,22,20,24],[30,23,20,25,"getOwnPropertyNames"],[30,42,20,44],[30,46,20,48],[30,56,20,58,"o"],[30,57,20,59],[30,59,20,61],[31,8,21,12],[31,12,21,16,"ar"],[31,14,21,18],[31,17,21,21],[31,19,21,23],[32,8,22,12],[32,13,22,17],[32,17,22,21,"k"],[32,18,22,22],[32,22,22,26,"o"],[32,23,22,27],[32,25,22,29],[32,29,22,33,"Object"],[32,35,22,39],[32,36,22,40,"prototype"],[32,45,22,49],[32,46,22,50,"hasOwnProperty"],[32,60,22,64],[32,61,22,65,"call"],[32,65,22,69],[32,66,22,70,"o"],[32,67,22,71],[32,69,22,73,"k"],[32,70,22,74],[32,71,22,75],[32,73,22,77,"ar"],[32,75,22,79],[32,76,22,80,"ar"],[32,78,22,82],[32,79,22,83,"length"],[32,85,22,89],[32,86,22,90],[32,89,22,93,"k"],[32,90,22,94],[33,8,23,12],[33,15,23,19,"ar"],[33,17,23,21],[34,6,24,8],[34,7,24,9],[35,6,25,8],[35,13,25,15,"ownKeys"],[35,20,25,22],[35,21,25,23,"o"],[35,22,25,24],[35,23,25,25],[36,4,26,4],[36,5,26,5],[37,4,27,4],[37,11,27,11],[37,21,27,21,"mod"],[37,24,27,24],[37,26,27,26],[38,6,28,8],[38,10,28,12,"mod"],[38,13,28,15],[38,17,28,19,"mod"],[38,20,28,22],[38,21,28,23,"__esModule"],[38,31,28,33],[38,33,28,35],[38,40,28,42,"mod"],[38,43,28,45],[39,6,29,8],[39,10,29,12,"result"],[39,16,29,18],[39,19,29,21],[39,20,29,22],[39,21,29,23],[40,6,30,8],[40,10,30,12,"mod"],[40,13,30,15],[40,17,30,19],[40,21,30,23],[40,23,30,25],[40,28,30,30],[40,32,30,34,"k"],[40,33,30,35],[40,36,30,38,"ownKeys"],[40,43,30,45],[40,44,30,46,"mod"],[40,47,30,49],[40,48,30,50],[40,50,30,52,"i"],[40,51,30,53],[40,54,30,56],[40,55,30,57],[40,57,30,59,"i"],[40,58,30,60],[40,61,30,63,"k"],[40,62,30,64],[40,63,30,65,"length"],[40,69,30,71],[40,71,30,73,"i"],[40,72,30,74],[40,74,30,76],[40,76,30,78],[40,80,30,82,"k"],[40,81,30,83],[40,82,30,84,"i"],[40,83,30,85],[40,84,30,86],[40,89,30,91],[40,98,30,100],[40,100,30,102,"__createBinding"],[40,115,30,117],[40,116,30,118,"result"],[40,122,30,124],[40,124,30,126,"mod"],[40,127,30,129],[40,129,30,131,"k"],[40,130,30,132],[40,131,30,133,"i"],[40,132,30,134],[40,133,30,135],[40,134,30,136],[41,6,31,8,"__setModuleDefault"],[41,24,31,26],[41,25,31,27,"result"],[41,31,31,33],[41,33,31,35,"mod"],[41,36,31,38],[41,37,31,39],[42,6,32,8],[42,13,32,15,"result"],[42,19,32,21],[43,4,33,4],[43,5,33,5],[44,2,34,0],[44,3,34,1],[44,4,34,3],[44,5,34,4],[45,2,35,0,"Object"],[45,8,35,6],[45,9,35,7,"defineProperty"],[45,23,35,21],[45,24,35,22,"exports"],[45,31,35,29],[45,33,35,31],[45,45,35,43],[45,47,35,45],[46,4,35,47,"value"],[46,9,35,52],[46,11,35,54],[47,2,35,59],[47,3,35,60],[47,4,35,61],[48,2,36,0,"exports"],[48,9,36,7],[48,10,36,8,"getPathFromState"],[48,26,36,24],[48,29,36,27,"getPathFromState"],[48,45,36,43],[49,2,37,0,"exports"],[49,9,37,7],[49,10,37,8,"getPathDataFromState"],[49,30,37,28],[49,33,37,31,"getPathDataFromState"],[49,53,37,51],[50,2,38,0,"exports"],[50,9,38,7],[50,10,38,8,"appendBaseUrl"],[50,23,38,21],[50,26,38,24,"appendBaseUrl"],[50,39,38,37],[51,2,39,0],[51,8,39,6,"queryString"],[51,19,39,17],[51,22,39,20,"__importStar"],[51,34,39,32],[51,35,39,33,"require"],[51,42,39,40],[51,43,39,40,"_dependencyMap"],[51,57,39,40],[51,76,39,55],[51,77,39,56],[51,78,39,57],[52,2,40,0],[52,8,40,6,"expo"],[52,12,40,10],[52,15,40,13,"__importStar"],[52,27,40,25],[52,28,40,26,"require"],[52,35,40,33],[52,36,40,33,"_dependencyMap"],[52,50,40,33],[52,81,40,60],[52,82,40,61],[52,83,40,62],[53,2,41,0],[54,2,42,0],[54,8,42,6,"getActiveRoute"],[54,22,42,20],[54,25,42,24,"state"],[54,30,42,29],[54,34,42,34],[55,4,43,4],[55,10,43,10,"route"],[55,15,43,15],[55,18,43,18],[55,25,43,25,"state"],[55,30,43,30],[55,31,43,31,"index"],[55,36,43,36],[55,41,43,41],[55,49,43,49],[55,52,44,10,"state"],[55,57,44,15],[55,58,44,16,"routes"],[55,64,44,22],[55,65,44,23,"state"],[55,70,44,28],[55,71,44,29,"index"],[55,76,44,34],[55,77,44,35],[55,80,45,10,"state"],[55,85,45,15],[55,86,45,16,"routes"],[55,92,45,22],[55,93,45,23,"state"],[55,98,45,28],[55,99,45,29,"routes"],[55,105,45,35],[55,106,45,36,"length"],[55,112,45,42],[55,115,45,45],[55,116,45,46],[55,117,45,47],[56,4,46,4],[56,8,46,8,"route"],[56,13,46,13],[56,14,46,14,"state"],[56,19,46,19],[56,21,46,21],[57,6,47,8],[57,13,47,15,"getActiveRoute"],[57,27,47,29],[57,28,47,30,"route"],[57,33,47,35],[57,34,47,36,"state"],[57,39,47,41],[57,40,47,42],[58,4,48,4],[59,4,49,4],[59,11,49,11,"route"],[59,16,49,16],[60,2,50,0],[60,3,50,1],[61,2,51,0],[61,6,51,4,"cachedNormalizedConfigs"],[61,29,51,27],[61,32,51,30],[61,33,52,4,"undefined"],[61,42,52,13],[61,44,53,4],[61,45,53,5],[61,46,53,6],[61,47,54,1],[62,2,55,0],[63,0,56,0],[64,0,57,0],[65,0,58,0],[66,0,59,0],[67,0,60,0],[68,0,61,0],[69,0,62,0],[70,0,63,0],[71,0,64,0],[72,0,65,0],[73,0,66,0],[74,0,67,0],[75,0,68,0],[76,0,69,0],[77,0,70,0],[78,0,71,0],[79,0,72,0],[80,0,73,0],[81,0,74,0],[82,0,75,0],[83,0,76,0],[84,0,77,0],[85,0,78,0],[86,0,79,0],[87,0,80,0],[88,0,81,0],[89,0,82,0],[90,0,83,0],[91,2,84,0],[91,11,84,9,"getPathFromState"],[91,27,84,25,"getPathFromState"],[91,28,84,26,"state"],[91,33,84,31],[91,35,84,33,"options"],[91,42,84,40],[91,44,84,42],[92,4,85,4],[92,11,85,11,"getPathDataFromState"],[92,31,85,31],[92,32,85,32,"state"],[92,37,85,37],[92,39,85,39,"options"],[92,46,85,46],[92,47,85,47],[92,48,85,48,"path"],[92,52,85,52],[93,2,86,0],[94,2,87,0],[94,11,87,9,"getPathDataFromState"],[94,31,87,29,"getPathDataFromState"],[94,32,87,30,"state"],[94,37,87,35],[94,39,87,37,"options"],[94,46,87,44],[94,48,87,46],[95,4,88,4],[95,8,88,8,"state"],[95,13,88,13],[95,17,88,17],[95,21,88,21],[95,23,88,23],[96,6,89,8],[96,12,89,14,"Error"],[96,17,89,19],[96,18,89,20],[96,97,89,99],[96,98,89,100],[97,4,90,4],[98,4,91,4],[98,8,91,8,"options"],[98,15,91,15],[98,17,91,17],[99,6,92,8],[100,6,93,8,"expo"],[100,10,93,12],[100,11,93,13,"validatePathConfig"],[100,29,93,31],[100,30,93,32,"options"],[100,37,93,39],[100,38,93,40],[101,6,94,8],[102,6,95,8],[103,4,96,4],[104,4,97,4],[105,4,98,4],[105,8,98,8,"cachedNormalizedConfigs"],[105,31,98,31],[105,32,98,32],[105,33,98,33],[105,34,98,34],[105,39,98,39,"options"],[105,46,98,46],[105,48,98,48,"screens"],[105,55,98,55],[105,57,98,57],[106,6,99,8,"cachedNormalizedConfigs"],[106,29,99,31],[106,32,99,34],[106,33,100,12,"options"],[106,40,100,19],[106,42,100,21,"screens"],[106,49,100,28],[106,51,101,12,"options"],[106,58,101,19],[106,60,101,21,"screens"],[106,67,101,28],[106,70,101,31,"createNormalizedConfigs"],[106,93,101,54],[106,94,101,55,"options"],[106,101,101,62],[106,102,101,63,"screens"],[106,109,101,70],[106,110,101,71],[106,113,101,74],[106,114,101,75],[106,115,101,76],[106,116,102,9],[107,4,103,4],[108,4,104,4],[108,10,104,10,"configs"],[108,17,104,17],[108,20,104,20,"cachedNormalizedConfigs"],[108,43,104,43],[108,44,104,44],[108,45,104,45],[108,46,104,46],[109,4,105,4],[109,8,105,8,"path"],[109,12,105,12],[109,15,105,15],[109,18,105,18],[110,4,106,4],[110,8,106,8,"current"],[110,15,106,15],[110,18,106,18,"state"],[110,23,106,23],[111,4,107,4],[111,10,107,10,"allParams"],[111,19,107,19],[111,22,107,22],[111,23,107,23],[111,24,107,24],[112,4,108,4],[112,11,108,11,"current"],[112,18,108,18],[112,20,108,20],[113,6,109,8],[113,10,109,12,"index"],[113,15,109,17],[113,18,109,20],[113,25,109,27,"current"],[113,32,109,34],[113,33,109,35,"index"],[113,38,109,40],[113,43,109,45],[113,51,109,53],[113,54,109,56,"current"],[113,61,109,63],[113,62,109,64,"index"],[113,67,109,69],[113,70,109,72],[113,71,109,73],[114,6,110,8],[114,10,110,12,"route"],[114,15,110,17],[114,18,110,20,"current"],[114,25,110,27],[114,26,110,28,"routes"],[114,32,110,34],[114,33,110,35,"index"],[114,38,110,40],[114,39,110,41],[115,6,111,8],[115,10,111,12,"pattern"],[115,17,111,19],[116,6,112,8],[116,10,112,12,"focusedParams"],[116,23,112,25],[117,6,113,8],[117,12,113,14,"focusedRoute"],[117,24,113,26],[117,27,113,29,"getActiveRoute"],[117,41,113,43],[117,42,113,44,"state"],[117,47,113,49],[117,48,113,50],[118,6,114,8],[118,10,114,12,"currentOptions"],[118,24,114,26],[118,27,114,29,"configs"],[118,34,114,36],[119,6,115,8],[120,6,116,8],[120,12,116,14,"nestedRouteNames"],[120,28,116,30],[120,31,116,33],[120,33,116,35],[121,6,117,8],[121,10,117,12,"hasNext"],[121,17,117,19],[121,20,117,22],[121,24,117,26],[122,6,118,8],[122,13,118,15,"route"],[122,18,118,20],[122,19,118,21,"name"],[122,23,118,25],[122,27,118,29,"currentOptions"],[122,41,118,43],[122,45,118,47,"hasNext"],[122,52,118,54],[122,54,118,56],[123,8,119,12,"pattern"],[123,15,119,19],[123,18,119,22,"currentOptions"],[123,32,119,36],[123,33,119,37,"route"],[123,38,119,42],[123,39,119,43,"name"],[123,43,119,47],[123,44,119,48],[123,45,119,49,"pattern"],[123,52,119,56],[124,8,120,12,"nestedRouteNames"],[124,24,120,28],[124,25,120,29,"push"],[124,29,120,33],[124,30,120,34,"route"],[124,35,120,39],[124,36,120,40,"name"],[124,40,120,44],[124,41,120,45],[125,8,121,12],[125,12,121,16,"route"],[125,17,121,21],[125,18,121,22,"params"],[125,24,121,28],[125,26,121,30],[126,10,122,16],[126,16,122,22,"stringify"],[126,25,122,31],[126,28,122,34,"currentOptions"],[126,42,122,48],[126,43,122,49,"route"],[126,48,122,54],[126,49,122,55,"name"],[126,53,122,59],[126,54,122,60],[126,56,122,62,"stringify"],[126,65,122,71],[127,10,123,16],[128,10,124,16],[129,10,125,16],[129,16,125,22,"currentParams"],[129,29,125,35],[129,32,125,38,"expo"],[129,36,125,42],[129,37,125,43,"fixCurrentParams"],[129,53,125,59],[129,54,125,60,"allParams"],[129,63,125,69],[129,65,125,71,"route"],[129,70,125,76],[129,72,125,78,"stringify"],[129,81,125,87],[129,82,125,88],[130,10,126,16],[131,10,127,16],[132,10,128,16],[133,10,129,16],[134,10,130,16],[135,10,131,16],[136,10,132,16],[137,10,133,16],[138,10,134,16],[139,10,135,16],[140,10,136,16],[140,14,136,20,"focusedRoute"],[140,26,136,32],[140,31,136,37,"route"],[140,36,136,42],[140,38,136,44],[141,12,137,20],[142,12,138,20],[143,12,139,20,"focusedParams"],[143,25,139,33],[143,28,139,36],[144,14,139,38],[144,17,139,41,"currentParams"],[145,12,139,55],[145,13,139,56],[146,12,140,20,"pattern"],[146,19,140,27],[146,21,141,26,"split"],[146,26,141,31],[146,27,141,32],[146,30,141,35],[146,31,141,36],[146,32,142,25,"filter"],[146,38,142,31],[146,39,142,33,"p"],[146,40,142,34],[146,44,142,39,"expo"],[146,48,142,43],[146,49,142,44,"isDynamicPart"],[146,62,142,57],[146,63,142,58,"p"],[146,64,142,59],[146,65,142,60],[147,12,143,24],[148,12,143,24],[148,13,144,25,"forEach"],[148,20,144,32],[148,21,144,34,"p"],[148,22,144,35],[148,26,144,40],[149,14,145,24],[149,20,145,30,"name"],[149,24,145,34],[149,27,145,37,"expo"],[149,31,145,41],[149,32,145,42,"getParamName"],[149,44,145,54],[149,45,145,55,"p"],[149,46,145,56],[149,47,145,57],[150,14,146,24],[151,14,147,24],[151,18,147,28,"focusedParams"],[151,31,147,41],[151,33,147,43],[152,16,148,28],[153,16,149,28],[153,23,149,35,"focusedParams"],[153,36,149,48],[153,37,149,49,"name"],[153,41,149,53],[153,42,149,54],[154,14,150,24],[155,12,151,20],[155,13,151,21],[155,14,151,22],[156,10,152,16],[157,8,153,12],[158,8,154,12],[159,8,155,12],[159,12,155,16],[159,13,155,17,"currentOptions"],[159,27,155,31],[159,28,155,32,"route"],[159,33,155,37],[159,34,155,38,"name"],[159,38,155,42],[159,39,155,43],[159,40,155,44,"screens"],[159,47,155,51],[159,51,155,55,"route"],[159,56,155,60],[159,57,155,61,"state"],[159,62,155,66],[159,67,155,71,"undefined"],[159,76,155,80],[159,78,155,82],[160,10,156,16],[161,10,157,16],[162,10,158,16],[163,10,159,16],[164,10,160,16],[165,10,161,16],[166,10,162,16],[167,10,163,16],[168,10,164,16],[169,10,165,16],[170,10,166,16],[171,10,167,16],[172,10,168,16],[173,10,169,16],[174,10,170,16],[175,10,171,16],[175,16,171,22,"screens"],[175,23,171,29],[175,26,171,32,"currentOptions"],[175,40,171,46],[175,41,171,47,"route"],[175,46,171,52],[175,47,171,53,"name"],[175,51,171,57],[175,52,171,58],[175,53,171,59,"screens"],[175,60,171,66],[176,10,172,16],[177,10,173,16],[178,10,174,16],[178,16,174,22,"targetScreen"],[178,28,174,34],[179,10,175,16],[180,10,176,16,"route"],[180,15,176,21],[180,16,176,22,"params"],[180,22,176,28],[180,26,176,32],[180,34,176,40],[180,38,176,44,"route"],[180,43,176,49],[180,44,176,50,"params"],[180,50,176,56],[180,54,176,60],[180,61,176,67,"route"],[180,66,176,72],[180,67,176,73,"params"],[180,73,176,79],[180,74,176,80,"screen"],[180,80,176,86],[180,85,176,91],[180,93,176,99],[180,96,177,22,"route"],[180,101,177,27],[180,102,177,28,"params"],[180,108,177,34],[180,109,177,35,"screen"],[180,115,177,41],[180,118,178,22],[180,125,178,29],[181,10,179,16],[182,10,180,16],[183,10,181,16],[184,10,182,16],[184,16,182,22,"screen"],[184,22,182,28],[184,25,182,31,"screens"],[184,32,182,38],[184,35,183,22,"screens"],[184,42,183,29],[184,43,183,30,"targetScreen"],[184,55,183,42],[184,56,183,43],[184,59,184,26,"targetScreen"],[184,71,184,38],[184,74,185,26,"Object"],[184,80,185,32],[184,81,185,33,"keys"],[184,85,185,37],[184,86,185,38,"screens"],[184,93,185,45],[184,94,185,46],[184,95,185,47],[184,96,185,48],[184,97,185,49],[184,100,186,22,"undefined"],[184,109,186,31],[185,10,187,16],[185,14,187,20,"screen"],[185,20,187,26],[185,24,187,30,"screens"],[185,31,187,37],[185,35,187,41,"currentOptions"],[185,49,187,55],[185,50,187,56,"route"],[185,55,187,61],[185,56,187,62,"name"],[185,60,187,66],[185,61,187,67],[185,62,187,68,"screens"],[185,69,187,75],[185,72,187,78,"screen"],[185,78,187,84],[185,79,187,85],[185,81,187,87],[186,12,188,20,"route"],[186,17,188,25],[186,20,188,28],[187,14,188,30],[187,17,188,33,"screens"],[187,24,188,40],[187,25,188,41,"screen"],[187,31,188,47],[187,32,188,48],[188,14,188,50,"name"],[188,18,188,54],[188,20,188,56,"screen"],[188,26,188,62],[189,14,188,64,"key"],[189,17,188,67],[189,19,188,69,"screen"],[190,12,188,76],[190,13,188,77],[191,12,189,20,"currentOptions"],[191,26,189,34],[191,29,189,37,"screens"],[191,36,189,44],[192,10,190,16],[192,11,190,17],[192,17,191,21],[193,12,192,20,"hasNext"],[193,19,192,27],[193,22,192,30],[193,27,192,35],[194,10,193,16],[195,10,194,16],[196,10,195,16],[197,8,196,12],[197,9,196,13],[197,15,197,17],[198,10,198,16,"index"],[198,15,198,21],[198,18,199,20],[198,25,199,27,"route"],[198,30,199,32],[198,31,199,33,"state"],[198,36,199,38],[198,37,199,39,"index"],[198,42,199,44],[198,47,199,49],[198,55,199,57],[198,58,199,60,"route"],[198,63,199,65],[198,64,199,66,"state"],[198,69,199,71],[198,70,199,72,"index"],[198,75,199,77],[198,78,199,80,"route"],[198,83,199,85],[198,84,199,86,"state"],[198,89,199,91],[198,90,199,92,"routes"],[198,96,199,98],[198,97,199,99,"length"],[198,103,199,105],[198,106,199,108],[198,107,199,109],[199,10,200,16],[199,16,200,22,"nextRoute"],[199,25,200,31],[199,28,200,34,"route"],[199,33,200,39],[199,34,200,40,"state"],[199,39,200,45],[199,40,200,46,"routes"],[199,46,200,52],[199,47,200,53,"index"],[199,52,200,58],[199,53,200,59],[200,10,201,16],[200,16,201,22,"nestedConfig"],[200,28,201,34],[200,31,201,37,"currentOptions"],[200,45,201,51],[200,46,201,52,"route"],[200,51,201,57],[200,52,201,58,"name"],[200,56,201,62],[200,57,201,63],[200,58,201,64,"screens"],[200,65,201,71],[201,10,202,16],[202,10,203,16],[202,14,203,20,"nestedConfig"],[202,26,203,32],[202,30,203,36,"nextRoute"],[202,39,203,45],[202,40,203,46,"name"],[202,44,203,50],[202,48,203,54,"nestedConfig"],[202,60,203,66],[202,62,203,68],[203,12,204,20,"route"],[203,17,204,25],[203,20,204,28,"nextRoute"],[203,29,204,37],[204,12,205,20,"currentOptions"],[204,26,205,34],[204,29,205,37,"nestedConfig"],[204,41,205,49],[205,10,206,16],[205,11,206,17],[205,17,207,21],[206,12,208,20],[207,12,209,20,"hasNext"],[207,19,209,27],[207,22,209,30],[207,27,209,35],[208,10,210,16],[209,8,211,12],[210,6,212,8],[211,6,213,8],[211,10,213,12,"pattern"],[211,17,213,19],[211,22,213,24,"undefined"],[211,31,213,33],[211,33,213,35],[212,8,214,12,"pattern"],[212,15,214,19],[212,18,214,22,"nestedRouteNames"],[212,34,214,38],[212,35,214,39,"join"],[212,39,214,43],[212,40,214,44],[212,43,214,47],[212,44,214,48],[213,6,215,8],[214,6,216,8],[214,10,216,12,"currentOptions"],[214,24,216,26],[214,25,216,27,"route"],[214,30,216,32],[214,31,216,33,"name"],[214,35,216,37],[214,36,216,38],[214,41,216,43,"undefined"],[214,50,216,52],[214,52,216,54],[215,8,217,12],[216,8,218,12,"path"],[216,12,218,16],[216,16,218,20,"expo"],[216,20,218,24],[216,21,218,25,"getPathWithConventionsCollapsed"],[216,52,218,56],[216,53,218,57],[217,10,219,16],[217,13,219,19,"options"],[217,20,219,26],[218,10,220,16,"pattern"],[218,17,220,23],[219,10,221,16,"route"],[219,15,221,21],[220,10,222,16,"params"],[220,16,222,22],[220,18,222,24,"allParams"],[220,27,222,33],[221,10,223,16,"initialRouteName"],[221,26,223,32],[221,28,223,34,"configs"],[221,35,223,41],[221,36,223,42,"route"],[221,41,223,47],[221,42,223,48,"name"],[221,46,223,52],[221,47,223,53],[221,49,223,55,"initialRouteName"],[222,8,224,12],[222,9,224,13],[222,10,224,14],[223,8,225,12],[224,8,226,12],[225,8,227,12],[226,8,228,12],[227,8,229,12],[228,8,230,12],[229,8,231,12],[230,8,232,12],[231,8,233,12],[232,8,234,12],[233,8,235,12],[234,8,236,12],[235,8,237,12],[236,8,238,12],[237,8,239,12],[238,8,240,12],[239,8,241,12],[240,8,242,12],[241,8,243,12],[242,8,244,12],[243,8,245,12],[244,8,246,12],[245,8,247,12],[246,8,248,12],[247,8,249,12],[248,8,250,12],[249,8,251,12],[250,6,252,8],[250,7,252,9],[250,13,253,13],[250,17,253,17],[250,18,253,18,"route"],[250,23,253,23],[250,24,253,24,"name"],[250,28,253,28],[250,29,253,29,"startsWith"],[250,39,253,39],[250,40,253,40],[250,43,253,43],[250,44,253,44],[250,46,253,46],[251,8,254,12,"path"],[251,12,254,16],[251,16,254,20,"encodeURIComponent"],[251,34,254,38],[251,35,254,39,"route"],[251,40,254,44],[251,41,254,45,"name"],[251,45,254,49],[251,46,254,50],[252,6,255,8],[253,6,256,8],[254,6,257,8],[254,10,257,12],[254,11,257,13,"focusedParams"],[254,24,257,26],[254,26,257,28],[255,8,258,12,"focusedParams"],[255,21,258,25],[255,24,258,28,"focusedRoute"],[255,36,258,40],[255,37,258,41,"params"],[255,43,258,47],[256,6,259,8],[257,6,260,8],[257,10,260,12,"route"],[257,15,260,17],[257,16,260,18,"state"],[257,21,260,23],[257,23,260,25],[258,8,261,12,"path"],[258,12,261,16],[258,16,261,20],[258,19,261,23],[259,6,262,8],[259,7,262,9],[259,13,263,13],[259,17,263,17,"focusedParams"],[259,30,263,30],[259,32,263,32],[260,8,264,12],[260,13,264,17],[260,19,264,23,"param"],[260,24,264,28],[260,28,264,32,"focusedParams"],[260,41,264,45],[260,43,264,47],[261,10,265,16],[261,14,265,20,"focusedParams"],[261,27,265,33],[261,28,265,34,"param"],[261,33,265,39],[261,34,265,40],[261,39,265,45],[261,50,265,56],[261,52,265,58],[262,12,266,20],[263,12,267,20],[263,19,267,27,"focusedParams"],[263,32,267,40],[263,33,267,41,"param"],[263,38,267,46],[263,39,267,47],[264,10,268,16],[265,8,269,12],[266,8,270,12],[267,8,271,12],[267,15,271,19,"focusedParams"],[267,28,271,32],[267,29,271,33],[267,32,271,36],[267,33,271,37],[268,8,272,12],[269,8,273,12],[269,14,273,18,"query"],[269,19,273,23],[269,22,273,26,"queryString"],[269,33,273,37],[269,34,273,38,"stringify"],[269,43,273,47],[269,44,273,48,"focusedParams"],[269,57,273,61],[269,59,273,63],[270,10,273,65,"sort"],[270,14,273,69],[270,16,273,71],[271,8,273,77],[271,9,273,78],[271,10,273,79],[272,8,274,12],[272,12,274,16,"query"],[272,17,274,21],[272,19,274,23],[273,10,275,16,"path"],[273,14,275,20],[273,18,275,24],[273,22,275,28,"query"],[273,27,275,33],[273,29,275,35],[274,8,276,12],[275,6,277,8],[276,6,278,8,"current"],[276,13,278,15],[276,16,278,18,"route"],[276,21,278,23],[276,22,278,24,"state"],[276,27,278,29],[277,4,279,4],[278,4,280,4],[279,4,281,4,"path"],[279,8,281,8],[279,11,281,11,"path"],[279,15,281,15],[279,16,281,16,"replace"],[279,23,281,23],[279,24,281,24],[279,30,281,30],[279,32,281,32],[279,35,281,35],[279,36,281,36],[280,4,282,4,"path"],[280,8,282,8],[280,11,282,11,"path"],[280,15,282,15],[280,16,282,16,"length"],[280,22,282,22],[280,25,282,25],[280,26,282,26],[280,29,282,29,"path"],[280,33,282,33],[280,34,282,34,"replace"],[280,41,282,41],[280,42,282,42],[280,47,282,47],[280,49,282,49],[280,51,282,51],[280,52,282,52],[280,55,282,55,"path"],[280,59,282,59],[281,4,283,4],[282,4,284,4],[282,8,284,8,"options"],[282,15,284,15],[282,17,284,17,"path"],[282,21,284,21],[282,23,284,23],[283,6,285,8,"path"],[283,10,285,12],[283,13,285,15,"joinPaths"],[283,22,285,24],[283,23,285,25,"options"],[283,30,285,32],[283,31,285,33,"path"],[283,35,285,37],[283,37,285,39,"path"],[283,41,285,43],[283,42,285,44],[284,4,286,4],[285,4,287,4],[286,4,288,4,"path"],[286,8,288,8],[286,11,288,11,"expo"],[286,15,288,15],[286,16,288,16,"appendBaseUrl"],[286,29,288,29],[286,30,288,30,"path"],[286,34,288,34],[286,35,288,35],[287,4,289,4],[287,8,289,8,"allParams"],[287,17,289,17],[287,18,289,18],[287,21,289,21],[287,22,289,22],[287,24,289,24],[288,6,290,8,"path"],[288,10,290,12],[288,14,290,16],[288,18,290,20,"allParams"],[288,27,290,29],[288,28,290,30],[288,31,290,33],[288,32,290,34],[288,34,290,36],[289,4,291,4],[290,4,292,4],[291,4,293,4],[292,4,294,4],[292,11,294,11],[293,6,294,13,"path"],[293,10,294,17],[294,6,294,19,"params"],[294,12,294,25],[294,14,294,27,"allParams"],[295,4,294,37],[295,5,294,38],[296,4,295,4],[297,2,296,0],[298,2,297,0],[299,2,298,0],[299,8,298,6,"joinPaths"],[299,17,298,15],[299,20,298,18,"joinPaths"],[299,21,298,19],[299,24,298,22,"paths"],[299,29,298,27],[299,34,298,32],[299,36,298,34],[299,37,299,5,"concat"],[299,43,299,11],[299,44,299,12],[299,47,299,15,"paths"],[299,52,299,20],[299,53,299,21,"map"],[299,56,299,24],[299,57,299,26,"p"],[299,58,299,27],[299,62,299,32,"p"],[299,63,299,33],[299,64,299,34,"split"],[299,69,299,39],[299,70,299,40],[299,73,299,43],[299,74,299,44],[299,75,299,45],[299,76,299,46],[299,77,300,5,"filter"],[299,83,300,11],[299,84,300,12,"Boolean"],[299,91,300,19],[299,92,300,20],[299,93,301,5,"join"],[299,97,301,9],[299,98,301,10],[299,101,301,13],[299,102,301,14],[300,2,302,0],[300,8,302,6,"createConfigItem"],[300,24,302,22],[300,27,302,25,"createConfigItem"],[300,28,302,26,"config"],[300,34,302,32],[300,36,302,34,"parentPattern"],[300,49,302,47],[300,54,302,52],[301,4,303,4],[301,8,303,8],[301,15,303,15,"config"],[301,21,303,21],[301,26,303,26],[301,34,303,34],[301,36,303,36],[302,6,304,8],[303,6,305,8],[303,12,305,14,"pattern"],[303,19,305,21],[303,22,305,24,"parentPattern"],[303,35,305,37],[303,38,305,40,"joinPaths"],[303,47,305,49],[303,48,305,50,"parentPattern"],[303,61,305,63],[303,63,305,65,"config"],[303,69,305,71],[303,70,305,72],[303,73,305,75,"config"],[303,79,305,81],[304,6,306,8],[304,13,306,15],[305,8,306,17,"pattern"],[306,6,306,25],[306,7,306,26],[307,4,307,4],[308,4,308,4],[308,8,308,8,"config"],[308,14,308,14],[308,15,308,15,"exact"],[308,20,308,20],[308,24,308,24,"config"],[308,30,308,30],[308,31,308,31,"path"],[308,35,308,35],[308,40,308,40,"undefined"],[308,49,308,49],[308,51,308,51],[309,6,309,8],[309,12,309,14],[309,16,309,18,"Error"],[309,21,309,23],[309,22,309,24],[309,172,309,174],[309,173,309,175],[310,4,310,4],[311,4,311,4],[312,4,312,4],[313,4,313,4],[313,10,313,10,"pattern"],[313,17,313,17],[313,20,313,20,"config"],[313,26,313,26],[313,27,313,27,"exact"],[313,32,313,32],[313,37,313,37],[313,41,313,41],[313,44,313,44,"joinPaths"],[313,53,313,53],[313,54,313,54,"parentPattern"],[313,67,313,67],[313,71,313,71],[313,73,313,73],[313,75,313,75,"config"],[313,81,313,81],[313,82,313,82,"path"],[313,86,313,86],[313,90,313,90],[313,92,313,92],[313,93,313,93],[313,96,313,96,"config"],[313,102,313,102],[313,103,313,103,"path"],[313,107,313,107],[313,111,313,111],[313,113,313,113],[314,4,314,4],[314,10,314,10,"screens"],[314,17,314,17],[314,20,314,20,"config"],[314,26,314,26],[314,27,314,27,"screens"],[314,34,314,34],[314,37,314,37,"createNormalizedConfigs"],[314,60,314,60],[314,61,314,61,"config"],[314,67,314,67],[314,68,314,68,"screens"],[314,75,314,75],[314,77,314,77,"pattern"],[314,84,314,84],[314,85,314,85],[314,88,314,88,"undefined"],[314,97,314,97],[315,4,315,4],[315,11,315,11],[316,6,316,8],[317,6,317,8,"pattern"],[317,13,317,15],[317,15,317,17,"pattern"],[317,22,317,24],[317,24,317,26,"split"],[317,29,317,31],[317,30,317,32],[317,33,317,35],[317,34,317,36],[317,35,317,37,"filter"],[317,41,317,43],[317,42,317,44,"Boolean"],[317,49,317,51],[317,50,317,52],[317,51,317,53,"join"],[317,55,317,57],[317,56,317,58],[317,59,317,61],[317,60,317,62],[318,6,318,8,"stringify"],[318,15,318,17],[318,17,318,19,"config"],[318,23,318,25],[318,24,318,26,"stringify"],[318,33,318,35],[319,6,319,8,"screens"],[320,4,320,4],[320,5,320,5],[321,2,321,0],[321,3,321,1],[322,2,322,0],[322,8,322,6,"createNormalizedConfigs"],[322,31,322,29],[322,34,322,32,"createNormalizedConfigs"],[322,35,322,33,"options"],[322,42,322,40],[322,44,322,42,"pattern"],[322,51,322,49],[322,56,322,54,"Object"],[322,62,322,60],[322,63,322,61,"fromEntries"],[322,74,322,72],[322,75,322,73,"Object"],[322,81,322,79],[322,82,322,80,"entries"],[322,89,322,87],[322,90,322,88,"options"],[322,97,322,95],[322,98,322,96],[322,99,322,97,"map"],[322,102,322,100],[322,103,322,101],[322,104,322,102],[322,105,322,103,"name"],[322,109,322,107],[322,111,322,109,"c"],[322,112,322,110],[322,113,322,111],[322,118,322,116],[323,4,323,4],[323,10,323,10,"result"],[323,16,323,16],[323,19,323,19,"createConfigItem"],[323,35,323,35],[323,36,323,36,"c"],[323,37,323,37],[323,39,323,39,"pattern"],[323,46,323,46],[323,47,323,47],[324,4,324,4],[324,11,324,11],[324,12,324,12,"name"],[324,16,324,16],[324,18,324,18,"result"],[324,24,324,24],[324,25,324,25],[325,2,325,0],[325,3,325,1],[325,4,325,2],[325,5,325,3],[326,2,326,0],[326,11,326,9,"appendBaseUrl"],[326,24,326,22,"appendBaseUrl"],[326,25,326,23,"path"],[326,29,326,27],[326,31,326,29,"baseUrl"],[326,38,326,36],[326,43,326,64],[326,45,326,66],[327,4,327,4],[327,8,327,8,"process"],[327,15,327,15],[327,16,327,16,"env"],[327,19,327,19],[327,20,327,20,"NODE_ENV"],[327,28,327,28],[327,33,327,33],[327,46,327,46],[327,48,327,48],[328,6,328,8],[328,10,328,12,"baseUrl"],[328,17,328,19],[328,19,328,21],[329,8,329,12],[329,15,329,19],[329,19,329,23,"baseUrl"],[329,26,329,30],[329,27,329,31,"replace"],[329,34,329,38],[329,35,329,39],[329,41,329,45],[329,43,329,47],[329,45,329,49],[329,46,329,50],[329,47,329,51,"replace"],[329,54,329,58],[329,55,329,59],[329,60,329,64],[329,62,329,66],[329,64,329,68],[329,65,329,69],[329,68,329,72,"path"],[329,72,329,76],[329,74,329,78],[330,6,330,8],[331,4,331,4],[332,4,332,4],[332,11,332,11,"path"],[332,15,332,15],[333,2,333,0],[334,0,333,1],[334,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","getActiveRoute","getPathFromState","getPathDataFromState","pattern.split.filter$argument_0","pattern.split.filter.forEach$argument_0","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs","Object.entries.map$argument_0","appendBaseUrl"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;uBIQ;CJQ;AKkC;CLE;AMC;gCCuD,4BD;iCEE;qBFO;CNiJ;kBSE;yBCC,mBD;cTE;yBWC;CXmB;gCYC,qEC;CDG,EZ;AcC;CdO"}},"type":"js/module"}]}