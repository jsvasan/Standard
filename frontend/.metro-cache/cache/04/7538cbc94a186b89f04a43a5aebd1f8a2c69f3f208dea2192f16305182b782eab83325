{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":42,"index":57}}],"key":"Opxn8Ttfh7QNGeF0y+BQ6rRbDGo=","exportNames":["*"]}},{"name":"query-string","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":58},"end":{"line":4,"column":44,"index":102}}],"key":"Tk6zkk+/XfK89igjx1MNWAcG1Q8=","exportNames":["*"]}},{"name":"./arrayStartsWith.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":103},"end":{"line":5,"column":55,"index":158}}],"key":"mJQeK2ZRLq8v0j9J6l50oLtYU2c=","exportNames":["*"]}},{"name":"./findFocusedRoute.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":159},"end":{"line":6,"column":57,"index":216}}],"key":"/OEwo8APHIJtscmrfuh7WccCayM=","exportNames":["*"]}},{"name":"./getPatternParts.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":217},"end":{"line":7,"column":55,"index":272}}],"key":"ZBgxhB8YmJlp1KxhfM5ocx9xUB0=","exportNames":["*"]}},{"name":"./isArrayEqual.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":273},"end":{"line":8,"column":49,"index":322}}],"key":"0Xv+Jf6vWjo3/vKyf7CxgrGRylo=","exportNames":["*"]}},{"name":"./validatePathConfig.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":323},"end":{"line":9,"column":61,"index":384}}],"key":"zoUaUuxQP5qPvRrno+lraXgTGfI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = getStateFromPath;\n  var _escapeStringRegexp = _interopRequireDefault(require(_dependencyMap[1], \"escape-string-regexp\"));\n  var queryString = _interopRequireWildcard(require(_dependencyMap[2], \"query-string\"));\n  var _arrayStartsWith = require(_dependencyMap[3], \"./arrayStartsWith.js\");\n  var _findFocusedRoute = require(_dependencyMap[4], \"./findFocusedRoute.js\");\n  var _getPatternParts = require(_dependencyMap[5], \"./getPatternParts.js\");\n  var _isArrayEqual = require(_dependencyMap[6], \"./isArrayEqual.js\");\n  var _validatePathConfig = require(_dependencyMap[7], \"./validatePathConfig.js\");\n  function _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) \"default\" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    const {\n      initialRoutes,\n      configs\n    } = getConfigResources(options);\n    const screens = options?.screens;\n    let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n    if (prefix) {\n      // Make sure there is a trailing slash\n      const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      const routes = remaining.split('/').filter(Boolean).map(segment => {\n        const name = decodeURIComponent(segment);\n        return {\n          name\n        };\n      });\n      if (routes.length) {\n        return createNestedStateObject(path, routes, initialRoutes);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      const match = configs.find(config => config.segments.join('/') === '');\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(name => ({\n          name\n        })), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    let result;\n    let current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const {\n      routes,\n      remainingPath\n    } = matchAgainstConfigs(remaining, configs);\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  const cachedConfigResources = new WeakMap();\n  function getConfigResources(options) {\n    if (!options) return prepareConfigResources();\n    const cached = cachedConfigResources.get(options);\n    if (cached) return cached;\n    const resources = prepareConfigResources(options);\n    cachedConfigResources.set(options, resources);\n    return resources;\n  }\n  function prepareConfigResources(options) {\n    if (options) {\n      (0, _validatePathConfig.validatePathConfig)(options);\n    }\n    const initialRoutes = getInitialRoutes(options);\n    const configs = getSortedNormalizedConfigs(initialRoutes, options?.screens);\n    checkForDuplicatedConfigs(configs);\n    const configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes,\n      configs,\n      configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    const initialRoutes = [];\n    if (options?.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getSortedNormalizedConfigs(initialRoutes, screens = {}) {\n    // Create a normalized configs array which will be easier to use\n    return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, initialRoutes, [], [], []))).sort((a, b) => {\n      // Sort config from most specific to least specific:\n      // - more segments\n      // - static segments\n      // - params with regex\n      // - regular params\n      // - wildcard\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if ((0, _isArrayEqual.isArrayEqual)(a.segments, b.segments)) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if ((0, _arrayStartsWith.arrayStartsWith)(a.segments, b.segments)) {\n        return -1;\n      }\n      if ((0, _arrayStartsWith.arrayStartsWith)(b.segments, a.segments)) {\n        return 1;\n      }\n      for (let i = 0; i < Math.max(a.segments.length, b.segments.length); i++) {\n        // if b is longer, b gets higher priority\n        if (a.segments[i] == null) {\n          return 1;\n        }\n\n        // if a is longer, a gets higher priority\n        if (b.segments[i] == null) {\n          return -1;\n        }\n        const aWildCard = a.segments[i] === '*';\n        const bWildCard = b.segments[i] === '*';\n        const aParam = a.segments[i].startsWith(':');\n        const bParam = b.segments[i].startsWith(':');\n        const aRegex = aParam && a.segments[i].includes('(');\n        const bRegex = bParam && b.segments[i].includes('(');\n\n        // if both are wildcard or regex, we compare next component\n        if (aWildCard && bWildCard || aRegex && bRegex) {\n          continue;\n        }\n\n        // if only a is wildcard, b gets higher priority\n        if (aWildCard && !bWildCard) {\n          return 1;\n        }\n\n        // if only b is wildcard, a gets higher priority\n        if (bWildCard && !aWildCard) {\n          return -1;\n        }\n\n        // If only a has a param, b gets higher priority\n        if (aParam && !bParam) {\n          return 1;\n        }\n\n        // If only b has a param, a gets higher priority\n        if (bParam && !aParam) {\n          return -1;\n        }\n\n        // if only a has regex, a gets higher priority\n        if (aRegex && !bRegex) {\n          return -1;\n        }\n\n        // if only b has regex, b gets higher priority\n        if (bRegex && !aRegex) {\n          return 1;\n        }\n      }\n      return a.segments.length - b.segments.length;\n    });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce((acc, config) => {\n      const pattern = config.segments.join('/');\n      if (acc[pattern]) {\n        const a = acc[pattern].routeNames;\n        const b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, {\n        [pattern]: config\n      });\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(c => ({\n      ...c,\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    }));\n  }\n  const matchAgainstConfigs = (remaining, configs) => {\n    let routes;\n    let remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    for (const config of configs) {\n      if (!config.regex) {\n        continue;\n      }\n      const match = remainingPath.match(config.regex);\n\n      // If our regex matches, we need to extract params from the path\n      if (match) {\n        routes = config.routeNames.map(routeName => {\n          const routeConfig = configs.find(c => {\n            // Check matching name AND pattern in case same screen is used at different levels in config\n            return c.screen === routeName && (0, _arrayStartsWith.arrayStartsWith)(config.segments, c.segments);\n          });\n          const params = routeConfig && match.groups ? Object.fromEntries(Object.entries(match.groups).map(([key, value]) => {\n            const index = Number(key.replace('param_', ''));\n            const param = routeConfig.params.find(it => it.index === index);\n            if (param?.screen === routeName && param?.name) {\n              return [param.name, value];\n            }\n            return null;\n          }).filter(it => it != null).map(([key, value]) => {\n            if (value == null) {\n              return [key, undefined];\n            }\n            const decoded = decodeURIComponent(value);\n            const parsed = routeConfig.parse?.[key] ? routeConfig.parse[key](decoded) : decoded;\n            return [key, parsed];\n          })) : undefined;\n          if (params && Object.keys(params).length) {\n            return {\n              name: routeName,\n              params\n            };\n          }\n          return {\n            name: routeName\n          };\n        });\n        remainingPath = remainingPath.replace(match[0], '');\n        break;\n      }\n    }\n    return {\n      routes,\n      remainingPath\n    };\n  };\n  const createNormalizedConfigs = (screen, routeConfig, initials, paths, parentScreens, routeNames) => {\n    const configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    const config = routeConfig[screen];\n    if (typeof config === 'string') {\n      paths.push({\n        screen,\n        path: config\n      });\n      configs.push(createConfigItem(screen, [...routeNames], [...paths]));\n    } else if (typeof config === 'object') {\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path == null) {\n          throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. \\`path: ''\\`.`);\n        }\n\n        // We should add alias configs after the main config\n        // So unless they are more specific, main config will be matched first\n        const aliasConfigs = [];\n        if (config.alias) {\n          for (const alias of config.alias) {\n            if (typeof alias === 'string') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], [...paths, {\n                screen,\n                path: alias\n              }], config.parse));\n            } else if (typeof alias === 'object') {\n              aliasConfigs.push(createConfigItem(screen, [...routeNames], alias.exact ? [{\n                screen,\n                path: alias.path\n              }] : [...paths, {\n                screen,\n                path: alias.path\n              }], alias.parse));\n            }\n          }\n        }\n        if (config.exact) {\n          // If it's an exact path, we don't need to keep track of the parent screens\n          // So we can clear it\n          paths.length = 0;\n        }\n        paths.push({\n          screen,\n          path: config.path\n        });\n        configs.push(createConfigItem(screen, [...routeNames], [...paths], config.parse));\n        configs.push(...aliasConfigs);\n      }\n      if (typeof config !== 'string' && typeof config.path !== 'string' && config.alias?.length) {\n        throw new Error(`Screen '${screen}' doesn't specify a 'path'. A 'path' needs to be specified in order to use 'alias'.`);\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(nestedConfig => {\n          const result = createNormalizedConfigs(nestedConfig, config.screens, initials, [...paths], [...parentScreens], routeNames);\n          configs.push(...result);\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  const createConfigItem = (screen, routeNames, paths, parse) => {\n    const parts = [];\n\n    // Parse the path string into parts for easier matching\n    for (const {\n      screen,\n      path\n    } of paths) {\n      parts.push(...(0, _getPatternParts.getPatternParts)(path).map(part => ({\n        ...part,\n        screen\n      })));\n    }\n    const regex = parts.length ? new RegExp(`^(${parts.map((it, i) => {\n      if (it.param) {\n        const reg = it.regex || '[^/]+';\n        return `(((?<param_${i}>${reg})\\\\/)${it.optional ? '?' : ''})`;\n      }\n      return `${it.segment === '*' ? '.*' : (0, _escapeStringRegexp.default)(it.segment)}\\\\/`;\n    }).join('')})$`) : undefined;\n    const segments = parts.map(it => it.segment);\n    const params = parts.map((it, i) => it.param ? {\n      index: i,\n      screen: it.screen,\n      name: it.param\n    } : null).filter(it => it != null);\n    return {\n      screen,\n      regex,\n      segments,\n      params,\n      routeNames,\n      parse\n    };\n  };\n  const findParseConfigForRoute = (routeName, flatConfig) => {\n    for (const config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  const findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n    for (const config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        let sameParents = true;\n        for (let i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  const createStateObject = (initialRoute, route, isEmpty) => {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            ...route,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n  const createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n    let route = routes.shift();\n    const parentScreens = [];\n    let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    const state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      let nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRoute.findFocusedRoute)(state);\n    route.path = path.replace(/\\/$/, '');\n    const params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = {\n        ...route.params,\n        ...params\n      };\n    }\n    return state;\n  };\n  const parseQueryParams = (path, parseConfig) => {\n    const query = path.split('?')[1];\n    const params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(name => {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":521,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_interopRequireDefault"],[4,28,1,13],[4,31,1,13,"require"],[4,38,1,13],[4,39,1,13,"_dependencyMap"],[4,53,1,13],[5,2,1,13,"Object"],[5,8,1,13],[5,9,1,13,"defineProperty"],[5,23,1,13],[5,24,1,13,"exports"],[5,31,1,13],[6,4,1,13,"value"],[6,9,1,13],[7,2,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"getStateFromPath"],[8,26,1,13],[8,29,1,13,"getStateFromPath"],[8,45,1,13],[9,2,3,0],[9,6,3,0,"_escapeStringRegexp"],[9,25,3,0],[9,28,3,0,"_interopRequireDefault"],[9,50,3,0],[9,51,3,0,"require"],[9,58,3,0],[9,59,3,0,"_dependencyMap"],[9,73,3,0],[10,2,4,0],[10,6,4,0,"queryString"],[10,17,4,0],[10,20,4,0,"_interopRequireWildcard"],[10,43,4,0],[10,44,4,0,"require"],[10,51,4,0],[10,52,4,0,"_dependencyMap"],[10,66,4,0],[11,2,5,0],[11,6,5,0,"_arrayStartsWith"],[11,22,5,0],[11,25,5,0,"require"],[11,32,5,0],[11,33,5,0,"_dependencyMap"],[11,47,5,0],[12,2,6,0],[12,6,6,0,"_findFocusedRoute"],[12,23,6,0],[12,26,6,0,"require"],[12,33,6,0],[12,34,6,0,"_dependencyMap"],[12,48,6,0],[13,2,7,0],[13,6,7,0,"_getPatternParts"],[13,22,7,0],[13,25,7,0,"require"],[13,32,7,0],[13,33,7,0,"_dependencyMap"],[13,47,7,0],[14,2,8,0],[14,6,8,0,"_isArrayEqual"],[14,19,8,0],[14,22,8,0,"require"],[14,29,8,0],[14,30,8,0,"_dependencyMap"],[14,44,8,0],[15,2,9,0],[15,6,9,0,"_validatePathConfig"],[15,25,9,0],[15,28,9,0,"require"],[15,35,9,0],[15,36,9,0,"_dependencyMap"],[15,50,9,0],[16,2,9,61],[16,11,9,61,"_interopRequireWildcard"],[16,35,9,61,"e"],[16,36,9,61],[16,38,9,61,"t"],[16,39,9,61],[16,68,9,61,"WeakMap"],[16,75,9,61],[16,81,9,61,"r"],[16,82,9,61],[16,89,9,61,"WeakMap"],[16,96,9,61],[16,100,9,61,"n"],[16,101,9,61],[16,108,9,61,"WeakMap"],[16,115,9,61],[16,127,9,61,"_interopRequireWildcard"],[16,150,9,61],[16,162,9,61,"_interopRequireWildcard"],[16,163,9,61,"e"],[16,164,9,61],[16,166,9,61,"t"],[16,167,9,61],[16,176,9,61,"t"],[16,177,9,61],[16,181,9,61,"e"],[16,182,9,61],[16,186,9,61,"e"],[16,187,9,61],[16,188,9,61,"__esModule"],[16,198,9,61],[16,207,9,61,"e"],[16,208,9,61],[16,214,9,61,"o"],[16,215,9,61],[16,217,9,61,"i"],[16,218,9,61],[16,220,9,61,"f"],[16,221,9,61],[16,226,9,61,"__proto__"],[16,235,9,61],[16,243,9,61,"default"],[16,250,9,61],[16,252,9,61,"e"],[16,253,9,61],[16,270,9,61,"e"],[16,271,9,61],[16,294,9,61,"e"],[16,295,9,61],[16,320,9,61,"e"],[16,321,9,61],[16,330,9,61,"f"],[16,331,9,61],[16,337,9,61,"o"],[16,338,9,61],[16,341,9,61,"t"],[16,342,9,61],[16,345,9,61,"n"],[16,346,9,61],[16,349,9,61,"r"],[16,350,9,61],[16,358,9,61,"o"],[16,359,9,61],[16,360,9,61,"has"],[16,363,9,61],[16,364,9,61,"e"],[16,365,9,61],[16,375,9,61,"o"],[16,376,9,61],[16,377,9,61,"get"],[16,380,9,61],[16,381,9,61,"e"],[16,382,9,61],[16,385,9,61,"o"],[16,386,9,61],[16,387,9,61,"set"],[16,390,9,61],[16,391,9,61,"e"],[16,392,9,61],[16,394,9,61,"f"],[16,395,9,61],[16,411,9,61,"t"],[16,412,9,61],[16,416,9,61,"e"],[16,417,9,61],[16,433,9,61,"t"],[16,434,9,61],[16,441,9,61,"hasOwnProperty"],[16,455,9,61],[16,456,9,61,"call"],[16,460,9,61],[16,461,9,61,"e"],[16,462,9,61],[16,464,9,61,"t"],[16,465,9,61],[16,472,9,61,"i"],[16,473,9,61],[16,477,9,61,"o"],[16,478,9,61],[16,481,9,61,"Object"],[16,487,9,61],[16,488,9,61,"defineProperty"],[16,502,9,61],[16,507,9,61,"Object"],[16,513,9,61],[16,514,9,61,"getOwnPropertyDescriptor"],[16,538,9,61],[16,539,9,61,"e"],[16,540,9,61],[16,542,9,61,"t"],[16,543,9,61],[16,550,9,61,"i"],[16,551,9,61],[16,552,9,61,"get"],[16,555,9,61],[16,559,9,61,"i"],[16,560,9,61],[16,561,9,61,"set"],[16,564,9,61],[16,568,9,61,"o"],[16,569,9,61],[16,570,9,61,"f"],[16,571,9,61],[16,573,9,61,"t"],[16,574,9,61],[16,576,9,61,"i"],[16,577,9,61],[16,581,9,61,"f"],[16,582,9,61],[16,583,9,61,"t"],[16,584,9,61],[16,588,9,61,"e"],[16,589,9,61],[16,590,9,61,"t"],[16,591,9,61],[16,602,9,61,"f"],[16,603,9,61],[16,608,9,61,"e"],[16,609,9,61],[16,611,9,61,"t"],[16,612,9,61],[17,2,10,0],[18,0,11,0],[19,0,12,0],[20,0,13,0],[21,0,14,0],[22,0,15,0],[23,0,16,0],[24,0,17,0],[25,0,18,0],[26,0,19,0],[27,0,20,0],[28,0,21,0],[29,0,22,0],[30,0,23,0],[31,0,24,0],[32,0,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,0,30,0],[38,2,31,7],[38,11,31,16,"getStateFromPath"],[38,27,31,32,"getStateFromPath"],[38,28,31,33,"path"],[38,32,31,37],[38,34,31,39,"options"],[38,41,31,46],[38,43,31,48],[39,4,32,2],[39,10,32,8],[40,6,33,4,"initialRoutes"],[40,19,33,17],[41,6,34,4,"configs"],[42,4,35,2],[42,5,35,3],[42,8,35,6,"getConfigResources"],[42,26,35,24],[42,27,35,25,"options"],[42,34,35,32],[42,35,35,33],[43,4,36,2],[43,10,36,8,"screens"],[43,17,36,15],[43,20,36,18,"options"],[43,27,36,25],[43,29,36,27,"screens"],[43,36,36,34],[44,4,37,2],[44,8,37,6,"remaining"],[44,17,37,15],[44,20,37,18,"path"],[44,24,37,22],[44,25,37,23,"replace"],[44,32,37,30],[44,33,37,31],[44,39,37,37],[44,41,37,39],[44,44,37,42],[44,45,37,43],[44,46,37,44],[45,4,37,44],[45,5,38,3,"replace"],[45,12,38,10],[45,13,38,11],[45,18,38,16],[45,20,38,18],[45,22,38,20],[45,23,38,21],[45,24,38,22],[46,4,38,22],[46,5,39,3,"replace"],[46,12,39,10],[46,13,39,11],[46,20,39,18],[46,22,39,20],[46,24,39,22],[46,25,39,23],[46,26,39,24],[46,27,39,25],[48,4,41,2],[49,4,42,2,"remaining"],[49,13,42,11],[49,16,42,14,"remaining"],[49,25,42,23],[49,26,42,24,"endsWith"],[49,34,42,32],[49,35,42,33],[49,38,42,36],[49,39,42,37],[49,42,42,40,"remaining"],[49,51,42,49],[49,54,42,52],[49,57,42,55,"remaining"],[49,66,42,64],[49,69,42,67],[50,4,43,2],[50,10,43,8,"prefix"],[50,16,43,14],[50,19,43,17,"options"],[50,26,43,24],[50,28,43,26,"path"],[50,32,43,30],[50,34,43,32,"replace"],[50,41,43,39],[50,42,43,40],[50,47,43,45],[50,49,43,47],[50,51,43,49],[50,52,43,50],[50,53,43,51],[50,54,43,52],[52,4,45,2],[52,8,45,6,"prefix"],[52,14,45,12],[52,16,45,14],[53,6,46,4],[54,6,47,4],[54,12,47,10,"normalizedPrefix"],[54,28,47,26],[54,31,47,29,"prefix"],[54,37,47,35],[54,38,47,36,"endsWith"],[54,46,47,44],[54,47,47,45],[54,50,47,48],[54,51,47,49],[54,54,47,52,"prefix"],[54,60,47,58],[54,63,47,61],[54,66,47,64,"prefix"],[54,72,47,70],[54,75,47,73],[56,6,49,4],[57,6,50,4],[57,10,50,8],[57,11,50,9,"remaining"],[57,20,50,18],[57,21,50,19,"startsWith"],[57,31,50,29],[57,32,50,30,"normalizedPrefix"],[57,48,50,46],[57,49,50,47],[57,51,50,49],[58,8,51,6],[58,15,51,13,"undefined"],[58,24,51,22],[59,6,52,4],[61,6,54,4],[62,6,55,4,"remaining"],[62,15,55,13],[62,18,55,16,"remaining"],[62,27,55,25],[62,28,55,26,"replace"],[62,35,55,33],[62,36,55,34,"normalizedPrefix"],[62,52,55,50],[62,54,55,52],[62,56,55,54],[62,57,55,55],[63,4,56,2],[64,4,57,2],[64,8,57,6,"screens"],[64,15,57,13],[64,20,57,18,"undefined"],[64,29,57,27],[64,31,57,29],[65,6,58,4],[66,6,59,4],[66,12,59,10,"routes"],[66,18,59,16],[66,21,59,19,"remaining"],[66,30,59,28],[66,31,59,29,"split"],[66,36,59,34],[66,37,59,35],[66,40,59,38],[66,41,59,39],[66,42,59,40,"filter"],[66,48,59,46],[66,49,59,47,"Boolean"],[66,56,59,54],[66,57,59,55],[66,58,59,56,"map"],[66,61,59,59],[66,62,59,60,"segment"],[66,69,59,67],[66,73,59,71],[67,8,60,6],[67,14,60,12,"name"],[67,18,60,16],[67,21,60,19,"decodeURIComponent"],[67,39,60,37],[67,40,60,38,"segment"],[67,47,60,45],[67,48,60,46],[68,8,61,6],[68,15,61,13],[69,10,62,8,"name"],[70,8,63,6],[70,9,63,7],[71,6,64,4],[71,7,64,5],[71,8,64,6],[72,6,65,4],[72,10,65,8,"routes"],[72,16,65,14],[72,17,65,15,"length"],[72,23,65,21],[72,25,65,23],[73,8,66,6],[73,15,66,13,"createNestedStateObject"],[73,38,66,36],[73,39,66,37,"path"],[73,43,66,41],[73,45,66,43,"routes"],[73,51,66,49],[73,53,66,51,"initialRoutes"],[73,66,66,64],[73,67,66,65],[74,6,67,4],[75,6,68,4],[75,13,68,11,"undefined"],[75,22,68,20],[76,4,69,2],[77,4,70,2],[77,8,70,6,"remaining"],[77,17,70,15],[77,22,70,20],[77,25,70,23],[77,27,70,25],[78,6,71,4],[79,6,72,4],[80,6,73,4],[80,12,73,10,"match"],[80,17,73,15],[80,20,73,18,"configs"],[80,27,73,25],[80,28,73,26,"find"],[80,32,73,30],[80,33,73,31,"config"],[80,39,73,37],[80,43,73,41,"config"],[80,49,73,47],[80,50,73,48,"segments"],[80,58,73,56],[80,59,73,57,"join"],[80,63,73,61],[80,64,73,62],[80,67,73,65],[80,68,73,66],[80,73,73,71],[80,75,73,73],[80,76,73,74],[81,6,74,4],[81,10,74,8,"match"],[81,15,74,13],[81,17,74,15],[82,8,75,6],[82,15,75,13,"createNestedStateObject"],[82,38,75,36],[82,39,75,37,"path"],[82,43,75,41],[82,45,75,43,"match"],[82,50,75,48],[82,51,75,49,"routeNames"],[82,61,75,59],[82,62,75,60,"map"],[82,65,75,63],[82,66,75,64,"name"],[82,70,75,68],[82,75,75,73],[83,10,76,8,"name"],[84,8,77,6],[84,9,77,7],[84,10,77,8],[84,11,77,9],[84,13,77,11,"initialRoutes"],[84,26,77,24],[84,28,77,26,"configs"],[84,35,77,33],[84,36,77,34],[85,6,78,4],[86,6,79,4],[86,13,79,11,"undefined"],[86,22,79,20],[87,4,80,2],[88,4,81,2],[88,8,81,6,"result"],[88,14,81,12],[89,4,82,2],[89,8,82,6,"current"],[89,15,82,13],[91,4,84,2],[92,4,85,2],[93,4,86,2],[93,10,86,8],[94,6,87,4,"routes"],[94,12,87,10],[95,6,88,4,"remainingPath"],[96,4,89,2],[96,5,89,3],[96,8,89,6,"matchAgainstConfigs"],[96,27,89,25],[96,28,89,26,"remaining"],[96,37,89,35],[96,39,89,37,"configs"],[96,46,89,44],[96,47,89,45],[97,4,90,2],[97,8,90,6,"routes"],[97,14,90,12],[97,19,90,17,"undefined"],[97,28,90,26],[97,30,90,28],[98,6,91,4],[99,6,92,4,"current"],[99,13,92,11],[99,16,92,14,"createNestedStateObject"],[99,39,92,37],[99,40,92,38,"path"],[99,44,92,42],[99,46,92,44,"routes"],[99,52,92,50],[99,54,92,52,"initialRoutes"],[99,67,92,65],[99,69,92,67,"configs"],[99,76,92,74],[99,77,92,75],[100,6,93,4,"remaining"],[100,15,93,13],[100,18,93,16,"remainingPath"],[100,31,93,29],[101,6,94,4,"result"],[101,12,94,10],[101,15,94,13,"current"],[101,22,94,20],[102,4,95,2],[103,4,96,2],[103,8,96,6,"current"],[103,15,96,13],[103,19,96,17],[103,23,96,21],[103,27,96,25,"result"],[103,33,96,31],[103,37,96,35],[103,41,96,39],[103,43,96,41],[104,6,97,4],[104,13,97,11,"undefined"],[104,22,97,20],[105,4,98,2],[106,4,99,2],[106,11,99,9,"result"],[106,17,99,15],[107,2,100,0],[109,2,102,0],[110,0,103,0],[111,0,104,0],[112,2,105,0],[112,8,105,6,"cachedConfigResources"],[112,29,105,27],[112,32,105,30],[112,36,105,34,"WeakMap"],[112,43,105,41],[112,44,105,42],[112,45,105,43],[113,2,106,0],[113,11,106,9,"getConfigResources"],[113,29,106,27,"getConfigResources"],[113,30,106,28,"options"],[113,37,106,35],[113,39,106,37],[114,4,107,2],[114,8,107,6],[114,9,107,7,"options"],[114,16,107,14],[114,18,107,16],[114,25,107,23,"prepareConfigResources"],[114,47,107,45],[114,48,107,46],[114,49,107,47],[115,4,108,2],[115,10,108,8,"cached"],[115,16,108,14],[115,19,108,17,"cachedConfigResources"],[115,40,108,38],[115,41,108,39,"get"],[115,44,108,42],[115,45,108,43,"options"],[115,52,108,50],[115,53,108,51],[116,4,109,2],[116,8,109,6,"cached"],[116,14,109,12],[116,16,109,14],[116,23,109,21,"cached"],[116,29,109,27],[117,4,110,2],[117,10,110,8,"resources"],[117,19,110,17],[117,22,110,20,"prepareConfigResources"],[117,44,110,42],[117,45,110,43,"options"],[117,52,110,50],[117,53,110,51],[118,4,111,2,"cachedConfigResources"],[118,25,111,23],[118,26,111,24,"set"],[118,29,111,27],[118,30,111,28,"options"],[118,37,111,35],[118,39,111,37,"resources"],[118,48,111,46],[118,49,111,47],[119,4,112,2],[119,11,112,9,"resources"],[119,20,112,18],[120,2,113,0],[121,2,114,0],[121,11,114,9,"prepareConfigResources"],[121,33,114,31,"prepareConfigResources"],[121,34,114,32,"options"],[121,41,114,39],[121,43,114,41],[122,4,115,2],[122,8,115,6,"options"],[122,15,115,13],[122,17,115,15],[123,6,116,4],[123,10,116,4,"validatePathConfig"],[123,48,116,22],[123,50,116,23,"options"],[123,57,116,30],[123,58,116,31],[124,4,117,2],[125,4,118,2],[125,10,118,8,"initialRoutes"],[125,23,118,21],[125,26,118,24,"getInitialRoutes"],[125,42,118,40],[125,43,118,41,"options"],[125,50,118,48],[125,51,118,49],[126,4,119,2],[126,10,119,8,"configs"],[126,17,119,15],[126,20,119,18,"getSortedNormalizedConfigs"],[126,46,119,44],[126,47,119,45,"initialRoutes"],[126,60,119,58],[126,62,119,60,"options"],[126,69,119,67],[126,71,119,69,"screens"],[126,78,119,76],[126,79,119,77],[127,4,120,2,"checkForDuplicatedConfigs"],[127,29,120,27],[127,30,120,28,"configs"],[127,37,120,35],[127,38,120,36],[128,4,121,2],[128,10,121,8,"configWithRegexes"],[128,27,121,25],[128,30,121,28,"getConfigsWithRegexes"],[128,51,121,49],[128,52,121,50,"configs"],[128,59,121,57],[128,60,121,58],[129,4,122,2],[129,11,122,9],[130,6,123,4,"initialRoutes"],[130,19,123,17],[131,6,124,4,"configs"],[131,13,124,11],[132,6,125,4,"configWithRegexes"],[133,4,126,2],[133,5,126,3],[134,2,127,0],[135,2,128,0],[135,11,128,9,"getInitialRoutes"],[135,27,128,25,"getInitialRoutes"],[135,28,128,26,"options"],[135,35,128,33],[135,37,128,35],[136,4,129,2],[136,10,129,8,"initialRoutes"],[136,23,129,21],[136,26,129,24],[136,28,129,26],[137,4,130,2],[137,8,130,6,"options"],[137,15,130,13],[137,17,130,15,"initialRouteName"],[137,33,130,31],[137,35,130,33],[138,6,131,4,"initialRoutes"],[138,19,131,17],[138,20,131,18,"push"],[138,24,131,22],[138,25,131,23],[139,8,132,6,"initialRouteName"],[139,24,132,22],[139,26,132,24,"options"],[139,33,132,31],[139,34,132,32,"initialRouteName"],[139,50,132,48],[140,8,133,6,"parentScreens"],[140,21,133,19],[140,23,133,21],[141,6,134,4],[141,7,134,5],[141,8,134,6],[142,4,135,2],[143,4,136,2],[143,11,136,9,"initialRoutes"],[143,24,136,22],[144,2,137,0],[145,2,138,0],[145,11,138,9,"getSortedNormalizedConfigs"],[145,37,138,35,"getSortedNormalizedConfigs"],[145,38,138,36,"initialRoutes"],[145,51,138,49],[145,53,138,51,"screens"],[145,60,138,58],[145,63,138,61],[145,64,138,62],[145,65,138,63],[145,67,138,65],[146,4,139,2],[147,4,140,2],[147,11,140,9],[147,13,140,11],[147,14,140,12,"concat"],[147,20,140,18],[147,21,140,19],[147,24,140,22,"Object"],[147,30,140,28],[147,31,140,29,"keys"],[147,35,140,33],[147,36,140,34,"screens"],[147,43,140,41],[147,44,140,42],[147,45,140,43,"map"],[147,48,140,46],[147,49,140,47,"key"],[147,52,140,50],[147,56,140,54,"createNormalizedConfigs"],[147,79,140,77],[147,80,140,78,"key"],[147,83,140,81],[147,85,140,83,"screens"],[147,92,140,90],[147,94,140,92,"initialRoutes"],[147,107,140,105],[147,109,140,107],[147,111,140,109],[147,113,140,111],[147,115,140,113],[147,117,140,115],[147,119,140,117],[147,120,140,118],[147,121,140,119],[147,122,140,120],[147,123,140,121,"sort"],[147,127,140,125],[147,128,140,126],[147,129,140,127,"a"],[147,130,140,128],[147,132,140,130,"b"],[147,133,140,131],[147,138,140,136],[148,6,141,4],[149,6,142,4],[150,6,143,4],[151,6,144,4],[152,6,145,4],[153,6,146,4],[155,6,148,4],[156,6,149,4],[157,6,150,4],[157,10,150,8],[157,14,150,8,"isArrayEqual"],[157,40,150,20],[157,42,150,21,"a"],[157,43,150,22],[157,44,150,23,"segments"],[157,52,150,31],[157,54,150,33,"b"],[157,55,150,34],[157,56,150,35,"segments"],[157,64,150,43],[157,65,150,44],[157,67,150,46],[158,8,151,6],[158,15,151,13,"b"],[158,16,151,14],[158,17,151,15,"routeNames"],[158,27,151,25],[158,28,151,26,"join"],[158,32,151,30],[158,33,151,31],[158,36,151,34],[158,37,151,35],[158,38,151,36,"localeCompare"],[158,51,151,49],[158,52,151,50,"a"],[158,53,151,51],[158,54,151,52,"routeNames"],[158,64,151,62],[158,65,151,63,"join"],[158,69,151,67],[158,70,151,68],[158,73,151,71],[158,74,151,72],[158,75,151,73],[159,6,152,4],[161,6,154,4],[162,6,155,4],[163,6,156,4],[163,10,156,8],[163,14,156,8,"arrayStartsWith"],[163,46,156,23],[163,48,156,24,"a"],[163,49,156,25],[163,50,156,26,"segments"],[163,58,156,34],[163,60,156,36,"b"],[163,61,156,37],[163,62,156,38,"segments"],[163,70,156,46],[163,71,156,47],[163,73,156,49],[164,8,157,6],[164,15,157,13],[164,16,157,14],[164,17,157,15],[165,6,158,4],[166,6,159,4],[166,10,159,8],[166,14,159,8,"arrayStartsWith"],[166,46,159,23],[166,48,159,24,"b"],[166,49,159,25],[166,50,159,26,"segments"],[166,58,159,34],[166,60,159,36,"a"],[166,61,159,37],[166,62,159,38,"segments"],[166,70,159,46],[166,71,159,47],[166,73,159,49],[167,8,160,6],[167,15,160,13],[167,16,160,14],[168,6,161,4],[169,6,162,4],[169,11,162,9],[169,15,162,13,"i"],[169,16,162,14],[169,19,162,17],[169,20,162,18],[169,22,162,20,"i"],[169,23,162,21],[169,26,162,24,"Math"],[169,30,162,28],[169,31,162,29,"max"],[169,34,162,32],[169,35,162,33,"a"],[169,36,162,34],[169,37,162,35,"segments"],[169,45,162,43],[169,46,162,44,"length"],[169,52,162,50],[169,54,162,52,"b"],[169,55,162,53],[169,56,162,54,"segments"],[169,64,162,62],[169,65,162,63,"length"],[169,71,162,69],[169,72,162,70],[169,74,162,72,"i"],[169,75,162,73],[169,77,162,75],[169,79,162,77],[170,8,163,6],[171,8,164,6],[171,12,164,10,"a"],[171,13,164,11],[171,14,164,12,"segments"],[171,22,164,20],[171,23,164,21,"i"],[171,24,164,22],[171,25,164,23],[171,29,164,27],[171,33,164,31],[171,35,164,33],[172,10,165,8],[172,17,165,15],[172,18,165,16],[173,8,166,6],[175,8,168,6],[176,8,169,6],[176,12,169,10,"b"],[176,13,169,11],[176,14,169,12,"segments"],[176,22,169,20],[176,23,169,21,"i"],[176,24,169,22],[176,25,169,23],[176,29,169,27],[176,33,169,31],[176,35,169,33],[177,10,170,8],[177,17,170,15],[177,18,170,16],[177,19,170,17],[178,8,171,6],[179,8,172,6],[179,14,172,12,"aWildCard"],[179,23,172,21],[179,26,172,24,"a"],[179,27,172,25],[179,28,172,26,"segments"],[179,36,172,34],[179,37,172,35,"i"],[179,38,172,36],[179,39,172,37],[179,44,172,42],[179,47,172,45],[180,8,173,6],[180,14,173,12,"bWildCard"],[180,23,173,21],[180,26,173,24,"b"],[180,27,173,25],[180,28,173,26,"segments"],[180,36,173,34],[180,37,173,35,"i"],[180,38,173,36],[180,39,173,37],[180,44,173,42],[180,47,173,45],[181,8,174,6],[181,14,174,12,"aParam"],[181,20,174,18],[181,23,174,21,"a"],[181,24,174,22],[181,25,174,23,"segments"],[181,33,174,31],[181,34,174,32,"i"],[181,35,174,33],[181,36,174,34],[181,37,174,35,"startsWith"],[181,47,174,45],[181,48,174,46],[181,51,174,49],[181,52,174,50],[182,8,175,6],[182,14,175,12,"bParam"],[182,20,175,18],[182,23,175,21,"b"],[182,24,175,22],[182,25,175,23,"segments"],[182,33,175,31],[182,34,175,32,"i"],[182,35,175,33],[182,36,175,34],[182,37,175,35,"startsWith"],[182,47,175,45],[182,48,175,46],[182,51,175,49],[182,52,175,50],[183,8,176,6],[183,14,176,12,"aRegex"],[183,20,176,18],[183,23,176,21,"aParam"],[183,29,176,27],[183,33,176,31,"a"],[183,34,176,32],[183,35,176,33,"segments"],[183,43,176,41],[183,44,176,42,"i"],[183,45,176,43],[183,46,176,44],[183,47,176,45,"includes"],[183,55,176,53],[183,56,176,54],[183,59,176,57],[183,60,176,58],[184,8,177,6],[184,14,177,12,"bRegex"],[184,20,177,18],[184,23,177,21,"bParam"],[184,29,177,27],[184,33,177,31,"b"],[184,34,177,32],[184,35,177,33,"segments"],[184,43,177,41],[184,44,177,42,"i"],[184,45,177,43],[184,46,177,44],[184,47,177,45,"includes"],[184,55,177,53],[184,56,177,54],[184,59,177,57],[184,60,177,58],[186,8,179,6],[187,8,180,6],[187,12,180,10,"aWildCard"],[187,21,180,19],[187,25,180,23,"bWildCard"],[187,34,180,32],[187,38,180,36,"aRegex"],[187,44,180,42],[187,48,180,46,"bRegex"],[187,54,180,52],[187,56,180,54],[188,10,181,8],[189,8,182,6],[191,8,184,6],[192,8,185,6],[192,12,185,10,"aWildCard"],[192,21,185,19],[192,25,185,23],[192,26,185,24,"bWildCard"],[192,35,185,33],[192,37,185,35],[193,10,186,8],[193,17,186,15],[193,18,186,16],[194,8,187,6],[196,8,189,6],[197,8,190,6],[197,12,190,10,"bWildCard"],[197,21,190,19],[197,25,190,23],[197,26,190,24,"aWildCard"],[197,35,190,33],[197,37,190,35],[198,10,191,8],[198,17,191,15],[198,18,191,16],[198,19,191,17],[199,8,192,6],[201,8,194,6],[202,8,195,6],[202,12,195,10,"aParam"],[202,18,195,16],[202,22,195,20],[202,23,195,21,"bParam"],[202,29,195,27],[202,31,195,29],[203,10,196,8],[203,17,196,15],[203,18,196,16],[204,8,197,6],[206,8,199,6],[207,8,200,6],[207,12,200,10,"bParam"],[207,18,200,16],[207,22,200,20],[207,23,200,21,"aParam"],[207,29,200,27],[207,31,200,29],[208,10,201,8],[208,17,201,15],[208,18,201,16],[208,19,201,17],[209,8,202,6],[211,8,204,6],[212,8,205,6],[212,12,205,10,"aRegex"],[212,18,205,16],[212,22,205,20],[212,23,205,21,"bRegex"],[212,29,205,27],[212,31,205,29],[213,10,206,8],[213,17,206,15],[213,18,206,16],[213,19,206,17],[214,8,207,6],[216,8,209,6],[217,8,210,6],[217,12,210,10,"bRegex"],[217,18,210,16],[217,22,210,20],[217,23,210,21,"aRegex"],[217,29,210,27],[217,31,210,29],[218,10,211,8],[218,17,211,15],[218,18,211,16],[219,8,212,6],[220,6,213,4],[221,6,214,4],[221,13,214,11,"a"],[221,14,214,12],[221,15,214,13,"segments"],[221,23,214,21],[221,24,214,22,"length"],[221,30,214,28],[221,33,214,31,"b"],[221,34,214,32],[221,35,214,33,"segments"],[221,43,214,41],[221,44,214,42,"length"],[221,50,214,48],[222,4,215,2],[222,5,215,3],[222,6,215,4],[223,2,216,0],[224,2,217,0],[224,11,217,9,"checkForDuplicatedConfigs"],[224,36,217,34,"checkForDuplicatedConfigs"],[224,37,217,35,"configs"],[224,44,217,42],[224,46,217,44],[225,4,218,2],[226,4,219,2,"configs"],[226,11,219,9],[226,12,219,10,"reduce"],[226,18,219,16],[226,19,219,17],[226,20,219,18,"acc"],[226,23,219,21],[226,25,219,23,"config"],[226,31,219,29],[226,36,219,34],[227,6,220,4],[227,12,220,10,"pattern"],[227,19,220,17],[227,22,220,20,"config"],[227,28,220,26],[227,29,220,27,"segments"],[227,37,220,35],[227,38,220,36,"join"],[227,42,220,40],[227,43,220,41],[227,46,220,44],[227,47,220,45],[228,6,221,4],[228,10,221,8,"acc"],[228,13,221,11],[228,14,221,12,"pattern"],[228,21,221,19],[228,22,221,20],[228,24,221,22],[229,8,222,6],[229,14,222,12,"a"],[229,15,222,13],[229,18,222,16,"acc"],[229,21,222,19],[229,22,222,20,"pattern"],[229,29,222,27],[229,30,222,28],[229,31,222,29,"routeNames"],[229,41,222,39],[230,8,223,6],[230,14,223,12,"b"],[230,15,223,13],[230,18,223,16,"config"],[230,24,223,22],[230,25,223,23,"routeNames"],[230,35,223,33],[232,8,225,6],[233,8,226,6],[234,8,227,6],[234,14,227,12,"intersects"],[234,24,227,22],[234,27,227,25,"a"],[234,28,227,26],[234,29,227,27,"length"],[234,35,227,33],[234,38,227,36,"b"],[234,39,227,37],[234,40,227,38,"length"],[234,46,227,44],[234,49,227,47,"b"],[234,50,227,48],[234,51,227,49,"every"],[234,56,227,54],[234,57,227,55],[234,58,227,56,"it"],[234,60,227,58],[234,62,227,60,"i"],[234,63,227,61],[234,68,227,66,"a"],[234,69,227,67],[234,70,227,68,"i"],[234,71,227,69],[234,72,227,70],[234,77,227,75,"it"],[234,79,227,77],[234,80,227,78],[234,83,227,81,"a"],[234,84,227,82],[234,85,227,83,"every"],[234,90,227,88],[234,91,227,89],[234,92,227,90,"it"],[234,94,227,92],[234,96,227,94,"i"],[234,97,227,95],[234,102,227,100,"b"],[234,103,227,101],[234,104,227,102,"i"],[234,105,227,103],[234,106,227,104],[234,111,227,109,"it"],[234,113,227,111],[234,114,227,112],[235,8,228,6],[235,12,228,10],[235,13,228,11,"intersects"],[235,23,228,21],[235,25,228,23],[236,10,229,8],[236,16,229,14],[236,20,229,18,"Error"],[236,25,229,23],[236,26,229,24],[236,91,229,89,"pattern"],[236,98,229,96],[236,121,229,119,"a"],[236,122,229,120],[236,123,229,121,"join"],[236,127,229,125],[236,128,229,126],[236,133,229,131],[236,134,229,132],[236,144,229,142,"b"],[236,145,229,143],[236,146,229,144,"join"],[236,150,229,148],[236,151,229,149],[236,156,229,154],[236,157,229,155],[236,229,229,227],[236,230,229,228],[237,8,230,6],[238,6,231,4],[239,6,232,4],[239,13,232,11,"Object"],[239,19,232,17],[239,20,232,18,"assign"],[239,26,232,24],[239,27,232,25,"acc"],[239,30,232,28],[239,32,232,30],[240,8,233,6],[240,9,233,7,"pattern"],[240,16,233,14],[240,19,233,17,"config"],[241,6,234,4],[241,7,234,5],[241,8,234,6],[242,4,235,2],[242,5,235,3],[242,7,235,5],[242,8,235,6],[242,9,235,7],[242,10,235,8],[243,2,236,0],[244,2,237,0],[244,11,237,9,"getConfigsWithRegexes"],[244,32,237,30,"getConfigsWithRegexes"],[244,33,237,31,"configs"],[244,40,237,38],[244,42,237,40],[245,4,238,2],[245,11,238,9,"configs"],[245,18,238,16],[245,19,238,17,"map"],[245,22,238,20],[245,23,238,21,"c"],[245,24,238,22],[245,29,238,27],[246,6,239,4],[246,9,239,7,"c"],[246,10,239,8],[247,6,240,4],[248,6,241,4,"regex"],[248,11,241,9],[248,13,241,11,"c"],[248,14,241,12],[248,15,241,13,"regex"],[248,20,241,18],[248,23,241,21],[248,27,241,25,"RegExp"],[248,33,241,31],[248,34,241,32,"c"],[248,35,241,33],[248,36,241,34,"regex"],[248,41,241,39],[248,42,241,40,"source"],[248,48,241,46],[248,51,241,49],[248,54,241,52],[248,55,241,53],[248,58,241,56,"undefined"],[249,4,242,2],[249,5,242,3],[249,6,242,4],[249,7,242,5],[250,2,243,0],[251,2,244,0],[251,8,244,6,"matchAgainstConfigs"],[251,27,244,25],[251,30,244,28,"matchAgainstConfigs"],[251,31,244,29,"remaining"],[251,40,244,38],[251,42,244,40,"configs"],[251,49,244,47],[251,54,244,52],[252,4,245,2],[252,8,245,6,"routes"],[252,14,245,12],[253,4,246,2],[253,8,246,6,"remainingPath"],[253,21,246,19],[253,24,246,22,"remaining"],[253,33,246,31],[255,4,248,2],[256,4,249,2],[256,9,249,7],[256,15,249,13,"config"],[256,21,249,19],[256,25,249,23,"configs"],[256,32,249,30],[256,34,249,32],[257,6,250,4],[257,10,250,8],[257,11,250,9,"config"],[257,17,250,15],[257,18,250,16,"regex"],[257,23,250,21],[257,25,250,23],[258,8,251,6],[259,6,252,4],[260,6,253,4],[260,12,253,10,"match"],[260,17,253,15],[260,20,253,18,"remainingPath"],[260,33,253,31],[260,34,253,32,"match"],[260,39,253,37],[260,40,253,38,"config"],[260,46,253,44],[260,47,253,45,"regex"],[260,52,253,50],[260,53,253,51],[262,6,255,4],[263,6,256,4],[263,10,256,8,"match"],[263,15,256,13],[263,17,256,15],[264,8,257,6,"routes"],[264,14,257,12],[264,17,257,15,"config"],[264,23,257,21],[264,24,257,22,"routeNames"],[264,34,257,32],[264,35,257,33,"map"],[264,38,257,36],[264,39,257,37,"routeName"],[264,48,257,46],[264,52,257,50],[265,10,258,8],[265,16,258,14,"routeConfig"],[265,27,258,25],[265,30,258,28,"configs"],[265,37,258,35],[265,38,258,36,"find"],[265,42,258,40],[265,43,258,41,"c"],[265,44,258,42],[265,48,258,46],[266,12,259,10],[267,12,260,10],[267,19,260,17,"c"],[267,20,260,18],[267,21,260,19,"screen"],[267,27,260,25],[267,32,260,30,"routeName"],[267,41,260,39],[267,45,260,43],[267,49,260,43,"arrayStartsWith"],[267,81,260,58],[267,83,260,59,"config"],[267,89,260,65],[267,90,260,66,"segments"],[267,98,260,74],[267,100,260,76,"c"],[267,101,260,77],[267,102,260,78,"segments"],[267,110,260,86],[267,111,260,87],[268,10,261,8],[268,11,261,9],[268,12,261,10],[269,10,262,8],[269,16,262,14,"params"],[269,22,262,20],[269,25,262,23,"routeConfig"],[269,36,262,34],[269,40,262,38,"match"],[269,45,262,43],[269,46,262,44,"groups"],[269,52,262,50],[269,55,262,53,"Object"],[269,61,262,59],[269,62,262,60,"fromEntries"],[269,73,262,71],[269,74,262,72,"Object"],[269,80,262,78],[269,81,262,79,"entries"],[269,88,262,86],[269,89,262,87,"match"],[269,94,262,92],[269,95,262,93,"groups"],[269,101,262,99],[269,102,262,100],[269,103,262,101,"map"],[269,106,262,104],[269,107,262,105],[269,108,262,106],[269,109,262,107,"key"],[269,112,262,110],[269,114,262,112,"value"],[269,119,262,117],[269,120,262,118],[269,125,262,123],[270,12,263,10],[270,18,263,16,"index"],[270,23,263,21],[270,26,263,24,"Number"],[270,32,263,30],[270,33,263,31,"key"],[270,36,263,34],[270,37,263,35,"replace"],[270,44,263,42],[270,45,263,43],[270,53,263,51],[270,55,263,53],[270,57,263,55],[270,58,263,56],[270,59,263,57],[271,12,264,10],[271,18,264,16,"param"],[271,23,264,21],[271,26,264,24,"routeConfig"],[271,37,264,35],[271,38,264,36,"params"],[271,44,264,42],[271,45,264,43,"find"],[271,49,264,47],[271,50,264,48,"it"],[271,52,264,50],[271,56,264,54,"it"],[271,58,264,56],[271,59,264,57,"index"],[271,64,264,62],[271,69,264,67,"index"],[271,74,264,72],[271,75,264,73],[272,12,265,10],[272,16,265,14,"param"],[272,21,265,19],[272,23,265,21,"screen"],[272,29,265,27],[272,34,265,32,"routeName"],[272,43,265,41],[272,47,265,45,"param"],[272,52,265,50],[272,54,265,52,"name"],[272,58,265,56],[272,60,265,58],[273,14,266,12],[273,21,266,19],[273,22,266,20,"param"],[273,27,266,25],[273,28,266,26,"name"],[273,32,266,30],[273,34,266,32,"value"],[273,39,266,37],[273,40,266,38],[274,12,267,10],[275,12,268,10],[275,19,268,17],[275,23,268,21],[276,10,269,8],[276,11,269,9],[276,12,269,10],[276,13,269,11,"filter"],[276,19,269,17],[276,20,269,18,"it"],[276,22,269,20],[276,26,269,24,"it"],[276,28,269,26],[276,32,269,30],[276,36,269,34],[276,37,269,35],[276,38,269,36,"map"],[276,41,269,39],[276,42,269,40],[276,43,269,41],[276,44,269,42,"key"],[276,47,269,45],[276,49,269,47,"value"],[276,54,269,52],[276,55,269,53],[276,60,269,58],[277,12,270,10],[277,16,270,14,"value"],[277,21,270,19],[277,25,270,23],[277,29,270,27],[277,31,270,29],[278,14,271,12],[278,21,271,19],[278,22,271,20,"key"],[278,25,271,23],[278,27,271,25,"undefined"],[278,36,271,34],[278,37,271,35],[279,12,272,10],[280,12,273,10],[280,18,273,16,"decoded"],[280,25,273,23],[280,28,273,26,"decodeURIComponent"],[280,46,273,44],[280,47,273,45,"value"],[280,52,273,50],[280,53,273,51],[281,12,274,10],[281,18,274,16,"parsed"],[281,24,274,22],[281,27,274,25,"routeConfig"],[281,38,274,36],[281,39,274,37,"parse"],[281,44,274,42],[281,47,274,45,"key"],[281,50,274,48],[281,51,274,49],[281,54,274,52,"routeConfig"],[281,65,274,63],[281,66,274,64,"parse"],[281,71,274,69],[281,72,274,70,"key"],[281,75,274,73],[281,76,274,74],[281,77,274,75,"decoded"],[281,84,274,82],[281,85,274,83],[281,88,274,86,"decoded"],[281,95,274,93],[282,12,275,10],[282,19,275,17],[282,20,275,18,"key"],[282,23,275,21],[282,25,275,23,"parsed"],[282,31,275,29],[282,32,275,30],[283,10,276,8],[283,11,276,9],[283,12,276,10],[283,13,276,11],[283,16,276,14,"undefined"],[283,25,276,23],[284,10,277,8],[284,14,277,12,"params"],[284,20,277,18],[284,24,277,22,"Object"],[284,30,277,28],[284,31,277,29,"keys"],[284,35,277,33],[284,36,277,34,"params"],[284,42,277,40],[284,43,277,41],[284,44,277,42,"length"],[284,50,277,48],[284,52,277,50],[285,12,278,10],[285,19,278,17],[286,14,279,12,"name"],[286,18,279,16],[286,20,279,18,"routeName"],[286,29,279,27],[287,14,280,12,"params"],[288,12,281,10],[288,13,281,11],[289,10,282,8],[290,10,283,8],[290,17,283,15],[291,12,284,10,"name"],[291,16,284,14],[291,18,284,16,"routeName"],[292,10,285,8],[292,11,285,9],[293,8,286,6],[293,9,286,7],[293,10,286,8],[294,8,287,6,"remainingPath"],[294,21,287,19],[294,24,287,22,"remainingPath"],[294,37,287,35],[294,38,287,36,"replace"],[294,45,287,43],[294,46,287,44,"match"],[294,51,287,49],[294,52,287,50],[294,53,287,51],[294,54,287,52],[294,56,287,54],[294,58,287,56],[294,59,287,57],[295,8,288,6],[296,6,289,4],[297,4,290,2],[298,4,291,2],[298,11,291,9],[299,6,292,4,"routes"],[299,12,292,10],[300,6,293,4,"remainingPath"],[301,4,294,2],[301,5,294,3],[302,2,295,0],[302,3,295,1],[303,2,296,0],[303,8,296,6,"createNormalizedConfigs"],[303,31,296,29],[303,34,296,32,"createNormalizedConfigs"],[303,35,296,33,"screen"],[303,41,296,39],[303,43,296,41,"routeConfig"],[303,54,296,52],[303,56,296,54,"initials"],[303,64,296,62],[303,66,296,64,"paths"],[303,71,296,69],[303,73,296,71,"parentScreens"],[303,86,296,84],[303,88,296,86,"routeNames"],[303,98,296,96],[303,103,296,101],[304,4,297,2],[304,10,297,8,"configs"],[304,17,297,15],[304,20,297,18],[304,22,297,20],[305,4,298,2,"routeNames"],[305,14,298,12],[305,15,298,13,"push"],[305,19,298,17],[305,20,298,18,"screen"],[305,26,298,24],[305,27,298,25],[306,4,299,2,"parentScreens"],[306,17,299,15],[306,18,299,16,"push"],[306,22,299,20],[306,23,299,21,"screen"],[306,29,299,27],[306,30,299,28],[307,4,300,2],[307,10,300,8,"config"],[307,16,300,14],[307,19,300,17,"routeConfig"],[307,30,300,28],[307,31,300,29,"screen"],[307,37,300,35],[307,38,300,36],[308,4,301,2],[308,8,301,6],[308,15,301,13,"config"],[308,21,301,19],[308,26,301,24],[308,34,301,32],[308,36,301,34],[309,6,302,4,"paths"],[309,11,302,9],[309,12,302,10,"push"],[309,16,302,14],[309,17,302,15],[310,8,303,6,"screen"],[310,14,303,12],[311,8,304,6,"path"],[311,12,304,10],[311,14,304,12,"config"],[312,6,305,4],[312,7,305,5],[312,8,305,6],[313,6,306,4,"configs"],[313,13,306,11],[313,14,306,12,"push"],[313,18,306,16],[313,19,306,17,"createConfigItem"],[313,35,306,33],[313,36,306,34,"screen"],[313,42,306,40],[313,44,306,42],[313,45,306,43],[313,48,306,46,"routeNames"],[313,58,306,56],[313,59,306,57],[313,61,306,59],[313,62,306,60],[313,65,306,63,"paths"],[313,70,306,68],[313,71,306,69],[313,72,306,70],[313,73,306,71],[314,4,307,2],[314,5,307,3],[314,11,307,9],[314,15,307,13],[314,22,307,20,"config"],[314,28,307,26],[314,33,307,31],[314,41,307,39],[314,43,307,41],[315,6,308,4],[316,6,309,4],[317,6,310,4],[318,6,311,4],[318,10,311,8],[318,17,311,15,"config"],[318,23,311,21],[318,24,311,22,"path"],[318,28,311,26],[318,33,311,31],[318,41,311,39],[318,43,311,41],[319,8,312,6],[319,12,312,10,"config"],[319,18,312,16],[319,19,312,17,"exact"],[319,24,312,22],[319,28,312,26,"config"],[319,34,312,32],[319,35,312,33,"path"],[319,39,312,37],[319,43,312,41],[319,47,312,45],[319,49,312,47],[320,10,313,8],[320,16,313,14],[320,20,313,18,"Error"],[320,25,313,23],[320,26,313,24],[320,37,313,35,"screen"],[320,43,313,41],[320,223,313,221],[320,224,313,222],[321,8,314,6],[323,8,316,6],[324,8,317,6],[325,8,318,6],[325,14,318,12,"aliasConfigs"],[325,26,318,24],[325,29,318,27],[325,31,318,29],[326,8,319,6],[326,12,319,10,"config"],[326,18,319,16],[326,19,319,17,"alias"],[326,24,319,22],[326,26,319,24],[327,10,320,8],[327,15,320,13],[327,21,320,19,"alias"],[327,26,320,24],[327,30,320,28,"config"],[327,36,320,34],[327,37,320,35,"alias"],[327,42,320,40],[327,44,320,42],[328,12,321,10],[328,16,321,14],[328,23,321,21,"alias"],[328,28,321,26],[328,33,321,31],[328,41,321,39],[328,43,321,41],[329,14,322,12,"aliasConfigs"],[329,26,322,24],[329,27,322,25,"push"],[329,31,322,29],[329,32,322,30,"createConfigItem"],[329,48,322,46],[329,49,322,47,"screen"],[329,55,322,53],[329,57,322,55],[329,58,322,56],[329,61,322,59,"routeNames"],[329,71,322,69],[329,72,322,70],[329,74,322,72],[329,75,322,73],[329,78,322,76,"paths"],[329,83,322,81],[329,85,322,83],[330,16,323,14,"screen"],[330,22,323,20],[331,16,324,14,"path"],[331,20,324,18],[331,22,324,20,"alias"],[332,14,325,12],[332,15,325,13],[332,16,325,14],[332,18,325,16,"config"],[332,24,325,22],[332,25,325,23,"parse"],[332,30,325,28],[332,31,325,29],[332,32,325,30],[333,12,326,10],[333,13,326,11],[333,19,326,17],[333,23,326,21],[333,30,326,28,"alias"],[333,35,326,33],[333,40,326,38],[333,48,326,46],[333,50,326,48],[334,14,327,12,"aliasConfigs"],[334,26,327,24],[334,27,327,25,"push"],[334,31,327,29],[334,32,327,30,"createConfigItem"],[334,48,327,46],[334,49,327,47,"screen"],[334,55,327,53],[334,57,327,55],[334,58,327,56],[334,61,327,59,"routeNames"],[334,71,327,69],[334,72,327,70],[334,74,327,72,"alias"],[334,79,327,77],[334,80,327,78,"exact"],[334,85,327,83],[334,88,327,86],[334,89,327,87],[335,16,328,14,"screen"],[335,22,328,20],[336,16,329,14,"path"],[336,20,329,18],[336,22,329,20,"alias"],[336,27,329,25],[336,28,329,26,"path"],[337,14,330,12],[337,15,330,13],[337,16,330,14],[337,19,330,17],[337,20,330,18],[337,23,330,21,"paths"],[337,28,330,26],[337,30,330,28],[338,16,331,14,"screen"],[338,22,331,20],[339,16,332,14,"path"],[339,20,332,18],[339,22,332,20,"alias"],[339,27,332,25],[339,28,332,26,"path"],[340,14,333,12],[340,15,333,13],[340,16,333,14],[340,18,333,16,"alias"],[340,23,333,21],[340,24,333,22,"parse"],[340,29,333,27],[340,30,333,28],[340,31,333,29],[341,12,334,10],[342,10,335,8],[343,8,336,6],[344,8,337,6],[344,12,337,10,"config"],[344,18,337,16],[344,19,337,17,"exact"],[344,24,337,22],[344,26,337,24],[345,10,338,8],[346,10,339,8],[347,10,340,8,"paths"],[347,15,340,13],[347,16,340,14,"length"],[347,22,340,20],[347,25,340,23],[347,26,340,24],[348,8,341,6],[349,8,342,6,"paths"],[349,13,342,11],[349,14,342,12,"push"],[349,18,342,16],[349,19,342,17],[350,10,343,8,"screen"],[350,16,343,14],[351,10,344,8,"path"],[351,14,344,12],[351,16,344,14,"config"],[351,22,344,20],[351,23,344,21,"path"],[352,8,345,6],[352,9,345,7],[352,10,345,8],[353,8,346,6,"configs"],[353,15,346,13],[353,16,346,14,"push"],[353,20,346,18],[353,21,346,19,"createConfigItem"],[353,37,346,35],[353,38,346,36,"screen"],[353,44,346,42],[353,46,346,44],[353,47,346,45],[353,50,346,48,"routeNames"],[353,60,346,58],[353,61,346,59],[353,63,346,61],[353,64,346,62],[353,67,346,65,"paths"],[353,72,346,70],[353,73,346,71],[353,75,346,73,"config"],[353,81,346,79],[353,82,346,80,"parse"],[353,87,346,85],[353,88,346,86],[353,89,346,87],[354,8,347,6,"configs"],[354,15,347,13],[354,16,347,14,"push"],[354,20,347,18],[354,21,347,19],[354,24,347,22,"aliasConfigs"],[354,36,347,34],[354,37,347,35],[355,6,348,4],[356,6,349,4],[356,10,349,8],[356,17,349,15,"config"],[356,23,349,21],[356,28,349,26],[356,36,349,34],[356,40,349,38],[356,47,349,45,"config"],[356,53,349,51],[356,54,349,52,"path"],[356,58,349,56],[356,63,349,61],[356,71,349,69],[356,75,349,73,"config"],[356,81,349,79],[356,82,349,80,"alias"],[356,87,349,85],[356,89,349,87,"length"],[356,95,349,93],[356,97,349,95],[357,8,350,6],[357,14,350,12],[357,18,350,16,"Error"],[357,23,350,21],[357,24,350,22],[357,35,350,33,"screen"],[357,41,350,39],[357,126,350,124],[357,127,350,125],[358,6,351,4],[359,6,352,4],[359,10,352,8,"config"],[359,16,352,14],[359,17,352,15,"screens"],[359,24,352,22],[359,26,352,24],[360,8,353,6],[361,8,354,6],[361,12,354,10,"config"],[361,18,354,16],[361,19,354,17,"initialRouteName"],[361,35,354,33],[361,37,354,35],[362,10,355,8,"initials"],[362,18,355,16],[362,19,355,17,"push"],[362,23,355,21],[362,24,355,22],[363,12,356,10,"initialRouteName"],[363,28,356,26],[363,30,356,28,"config"],[363,36,356,34],[363,37,356,35,"initialRouteName"],[363,53,356,51],[364,12,357,10,"parentScreens"],[365,10,358,8],[365,11,358,9],[365,12,358,10],[366,8,359,6],[367,8,360,6,"Object"],[367,14,360,12],[367,15,360,13,"keys"],[367,19,360,17],[367,20,360,18,"config"],[367,26,360,24],[367,27,360,25,"screens"],[367,34,360,32],[367,35,360,33],[367,36,360,34,"forEach"],[367,43,360,41],[367,44,360,42,"nestedConfig"],[367,56,360,54],[367,60,360,58],[368,10,361,8],[368,16,361,14,"result"],[368,22,361,20],[368,25,361,23,"createNormalizedConfigs"],[368,48,361,46],[368,49,361,47,"nestedConfig"],[368,61,361,59],[368,63,361,61,"config"],[368,69,361,67],[368,70,361,68,"screens"],[368,77,361,75],[368,79,361,77,"initials"],[368,87,361,85],[368,89,361,87],[368,90,361,88],[368,93,361,91,"paths"],[368,98,361,96],[368,99,361,97],[368,101,361,99],[368,102,361,100],[368,105,361,103,"parentScreens"],[368,118,361,116],[368,119,361,117],[368,121,361,119,"routeNames"],[368,131,361,129],[368,132,361,130],[369,10,362,8,"configs"],[369,17,362,15],[369,18,362,16,"push"],[369,22,362,20],[369,23,362,21],[369,26,362,24,"result"],[369,32,362,30],[369,33,362,31],[370,8,363,6],[370,9,363,7],[370,10,363,8],[371,6,364,4],[372,4,365,2],[373,4,366,2,"routeNames"],[373,14,366,12],[373,15,366,13,"pop"],[373,18,366,16],[373,19,366,17],[373,20,366,18],[374,4,367,2],[374,11,367,9,"configs"],[374,18,367,16],[375,2,368,0],[375,3,368,1],[376,2,369,0],[376,8,369,6,"createConfigItem"],[376,24,369,22],[376,27,369,25,"createConfigItem"],[376,28,369,26,"screen"],[376,34,369,32],[376,36,369,34,"routeNames"],[376,46,369,44],[376,48,369,46,"paths"],[376,53,369,51],[376,55,369,53,"parse"],[376,60,369,58],[376,65,369,63],[377,4,370,2],[377,10,370,8,"parts"],[377,15,370,13],[377,18,370,16],[377,20,370,18],[379,4,372,2],[380,4,373,2],[380,9,373,7],[380,15,373,13],[381,6,374,4,"screen"],[381,12,374,10],[382,6,375,4,"path"],[383,4,376,2],[383,5,376,3],[383,9,376,7,"paths"],[383,14,376,12],[383,16,376,14],[384,6,377,4,"parts"],[384,11,377,9],[384,12,377,10,"push"],[384,16,377,14],[384,17,377,15],[384,20,377,18],[384,24,377,18,"getPatternParts"],[384,56,377,33],[384,58,377,34,"path"],[384,62,377,38],[384,63,377,39],[384,64,377,40,"map"],[384,67,377,43],[384,68,377,44,"part"],[384,72,377,48],[384,77,377,53],[385,8,378,6],[385,11,378,9,"part"],[385,15,378,13],[386,8,379,6,"screen"],[387,6,380,4],[387,7,380,5],[387,8,380,6],[387,9,380,7],[387,10,380,8],[388,4,381,2],[389,4,382,2],[389,10,382,8,"regex"],[389,15,382,13],[389,18,382,16,"parts"],[389,23,382,21],[389,24,382,22,"length"],[389,30,382,28],[389,33,382,31],[389,37,382,35,"RegExp"],[389,43,382,41],[389,44,382,42],[389,49,382,47,"parts"],[389,54,382,52],[389,55,382,53,"map"],[389,58,382,56],[389,59,382,57],[389,60,382,58,"it"],[389,62,382,60],[389,64,382,62,"i"],[389,65,382,63],[389,70,382,68],[390,6,383,4],[390,10,383,8,"it"],[390,12,383,10],[390,13,383,11,"param"],[390,18,383,16],[390,20,383,18],[391,8,384,6],[391,14,384,12,"reg"],[391,17,384,15],[391,20,384,18,"it"],[391,22,384,20],[391,23,384,21,"regex"],[391,28,384,26],[391,32,384,30],[391,39,384,37],[392,8,385,6],[392,15,385,13],[392,29,385,27,"i"],[392,30,385,28],[392,34,385,32,"reg"],[392,37,385,35],[392,45,385,43,"it"],[392,47,385,45],[392,48,385,46,"optional"],[392,56,385,54],[392,59,385,57],[392,62,385,60],[392,65,385,63],[392,67,385,65],[392,70,385,68],[393,6,386,4],[394,6,387,4],[394,13,387,11],[394,16,387,14,"it"],[394,18,387,16],[394,19,387,17,"segment"],[394,26,387,24],[394,31,387,29],[394,34,387,32],[394,37,387,35],[394,41,387,39],[394,44,387,42],[394,48,387,42,"escape"],[394,75,387,48],[394,77,387,49,"it"],[394,79,387,51],[394,80,387,52,"segment"],[394,87,387,59],[394,88,387,60],[394,93,387,65],[395,4,388,2],[395,5,388,3],[395,6,388,4],[395,7,388,5,"join"],[395,11,388,9],[395,12,388,10],[395,14,388,12],[395,15,388,13],[395,19,388,17],[395,20,388,18],[395,23,388,21,"undefined"],[395,32,388,30],[396,4,389,2],[396,10,389,8,"segments"],[396,18,389,16],[396,21,389,19,"parts"],[396,26,389,24],[396,27,389,25,"map"],[396,30,389,28],[396,31,389,29,"it"],[396,33,389,31],[396,37,389,35,"it"],[396,39,389,37],[396,40,389,38,"segment"],[396,47,389,45],[396,48,389,46],[397,4,390,2],[397,10,390,8,"params"],[397,16,390,14],[397,19,390,17,"parts"],[397,24,390,22],[397,25,390,23,"map"],[397,28,390,26],[397,29,390,27],[397,30,390,28,"it"],[397,32,390,30],[397,34,390,32,"i"],[397,35,390,33],[397,40,390,38,"it"],[397,42,390,40],[397,43,390,41,"param"],[397,48,390,46],[397,51,390,49],[398,6,391,4,"index"],[398,11,391,9],[398,13,391,11,"i"],[398,14,391,12],[399,6,392,4,"screen"],[399,12,392,10],[399,14,392,12,"it"],[399,16,392,14],[399,17,392,15,"screen"],[399,23,392,21],[400,6,393,4,"name"],[400,10,393,8],[400,12,393,10,"it"],[400,14,393,12],[400,15,393,13,"param"],[401,4,394,2],[401,5,394,3],[401,8,394,6],[401,12,394,10],[401,13,394,11],[401,14,394,12,"filter"],[401,20,394,18],[401,21,394,19,"it"],[401,23,394,21],[401,27,394,25,"it"],[401,29,394,27],[401,33,394,31],[401,37,394,35],[401,38,394,36],[402,4,395,2],[402,11,395,9],[403,6,396,4,"screen"],[403,12,396,10],[404,6,397,4,"regex"],[404,11,397,9],[405,6,398,4,"segments"],[405,14,398,12],[406,6,399,4,"params"],[406,12,399,10],[407,6,400,4,"routeNames"],[407,16,400,14],[408,6,401,4,"parse"],[409,4,402,2],[409,5,402,3],[410,2,403,0],[410,3,403,1],[411,2,404,0],[411,8,404,6,"findParseConfigForRoute"],[411,31,404,29],[411,34,404,32,"findParseConfigForRoute"],[411,35,404,33,"routeName"],[411,44,404,42],[411,46,404,44,"flatConfig"],[411,56,404,54],[411,61,404,59],[412,4,405,2],[412,9,405,7],[412,15,405,13,"config"],[412,21,405,19],[412,25,405,23,"flatConfig"],[412,35,405,33],[412,37,405,35],[413,6,406,4],[413,10,406,8,"routeName"],[413,19,406,17],[413,24,406,22,"config"],[413,30,406,28],[413,31,406,29,"routeNames"],[413,41,406,39],[413,42,406,40,"config"],[413,48,406,46],[413,49,406,47,"routeNames"],[413,59,406,57],[413,60,406,58,"length"],[413,66,406,64],[413,69,406,67],[413,70,406,68],[413,71,406,69],[413,73,406,71],[414,8,407,6],[414,15,407,13,"config"],[414,21,407,19],[414,22,407,20,"parse"],[414,27,407,25],[415,6,408,4],[416,4,409,2],[417,4,410,2],[417,11,410,9,"undefined"],[417,20,410,18],[418,2,411,0],[418,3,411,1],[420,2,413,0],[421,2,414,0],[421,8,414,6,"findInitialRoute"],[421,24,414,22],[421,27,414,25,"findInitialRoute"],[421,28,414,26,"routeName"],[421,37,414,35],[421,39,414,37,"parentScreens"],[421,52,414,50],[421,54,414,52,"initialRoutes"],[421,67,414,65],[421,72,414,70],[422,4,415,2],[422,9,415,7],[422,15,415,13,"config"],[422,21,415,19],[422,25,415,23,"initialRoutes"],[422,38,415,36],[422,40,415,38],[423,6,416,4],[423,10,416,8,"parentScreens"],[423,23,416,21],[423,24,416,22,"length"],[423,30,416,28],[423,35,416,33,"config"],[423,41,416,39],[423,42,416,40,"parentScreens"],[423,55,416,53],[423,56,416,54,"length"],[423,62,416,60],[423,64,416,62],[424,8,417,6],[424,12,417,10,"sameParents"],[424,23,417,21],[424,26,417,24],[424,30,417,28],[425,8,418,6],[425,13,418,11],[425,17,418,15,"i"],[425,18,418,16],[425,21,418,19],[425,22,418,20],[425,24,418,22,"i"],[425,25,418,23],[425,28,418,26,"parentScreens"],[425,41,418,39],[425,42,418,40,"length"],[425,48,418,46],[425,50,418,48,"i"],[425,51,418,49],[425,53,418,51],[425,55,418,53],[426,10,419,8],[426,14,419,12,"parentScreens"],[426,27,419,25],[426,28,419,26,"i"],[426,29,419,27],[426,30,419,28],[426,31,419,29,"localeCompare"],[426,44,419,42],[426,45,419,43,"config"],[426,51,419,49],[426,52,419,50,"parentScreens"],[426,65,419,63],[426,66,419,64,"i"],[426,67,419,65],[426,68,419,66],[426,69,419,67],[426,74,419,72],[426,75,419,73],[426,77,419,75],[427,12,420,10,"sameParents"],[427,23,420,21],[427,26,420,24],[427,31,420,29],[428,12,421,10],[429,10,422,8],[430,8,423,6],[431,8,424,6],[431,12,424,10,"sameParents"],[431,23,424,21],[431,25,424,23],[432,10,425,8],[432,17,425,15,"routeName"],[432,26,425,24],[432,31,425,29,"config"],[432,37,425,35],[432,38,425,36,"initialRouteName"],[432,54,425,52],[432,57,425,55,"config"],[432,63,425,61],[432,64,425,62,"initialRouteName"],[432,80,425,78],[432,83,425,81,"undefined"],[432,92,425,90],[433,8,426,6],[434,6,427,4],[435,4,428,2],[436,4,429,2],[436,11,429,9,"undefined"],[436,20,429,18],[437,2,430,0],[437,3,430,1],[439,2,432,0],[440,2,433,0],[441,2,434,0],[441,8,434,6,"createStateObject"],[441,25,434,23],[441,28,434,26,"createStateObject"],[441,29,434,27,"initialRoute"],[441,41,434,39],[441,43,434,41,"route"],[441,48,434,46],[441,50,434,48,"isEmpty"],[441,57,434,55],[441,62,434,60],[442,4,435,2],[442,8,435,6,"isEmpty"],[442,15,435,13],[442,17,435,15],[443,6,436,4],[443,10,436,8,"initialRoute"],[443,22,436,20],[443,24,436,22],[444,8,437,6],[444,15,437,13],[445,10,438,8,"index"],[445,15,438,13],[445,17,438,15],[445,18,438,16],[446,10,439,8,"routes"],[446,16,439,14],[446,18,439,16],[446,19,439,17],[447,12,440,10,"name"],[447,16,440,14],[447,18,440,16,"initialRoute"],[448,10,441,8],[448,11,441,9],[448,13,441,11,"route"],[448,18,441,16],[449,8,442,6],[449,9,442,7],[450,6,443,4],[450,7,443,5],[450,13,443,11],[451,8,444,6],[451,15,444,13],[452,10,445,8,"routes"],[452,16,445,14],[452,18,445,16],[452,19,445,17,"route"],[452,24,445,22],[453,8,446,6],[453,9,446,7],[454,6,447,4],[455,4,448,2],[455,5,448,3],[455,11,448,9],[456,6,449,4],[456,10,449,8,"initialRoute"],[456,22,449,20],[456,24,449,22],[457,8,450,6],[457,15,450,13],[458,10,451,8,"index"],[458,15,451,13],[458,17,451,15],[458,18,451,16],[459,10,452,8,"routes"],[459,16,452,14],[459,18,452,16],[459,19,452,17],[460,12,453,10,"name"],[460,16,453,14],[460,18,453,16,"initialRoute"],[461,10,454,8],[461,11,454,9],[461,13,454,11],[462,12,455,10],[462,15,455,13,"route"],[462,20,455,18],[463,12,456,10,"state"],[463,17,456,15],[463,19,456,17],[464,14,457,12,"routes"],[464,20,457,18],[464,22,457,20],[465,12,458,10],[466,10,459,8],[466,11,459,9],[467,8,460,6],[467,9,460,7],[468,6,461,4],[468,7,461,5],[468,13,461,11],[469,8,462,6],[469,15,462,13],[470,10,463,8,"routes"],[470,16,463,14],[470,18,463,16],[470,19,463,17],[471,12,464,10],[471,15,464,13,"route"],[471,20,464,18],[472,12,465,10,"state"],[472,17,465,15],[472,19,465,17],[473,14,466,12,"routes"],[473,20,466,18],[473,22,466,20],[474,12,467,10],[475,10,468,8],[475,11,468,9],[476,8,469,6],[476,9,469,7],[477,6,470,4],[478,4,471,2],[479,2,472,0],[479,3,472,1],[480,2,473,0],[480,8,473,6,"createNestedStateObject"],[480,31,473,29],[480,34,473,32,"createNestedStateObject"],[480,35,473,33,"path"],[480,39,473,37],[480,41,473,39,"routes"],[480,47,473,45],[480,49,473,47,"initialRoutes"],[480,62,473,60],[480,64,473,62,"flatConfig"],[480,74,473,72],[480,79,473,77],[481,4,474,2],[481,8,474,6,"route"],[481,13,474,11],[481,16,474,14,"routes"],[481,22,474,20],[481,23,474,21,"shift"],[481,28,474,26],[481,29,474,27],[481,30,474,28],[482,4,475,2],[482,10,475,8,"parentScreens"],[482,23,475,21],[482,26,475,24],[482,28,475,26],[483,4,476,2],[483,8,476,6,"initialRoute"],[483,20,476,18],[483,23,476,21,"findInitialRoute"],[483,39,476,37],[483,40,476,38,"route"],[483,45,476,43],[483,46,476,44,"name"],[483,50,476,48],[483,52,476,50,"parentScreens"],[483,65,476,63],[483,67,476,65,"initialRoutes"],[483,80,476,78],[483,81,476,79],[484,4,477,2,"parentScreens"],[484,17,477,15],[484,18,477,16,"push"],[484,22,477,20],[484,23,477,21,"route"],[484,28,477,26],[484,29,477,27,"name"],[484,33,477,31],[484,34,477,32],[485,4,478,2],[485,10,478,8,"state"],[485,15,478,13],[485,18,478,16,"createStateObject"],[485,35,478,33],[485,36,478,34,"initialRoute"],[485,48,478,46],[485,50,478,48,"route"],[485,55,478,53],[485,57,478,55,"routes"],[485,63,478,61],[485,64,478,62,"length"],[485,70,478,68],[485,75,478,73],[485,76,478,74],[485,77,478,75],[486,4,479,2],[486,8,479,6,"routes"],[486,14,479,12],[486,15,479,13,"length"],[486,21,479,19],[486,24,479,22],[486,25,479,23],[486,27,479,25],[487,6,480,4],[487,10,480,8,"nestedState"],[487,21,480,19],[487,24,480,22,"state"],[487,29,480,27],[488,6,481,4],[488,13,481,11,"route"],[488,18,481,16],[488,21,481,19,"routes"],[488,27,481,25],[488,28,481,26,"shift"],[488,33,481,31],[488,34,481,32],[488,35,481,33],[488,37,481,35],[489,8,482,6,"initialRoute"],[489,20,482,18],[489,23,482,21,"findInitialRoute"],[489,39,482,37],[489,40,482,38,"route"],[489,45,482,43],[489,46,482,44,"name"],[489,50,482,48],[489,52,482,50,"parentScreens"],[489,65,482,63],[489,67,482,65,"initialRoutes"],[489,80,482,78],[489,81,482,79],[490,8,483,6],[490,14,483,12,"nestedStateIndex"],[490,30,483,28],[490,33,483,31,"nestedState"],[490,44,483,42],[490,45,483,43,"index"],[490,50,483,48],[490,54,483,52,"nestedState"],[490,65,483,63],[490,66,483,64,"routes"],[490,72,483,70],[490,73,483,71,"length"],[490,79,483,77],[490,82,483,80],[490,83,483,81],[491,8,484,6,"nestedState"],[491,19,484,17],[491,20,484,18,"routes"],[491,26,484,24],[491,27,484,25,"nestedStateIndex"],[491,43,484,41],[491,44,484,42],[491,45,484,43,"state"],[491,50,484,48],[491,53,484,51,"createStateObject"],[491,70,484,68],[491,71,484,69,"initialRoute"],[491,83,484,81],[491,85,484,83,"route"],[491,90,484,88],[491,92,484,90,"routes"],[491,98,484,96],[491,99,484,97,"length"],[491,105,484,103],[491,110,484,108],[491,111,484,109],[491,112,484,110],[492,8,485,6],[492,12,485,10,"routes"],[492,18,485,16],[492,19,485,17,"length"],[492,25,485,23],[492,28,485,26],[492,29,485,27],[492,31,485,29],[493,10,486,8,"nestedState"],[493,21,486,19],[493,24,486,22,"nestedState"],[493,35,486,33],[493,36,486,34,"routes"],[493,42,486,40],[493,43,486,41,"nestedStateIndex"],[493,59,486,57],[493,60,486,58],[493,61,486,59,"state"],[493,66,486,64],[494,8,487,6],[495,8,488,6,"parentScreens"],[495,21,488,19],[495,22,488,20,"push"],[495,26,488,24],[495,27,488,25,"route"],[495,32,488,30],[495,33,488,31,"name"],[495,37,488,35],[495,38,488,36],[496,6,489,4],[497,4,490,2],[498,4,491,2,"route"],[498,9,491,7],[498,12,491,10],[498,16,491,10,"findFocusedRoute"],[498,50,491,26],[498,52,491,27,"state"],[498,57,491,32],[498,58,491,33],[499,4,492,2,"route"],[499,9,492,7],[499,10,492,8,"path"],[499,14,492,12],[499,17,492,15,"path"],[499,21,492,19],[499,22,492,20,"replace"],[499,29,492,27],[499,30,492,28],[499,35,492,33],[499,37,492,35],[499,39,492,37],[499,40,492,38],[500,4,493,2],[500,10,493,8,"params"],[500,16,493,14],[500,19,493,17,"parseQueryParams"],[500,35,493,33],[500,36,493,34,"path"],[500,40,493,38],[500,42,493,40,"flatConfig"],[500,52,493,50],[500,55,493,53,"findParseConfigForRoute"],[500,78,493,76],[500,79,493,77,"route"],[500,84,493,82],[500,85,493,83,"name"],[500,89,493,87],[500,91,493,89,"flatConfig"],[500,101,493,99],[500,102,493,100],[500,105,493,103,"undefined"],[500,114,493,112],[500,115,493,113],[501,4,494,2],[501,8,494,6,"params"],[501,14,494,12],[501,16,494,14],[502,6,495,4,"route"],[502,11,495,9],[502,12,495,10,"params"],[502,18,495,16],[502,21,495,19],[503,8,496,6],[503,11,496,9,"route"],[503,16,496,14],[503,17,496,15,"params"],[503,23,496,21],[504,8,497,6],[504,11,497,9,"params"],[505,6,498,4],[505,7,498,5],[506,4,499,2],[507,4,500,2],[507,11,500,9,"state"],[507,16,500,14],[508,2,501,0],[508,3,501,1],[509,2,502,0],[509,8,502,6,"parseQueryParams"],[509,24,502,22],[509,27,502,25,"parseQueryParams"],[509,28,502,26,"path"],[509,32,502,30],[509,34,502,32,"parseConfig"],[509,45,502,43],[509,50,502,48],[510,4,503,2],[510,10,503,8,"query"],[510,15,503,13],[510,18,503,16,"path"],[510,22,503,20],[510,23,503,21,"split"],[510,28,503,26],[510,29,503,27],[510,32,503,30],[510,33,503,31],[510,34,503,32],[510,35,503,33],[510,36,503,34],[511,4,504,2],[511,10,504,8,"params"],[511,16,504,14],[511,19,504,17,"queryString"],[511,30,504,28],[511,31,504,29,"parse"],[511,36,504,34],[511,37,504,35,"query"],[511,42,504,40],[511,43,504,41],[512,4,505,2],[512,8,505,6,"parseConfig"],[512,19,505,17],[512,21,505,19],[513,6,506,4,"Object"],[513,12,506,10],[513,13,506,11,"keys"],[513,17,506,15],[513,18,506,16,"params"],[513,24,506,22],[513,25,506,23],[513,26,506,24,"forEach"],[513,33,506,31],[513,34,506,32,"name"],[513,38,506,36],[513,42,506,40],[514,8,507,6],[514,12,507,10,"Object"],[514,18,507,16],[514,19,507,17,"hasOwnProperty"],[514,33,507,31],[514,34,507,32,"call"],[514,38,507,36],[514,39,507,37,"parseConfig"],[514,50,507,48],[514,52,507,50,"name"],[514,56,507,54],[514,57,507,55],[514,61,507,59],[514,68,507,66,"params"],[514,74,507,72],[514,75,507,73,"name"],[514,79,507,77],[514,80,507,78],[514,85,507,83],[514,93,507,91],[514,95,507,93],[515,10,508,8,"params"],[515,16,508,14],[515,17,508,15,"name"],[515,21,508,19],[515,22,508,20],[515,25,508,23,"parseConfig"],[515,36,508,34],[515,37,508,35,"name"],[515,41,508,39],[515,42,508,40],[515,43,508,41,"params"],[515,49,508,47],[515,50,508,48,"name"],[515,54,508,52],[515,55,508,53],[515,56,508,54],[516,8,509,6],[517,6,510,4],[517,7,510,5],[517,8,510,6],[518,4,511,2],[519,4,512,2],[519,11,512,9,"Object"],[519,17,512,15],[519,18,512,16,"keys"],[519,22,512,20],[519,23,512,21,"params"],[519,29,512,27],[519,30,512,28],[519,31,512,29,"length"],[519,37,512,35],[519,40,512,38,"params"],[519,46,512,44],[519,49,512,47,"undefined"],[519,58,512,56],[520,2,513,0],[520,3,513,1],[521,0,513,2],[521,3]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","configs.find$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getSortedNormalizedConfigs","Object.keys.map$argument_0","concat.sort$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","matchAgainstConfigs","config.routeNames.map$argument_0","Object.entries.map$argument_0","routeConfig.params.find$argument_0","Object.entries.map.filter$argument_0","Object.entries.map.filter.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","getPatternParts.map$argument_0","parts.map$argument_0","parts.map.filter$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;OC8B;4DC4B;KDK;+BES,0CF;gEGE;QHE;CDuB;AKM;CLO;AMC;CNa;AOC;CPS;AQC;+CCE,uED,QE;GF2E;CRC;AWC;iBCE;uDCQ,sBD,YE,sBF;GDQ;CXC;AeC;qBCC;IDI;CfC;4BiBC;qCCa;yCfC;SeG;yGCC;gDCE,wBD;SDK,SG,gBH,MI;SJO;ODU;CjBS;gCuBC;0CCgE;ODG;CvBK;yByBC;4CCQ;MDG;yDEE;GFM;6BEC,gBF;2BEC;UFI,SG,gBH;CzBS;gC6BC;C7BO;yB8BG;C9BgB;0B+BI;C/BsC;gCgCC;ChC4B;yBiCC;gCTI;KSI;CjCG"}},"type":"js/module"}]}