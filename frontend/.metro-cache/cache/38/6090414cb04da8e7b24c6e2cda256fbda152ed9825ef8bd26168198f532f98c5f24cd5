{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.getFilename = getFilename;\n  exports.getFileExtension = getFileExtension;\n  exports.getManifestBaseUrl = getManifestBaseUrl;\n  function getFilename(url) {\n    const {\n      pathname,\n      searchParams\n    } = new URL(url, 'https://e');\n    // When attached to a dev server, we use `unstable_path` to represent the file path. This ensures\n    // the file name is not canonicalized by the browser.\n    // NOTE(EvanBacon): This is technically not tied to `__DEV__` as it's possible to use this while bundling in production\n    // mode.\n    if (__DEV__) {\n      if (searchParams.has('unstable_path')) {\n        const encodedFilePath = decodeURIComponent(searchParams.get('unstable_path'));\n        return getBasename(encodedFilePath);\n      }\n    }\n    return getBasename(pathname);\n  }\n  function getBasename(pathname) {\n    return pathname.substring(pathname.lastIndexOf('/') + 1);\n  }\n  function getFileExtension(url) {\n    const filename = getFilename(url);\n    const dotIndex = filename.lastIndexOf('.');\n    // Ignore leading dots for hidden files\n    return dotIndex > 0 ? filename.substring(dotIndex) : '';\n  }\n  /**\n   * Returns the base URL from a manifest's URL. For example, given a manifest hosted at\n   * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query\n   * parameters and fragments also are removed.\n   *\n   * For an Expo-hosted project with a manifest hosted at https://exp.host/@user/project/index.exp, the\n   * base URL would be https://exp.host/@user/project.\n   *\n   * We also normalize the \"exp\" protocol to \"http\" to handle internal URLs with the Expo schemes used\n   * to tell the OS to open the URLs in the the Expo client.\n   */\n  function getManifestBaseUrl(manifestUrl) {\n    const urlObject = new URL(manifestUrl);\n    let nextProtocol = urlObject.protocol;\n    // Change the scheme to http(s) if it is exp(s)\n    if (nextProtocol === 'exp:') {\n      nextProtocol = 'http:';\n    } else if (nextProtocol === 'exps:') {\n      nextProtocol = 'https:';\n    }\n    urlObject.protocol = nextProtocol;\n    // Trim filename, query parameters, and fragment, if any\n    const directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n    urlObject.pathname = directory;\n    urlObject.search = '';\n    urlObject.hash = '';\n    // The URL spec doesn't allow for changing the protocol to `http` or `https`\n    // without a port set so instead, we'll just swap the protocol manually.\n    return urlObject.protocol !== nextProtocol ? urlObject.href.replace(urlObject.protocol, nextProtocol) : urlObject.href;\n  }\n});","lineCount":66,"map":[[7,2,1,0,"exports"],[7,9,1,0],[7,10,1,0,"getFilename"],[7,21,1,0],[7,24,1,0,"getFilename"],[7,35,1,0],[8,2,18,0,"exports"],[8,9,18,0],[8,10,18,0,"getFileExtension"],[8,26,18,0],[8,29,18,0,"getFileExtension"],[8,45,18,0],[9,2,35,0,"exports"],[9,9,35,0],[9,10,35,0,"getManifestBaseUrl"],[9,28,35,0],[9,31,35,0,"getManifestBaseUrl"],[9,49,35,0],[10,2,1,7],[10,11,1,16,"getFilename"],[10,22,1,27,"getFilename"],[10,23,1,28,"url"],[10,26,1,31],[10,28,1,33],[11,4,2,4],[11,10,2,10],[12,6,2,12,"pathname"],[12,14,2,20],[13,6,2,22,"searchParams"],[14,4,2,35],[14,5,2,36],[14,8,2,39],[14,12,2,43,"URL"],[14,15,2,46],[14,16,2,47,"url"],[14,19,2,50],[14,21,2,52],[14,32,2,63],[14,33,2,64],[15,4,3,4],[16,4,4,4],[17,4,5,4],[18,4,6,4],[19,4,7,4],[19,8,7,8,"__DEV__"],[19,15,7,15],[19,17,7,17],[20,6,8,8],[20,10,8,12,"searchParams"],[20,22,8,24],[20,23,8,25,"has"],[20,26,8,28],[20,27,8,29],[20,42,8,44],[20,43,8,45],[20,45,8,47],[21,8,9,12],[21,14,9,18,"encodedFilePath"],[21,29,9,33],[21,32,9,36,"decodeURIComponent"],[21,50,9,54],[21,51,9,55,"searchParams"],[21,63,9,67],[21,64,9,68,"get"],[21,67,9,71],[21,68,9,72],[21,83,9,87],[21,84,9,88],[21,85,9,89],[22,8,10,12],[22,15,10,19,"getBasename"],[22,26,10,30],[22,27,10,31,"encodedFilePath"],[22,42,10,46],[22,43,10,47],[23,6,11,8],[24,4,12,4],[25,4,13,4],[25,11,13,11,"getBasename"],[25,22,13,22],[25,23,13,23,"pathname"],[25,31,13,31],[25,32,13,32],[26,2,14,0],[27,2,15,0],[27,11,15,9,"getBasename"],[27,22,15,20,"getBasename"],[27,23,15,21,"pathname"],[27,31,15,29],[27,33,15,31],[28,4,16,4],[28,11,16,11,"pathname"],[28,19,16,19],[28,20,16,20,"substring"],[28,29,16,29],[28,30,16,30,"pathname"],[28,38,16,38],[28,39,16,39,"lastIndexOf"],[28,50,16,50],[28,51,16,51],[28,54,16,54],[28,55,16,55],[28,58,16,58],[28,59,16,59],[28,60,16,60],[29,2,17,0],[30,2,18,7],[30,11,18,16,"getFileExtension"],[30,27,18,32,"getFileExtension"],[30,28,18,33,"url"],[30,31,18,36],[30,33,18,38],[31,4,19,4],[31,10,19,10,"filename"],[31,18,19,18],[31,21,19,21,"getFilename"],[31,32,19,32],[31,33,19,33,"url"],[31,36,19,36],[31,37,19,37],[32,4,20,4],[32,10,20,10,"dotIndex"],[32,18,20,18],[32,21,20,21,"filename"],[32,29,20,29],[32,30,20,30,"lastIndexOf"],[32,41,20,41],[32,42,20,42],[32,45,20,45],[32,46,20,46],[33,4,21,4],[34,4,22,4],[34,11,22,11,"dotIndex"],[34,19,22,19],[34,22,22,22],[34,23,22,23],[34,26,22,26,"filename"],[34,34,22,34],[34,35,22,35,"substring"],[34,44,22,44],[34,45,22,45,"dotIndex"],[34,53,22,53],[34,54,22,54],[34,57,22,57],[34,59,22,59],[35,2,23,0],[36,2,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,2,35,7],[47,11,35,16,"getManifestBaseUrl"],[47,29,35,34,"getManifestBaseUrl"],[47,30,35,35,"manifestUrl"],[47,41,35,46],[47,43,35,48],[48,4,36,4],[48,10,36,10,"urlObject"],[48,19,36,19],[48,22,36,22],[48,26,36,26,"URL"],[48,29,36,29],[48,30,36,30,"manifestUrl"],[48,41,36,41],[48,42,36,42],[49,4,37,4],[49,8,37,8,"nextProtocol"],[49,20,37,20],[49,23,37,23,"urlObject"],[49,32,37,32],[49,33,37,33,"protocol"],[49,41,37,41],[50,4,38,4],[51,4,39,4],[51,8,39,8,"nextProtocol"],[51,20,39,20],[51,25,39,25],[51,31,39,31],[51,33,39,33],[52,6,40,8,"nextProtocol"],[52,18,40,20],[52,21,40,23],[52,28,40,30],[53,4,41,4],[53,5,41,5],[53,11,42,9],[53,15,42,13,"nextProtocol"],[53,27,42,25],[53,32,42,30],[53,39,42,37],[53,41,42,39],[54,6,43,8,"nextProtocol"],[54,18,43,20],[54,21,43,23],[54,29,43,31],[55,4,44,4],[56,4,45,4,"urlObject"],[56,13,45,13],[56,14,45,14,"protocol"],[56,22,45,22],[56,25,45,25,"nextProtocol"],[56,37,45,37],[57,4,46,4],[58,4,47,4],[58,10,47,10,"directory"],[58,19,47,19],[58,22,47,22,"urlObject"],[58,31,47,31],[58,32,47,32,"pathname"],[58,40,47,40],[58,41,47,41,"substring"],[58,50,47,50],[58,51,47,51],[58,52,47,52],[58,54,47,54,"urlObject"],[58,63,47,63],[58,64,47,64,"pathname"],[58,72,47,72],[58,73,47,73,"lastIndexOf"],[58,84,47,84],[58,85,47,85],[58,88,47,88],[58,89,47,89],[58,92,47,92],[58,93,47,93],[58,94,47,94],[59,4,48,4,"urlObject"],[59,13,48,13],[59,14,48,14,"pathname"],[59,22,48,22],[59,25,48,25,"directory"],[59,34,48,34],[60,4,49,4,"urlObject"],[60,13,49,13],[60,14,49,14,"search"],[60,20,49,20],[60,23,49,23],[60,25,49,25],[61,4,50,4,"urlObject"],[61,13,50,13],[61,14,50,14,"hash"],[61,18,50,18],[61,21,50,21],[61,23,50,23],[62,4,51,4],[63,4,52,4],[64,4,53,4],[64,11,53,11,"urlObject"],[64,20,53,20],[64,21,53,21,"protocol"],[64,29,53,29],[64,34,53,34,"nextProtocol"],[64,46,53,46],[64,49,54,10,"urlObject"],[64,58,54,19],[64,59,54,20,"href"],[64,63,54,24],[64,64,54,25,"replace"],[64,71,54,32],[64,72,54,33,"urlObject"],[64,81,54,42],[64,82,54,43,"protocol"],[64,90,54,51],[64,92,54,53,"nextProtocol"],[64,104,54,65],[64,105,54,66],[64,108,55,10,"urlObject"],[64,117,55,19],[64,118,55,20,"href"],[64,122,55,24],[65,2,56,0],[66,0,56,1],[66,3]],"functionMap":{"names":["<global>","getFilename","getBasename","getFileExtension","getManifestBaseUrl"],"mappings":"AAA,OC;CDa;AEC;CFE;OGC;CHK;OIY;CJqB"},"hasCjsExports":false},"type":"js/module"}]}