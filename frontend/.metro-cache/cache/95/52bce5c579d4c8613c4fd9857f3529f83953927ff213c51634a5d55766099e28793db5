{"dependencies":[{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":43,"index":58}}],"key":"SN8WVal79eAEDQEpzmVqVAy5JJs=","exportNames":["*"],"imports":1}},{"name":"./BaseRouter.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":59},"end":{"line":4,"column":45,"index":104}}],"key":"dJts27xOtIr7LbP/D7m0z2vzxHI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"TabActions\", {\n    enumerable: true,\n    get: function () {\n      return TabActions;\n    }\n  });\n  exports.TabRouter = TabRouter;\n  var _nanoidNonSecure = require(_dependencyMap[0], \"nanoid/non-secure\");\n  var _BaseRouterJs = require(_dependencyMap[1], \"./BaseRouter.js\");\n  const TYPE_ROUTE = 'route';\n  const TabActions = {\n    jumpTo(name, params) {\n      return {\n        type: 'JUMP_TO',\n        payload: {\n          name,\n          params\n        }\n      };\n    }\n  };\n  const getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n    const history = [{\n      type: TYPE_ROUTE,\n      key: routes[index].key\n    }];\n    let initialRouteIndex;\n    switch (backBehavior) {\n      case 'order':\n        for (let i = index; i > 0; i--) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[i - 1].key\n          });\n        }\n        break;\n      case 'firstRoute':\n        if (index !== 0) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[0].key\n          });\n        }\n        break;\n      case 'initialRoute':\n        initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n        initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n        if (index !== initialRouteIndex) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[initialRouteIndex].key\n          });\n        }\n        break;\n      case 'history':\n      case 'fullHistory':\n        // The history will fill up on navigation\n        break;\n    }\n    return history;\n  };\n  const changeIndex = (state, index, backBehavior, initialRouteName) => {\n    let history = state.history;\n    if (backBehavior === 'history' || backBehavior === 'fullHistory') {\n      const currentRouteKey = state.routes[index].key;\n      if (backBehavior === 'history') {\n        // Remove the existing key from the history to de-duplicate it\n        history = history.filter(it => it.type === 'route' ? it.key !== currentRouteKey : false);\n      } else if (backBehavior === 'fullHistory') {\n        const lastHistoryRouteItemIndex = history.findLastIndex(item => item.type === 'route');\n        if (currentRouteKey === history[lastHistoryRouteItemIndex]?.key) {\n          // For full-history, only remove if it matches the last route\n          // Useful for drawer, if current route was in history, then drawer state changed\n          // Then we only need to move the route to the front\n          history = [...history.slice(0, lastHistoryRouteItemIndex), ...history.slice(lastHistoryRouteItemIndex + 1)];\n        }\n      }\n      history = history.concat({\n        type: TYPE_ROUTE,\n        key: currentRouteKey\n      });\n    } else {\n      history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n    }\n    return Object.assign({}, state, {\n      index,\n      history\n    });\n  };\n  function TabRouter({\n    initialRouteName,\n    backBehavior = 'firstRoute'\n  }) {\n    const router = Object.assign({}, _BaseRouterJs.BaseRouter, {\n      type: 'tab',\n      getInitialState({\n        routeNames,\n        routeParamList\n      }) {\n        const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n        const routes = routeNames.map(name => ({\n          name,\n          key: `${name}-${(0, _nanoidNonSecure.nanoid)()}`,\n          params: routeParamList[name]\n        }));\n        const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        return {\n          stale: false,\n          type: 'tab',\n          key: `tab-${(0, _nanoidNonSecure.nanoid)()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n          preloadedRouteKeys: []\n        };\n      },\n      getRehydratedState(partialState, {\n        routeNames,\n        routeParamList\n      }) {\n        const state = partialState;\n        if (state.stale === false) {\n          return state;\n        }\n        const routes = routeNames.map(name => {\n          const route = state.routes.find(r => r.name === name);\n          return Object.assign({}, route, {\n            name,\n            key: route && route.name === name && route.key ? route.key : `${name}-${(0, _nanoidNonSecure.nanoid)()}`,\n            params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined\n          });\n        });\n        const index = Math.min(Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0), routes.length - 1);\n        const routeKeys = routes.map(route => route.key);\n        const history = state.history?.filter(it => routeKeys.includes(it.key)) ?? [];\n        return changeIndex({\n          stale: false,\n          type: 'tab',\n          key: `tab-${(0, _nanoidNonSecure.nanoid)()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n          preloadedRouteKeys: state.preloadedRouteKeys?.filter(key => routeKeys.includes(key)) ?? []\n        }, index, backBehavior, initialRouteName);\n      },\n      getStateForRouteNamesChange(state, {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      }) {\n        const routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n          name,\n          key: `${name}-${(0, _nanoidNonSecure.nanoid)()}`,\n          params: routeParamList[name]\n        });\n        const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n        let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        it => it.type !== 'route' || routes.find(r => r.key === it.key));\n        if (!history.length) {\n          history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        }\n        return Object.assign({}, state, {\n          history,\n          routeNames,\n          routes,\n          index\n        });\n      },\n      getStateForRouteFocus(state, key) {\n        const index = state.routes.findIndex(r => r.key === key);\n        if (index === -1 || index === state.index) {\n          return state;\n        }\n        return changeIndex(state, index, backBehavior, initialRouteName);\n      },\n      getStateForAction(state, action, {\n        routeParamList,\n        routeGetIdList\n      }) {\n        switch (action.type) {\n          case 'JUMP_TO':\n          case 'NAVIGATE':\n          case 'NAVIGATE_DEPRECATED':\n            {\n              const index = state.routes.findIndex(route => route.name === action.payload.name);\n              if (index === -1) {\n                return null;\n              }\n              const updatedState = changeIndex(Object.assign({}, state, {\n                routes: state.routes.map(route => {\n                  if (route.name !== action.payload.name) {\n                    return route;\n                  }\n                  const getId = routeGetIdList[route.name];\n                  const currentId = getId?.({\n                    params: route.params\n                  });\n                  const nextId = getId?.({\n                    params: action.payload.params\n                  });\n                  const key = currentId === nextId ? route.key : `${route.name}-${(0, _nanoidNonSecure.nanoid)()}`;\n                  let params;\n                  if ((action.type === 'NAVIGATE' || action.type === 'NAVIGATE_DEPRECATED') && action.payload.merge && currentId === nextId) {\n                    params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params, action.payload.params) : route.params;\n                  } else {\n                    params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;\n                  }\n                  const path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                  return params !== route.params || path !== route.path ? Object.assign({}, route, {\n                    key,\n                    path,\n                    params\n                  }) : route;\n                })\n              }), index, backBehavior, initialRouteName);\n              return Object.assign({}, updatedState, {\n                preloadedRouteKeys: updatedState.preloadedRouteKeys.filter(key => key !== state.routes[updatedState.index].key)\n              });\n            }\n          case 'GO_BACK':\n            {\n              if (state.history.length === 1) {\n                return null;\n              }\n              const previousKey = state.history[state.history.length - 2]?.key;\n              const index = state.routes.findLastIndex(route => route.key === previousKey);\n              if (index === -1) {\n                return null;\n              }\n              return Object.assign({}, state, {\n                preloadedRouteKeys: state.preloadedRouteKeys.filter(key => key !== state.routes[index].key),\n                history: state.history.slice(0, -1),\n                index\n              });\n            }\n          case 'PRELOAD':\n            {\n              const routeIndex = state.routes.findIndex(route => route.name === action.payload.name);\n              if (routeIndex === -1) {\n                return null;\n              }\n              const route = state.routes[routeIndex];\n              const getId = routeGetIdList[route.name];\n              const currentId = getId?.({\n                params: route.params\n              });\n              const nextId = getId?.({\n                params: action.payload.params\n              });\n              const key = currentId === nextId ? route.key : `${route.name}-${(0, _nanoidNonSecure.nanoid)()}`;\n              const params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : undefined;\n              const newRoute = params !== route.params ? Object.assign({}, route, {\n                key,\n                params\n              }) : route;\n              return Object.assign({}, state, {\n                preloadedRouteKeys: state.preloadedRouteKeys.filter(key => key !== route.key).concat(newRoute.key),\n                routes: state.routes.map((route, index) => index === routeIndex ? newRoute : route),\n                history: key === route.key ? state.history : state.history.filter(record => record.key !== route.key)\n              });\n            }\n          default:\n            return _BaseRouterJs.BaseRouter.getStateForAction(state, action);\n        }\n      },\n      actionCreators: TabActions\n    });\n    return router;\n  }\n});","lineCount":279,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,6,0,"Object"],[7,8,6,0],[7,9,6,0,"defineProperty"],[7,23,6,0],[7,24,6,0,"exports"],[7,31,6,0],[8,4,6,0,"enumerable"],[8,14,6,0],[9,4,6,0,"get"],[9,7,6,0],[9,18,6,0,"get"],[9,19,6,0],[10,6,6,0],[10,13,6,0,"TabActions"],[10,23,6,0],[11,4,6,0],[12,2,6,0],[13,2,86,0,"exports"],[13,9,86,0],[13,10,86,0,"TabRouter"],[13,19,86,0],[13,22,86,0,"TabRouter"],[13,31,86,0],[14,2,3,0],[14,6,3,0,"_nanoidNonSecure"],[14,22,3,0],[14,25,3,0,"require"],[14,32,3,0],[14,33,3,0,"_dependencyMap"],[14,47,3,0],[15,2,4,0],[15,6,4,0,"_BaseRouterJs"],[15,19,4,0],[15,22,4,0,"require"],[15,29,4,0],[15,30,4,0,"_dependencyMap"],[15,44,4,0],[16,2,5,0],[16,8,5,6,"TYPE_ROUTE"],[16,18,5,16],[16,21,5,19],[16,28,5,26],[17,2,6,7],[17,8,6,13,"TabActions"],[17,18,6,23],[17,21,6,26],[18,4,7,2,"jumpTo"],[18,10,7,8,"jumpTo"],[18,11,7,9,"name"],[18,15,7,13],[18,17,7,15,"params"],[18,23,7,21],[18,25,7,23],[19,6,8,4],[19,13,8,11],[20,8,9,6,"type"],[20,12,9,10],[20,14,9,12],[20,23,9,21],[21,8,10,6,"payload"],[21,15,10,13],[21,17,10,15],[22,10,11,8,"name"],[22,14,11,12],[23,10,12,8,"params"],[24,8,13,6],[25,6,14,4],[25,7,14,5],[26,4,15,2],[27,2,16,0],[27,3,16,1],[28,2,17,0],[28,8,17,6,"getRouteHistory"],[28,23,17,21],[28,26,17,24,"getRouteHistory"],[28,27,17,25,"routes"],[28,33,17,31],[28,35,17,33,"index"],[28,40,17,38],[28,42,17,40,"backBehavior"],[28,54,17,52],[28,56,17,54,"initialRouteName"],[28,72,17,70],[28,77,17,75],[29,4,18,2],[29,10,18,8,"history"],[29,17,18,15],[29,20,18,18],[29,21,18,19],[30,6,19,4,"type"],[30,10,19,8],[30,12,19,10,"TYPE_ROUTE"],[30,22,19,20],[31,6,20,4,"key"],[31,9,20,7],[31,11,20,9,"routes"],[31,17,20,15],[31,18,20,16,"index"],[31,23,20,21],[31,24,20,22],[31,25,20,23,"key"],[32,4,21,2],[32,5,21,3],[32,6,21,4],[33,4,22,2],[33,8,22,6,"initialRouteIndex"],[33,25,22,23],[34,4,23,2],[34,12,23,10,"backBehavior"],[34,24,23,22],[35,6,24,4],[35,11,24,9],[35,18,24,16],[36,8,25,6],[36,13,25,11],[36,17,25,15,"i"],[36,18,25,16],[36,21,25,19,"index"],[36,26,25,24],[36,28,25,26,"i"],[36,29,25,27],[36,32,25,30],[36,33,25,31],[36,35,25,33,"i"],[36,36,25,34],[36,38,25,36],[36,40,25,38],[37,10,26,8,"history"],[37,17,26,15],[37,18,26,16,"unshift"],[37,25,26,23],[37,26,26,24],[38,12,27,10,"type"],[38,16,27,14],[38,18,27,16,"TYPE_ROUTE"],[38,28,27,26],[39,12,28,10,"key"],[39,15,28,13],[39,17,28,15,"routes"],[39,23,28,21],[39,24,28,22,"i"],[39,25,28,23],[39,28,28,26],[39,29,28,27],[39,30,28,28],[39,31,28,29,"key"],[40,10,29,8],[40,11,29,9],[40,12,29,10],[41,8,30,6],[42,8,31,6],[43,6,32,4],[43,11,32,9],[43,23,32,21],[44,8,33,6],[44,12,33,10,"index"],[44,17,33,15],[44,22,33,20],[44,23,33,21],[44,25,33,23],[45,10,34,8,"history"],[45,17,34,15],[45,18,34,16,"unshift"],[45,25,34,23],[45,26,34,24],[46,12,35,10,"type"],[46,16,35,14],[46,18,35,16,"TYPE_ROUTE"],[46,28,35,26],[47,12,36,10,"key"],[47,15,36,13],[47,17,36,15,"routes"],[47,23,36,21],[47,24,36,22],[47,25,36,23],[47,26,36,24],[47,27,36,25,"key"],[48,10,37,8],[48,11,37,9],[48,12,37,10],[49,8,38,6],[50,8,39,6],[51,6,40,4],[51,11,40,9],[51,25,40,23],[52,8,41,6,"initialRouteIndex"],[52,25,41,23],[52,28,41,26,"routes"],[52,34,41,32],[52,35,41,33,"findIndex"],[52,44,41,42],[52,45,41,43,"route"],[52,50,41,48],[52,54,41,52,"route"],[52,59,41,57],[52,60,41,58,"name"],[52,64,41,62],[52,69,41,67,"initialRouteName"],[52,85,41,83],[52,86,41,84],[53,8,42,6,"initialRouteIndex"],[53,25,42,23],[53,28,42,26,"initialRouteIndex"],[53,45,42,43],[53,50,42,48],[53,51,42,49],[53,52,42,50],[53,55,42,53],[53,56,42,54],[53,59,42,57,"initialRouteIndex"],[53,76,42,74],[54,8,43,6],[54,12,43,10,"index"],[54,17,43,15],[54,22,43,20,"initialRouteIndex"],[54,39,43,37],[54,41,43,39],[55,10,44,8,"history"],[55,17,44,15],[55,18,44,16,"unshift"],[55,25,44,23],[55,26,44,24],[56,12,45,10,"type"],[56,16,45,14],[56,18,45,16,"TYPE_ROUTE"],[56,28,45,26],[57,12,46,10,"key"],[57,15,46,13],[57,17,46,15,"routes"],[57,23,46,21],[57,24,46,22,"initialRouteIndex"],[57,41,46,39],[57,42,46,40],[57,43,46,41,"key"],[58,10,47,8],[58,11,47,9],[58,12,47,10],[59,8,48,6],[60,8,49,6],[61,6,50,4],[61,11,50,9],[61,20,50,18],[62,6,51,4],[62,11,51,9],[62,24,51,22],[63,8,52,6],[64,8,53,6],[65,4,54,2],[66,4,55,2],[66,11,55,9,"history"],[66,18,55,16],[67,2,56,0],[67,3,56,1],[68,2,57,0],[68,8,57,6,"changeIndex"],[68,19,57,17],[68,22,57,20,"changeIndex"],[68,23,57,21,"state"],[68,28,57,26],[68,30,57,28,"index"],[68,35,57,33],[68,37,57,35,"backBehavior"],[68,49,57,47],[68,51,57,49,"initialRouteName"],[68,67,57,65],[68,72,57,70],[69,4,58,2],[69,8,58,6,"history"],[69,15,58,13],[69,18,58,16,"state"],[69,23,58,21],[69,24,58,22,"history"],[69,31,58,29],[70,4,59,2],[70,8,59,6,"backBehavior"],[70,20,59,18],[70,25,59,23],[70,34,59,32],[70,38,59,36,"backBehavior"],[70,50,59,48],[70,55,59,53],[70,68,59,66],[70,70,59,68],[71,6,60,4],[71,12,60,10,"currentRouteKey"],[71,27,60,25],[71,30,60,28,"state"],[71,35,60,33],[71,36,60,34,"routes"],[71,42,60,40],[71,43,60,41,"index"],[71,48,60,46],[71,49,60,47],[71,50,60,48,"key"],[71,53,60,51],[72,6,61,4],[72,10,61,8,"backBehavior"],[72,22,61,20],[72,27,61,25],[72,36,61,34],[72,38,61,36],[73,8,62,6],[74,8,63,6,"history"],[74,15,63,13],[74,18,63,16,"history"],[74,25,63,23],[74,26,63,24,"filter"],[74,32,63,30],[74,33,63,31,"it"],[74,35,63,33],[74,39,63,37,"it"],[74,41,63,39],[74,42,63,40,"type"],[74,46,63,44],[74,51,63,49],[74,58,63,56],[74,61,63,59,"it"],[74,63,63,61],[74,64,63,62,"key"],[74,67,63,65],[74,72,63,70,"currentRouteKey"],[74,87,63,85],[74,90,63,88],[74,95,63,93],[74,96,63,94],[75,6,64,4],[75,7,64,5],[75,13,64,11],[75,17,64,15,"backBehavior"],[75,29,64,27],[75,34,64,32],[75,47,64,45],[75,49,64,47],[76,8,65,6],[76,14,65,12,"lastHistoryRouteItemIndex"],[76,39,65,37],[76,42,65,40,"history"],[76,49,65,47],[76,50,65,48,"findLastIndex"],[76,63,65,61],[76,64,65,62,"item"],[76,68,65,66],[76,72,65,70,"item"],[76,76,65,74],[76,77,65,75,"type"],[76,81,65,79],[76,86,65,84],[76,93,65,91],[76,94,65,92],[77,8,66,6],[77,12,66,10,"currentRouteKey"],[77,27,66,25],[77,32,66,30,"history"],[77,39,66,37],[77,40,66,38,"lastHistoryRouteItemIndex"],[77,65,66,63],[77,66,66,64],[77,68,66,66,"key"],[77,71,66,69],[77,73,66,71],[78,10,67,8],[79,10,68,8],[80,10,69,8],[81,10,70,8,"history"],[81,17,70,15],[81,20,70,18],[81,21,70,19],[81,24,70,22,"history"],[81,31,70,29],[81,32,70,30,"slice"],[81,37,70,35],[81,38,70,36],[81,39,70,37],[81,41,70,39,"lastHistoryRouteItemIndex"],[81,66,70,64],[81,67,70,65],[81,69,70,67],[81,72,70,70,"history"],[81,79,70,77],[81,80,70,78,"slice"],[81,85,70,83],[81,86,70,84,"lastHistoryRouteItemIndex"],[81,111,70,109],[81,114,70,112],[81,115,70,113],[81,116,70,114],[81,117,70,115],[82,8,71,6],[83,6,72,4],[84,6,73,4,"history"],[84,13,73,11],[84,16,73,14,"history"],[84,23,73,21],[84,24,73,22,"concat"],[84,30,73,28],[84,31,73,29],[85,8,74,6,"type"],[85,12,74,10],[85,14,74,12,"TYPE_ROUTE"],[85,24,74,22],[86,8,75,6,"key"],[86,11,75,9],[86,13,75,11,"currentRouteKey"],[87,6,76,4],[87,7,76,5],[87,8,76,6],[88,4,77,2],[88,5,77,3],[88,11,77,9],[89,6,78,4,"history"],[89,13,78,11],[89,16,78,14,"getRouteHistory"],[89,31,78,29],[89,32,78,30,"state"],[89,37,78,35],[89,38,78,36,"routes"],[89,44,78,42],[89,46,78,44,"index"],[89,51,78,49],[89,53,78,51,"backBehavior"],[89,65,78,63],[89,67,78,65,"initialRouteName"],[89,83,78,81],[89,84,78,82],[90,4,79,2],[91,4,80,2],[91,11,80,2,"Object"],[91,17,80,2],[91,18,80,2,"assign"],[91,24,80,2],[91,29,81,7,"state"],[91,34,81,12],[92,6,82,4,"index"],[92,11,82,9],[93,6,83,4,"history"],[94,4,83,11],[95,2,85,0],[95,3,85,1],[96,2,86,7],[96,11,86,16,"TabRouter"],[96,20,86,25,"TabRouter"],[96,21,86,26],[97,4,87,2,"initialRouteName"],[97,20,87,18],[98,4,88,2,"backBehavior"],[98,16,88,14],[98,19,88,17],[99,2,89,0],[99,3,89,1],[99,5,89,3],[100,4,90,2],[100,10,90,8,"router"],[100,16,90,14],[100,19,90,14,"Object"],[100,25,90,14],[100,26,90,14,"assign"],[100,32,90,14],[100,37,91,7,"BaseRouter"],[100,50,91,17],[100,51,91,17,"BaseRouter"],[100,61,91,17],[101,6,92,4,"type"],[101,10,92,8],[101,12,92,10],[101,17,92,15],[102,6,93,4,"getInitialState"],[102,21,93,19,"getInitialState"],[102,22,93,20],[103,8,94,6,"routeNames"],[103,18,94,16],[104,8,95,6,"routeParamList"],[105,6,96,4],[105,7,96,5],[105,9,96,7],[106,8,97,6],[106,14,97,12,"index"],[106,19,97,17],[106,22,97,20,"initialRouteName"],[106,38,97,36],[106,43,97,41,"undefined"],[106,52,97,50],[106,56,97,54,"routeNames"],[106,66,97,64],[106,67,97,65,"includes"],[106,75,97,73],[106,76,97,74,"initialRouteName"],[106,92,97,90],[106,93,97,91],[106,96,97,94,"routeNames"],[106,106,97,104],[106,107,97,105,"indexOf"],[106,114,97,112],[106,115,97,113,"initialRouteName"],[106,131,97,129],[106,132,97,130],[106,135,97,133],[106,136,97,134],[107,8,98,6],[107,14,98,12,"routes"],[107,20,98,18],[107,23,98,21,"routeNames"],[107,33,98,31],[107,34,98,32,"map"],[107,37,98,35],[107,38,98,36,"name"],[107,42,98,40],[107,47,98,45],[108,10,99,8,"name"],[108,14,99,12],[109,10,100,8,"key"],[109,13,100,11],[109,15,100,13],[109,18,100,16,"name"],[109,22,100,20],[109,26,100,24],[109,30,100,24,"nanoid"],[109,46,100,30],[109,47,100,30,"nanoid"],[109,53,100,30],[109,55,100,31],[109,56,100,32],[109,58,100,34],[110,10,101,8,"params"],[110,16,101,14],[110,18,101,16,"routeParamList"],[110,32,101,30],[110,33,101,31,"name"],[110,37,101,35],[111,8,102,6],[111,9,102,7],[111,10,102,8],[111,11,102,9],[112,8,103,6],[112,14,103,12,"history"],[112,21,103,19],[112,24,103,22,"getRouteHistory"],[112,39,103,37],[112,40,103,38,"routes"],[112,46,103,44],[112,48,103,46,"index"],[112,53,103,51],[112,55,103,53,"backBehavior"],[112,67,103,65],[112,69,103,67,"initialRouteName"],[112,85,103,83],[112,86,103,84],[113,8,104,6],[113,15,104,13],[114,10,105,8,"stale"],[114,15,105,13],[114,17,105,15],[114,22,105,20],[115,10,106,8,"type"],[115,14,106,12],[115,16,106,14],[115,21,106,19],[116,10,107,8,"key"],[116,13,107,11],[116,15,107,13],[116,22,107,20],[116,26,107,20,"nanoid"],[116,42,107,26],[116,43,107,26,"nanoid"],[116,49,107,26],[116,51,107,27],[116,52,107,28],[116,54,107,30],[117,10,108,8,"index"],[117,15,108,13],[118,10,109,8,"routeNames"],[118,20,109,18],[119,10,110,8,"history"],[119,17,110,15],[120,10,111,8,"routes"],[120,16,111,14],[121,10,112,8,"preloadedRouteKeys"],[121,28,112,26],[121,30,112,28],[122,8,113,6],[122,9,113,7],[123,6,114,4],[123,7,114,5],[124,6,115,4,"getRehydratedState"],[124,24,115,22,"getRehydratedState"],[124,25,115,23,"partialState"],[124,37,115,35],[124,39,115,37],[125,8,116,6,"routeNames"],[125,18,116,16],[126,8,117,6,"routeParamList"],[127,6,118,4],[127,7,118,5],[127,9,118,7],[128,8,119,6],[128,14,119,12,"state"],[128,19,119,17],[128,22,119,20,"partialState"],[128,34,119,32],[129,8,120,6],[129,12,120,10,"state"],[129,17,120,15],[129,18,120,16,"stale"],[129,23,120,21],[129,28,120,26],[129,33,120,31],[129,35,120,33],[130,10,121,8],[130,17,121,15,"state"],[130,22,121,20],[131,8,122,6],[132,8,123,6],[132,14,123,12,"routes"],[132,20,123,18],[132,23,123,21,"routeNames"],[132,33,123,31],[132,34,123,32,"map"],[132,37,123,35],[132,38,123,36,"name"],[132,42,123,40],[132,46,123,44],[133,10,124,8],[133,16,124,14,"route"],[133,21,124,19],[133,24,124,22,"state"],[133,29,124,27],[133,30,124,28,"routes"],[133,36,124,34],[133,37,124,35,"find"],[133,41,124,39],[133,42,124,40,"r"],[133,43,124,41],[133,47,124,45,"r"],[133,48,124,46],[133,49,124,47,"name"],[133,53,124,51],[133,58,124,56,"name"],[133,62,124,60],[133,63,124,61],[134,10,125,8],[134,17,125,8,"Object"],[134,23,125,8],[134,24,125,8,"assign"],[134,30,125,8],[134,35,126,13,"route"],[134,40,126,18],[135,12,127,10,"name"],[135,16,127,14],[136,12,128,10,"key"],[136,15,128,13],[136,17,128,15,"route"],[136,22,128,20],[136,26,128,24,"route"],[136,31,128,29],[136,32,128,30,"name"],[136,36,128,34],[136,41,128,39,"name"],[136,45,128,43],[136,49,128,47,"route"],[136,54,128,52],[136,55,128,53,"key"],[136,58,128,56],[136,61,128,59,"route"],[136,66,128,64],[136,67,128,65,"key"],[136,70,128,68],[136,73,128,71],[136,76,128,74,"name"],[136,80,128,78],[136,84,128,82],[136,88,128,82,"nanoid"],[136,104,128,88],[136,105,128,88,"nanoid"],[136,111,128,88],[136,113,128,89],[136,114,128,90],[136,116,128,92],[137,12,129,10,"params"],[137,18,129,16],[137,20,129,18,"routeParamList"],[137,34,129,32],[137,35,129,33,"name"],[137,39,129,37],[137,40,129,38],[137,45,129,43,"undefined"],[137,54,129,52],[137,57,129,52,"Object"],[137,63,129,52],[137,64,129,52,"assign"],[137,70,129,52],[137,75,130,15,"routeParamList"],[137,89,130,29],[137,90,130,30,"name"],[137,94,130,34],[137,95,130,35],[137,97,131,16,"route"],[137,102,131,21],[137,105,131,24,"route"],[137,110,131,29],[137,111,131,30,"params"],[137,117,131,36],[137,120,131,39,"undefined"],[137,129,131,48],[137,133,132,14,"route"],[137,138,132,19],[137,141,132,22,"route"],[137,146,132,27],[137,147,132,28,"params"],[137,153,132,34],[137,156,132,37,"undefined"],[138,10,132,46],[139,8,134,6],[139,9,134,7],[139,10,134,8],[140,8,135,6],[140,14,135,12,"index"],[140,19,135,17],[140,22,135,20,"Math"],[140,26,135,24],[140,27,135,25,"min"],[140,30,135,28],[140,31,135,29,"Math"],[140,35,135,33],[140,36,135,34,"max"],[140,39,135,37],[140,40,135,38,"routeNames"],[140,50,135,48],[140,51,135,49,"indexOf"],[140,58,135,56],[140,59,135,57,"state"],[140,64,135,62],[140,65,135,63,"routes"],[140,71,135,69],[140,72,135,70,"state"],[140,77,135,75],[140,79,135,77,"index"],[140,84,135,82],[140,88,135,86],[140,89,135,87],[140,90,135,88],[140,92,135,90,"name"],[140,96,135,94],[140,97,135,95],[140,99,135,97],[140,100,135,98],[140,101,135,99],[140,103,135,101,"routes"],[140,109,135,107],[140,110,135,108,"length"],[140,116,135,114],[140,119,135,117],[140,120,135,118],[140,121,135,119],[141,8,136,6],[141,14,136,12,"routeKeys"],[141,23,136,21],[141,26,136,24,"routes"],[141,32,136,30],[141,33,136,31,"map"],[141,36,136,34],[141,37,136,35,"route"],[141,42,136,40],[141,46,136,44,"route"],[141,51,136,49],[141,52,136,50,"key"],[141,55,136,53],[141,56,136,54],[142,8,137,6],[142,14,137,12,"history"],[142,21,137,19],[142,24,137,22,"state"],[142,29,137,27],[142,30,137,28,"history"],[142,37,137,35],[142,39,137,37,"filter"],[142,45,137,43],[142,46,137,44,"it"],[142,48,137,46],[142,52,137,50,"routeKeys"],[142,61,137,59],[142,62,137,60,"includes"],[142,70,137,68],[142,71,137,69,"it"],[142,73,137,71],[142,74,137,72,"key"],[142,77,137,75],[142,78,137,76],[142,79,137,77],[142,83,137,81],[142,85,137,83],[143,8,138,6],[143,15,138,13,"changeIndex"],[143,26,138,24],[143,27,138,25],[144,10,139,8,"stale"],[144,15,139,13],[144,17,139,15],[144,22,139,20],[145,10,140,8,"type"],[145,14,140,12],[145,16,140,14],[145,21,140,19],[146,10,141,8,"key"],[146,13,141,11],[146,15,141,13],[146,22,141,20],[146,26,141,20,"nanoid"],[146,42,141,26],[146,43,141,26,"nanoid"],[146,49,141,26],[146,51,141,27],[146,52,141,28],[146,54,141,30],[147,10,142,8,"index"],[147,15,142,13],[148,10,143,8,"routeNames"],[148,20,143,18],[149,10,144,8,"history"],[149,17,144,15],[150,10,145,8,"routes"],[150,16,145,14],[151,10,146,8,"preloadedRouteKeys"],[151,28,146,26],[151,30,146,28,"state"],[151,35,146,33],[151,36,146,34,"preloadedRouteKeys"],[151,54,146,52],[151,56,146,54,"filter"],[151,62,146,60],[151,63,146,61,"key"],[151,66,146,64],[151,70,146,68,"routeKeys"],[151,79,146,77],[151,80,146,78,"includes"],[151,88,146,86],[151,89,146,87,"key"],[151,92,146,90],[151,93,146,91],[151,94,146,92],[151,98,146,96],[152,8,147,6],[152,9,147,7],[152,11,147,9,"index"],[152,16,147,14],[152,18,147,16,"backBehavior"],[152,30,147,28],[152,32,147,30,"initialRouteName"],[152,48,147,46],[152,49,147,47],[153,6,148,4],[153,7,148,5],[154,6,149,4,"getStateForRouteNamesChange"],[154,33,149,31,"getStateForRouteNamesChange"],[154,34,149,32,"state"],[154,39,149,37],[154,41,149,39],[155,8,150,6,"routeNames"],[155,18,150,16],[156,8,151,6,"routeParamList"],[156,22,151,20],[157,8,152,6,"routeKeyChanges"],[158,6,153,4],[158,7,153,5],[158,9,153,7],[159,8,154,6],[159,14,154,12,"routes"],[159,20,154,18],[159,23,154,21,"routeNames"],[159,33,154,31],[159,34,154,32,"map"],[159,37,154,35],[159,38,154,36,"name"],[159,42,154,40],[159,46,154,44,"state"],[159,51,154,49],[159,52,154,50,"routes"],[159,58,154,56],[159,59,154,57,"find"],[159,63,154,61],[159,64,154,62,"r"],[159,65,154,63],[159,69,154,67,"r"],[159,70,154,68],[159,71,154,69,"name"],[159,75,154,73],[159,80,154,78,"name"],[159,84,154,82],[159,88,154,86],[159,89,154,87,"routeKeyChanges"],[159,104,154,102],[159,105,154,103,"includes"],[159,113,154,111],[159,114,154,112,"r"],[159,115,154,113],[159,116,154,114,"name"],[159,120,154,118],[159,121,154,119],[159,122,154,120],[159,126,154,124],[160,10,155,8,"name"],[160,14,155,12],[161,10,156,8,"key"],[161,13,156,11],[161,15,156,13],[161,18,156,16,"name"],[161,22,156,20],[161,26,156,24],[161,30,156,24,"nanoid"],[161,46,156,30],[161,47,156,30,"nanoid"],[161,53,156,30],[161,55,156,31],[161,56,156,32],[161,58,156,34],[162,10,157,8,"params"],[162,16,157,14],[162,18,157,16,"routeParamList"],[162,32,157,30],[162,33,157,31,"name"],[162,37,157,35],[163,8,158,6],[163,9,158,7],[163,10,158,8],[164,8,159,6],[164,14,159,12,"index"],[164,19,159,17],[164,22,159,20,"Math"],[164,26,159,24],[164,27,159,25,"max"],[164,30,159,28],[164,31,159,29],[164,32,159,30],[164,34,159,32,"routeNames"],[164,44,159,42],[164,45,159,43,"indexOf"],[164,52,159,50],[164,53,159,51,"state"],[164,58,159,56],[164,59,159,57,"routes"],[164,65,159,63],[164,66,159,64,"state"],[164,71,159,69],[164,72,159,70,"index"],[164,77,159,75],[164,78,159,76],[164,79,159,77,"name"],[164,83,159,81],[164,84,159,82],[164,85,159,83],[165,8,160,6],[165,12,160,10,"history"],[165,19,160,17],[165,22,160,20,"state"],[165,27,160,25],[165,28,160,26,"history"],[165,35,160,33],[165,36,160,34,"filter"],[165,42,160,40],[166,8,161,6],[167,8,162,6,"it"],[167,10,162,8],[167,14,162,12,"it"],[167,16,162,14],[167,17,162,15,"type"],[167,21,162,19],[167,26,162,24],[167,33,162,31],[167,37,162,35,"routes"],[167,43,162,41],[167,44,162,42,"find"],[167,48,162,46],[167,49,162,47,"r"],[167,50,162,48],[167,54,162,52,"r"],[167,55,162,53],[167,56,162,54,"key"],[167,59,162,57],[167,64,162,62,"it"],[167,66,162,64],[167,67,162,65,"key"],[167,70,162,68],[167,71,162,69],[167,72,162,70],[168,8,163,6],[168,12,163,10],[168,13,163,11,"history"],[168,20,163,18],[168,21,163,19,"length"],[168,27,163,25],[168,29,163,27],[169,10,164,8,"history"],[169,17,164,15],[169,20,164,18,"getRouteHistory"],[169,35,164,33],[169,36,164,34,"routes"],[169,42,164,40],[169,44,164,42,"index"],[169,49,164,47],[169,51,164,49,"backBehavior"],[169,63,164,61],[169,65,164,63,"initialRouteName"],[169,81,164,79],[169,82,164,80],[170,8,165,6],[171,8,166,6],[171,15,166,6,"Object"],[171,21,166,6],[171,22,166,6,"assign"],[171,28,166,6],[171,33,167,11,"state"],[171,38,167,16],[172,10,168,8,"history"],[172,17,168,15],[173,10,169,8,"routeNames"],[173,20,169,18],[174,10,170,8,"routes"],[174,16,170,14],[175,10,171,8,"index"],[176,8,171,13],[177,6,173,4],[177,7,173,5],[178,6,174,4,"getStateForRouteFocus"],[178,27,174,25,"getStateForRouteFocus"],[178,28,174,26,"state"],[178,33,174,31],[178,35,174,33,"key"],[178,38,174,36],[178,40,174,38],[179,8,175,6],[179,14,175,12,"index"],[179,19,175,17],[179,22,175,20,"state"],[179,27,175,25],[179,28,175,26,"routes"],[179,34,175,32],[179,35,175,33,"findIndex"],[179,44,175,42],[179,45,175,43,"r"],[179,46,175,44],[179,50,175,48,"r"],[179,51,175,49],[179,52,175,50,"key"],[179,55,175,53],[179,60,175,58,"key"],[179,63,175,61],[179,64,175,62],[180,8,176,6],[180,12,176,10,"index"],[180,17,176,15],[180,22,176,20],[180,23,176,21],[180,24,176,22],[180,28,176,26,"index"],[180,33,176,31],[180,38,176,36,"state"],[180,43,176,41],[180,44,176,42,"index"],[180,49,176,47],[180,51,176,49],[181,10,177,8],[181,17,177,15,"state"],[181,22,177,20],[182,8,178,6],[183,8,179,6],[183,15,179,13,"changeIndex"],[183,26,179,24],[183,27,179,25,"state"],[183,32,179,30],[183,34,179,32,"index"],[183,39,179,37],[183,41,179,39,"backBehavior"],[183,53,179,51],[183,55,179,53,"initialRouteName"],[183,71,179,69],[183,72,179,70],[184,6,180,4],[184,7,180,5],[185,6,181,4,"getStateForAction"],[185,23,181,21,"getStateForAction"],[185,24,181,22,"state"],[185,29,181,27],[185,31,181,29,"action"],[185,37,181,35],[185,39,181,37],[186,8,182,6,"routeParamList"],[186,22,182,20],[187,8,183,6,"routeGetIdList"],[188,6,184,4],[188,7,184,5],[188,9,184,7],[189,8,185,6],[189,16,185,14,"action"],[189,22,185,20],[189,23,185,21,"type"],[189,27,185,25],[190,10,186,8],[190,15,186,13],[190,24,186,22],[191,10,187,8],[191,15,187,13],[191,25,187,23],[192,10,188,8],[192,15,188,13],[192,36,188,34],[193,12,189,10],[194,14,190,12],[194,20,190,18,"index"],[194,25,190,23],[194,28,190,26,"state"],[194,33,190,31],[194,34,190,32,"routes"],[194,40,190,38],[194,41,190,39,"findIndex"],[194,50,190,48],[194,51,190,49,"route"],[194,56,190,54],[194,60,190,58,"route"],[194,65,190,63],[194,66,190,64,"name"],[194,70,190,68],[194,75,190,73,"action"],[194,81,190,79],[194,82,190,80,"payload"],[194,89,190,87],[194,90,190,88,"name"],[194,94,190,92],[194,95,190,93],[195,14,191,12],[195,18,191,16,"index"],[195,23,191,21],[195,28,191,26],[195,29,191,27],[195,30,191,28],[195,32,191,30],[196,16,192,14],[196,23,192,21],[196,27,192,25],[197,14,193,12],[198,14,194,12],[198,20,194,18,"updatedState"],[198,32,194,30],[198,35,194,33,"changeIndex"],[198,46,194,44],[198,47,194,44,"Object"],[198,53,194,44],[198,54,194,44,"assign"],[198,60,194,44],[198,65,195,17,"state"],[198,70,195,22],[199,16,196,14,"routes"],[199,22,196,20],[199,24,196,22,"state"],[199,29,196,27],[199,30,196,28,"routes"],[199,36,196,34],[199,37,196,35,"map"],[199,40,196,38],[199,41,196,39,"route"],[199,46,196,44],[199,50,196,48],[200,18,197,16],[200,22,197,20,"route"],[200,27,197,25],[200,28,197,26,"name"],[200,32,197,30],[200,37,197,35,"action"],[200,43,197,41],[200,44,197,42,"payload"],[200,51,197,49],[200,52,197,50,"name"],[200,56,197,54],[200,58,197,56],[201,20,198,18],[201,27,198,25,"route"],[201,32,198,30],[202,18,199,16],[203,18,200,16],[203,24,200,22,"getId"],[203,29,200,27],[203,32,200,30,"routeGetIdList"],[203,46,200,44],[203,47,200,45,"route"],[203,52,200,50],[203,53,200,51,"name"],[203,57,200,55],[203,58,200,56],[204,18,201,16],[204,24,201,22,"currentId"],[204,33,201,31],[204,36,201,34,"getId"],[204,41,201,39],[204,44,201,42],[205,20,202,18,"params"],[205,26,202,24],[205,28,202,26,"route"],[205,33,202,31],[205,34,202,32,"params"],[206,18,203,16],[206,19,203,17],[206,20,203,18],[207,18,204,16],[207,24,204,22,"nextId"],[207,30,204,28],[207,33,204,31,"getId"],[207,38,204,36],[207,41,204,39],[208,20,205,18,"params"],[208,26,205,24],[208,28,205,26,"action"],[208,34,205,32],[208,35,205,33,"payload"],[208,42,205,40],[208,43,205,41,"params"],[209,18,206,16],[209,19,206,17],[209,20,206,18],[210,18,207,16],[210,24,207,22,"key"],[210,27,207,25],[210,30,207,28,"currentId"],[210,39,207,37],[210,44,207,42,"nextId"],[210,50,207,48],[210,53,207,51,"route"],[210,58,207,56],[210,59,207,57,"key"],[210,62,207,60],[210,65,207,63],[210,68,207,66,"route"],[210,73,207,71],[210,74,207,72,"name"],[210,78,207,76],[210,82,207,80],[210,86,207,80,"nanoid"],[210,102,207,86],[210,103,207,86,"nanoid"],[210,109,207,86],[210,111,207,87],[210,112,207,88],[210,114,207,90],[211,18,208,16],[211,22,208,20,"params"],[211,28,208,26],[212,18,209,16],[212,22,209,20],[212,23,209,21,"action"],[212,29,209,27],[212,30,209,28,"type"],[212,34,209,32],[212,39,209,37],[212,49,209,47],[212,53,209,51,"action"],[212,59,209,57],[212,60,209,58,"type"],[212,64,209,62],[212,69,209,67],[212,90,209,88],[212,95,209,93,"action"],[212,101,209,99],[212,102,209,100,"payload"],[212,109,209,107],[212,110,209,108,"merge"],[212,115,209,113],[212,119,209,117,"currentId"],[212,128,209,126],[212,133,209,131,"nextId"],[212,139,209,137],[212,141,209,139],[213,20,210,18,"params"],[213,26,210,24],[213,29,210,27,"action"],[213,35,210,33],[213,36,210,34,"payload"],[213,43,210,41],[213,44,210,42,"params"],[213,50,210,48],[213,55,210,53,"undefined"],[213,64,210,62],[213,68,210,66,"routeParamList"],[213,82,210,80],[213,83,210,81,"route"],[213,88,210,86],[213,89,210,87,"name"],[213,93,210,91],[213,94,210,92],[213,99,210,97,"undefined"],[213,108,210,106],[213,111,210,106,"Object"],[213,117,210,106],[213,118,210,106,"assign"],[213,124,210,106],[213,129,211,23,"routeParamList"],[213,143,211,37],[213,144,211,38,"route"],[213,149,211,43],[213,150,211,44,"name"],[213,154,211,48],[213,155,211,49],[213,157,212,23,"route"],[213,162,212,28],[213,163,212,29,"params"],[213,169,212,35],[213,171,213,23,"action"],[213,177,213,29],[213,178,213,30,"payload"],[213,185,213,37],[213,186,213,38,"params"],[213,192,213,44],[213,196,214,22,"route"],[213,201,214,27],[213,202,214,28,"params"],[213,208,214,34],[214,18,215,16],[214,19,215,17],[214,25,215,23],[215,20,216,18,"params"],[215,26,216,24],[215,29,216,27,"routeParamList"],[215,43,216,41],[215,44,216,42,"route"],[215,49,216,47],[215,50,216,48,"name"],[215,54,216,52],[215,55,216,53],[215,60,216,58,"undefined"],[215,69,216,67],[215,72,216,67,"Object"],[215,78,216,67],[215,79,216,67,"assign"],[215,85,216,67],[215,90,217,23,"routeParamList"],[215,104,217,37],[215,105,217,38,"route"],[215,110,217,43],[215,111,217,44,"name"],[215,115,217,48],[215,116,217,49],[215,118,218,23,"action"],[215,124,218,29],[215,125,218,30,"payload"],[215,132,218,37],[215,133,218,38,"params"],[215,139,218,44],[215,143,219,22,"action"],[215,149,219,28],[215,150,219,29,"payload"],[215,157,219,36],[215,158,219,37,"params"],[215,164,219,43],[216,18,220,16],[217,18,221,16],[217,24,221,22,"path"],[217,28,221,26],[217,31,221,29,"action"],[217,37,221,35],[217,38,221,36,"type"],[217,42,221,40],[217,47,221,45],[217,57,221,55],[217,61,221,59,"action"],[217,67,221,65],[217,68,221,66,"payload"],[217,75,221,73],[217,76,221,74,"path"],[217,80,221,78],[217,84,221,82],[217,88,221,86],[217,91,221,89,"action"],[217,97,221,95],[217,98,221,96,"payload"],[217,105,221,103],[217,106,221,104,"path"],[217,110,221,108],[217,113,221,111,"route"],[217,118,221,116],[217,119,221,117,"path"],[217,123,221,121],[218,18,222,16],[218,25,222,23,"params"],[218,31,222,29],[218,36,222,34,"route"],[218,41,222,39],[218,42,222,40,"params"],[218,48,222,46],[218,52,222,50,"path"],[218,56,222,54],[218,61,222,59,"route"],[218,66,222,64],[218,67,222,65,"path"],[218,71,222,69],[218,74,222,69,"Object"],[218,80,222,69],[218,81,222,69,"assign"],[218,87,222,69],[218,92,223,21,"route"],[218,97,223,26],[219,20,224,18,"key"],[219,23,224,21],[220,20,225,18,"path"],[220,24,225,22],[221,20,226,18,"params"],[222,18,226,24],[222,23,227,20,"route"],[222,28,227,25],[223,16,228,14],[223,17,228,15],[224,14,228,16],[224,18,229,15,"index"],[224,23,229,20],[224,25,229,22,"backBehavior"],[224,37,229,34],[224,39,229,36,"initialRouteName"],[224,55,229,52],[224,56,229,53],[225,14,230,12],[225,21,230,12,"Object"],[225,27,230,12],[225,28,230,12,"assign"],[225,34,230,12],[225,39,231,17,"updatedState"],[225,51,231,29],[226,16,232,14,"preloadedRouteKeys"],[226,34,232,32],[226,36,232,34,"updatedState"],[226,48,232,46],[226,49,232,47,"preloadedRouteKeys"],[226,67,232,65],[226,68,232,66,"filter"],[226,74,232,72],[226,75,232,73,"key"],[226,78,232,76],[226,82,232,80,"key"],[226,85,232,83],[226,90,232,88,"state"],[226,95,232,93],[226,96,232,94,"routes"],[226,102,232,100],[226,103,232,101,"updatedState"],[226,115,232,113],[226,116,232,114,"index"],[226,121,232,119],[226,122,232,120],[226,123,232,121,"key"],[226,126,232,124],[227,14,232,125],[228,12,234,10],[229,10,235,8],[229,15,235,13],[229,24,235,22],[230,12,236,10],[231,14,237,12],[231,18,237,16,"state"],[231,23,237,21],[231,24,237,22,"history"],[231,31,237,29],[231,32,237,30,"length"],[231,38,237,36],[231,43,237,41],[231,44,237,42],[231,46,237,44],[232,16,238,14],[232,23,238,21],[232,27,238,25],[233,14,239,12],[234,14,240,12],[234,20,240,18,"previousKey"],[234,31,240,29],[234,34,240,32,"state"],[234,39,240,37],[234,40,240,38,"history"],[234,47,240,45],[234,48,240,46,"state"],[234,53,240,51],[234,54,240,52,"history"],[234,61,240,59],[234,62,240,60,"length"],[234,68,240,66],[234,71,240,69],[234,72,240,70],[234,73,240,71],[234,75,240,73,"key"],[234,78,240,76],[235,14,241,12],[235,20,241,18,"index"],[235,25,241,23],[235,28,241,26,"state"],[235,33,241,31],[235,34,241,32,"routes"],[235,40,241,38],[235,41,241,39,"findLastIndex"],[235,54,241,52],[235,55,241,53,"route"],[235,60,241,58],[235,64,241,62,"route"],[235,69,241,67],[235,70,241,68,"key"],[235,73,241,71],[235,78,241,76,"previousKey"],[235,89,241,87],[235,90,241,88],[236,14,242,12],[236,18,242,16,"index"],[236,23,242,21],[236,28,242,26],[236,29,242,27],[236,30,242,28],[236,32,242,30],[237,16,243,14],[237,23,243,21],[237,27,243,25],[238,14,244,12],[239,14,245,12],[239,21,245,12,"Object"],[239,27,245,12],[239,28,245,12,"assign"],[239,34,245,12],[239,39,246,17,"state"],[239,44,246,22],[240,16,247,14,"preloadedRouteKeys"],[240,34,247,32],[240,36,247,34,"state"],[240,41,247,39],[240,42,247,40,"preloadedRouteKeys"],[240,60,247,58],[240,61,247,59,"filter"],[240,67,247,65],[240,68,247,66,"key"],[240,71,247,69],[240,75,247,73,"key"],[240,78,247,76],[240,83,247,81,"state"],[240,88,247,86],[240,89,247,87,"routes"],[240,95,247,93],[240,96,247,94,"index"],[240,101,247,99],[240,102,247,100],[240,103,247,101,"key"],[240,106,247,104],[240,107,247,105],[241,16,248,14,"history"],[241,23,248,21],[241,25,248,23,"state"],[241,30,248,28],[241,31,248,29,"history"],[241,38,248,36],[241,39,248,37,"slice"],[241,44,248,42],[241,45,248,43],[241,46,248,44],[241,48,248,46],[241,49,248,47],[241,50,248,48],[241,51,248,49],[242,16,249,14,"index"],[243,14,249,19],[244,12,251,10],[245,10,252,8],[245,15,252,13],[245,24,252,22],[246,12,253,10],[247,14,254,12],[247,20,254,18,"routeIndex"],[247,30,254,28],[247,33,254,31,"state"],[247,38,254,36],[247,39,254,37,"routes"],[247,45,254,43],[247,46,254,44,"findIndex"],[247,55,254,53],[247,56,254,54,"route"],[247,61,254,59],[247,65,254,63,"route"],[247,70,254,68],[247,71,254,69,"name"],[247,75,254,73],[247,80,254,78,"action"],[247,86,254,84],[247,87,254,85,"payload"],[247,94,254,92],[247,95,254,93,"name"],[247,99,254,97],[247,100,254,98],[248,14,255,12],[248,18,255,16,"routeIndex"],[248,28,255,26],[248,33,255,31],[248,34,255,32],[248,35,255,33],[248,37,255,35],[249,16,256,14],[249,23,256,21],[249,27,256,25],[250,14,257,12],[251,14,258,12],[251,20,258,18,"route"],[251,25,258,23],[251,28,258,26,"state"],[251,33,258,31],[251,34,258,32,"routes"],[251,40,258,38],[251,41,258,39,"routeIndex"],[251,51,258,49],[251,52,258,50],[252,14,259,12],[252,20,259,18,"getId"],[252,25,259,23],[252,28,259,26,"routeGetIdList"],[252,42,259,40],[252,43,259,41,"route"],[252,48,259,46],[252,49,259,47,"name"],[252,53,259,51],[252,54,259,52],[253,14,260,12],[253,20,260,18,"currentId"],[253,29,260,27],[253,32,260,30,"getId"],[253,37,260,35],[253,40,260,38],[254,16,261,14,"params"],[254,22,261,20],[254,24,261,22,"route"],[254,29,261,27],[254,30,261,28,"params"],[255,14,262,12],[255,15,262,13],[255,16,262,14],[256,14,263,12],[256,20,263,18,"nextId"],[256,26,263,24],[256,29,263,27,"getId"],[256,34,263,32],[256,37,263,35],[257,16,264,14,"params"],[257,22,264,20],[257,24,264,22,"action"],[257,30,264,28],[257,31,264,29,"payload"],[257,38,264,36],[257,39,264,37,"params"],[258,14,265,12],[258,15,265,13],[258,16,265,14],[259,14,266,12],[259,20,266,18,"key"],[259,23,266,21],[259,26,266,24,"currentId"],[259,35,266,33],[259,40,266,38,"nextId"],[259,46,266,44],[259,49,266,47,"route"],[259,54,266,52],[259,55,266,53,"key"],[259,58,266,56],[259,61,266,59],[259,64,266,62,"route"],[259,69,266,67],[259,70,266,68,"name"],[259,74,266,72],[259,78,266,76],[259,82,266,76,"nanoid"],[259,98,266,82],[259,99,266,82,"nanoid"],[259,105,266,82],[259,107,266,83],[259,108,266,84],[259,110,266,86],[260,14,267,12],[260,20,267,18,"params"],[260,26,267,24],[260,29,267,27,"action"],[260,35,267,33],[260,36,267,34,"payload"],[260,43,267,41],[260,44,267,42,"params"],[260,50,267,48],[260,55,267,53,"undefined"],[260,64,267,62],[260,68,267,66,"routeParamList"],[260,82,267,80],[260,83,267,81,"route"],[260,88,267,86],[260,89,267,87,"name"],[260,93,267,91],[260,94,267,92],[260,99,267,97,"undefined"],[260,108,267,106],[260,111,267,106,"Object"],[260,117,267,106],[260,118,267,106,"assign"],[260,124,267,106],[260,129,268,17,"routeParamList"],[260,143,268,31],[260,144,268,32,"route"],[260,149,268,37],[260,150,268,38,"name"],[260,154,268,42],[260,155,268,43],[260,157,269,17,"action"],[260,163,269,23],[260,164,269,24,"payload"],[260,171,269,31],[260,172,269,32,"params"],[260,178,269,38],[260,182,270,16,"undefined"],[260,191,270,25],[261,14,271,12],[261,20,271,18,"newRoute"],[261,28,271,26],[261,31,271,29,"params"],[261,37,271,35],[261,42,271,40,"route"],[261,47,271,45],[261,48,271,46,"params"],[261,54,271,52],[261,57,271,52,"Object"],[261,63,271,52],[261,64,271,52,"assign"],[261,70,271,52],[261,75,272,17,"route"],[261,80,272,22],[262,16,273,14,"key"],[262,19,273,17],[263,16,274,14,"params"],[264,14,274,20],[264,19,275,16,"route"],[264,24,275,21],[265,14,276,12],[265,21,276,12,"Object"],[265,27,276,12],[265,28,276,12,"assign"],[265,34,276,12],[265,39,277,17,"state"],[265,44,277,22],[266,16,278,14,"preloadedRouteKeys"],[266,34,278,32],[266,36,278,34,"state"],[266,41,278,39],[266,42,278,40,"preloadedRouteKeys"],[266,60,278,58],[266,61,278,59,"filter"],[266,67,278,65],[266,68,278,66,"key"],[266,71,278,69],[266,75,278,73,"key"],[266,78,278,76],[266,83,278,81,"route"],[266,88,278,86],[266,89,278,87,"key"],[266,92,278,90],[266,93,278,91],[266,94,278,92,"concat"],[266,100,278,98],[266,101,278,99,"newRoute"],[266,109,278,107],[266,110,278,108,"key"],[266,113,278,111],[266,114,278,112],[267,16,279,14,"routes"],[267,22,279,20],[267,24,279,22,"state"],[267,29,279,27],[267,30,279,28,"routes"],[267,36,279,34],[267,37,279,35,"map"],[267,40,279,38],[267,41,279,39],[267,42,279,40,"route"],[267,47,279,45],[267,49,279,47,"index"],[267,54,279,52],[267,59,279,57,"index"],[267,64,279,62],[267,69,279,67,"routeIndex"],[267,79,279,77],[267,82,279,80,"newRoute"],[267,90,279,88],[267,93,279,91,"route"],[267,98,279,96],[267,99,279,97],[268,16,280,14,"history"],[268,23,280,21],[268,25,280,23,"key"],[268,28,280,26],[268,33,280,31,"route"],[268,38,280,36],[268,39,280,37,"key"],[268,42,280,40],[268,45,280,43,"state"],[268,50,280,48],[268,51,280,49,"history"],[268,58,280,56],[268,61,280,59,"state"],[268,66,280,64],[268,67,280,65,"history"],[268,74,280,72],[268,75,280,73,"filter"],[268,81,280,79],[268,82,280,80,"record"],[268,88,280,86],[268,92,280,90,"record"],[268,98,280,96],[268,99,280,97,"key"],[268,102,280,100],[268,107,280,105,"route"],[268,112,280,110],[268,113,280,111,"key"],[268,116,280,114],[269,14,280,115],[270,12,282,10],[271,10,283,8],[272,12,284,10],[272,19,284,17,"BaseRouter"],[272,32,284,27],[272,33,284,27,"BaseRouter"],[272,43,284,27],[272,44,284,28,"getStateForAction"],[272,61,284,45],[272,62,284,46,"state"],[272,67,284,51],[272,69,284,53,"action"],[272,75,284,59],[272,76,284,60],[273,8,285,6],[274,6,286,4],[274,7,286,5],[275,6,287,4,"actionCreators"],[275,20,287,18],[275,22,287,20,"TabActions"],[276,4,287,30],[276,6,288,3],[277,4,289,2],[277,11,289,9,"router"],[277,17,289,15],[278,2,290,0],[279,0,290,1],[279,3]],"functionMap":{"names":["<global>","TabActions.jumpTo","getRouteHistory","routes.findIndex$argument_0","changeIndex","history.filter$argument_0","history.findLastIndex$argument_0","TabRouter","router.getInitialState","routeNames.map$argument_0","router.getRehydratedState","state.routes.find$argument_0","routes.map$argument_0","state.history.filter$argument_0","state.preloadedRouteKeys.filter$argument_0","router.getStateForRouteNamesChange","routes.find$argument_0","router.getStateForRouteFocus","state.routes.findIndex$argument_0","router.getStateForAction","state.routes.map$argument_0","updatedState.preloadedRouteKeys.filter$argument_0","state.routes.findLastIndex$argument_0"],"mappings":"AAA;ECM;GDQ;wBEE;2CCwB,wCD;CFe;oBIC;+BCM,8DD;8DEE,6BF;CJoB;OOC;ICO;oCCK;QDI;KDY;IGC;oCDQ;wCEC,oBF;OCU;mCEE,kBF;4CGC,gCH;6DIS,8BJ;KHE;IQC;oCNK,0BE,yDF;OMI;MFI,yCG,qBH,CE;KRW;IUC;2CCC,kBD;KVK;IYC;iDDS,2CC;uCCM;eDgC;yEEI,mDF;qDGS,kCH;kELM,sCK;sDDO,2CC;kELwB,wBK;uCCC,yDD;gFNC,kCM;KZM;CPI"},"hasCjsExports":false},"type":"js/module"}]}