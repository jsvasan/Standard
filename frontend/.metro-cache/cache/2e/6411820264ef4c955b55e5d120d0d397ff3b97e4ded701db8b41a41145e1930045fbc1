{"dependencies":[{"name":"react/jsx-dev-runtime","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"L9D70Z4hi4aGuui1ysja/oQ5ytI=","exportNames":["*"],"imports":1}},{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":168},"end":{"line":5,"column":52,"index":203}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"],"imports":1}},{"name":"@react-navigation/native-stack","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":23,"index":228},"end":{"line":6,"column":64,"index":269}}],"key":"Tw1dyZPdNt5nhNu5CoB7YZxWQjI=","exportNames":["*"],"imports":1}},{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":21,"index":292},"end":{"line":7,"column":49,"index":320}}],"key":"JdWyQHWvvi7kws4n0MhZWUpiB2c=","exportNames":["*"],"imports":1}},{"name":"./withLayoutContext","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":28,"index":350},"end":{"line":8,"column":58,"index":380}}],"key":"uI8DQ+0pBl5vWiQx60egJpSWI0Q=","exportNames":["*"],"imports":1}},{"name":"../useScreens","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":21,"index":403},"end":{"line":9,"column":45,"index":427}}],"key":"8gimF/GgYNRJ+ojtiVDaShLJVrk=","exportNames":["*"],"imports":1}},{"name":"../views/Protected","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":20,"index":449},"end":{"line":10,"column":49,"index":478}}],"key":"k1+uDYZ/MvJqE4WVPvI1cbQswMs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n  'use client';\n\n  var _reactJsxDevRuntime = require(_dependencyMap[0], \"react/jsx-dev-runtime\");\n  var _jsxFileName = \"/app/frontend/node_modules/expo-router/build/layouts/StackClient.js\";\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.StackRouter = exports.stackRouterOverride = void 0;\n  const native_1 = require(_dependencyMap[1], \"@react-navigation/native\");\n  const native_stack_1 = require(_dependencyMap[2], \"@react-navigation/native-stack\");\n  const non_secure_1 = require(_dependencyMap[3], \"nanoid/non-secure\");\n  const withLayoutContext_1 = require(_dependencyMap[4], \"./withLayoutContext\");\n  const useScreens_1 = require(_dependencyMap[5], \"../useScreens\");\n  const Protected_1 = require(_dependencyMap[6], \"../views/Protected\");\n  const NativeStackNavigator = (0, native_stack_1.createNativeStackNavigator)().Navigator;\n  const RNStack = (0, withLayoutContext_1.withLayoutContext)(NativeStackNavigator);\n  function isStackAction(action) {\n    return action.type === 'PUSH' || action.type === 'NAVIGATE' || action.type === 'POP' || action.type === 'POP_TO_TOP' || action.type === 'REPLACE';\n  }\n  /**\n   * React Navigation matches a screen by its name or a 'getID' function that uniquely identifies a screen.\n   * When a screen has been uniquely identified, the Stack can only have one instance of that screen.\n   *\n   * Expo Router allows for a screen to be matched by name and path params, a 'getID' function or a singular id.\n   *\n   * Instead of reimplementing the entire StackRouter, we can override the getStateForAction method to handle the singular screen logic.\n   *\n   */\n  const stackRouterOverride = original => {\n    return {\n      getStateForAction: (state, action, options) => {\n        if (action.target && action.target !== state.key) {\n          return null;\n        }\n        if (!isStackAction(action)) {\n          return original.getStateForAction(state, action, options);\n        }\n        // The dynamic getId added to an action, `router.push('screen', { singular: true })`\n        const actionSingularOptions = action.payload && 'singular' in action.payload ? action.payload.singular : undefined;\n        // Handle if 'getID' or 'singular' is set.\n        function getIdFunction() {\n          // Actions can be fired by the user, so we do need to validate their structure.\n          if (!('payload' in action) || !action.payload || !('name' in action.payload) || typeof action.payload.name !== 'string') {\n            return;\n          }\n          const actionName = action.payload.name;\n          return (\n            // The dynamic singular added to an action, `router.push('screen', { singular: () => 'id' })`\n            getActionSingularIdFn(actionSingularOptions, actionName) ||\n            // The static getId added as a prop to `<Screen singular />` or `<Screen getId={} />`\n            options.routeGetIdList[actionName]\n          );\n        }\n        const {\n          routeParamList\n        } = options;\n        switch (action.type) {\n          case 'PUSH':\n          case 'NAVIGATE':\n            {\n              if (!state.routeNames.includes(action.payload.name)) {\n                return null;\n              }\n              // START FORK\n              const getId = getIdFunction();\n              // const getId = options.routeGetIdList[action.payload.name];\n              // END FORK\n              const id = getId?.({\n                params: action.payload.params\n              });\n              let route;\n              if (id !== undefined) {\n                route = state.routes.findLast(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              } else if (action.type === 'NAVIGATE') {\n                const currentRoute = state.routes[state.index];\n                // If the route matches the current one, then navigate to it\n                if (action.payload.name === currentRoute.name) {\n                  route = currentRoute;\n                } else if (action.payload.pop) {\n                  route = state.routes.findLast(route => route.name === action.payload.name);\n                }\n              }\n              if (!route) {\n                route = state.preloadedRoutes.find(route => route.name === action.payload.name && id === getId?.({\n                  params: route.params\n                }));\n              }\n              let params;\n              if (action.type === 'NAVIGATE' && action.payload.merge && route) {\n                params = action.payload.params !== undefined || routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], route.params, action.payload.params) : route.params;\n              } else {\n                params = routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params;\n              }\n              let routes;\n              if (route) {\n                if (action.type === 'NAVIGATE' && action.payload.pop) {\n                  routes = [];\n                  // Get all routes until the matching one\n                  for (const r of state.routes) {\n                    if (r.key === route.key) {\n                      routes.push(Object.assign({}, route, {\n                        path: action.payload.path !== undefined ? action.payload.path : route.path,\n                        params\n                      }));\n                      break;\n                    }\n                    routes.push(r);\n                  }\n                } else {\n                  // START FORK\n                  // If there is an id, then filter out the existing route with the same id.\n                  // THIS ACTION IS DANGEROUS. This can cause React Native Screens to freeze\n                  if (id !== undefined) {\n                    routes = state.routes.filter(r => r.key !== route.key);\n                  } else if (action.type === 'NAVIGATE' && state.routes.length > 0) {\n                    // The navigation action should only replace the last route if it has the same name and path params.\n                    const lastRoute = state.routes[state.routes.length - 1];\n                    if ((0, useScreens_1.getSingularId)(lastRoute.name, {\n                      params: lastRoute.params\n                    }) === (0, useScreens_1.getSingularId)(route.name, {\n                      params\n                    })) {\n                      routes = state.routes.slice(0, -1);\n                    } else {\n                      routes = [...state.routes];\n                    }\n                  } else {\n                    routes = [...state.routes];\n                  }\n                  // If the routes length is the same as the state routes length, then we are navigating to a new route.\n                  // Otherwise we are replacing an existing route.\n                  const key = routes.length === state.routes.length ? `${action.payload.name}-${(0, non_secure_1.nanoid)()}` : route.key;\n                  routes.push(Object.assign({}, route, {\n                    key,\n                    path: action.type === 'NAVIGATE' && action.payload.path !== undefined ? action.payload.path : route.path,\n                    params\n                  }));\n                  // routes = state.routes.filter((r) => r.key !== route.key);\n                  // routes.push({\n                  //   ...route,\n                  //   path:\n                  //     action.type === 'NAVIGATE' && action.payload.path !== undefined\n                  //       ? action.payload.path\n                  //       : route.path,\n                  //   params,\n                  // });\n                  // END FORK\n                }\n              } else {\n                routes = [...state.routes, {\n                  key: `${action.payload.name}-${(0, non_secure_1.nanoid)()}`,\n                  name: action.payload.name,\n                  path: action.type === 'NAVIGATE' ? action.payload.path : undefined,\n                  params\n                }];\n              }\n              // START FORK\n              // return filterSingular(\n              const result = Object.assign({}, state, {\n                index: routes.length - 1,\n                preloadedRoutes: state.preloadedRoutes.filter(route => routes[routes.length - 1].key !== route.key),\n                routes\n              });\n              if (actionSingularOptions) {\n                return filterSingular(result, getId);\n              }\n              return result;\n              // return {\n              //   ...state,\n              //   index: routes.length - 1,\n              //   preloadedRoutes: state.preloadedRoutes.filter(\n              //     (route) => routes[routes.length - 1].key !== route.key\n              //   ),\n              //   routes,\n              // };\n              // END FORK\n            }\n          default:\n            {\n              return original.getStateForAction(state, action, options);\n            }\n        }\n      }\n    };\n  };\n  exports.stackRouterOverride = stackRouterOverride;\n  function getActionSingularIdFn(actionGetId, name) {\n    if (typeof actionGetId === 'function') {\n      return options => actionGetId(name, options.params ?? {});\n    } else if (actionGetId === true) {\n      return options => (0, useScreens_1.getSingularId)(name, options);\n    }\n    return undefined;\n  }\n  /**\n   * If there is a dynamic singular on an action, then we need to filter the state to only have singular screens.\n   * As multiples may have been added before we did the singular navigation.\n   */\n  function filterSingular(state, getId) {\n    if (!state) {\n      return state;\n    }\n    if (!state.routes) {\n      return state;\n    }\n    const currentIndex = state.index || state.routes.length - 1;\n    const current = state.routes[currentIndex];\n    const name = current.name;\n    const id = getId?.({\n      params: current.params\n    });\n    if (!id) {\n      return state;\n    }\n    // TypeScript needs a type assertion here for the filter to work.\n    let routes = state.routes;\n    routes = routes.filter((route, index) => {\n      // If the route is the current route, keep it.\n      if (index === currentIndex) {\n        return true;\n      }\n      // Remove all other routes with the same name and id.\n      return name !== route.name || id !== getId?.({\n        params: route.params\n      });\n    });\n    return Object.assign({}, state, {\n      index: routes.length - 1,\n      routes\n    });\n  }\n  const Stack = Object.assign(props => {\n    return /*#__PURE__*/_reactJsxDevRuntime.jsxDEV(RNStack, Object.assign({}, props, {\n      UNSTABLE_router: exports.stackRouterOverride\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 12\n    }, this);\n  }, {\n    Screen: RNStack.Screen,\n    Protected: Protected_1.Protected\n  });\n  exports.default = Stack;\n  const StackRouter = options => {\n    const router = (0, native_1.StackRouter)(options);\n    return Object.assign({}, router, (0, exports.stackRouterOverride)(router));\n  };\n  exports.StackRouter = StackRouter;\n});","lineCount":254,"map":[[2,2,1,0],[2,14,1,12],[3,2,2,0],[3,14,2,12],[5,2,2,13],[5,6,2,13,"_reactJsxDevRuntime"],[5,25,2,13],[5,28,2,13,"require"],[5,35,2,13],[5,36,2,13,"_dependencyMap"],[5,50,2,13],[6,2,2,13],[6,6,2,13,"_jsxFileName"],[6,18,2,13],[7,2,3,0,"Object"],[7,8,3,6],[7,9,3,7,"defineProperty"],[7,23,3,21],[7,24,3,22,"exports"],[7,31,3,29],[7,33,3,31],[7,45,3,43],[7,47,3,45],[8,4,3,47,"value"],[8,9,3,52],[8,11,3,54],[9,2,3,59],[9,3,3,60],[9,4,3,61],[10,2,4,0,"exports"],[10,9,4,7],[10,10,4,8,"StackRouter"],[10,21,4,19],[10,24,4,22,"exports"],[10,31,4,29],[10,32,4,30,"stackRouterOverride"],[10,51,4,49],[10,54,4,52],[10,59,4,57],[10,60,4,58],[11,2,5,0],[11,8,5,6,"native_1"],[11,16,5,14],[11,19,5,17,"require"],[11,26,5,24],[11,27,5,24,"_dependencyMap"],[11,41,5,24],[11,72,5,51],[11,73,5,52],[12,2,6,0],[12,8,6,6,"native_stack_1"],[12,22,6,20],[12,25,6,23,"require"],[12,32,6,30],[12,33,6,30,"_dependencyMap"],[12,47,6,30],[12,84,6,63],[12,85,6,64],[13,2,7,0],[13,8,7,6,"non_secure_1"],[13,20,7,18],[13,23,7,21,"require"],[13,30,7,28],[13,31,7,28,"_dependencyMap"],[13,45,7,28],[13,69,7,48],[13,70,7,49],[14,2,8,0],[14,8,8,6,"withLayoutContext_1"],[14,27,8,25],[14,30,8,28,"require"],[14,37,8,35],[14,38,8,35,"_dependencyMap"],[14,52,8,35],[14,78,8,57],[14,79,8,58],[15,2,9,0],[15,8,9,6,"useScreens_1"],[15,20,9,18],[15,23,9,21,"require"],[15,30,9,28],[15,31,9,28,"_dependencyMap"],[15,45,9,28],[15,65,9,44],[15,66,9,45],[16,2,10,0],[16,8,10,6,"Protected_1"],[16,19,10,17],[16,22,10,20,"require"],[16,29,10,27],[16,30,10,27,"_dependencyMap"],[16,44,10,27],[16,69,10,48],[16,70,10,49],[17,2,11,0],[17,8,11,6,"NativeStackNavigator"],[17,28,11,26],[17,31,11,29],[17,32,11,30],[17,33,11,31],[17,35,11,33,"native_stack_1"],[17,49,11,47],[17,50,11,48,"createNativeStackNavigator"],[17,76,11,74],[17,78,11,76],[17,79,11,77],[17,80,11,78,"Navigator"],[17,89,11,87],[18,2,12,0],[18,8,12,6,"RNStack"],[18,15,12,13],[18,18,12,16],[18,19,12,17],[18,20,12,18],[18,22,12,20,"withLayoutContext_1"],[18,41,12,39],[18,42,12,40,"withLayoutContext"],[18,59,12,57],[18,61,12,59,"NativeStackNavigator"],[18,81,12,79],[18,82,12,80],[19,2,13,0],[19,11,13,9,"isStackAction"],[19,24,13,22,"isStackAction"],[19,25,13,23,"action"],[19,31,13,29],[19,33,13,31],[20,4,14,4],[20,11,14,12,"action"],[20,17,14,18],[20,18,14,19,"type"],[20,22,14,23],[20,27,14,28],[20,33,14,34],[20,37,15,8,"action"],[20,43,15,14],[20,44,15,15,"type"],[20,48,15,19],[20,53,15,24],[20,63,15,34],[20,67,16,8,"action"],[20,73,16,14],[20,74,16,15,"type"],[20,78,16,19],[20,83,16,24],[20,88,16,29],[20,92,17,8,"action"],[20,98,17,14],[20,99,17,15,"type"],[20,103,17,19],[20,108,17,24],[20,120,17,36],[20,124,18,8,"action"],[20,130,18,14],[20,131,18,15,"type"],[20,135,18,19],[20,140,18,24],[20,149,18,33],[21,2,19,0],[22,2,20,0],[23,0,21,0],[24,0,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,0,28,0],[31,2,29,0],[31,8,29,6,"stackRouterOverride"],[31,27,29,25],[31,30,29,29,"original"],[31,38,29,37],[31,42,29,42],[32,4,30,4],[32,11,30,11],[33,6,31,8,"getStateForAction"],[33,23,31,25],[33,25,31,27,"getStateForAction"],[33,26,31,28,"state"],[33,31,31,33],[33,33,31,35,"action"],[33,39,31,41],[33,41,31,43,"options"],[33,48,31,50],[33,53,31,55],[34,8,32,12],[34,12,32,16,"action"],[34,18,32,22],[34,19,32,23,"target"],[34,25,32,29],[34,29,32,33,"action"],[34,35,32,39],[34,36,32,40,"target"],[34,42,32,46],[34,47,32,51,"state"],[34,52,32,56],[34,53,32,57,"key"],[34,56,32,60],[34,58,32,62],[35,10,33,16],[35,17,33,23],[35,21,33,27],[36,8,34,12],[37,8,35,12],[37,12,35,16],[37,13,35,17,"isStackAction"],[37,26,35,30],[37,27,35,31,"action"],[37,33,35,37],[37,34,35,38],[37,36,35,40],[38,10,36,16],[38,17,36,23,"original"],[38,25,36,31],[38,26,36,32,"getStateForAction"],[38,43,36,49],[38,44,36,50,"state"],[38,49,36,55],[38,51,36,57,"action"],[38,57,36,63],[38,59,36,65,"options"],[38,66,36,72],[38,67,36,73],[39,8,37,12],[40,8,38,12],[41,8,39,12],[41,14,39,18,"actionSingularOptions"],[41,35,39,39],[41,38,39,42,"action"],[41,44,39,48],[41,45,39,49,"payload"],[41,52,39,56],[41,56,39,60],[41,66,39,70],[41,70,39,74,"action"],[41,76,39,80],[41,77,39,81,"payload"],[41,84,39,88],[41,87,40,18,"action"],[41,93,40,24],[41,94,40,25,"payload"],[41,101,40,32],[41,102,40,33,"singular"],[41,110,40,41],[41,113,41,18,"undefined"],[41,122,41,27],[42,8,42,12],[43,8,43,12],[43,17,43,21,"getIdFunction"],[43,30,43,34,"getIdFunction"],[43,31,43,34],[43,33,43,37],[44,10,44,16],[45,10,45,16],[45,14,45,20],[45,16,45,22],[45,25,45,31],[45,29,45,35,"action"],[45,35,45,41],[45,36,45,42],[45,40,46,20],[45,41,46,21,"action"],[45,47,46,27],[45,48,46,28,"payload"],[45,55,46,35],[45,59,47,20],[45,61,47,22],[45,67,47,28],[45,71,47,32,"action"],[45,77,47,38],[45,78,47,39,"payload"],[45,85,47,46],[45,86,47,47],[45,90,48,20],[45,97,48,27,"action"],[45,103,48,33],[45,104,48,34,"payload"],[45,111,48,41],[45,112,48,42,"name"],[45,116,48,46],[45,121,48,51],[45,129,48,59],[45,131,48,61],[46,12,49,20],[47,10,50,16],[48,10,51,16],[48,16,51,22,"actionName"],[48,26,51,32],[48,29,51,35,"action"],[48,35,51,41],[48,36,51,42,"payload"],[48,43,51,49],[48,44,51,50,"name"],[48,48,51,54],[49,10,52,16],[50,12,53,16],[51,12,54,16,"getActionSingularIdFn"],[51,33,54,37],[51,34,54,38,"actionSingularOptions"],[51,55,54,59],[51,57,54,61,"actionName"],[51,67,54,71],[51,68,54,72],[52,12,55,20],[53,12,56,20,"options"],[53,19,56,27],[53,20,56,28,"routeGetIdList"],[53,34,56,42],[53,35,56,43,"actionName"],[53,45,56,53],[54,10,56,54],[55,8,57,12],[56,8,58,12],[56,14,58,18],[57,10,58,20,"routeParamList"],[58,8,58,35],[58,9,58,36],[58,12,58,39,"options"],[58,19,58,46],[59,8,59,12],[59,16,59,20,"action"],[59,22,59,26],[59,23,59,27,"type"],[59,27,59,31],[60,10,60,16],[60,15,60,21],[60,21,60,27],[61,10,61,16],[61,15,61,21],[61,25,61,31],[62,12,61,33],[63,14,62,20],[63,18,62,24],[63,19,62,25,"state"],[63,24,62,30],[63,25,62,31,"routeNames"],[63,35,62,41],[63,36,62,42,"includes"],[63,44,62,50],[63,45,62,51,"action"],[63,51,62,57],[63,52,62,58,"payload"],[63,59,62,65],[63,60,62,66,"name"],[63,64,62,70],[63,65,62,71],[63,67,62,73],[64,16,63,24],[64,23,63,31],[64,27,63,35],[65,14,64,20],[66,14,65,20],[67,14,66,20],[67,20,66,26,"getId"],[67,25,66,31],[67,28,66,34,"getIdFunction"],[67,41,66,47],[67,42,66,48],[67,43,66,49],[68,14,67,20],[69,14,68,20],[70,14,69,20],[70,20,69,26,"id"],[70,22,69,28],[70,25,69,31,"getId"],[70,30,69,36],[70,33,69,39],[71,16,69,41,"params"],[71,22,69,47],[71,24,69,49,"action"],[71,30,69,55],[71,31,69,56,"payload"],[71,38,69,63],[71,39,69,64,"params"],[72,14,69,71],[72,15,69,72],[72,16,69,73],[73,14,70,20],[73,18,70,24,"route"],[73,23,70,29],[74,14,71,20],[74,18,71,24,"id"],[74,20,71,26],[74,25,71,31,"undefined"],[74,34,71,40],[74,36,71,42],[75,16,72,24,"route"],[75,21,72,29],[75,24,72,32,"state"],[75,29,72,37],[75,30,72,38,"routes"],[75,36,72,44],[75,37,72,45,"findLast"],[75,45,72,53],[75,46,72,55,"route"],[75,51,72,60],[75,55,72,65,"route"],[75,60,72,70],[75,61,72,71,"name"],[75,65,72,75],[75,70,72,80,"action"],[75,76,72,86],[75,77,72,87,"payload"],[75,84,72,94],[75,85,72,95,"name"],[75,89,72,99],[75,93,72,103,"id"],[75,95,72,105],[75,100,72,110,"getId"],[75,105,72,115],[75,108,72,118],[76,18,72,120,"params"],[76,24,72,126],[76,26,72,128,"route"],[76,31,72,133],[76,32,72,134,"params"],[77,16,72,141],[77,17,72,142],[77,18,72,143],[77,19,72,144],[78,14,73,20],[78,15,73,21],[78,21,74,25],[78,25,74,29,"action"],[78,31,74,35],[78,32,74,36,"type"],[78,36,74,40],[78,41,74,45],[78,51,74,55],[78,53,74,57],[79,16,75,24],[79,22,75,30,"currentRoute"],[79,34,75,42],[79,37,75,45,"state"],[79,42,75,50],[79,43,75,51,"routes"],[79,49,75,57],[79,50,75,58,"state"],[79,55,75,63],[79,56,75,64,"index"],[79,61,75,69],[79,62,75,70],[80,16,76,24],[81,16,77,24],[81,20,77,28,"action"],[81,26,77,34],[81,27,77,35,"payload"],[81,34,77,42],[81,35,77,43,"name"],[81,39,77,47],[81,44,77,52,"currentRoute"],[81,56,77,64],[81,57,77,65,"name"],[81,61,77,69],[81,63,77,71],[82,18,78,28,"route"],[82,23,78,33],[82,26,78,36,"currentRoute"],[82,38,78,48],[83,16,79,24],[83,17,79,25],[83,23,80,29],[83,27,80,33,"action"],[83,33,80,39],[83,34,80,40,"payload"],[83,41,80,47],[83,42,80,48,"pop"],[83,45,80,51],[83,47,80,53],[84,18,81,28,"route"],[84,23,81,33],[84,26,81,36,"state"],[84,31,81,41],[84,32,81,42,"routes"],[84,38,81,48],[84,39,81,49,"findLast"],[84,47,81,57],[84,48,81,59,"route"],[84,53,81,64],[84,57,81,69,"route"],[84,62,81,74],[84,63,81,75,"name"],[84,67,81,79],[84,72,81,84,"action"],[84,78,81,90],[84,79,81,91,"payload"],[84,86,81,98],[84,87,81,99,"name"],[84,91,81,103],[84,92,81,104],[85,16,82,24],[86,14,83,20],[87,14,84,20],[87,18,84,24],[87,19,84,25,"route"],[87,24,84,30],[87,26,84,32],[88,16,85,24,"route"],[88,21,85,29],[88,24,85,32,"state"],[88,29,85,37],[88,30,85,38,"preloadedRoutes"],[88,45,85,53],[88,46,85,54,"find"],[88,50,85,58],[88,51,85,60,"route"],[88,56,85,65],[88,60,85,70,"route"],[88,65,85,75],[88,66,85,76,"name"],[88,70,85,80],[88,75,85,85,"action"],[88,81,85,91],[88,82,85,92,"payload"],[88,89,85,99],[88,90,85,100,"name"],[88,94,85,104],[88,98,85,108,"id"],[88,100,85,110],[88,105,85,115,"getId"],[88,110,85,120],[88,113,85,123],[89,18,85,125,"params"],[89,24,85,131],[89,26,85,133,"route"],[89,31,85,138],[89,32,85,139,"params"],[90,16,85,146],[90,17,85,147],[90,18,85,148],[90,19,85,149],[91,14,86,20],[92,14,87,20],[92,18,87,24,"params"],[92,24,87,30],[93,14,88,20],[93,18,88,24,"action"],[93,24,88,30],[93,25,88,31,"type"],[93,29,88,35],[93,34,88,40],[93,44,88,50],[93,48,88,54,"action"],[93,54,88,60],[93,55,88,61,"payload"],[93,62,88,68],[93,63,88,69,"merge"],[93,68,88,74],[93,72,88,78,"route"],[93,77,88,83],[93,79,88,85],[94,16,89,24,"params"],[94,22,89,30],[94,25,90,28,"action"],[94,31,90,34],[94,32,90,35,"payload"],[94,39,90,42],[94,40,90,43,"params"],[94,46,90,49],[94,51,90,54,"undefined"],[94,60,90,63],[94,64,91,32,"routeParamList"],[94,78,91,46],[94,79,91,47,"action"],[94,85,91,53],[94,86,91,54,"payload"],[94,93,91,61],[94,94,91,62,"name"],[94,98,91,66],[94,99,91,67],[94,104,91,72,"undefined"],[94,113,91,81],[94,116,91,81,"Object"],[94,122,91,81],[94,123,91,81,"assign"],[94,129,91,81],[94,134,93,39,"routeParamList"],[94,148,93,53],[94,149,93,54,"action"],[94,155,93,60],[94,156,93,61,"payload"],[94,163,93,68],[94,164,93,69,"name"],[94,168,93,73],[94,169,93,74],[94,171,94,39,"route"],[94,176,94,44],[94,177,94,45,"params"],[94,183,94,51],[94,185,95,39,"action"],[94,191,95,45],[94,192,95,46,"payload"],[94,199,95,53],[94,200,95,54,"params"],[94,206,95,60],[94,210,97,34,"route"],[94,215,97,39],[94,216,97,40,"params"],[94,222,97,46],[95,14,98,20],[95,15,98,21],[95,21,99,25],[96,16,100,24,"params"],[96,22,100,30],[96,25,101,28,"routeParamList"],[96,39,101,42],[96,40,101,43,"action"],[96,46,101,49],[96,47,101,50,"payload"],[96,54,101,57],[96,55,101,58,"name"],[96,59,101,62],[96,60,101,63],[96,65,101,68,"undefined"],[96,74,101,77],[96,77,101,77,"Object"],[96,83,101,77],[96,84,101,77,"assign"],[96,90,101,77],[96,95,103,39,"routeParamList"],[96,109,103,53],[96,110,103,54,"action"],[96,116,103,60],[96,117,103,61,"payload"],[96,124,103,68],[96,125,103,69,"name"],[96,129,103,73],[96,130,103,74],[96,132,104,39,"action"],[96,138,104,45],[96,139,104,46,"payload"],[96,146,104,53],[96,147,104,54,"params"],[96,153,104,60],[96,157,106,34,"action"],[96,163,106,40],[96,164,106,41,"payload"],[96,171,106,48],[96,172,106,49,"params"],[96,178,106,55],[97,14,107,20],[98,14,108,20],[98,18,108,24,"routes"],[98,24,108,30],[99,14,109,20],[99,18,109,24,"route"],[99,23,109,29],[99,25,109,31],[100,16,110,24],[100,20,110,28,"action"],[100,26,110,34],[100,27,110,35,"type"],[100,31,110,39],[100,36,110,44],[100,46,110,54],[100,50,110,58,"action"],[100,56,110,64],[100,57,110,65,"payload"],[100,64,110,72],[100,65,110,73,"pop"],[100,68,110,76],[100,70,110,78],[101,18,111,28,"routes"],[101,24,111,34],[101,27,111,37],[101,29,111,39],[102,18,112,28],[103,18,113,28],[103,23,113,33],[103,29,113,39,"r"],[103,30,113,40],[103,34,113,44,"state"],[103,39,113,49],[103,40,113,50,"routes"],[103,46,113,56],[103,48,113,58],[104,20,114,32],[104,24,114,36,"r"],[104,25,114,37],[104,26,114,38,"key"],[104,29,114,41],[104,34,114,46,"route"],[104,39,114,51],[104,40,114,52,"key"],[104,43,114,55],[104,45,114,57],[105,22,115,36,"routes"],[105,28,115,42],[105,29,115,43,"push"],[105,33,115,47],[105,34,115,47,"Object"],[105,40,115,47],[105,41,115,47,"assign"],[105,47,115,47],[105,52,116,43,"route"],[105,57,116,48],[106,24,117,40,"path"],[106,28,117,44],[106,30,117,46,"action"],[106,36,117,52],[106,37,117,53,"payload"],[106,44,117,60],[106,45,117,61,"path"],[106,49,117,65],[106,54,117,70,"undefined"],[106,63,117,79],[106,66,117,82,"action"],[106,72,117,88],[106,73,117,89,"payload"],[106,80,117,96],[106,81,117,97,"path"],[106,85,117,101],[106,88,117,104,"route"],[106,93,117,109],[106,94,117,110,"path"],[106,98,117,114],[107,24,118,40,"params"],[108,22,118,46],[108,24,119,37],[108,25,119,38],[109,22,120,36],[110,20,121,32],[111,20,122,32,"routes"],[111,26,122,38],[111,27,122,39,"push"],[111,31,122,43],[111,32,122,44,"r"],[111,33,122,45],[111,34,122,46],[112,18,123,28],[113,16,124,24],[113,17,124,25],[113,23,125,29],[114,18,126,28],[115,18,127,28],[116,18,128,28],[117,18,129,28],[117,22,129,32,"id"],[117,24,129,34],[117,29,129,39,"undefined"],[117,38,129,48],[117,40,129,50],[118,20,130,32,"routes"],[118,26,130,38],[118,29,130,41,"state"],[118,34,130,46],[118,35,130,47,"routes"],[118,41,130,53],[118,42,130,54,"filter"],[118,48,130,60],[118,49,130,62,"r"],[118,50,130,63],[118,54,130,68,"r"],[118,55,130,69],[118,56,130,70,"key"],[118,59,130,73],[118,64,130,78,"route"],[118,69,130,83],[118,70,130,84,"key"],[118,73,130,87],[118,74,130,88],[119,18,131,28],[119,19,131,29],[119,25,132,33],[119,29,132,37,"action"],[119,35,132,43],[119,36,132,44,"type"],[119,40,132,48],[119,45,132,53],[119,55,132,63],[119,59,132,67,"state"],[119,64,132,72],[119,65,132,73,"routes"],[119,71,132,79],[119,72,132,80,"length"],[119,78,132,86],[119,81,132,89],[119,82,132,90],[119,84,132,92],[120,20,133,32],[121,20,134,32],[121,26,134,38,"lastRoute"],[121,35,134,47],[121,38,134,50,"state"],[121,43,134,55],[121,44,134,56,"routes"],[121,50,134,62],[121,51,134,63,"state"],[121,56,134,68],[121,57,134,69,"routes"],[121,63,134,75],[121,64,134,76,"length"],[121,70,134,82],[121,73,134,85],[121,74,134,86],[121,75,134,87],[122,20,135,32],[122,24,135,36],[122,25,135,37],[122,26,135,38],[122,28,135,40,"useScreens_1"],[122,40,135,52],[122,41,135,53,"getSingularId"],[122,54,135,66],[122,56,135,68,"lastRoute"],[122,65,135,77],[122,66,135,78,"name"],[122,70,135,82],[122,72,135,84],[123,22,135,86,"params"],[123,28,135,92],[123,30,135,94,"lastRoute"],[123,39,135,103],[123,40,135,104,"params"],[124,20,135,111],[124,21,135,112],[124,22,135,113],[124,27,136,36],[124,28,136,37],[124,29,136,38],[124,31,136,40,"useScreens_1"],[124,43,136,52],[124,44,136,53,"getSingularId"],[124,57,136,66],[124,59,136,68,"route"],[124,64,136,73],[124,65,136,74,"name"],[124,69,136,78],[124,71,136,80],[125,22,136,82,"params"],[126,20,136,89],[126,21,136,90],[126,22,136,91],[126,24,136,93],[127,22,137,36,"routes"],[127,28,137,42],[127,31,137,45,"state"],[127,36,137,50],[127,37,137,51,"routes"],[127,43,137,57],[127,44,137,58,"slice"],[127,49,137,63],[127,50,137,64],[127,51,137,65],[127,53,137,67],[127,54,137,68],[127,55,137,69],[127,56,137,70],[128,20,138,32],[128,21,138,33],[128,27,139,37],[129,22,140,36,"routes"],[129,28,140,42],[129,31,140,45],[129,32,140,46],[129,35,140,49,"state"],[129,40,140,54],[129,41,140,55,"routes"],[129,47,140,61],[129,48,140,62],[130,20,141,32],[131,18,142,28],[131,19,142,29],[131,25,143,33],[132,20,144,32,"routes"],[132,26,144,38],[132,29,144,41],[132,30,144,42],[132,33,144,45,"state"],[132,38,144,50],[132,39,144,51,"routes"],[132,45,144,57],[132,46,144,58],[133,18,145,28],[134,18,146,28],[135,18,147,28],[136,18,148,28],[136,24,148,34,"key"],[136,27,148,37],[136,30,148,40,"routes"],[136,36,148,46],[136,37,148,47,"length"],[136,43,148,53],[136,48,148,58,"state"],[136,53,148,63],[136,54,148,64,"routes"],[136,60,148,70],[136,61,148,71,"length"],[136,67,148,77],[136,70,149,34],[136,73,149,37,"action"],[136,79,149,43],[136,80,149,44,"payload"],[136,87,149,51],[136,88,149,52,"name"],[136,92,149,56],[136,96,149,60],[136,97,149,61],[136,98,149,62],[136,100,149,64,"non_secure_1"],[136,112,149,76],[136,113,149,77,"nanoid"],[136,119,149,83],[136,121,149,85],[136,122,149,86],[136,124,149,88],[136,127,150,34,"route"],[136,132,150,39],[136,133,150,40,"key"],[136,136,150,43],[137,18,151,28,"routes"],[137,24,151,34],[137,25,151,35,"push"],[137,29,151,39],[137,30,151,39,"Object"],[137,36,151,39],[137,37,151,39,"assign"],[137,43,151,39],[137,48,152,35,"route"],[137,53,152,40],[138,20,153,32,"key"],[138,23,153,35],[139,20,154,32,"path"],[139,24,154,36],[139,26,154,38,"action"],[139,32,154,44],[139,33,154,45,"type"],[139,37,154,49],[139,42,154,54],[139,52,154,64],[139,56,154,68,"action"],[139,62,154,74],[139,63,154,75,"payload"],[139,70,154,82],[139,71,154,83,"path"],[139,75,154,87],[139,80,154,92,"undefined"],[139,89,154,101],[139,92,155,38,"action"],[139,98,155,44],[139,99,155,45,"payload"],[139,106,155,52],[139,107,155,53,"path"],[139,111,155,57],[139,114,156,38,"route"],[139,119,156,43],[139,120,156,44,"path"],[139,124,156,48],[140,20,157,32,"params"],[141,18,157,38],[141,20,158,29],[141,21,158,30],[142,18,159,28],[143,18,160,28],[144,18,161,28],[145,18,162,28],[146,18,163,28],[147,18,164,28],[148,18,165,28],[149,18,166,28],[150,18,167,28],[151,18,168,28],[152,16,169,24],[153,14,170,20],[153,15,170,21],[153,21,171,25],[154,16,172,24,"routes"],[154,22,172,30],[154,25,172,33],[154,26,173,28],[154,29,173,31,"state"],[154,34,173,36],[154,35,173,37,"routes"],[154,41,173,43],[154,43,174,28],[155,18,175,32,"key"],[155,21,175,35],[155,23,175,37],[155,26,175,40,"action"],[155,32,175,46],[155,33,175,47,"payload"],[155,40,175,54],[155,41,175,55,"name"],[155,45,175,59],[155,49,175,63],[155,50,175,64],[155,51,175,65],[155,53,175,67,"non_secure_1"],[155,65,175,79],[155,66,175,80,"nanoid"],[155,72,175,86],[155,74,175,88],[155,75,175,89],[155,77,175,91],[156,18,176,32,"name"],[156,22,176,36],[156,24,176,38,"action"],[156,30,176,44],[156,31,176,45,"payload"],[156,38,176,52],[156,39,176,53,"name"],[156,43,176,57],[157,18,177,32,"path"],[157,22,177,36],[157,24,177,38,"action"],[157,30,177,44],[157,31,177,45,"type"],[157,35,177,49],[157,40,177,54],[157,50,177,64],[157,53,177,67,"action"],[157,59,177,73],[157,60,177,74,"payload"],[157,67,177,81],[157,68,177,82,"path"],[157,72,177,86],[157,75,177,89,"undefined"],[157,84,177,98],[158,18,178,32,"params"],[159,16,179,28],[159,17,179,29],[159,18,180,25],[160,14,181,20],[161,14,182,20],[162,14,183,20],[163,14,184,20],[163,20,184,26,"result"],[163,26,184,32],[163,29,184,32,"Object"],[163,35,184,32],[163,36,184,32,"assign"],[163,42,184,32],[163,47,185,27,"state"],[163,52,185,32],[164,16,186,24,"index"],[164,21,186,29],[164,23,186,31,"routes"],[164,29,186,37],[164,30,186,38,"length"],[164,36,186,44],[164,39,186,47],[164,40,186,48],[165,16,187,24,"preloadedRoutes"],[165,31,187,39],[165,33,187,41,"state"],[165,38,187,46],[165,39,187,47,"preloadedRoutes"],[165,54,187,62],[165,55,187,63,"filter"],[165,61,187,69],[165,62,187,71,"route"],[165,67,187,76],[165,71,187,81,"routes"],[165,77,187,87],[165,78,187,88,"routes"],[165,84,187,94],[165,85,187,95,"length"],[165,91,187,101],[165,94,187,104],[165,95,187,105],[165,96,187,106],[165,97,187,107,"key"],[165,100,187,110],[165,105,187,115,"route"],[165,110,187,120],[165,111,187,121,"key"],[165,114,187,124],[165,115,187,125],[166,16,188,24,"routes"],[167,14,188,30],[167,16,189,21],[168,14,190,20],[168,18,190,24,"actionSingularOptions"],[168,39,190,45],[168,41,190,47],[169,16,191,24],[169,23,191,31,"filterSingular"],[169,37,191,45],[169,38,191,46,"result"],[169,44,191,52],[169,46,191,54,"getId"],[169,51,191,59],[169,52,191,60],[170,14,192,20],[171,14,193,20],[171,21,193,27,"result"],[171,27,193,33],[172,14,194,20],[173,14,195,20],[174,14,196,20],[175,14,197,20],[176,14,198,20],[177,14,199,20],[178,14,200,20],[179,14,201,20],[180,14,202,20],[181,12,203,16],[182,10,204,16],[183,12,204,25],[184,14,205,20],[184,21,205,27,"original"],[184,29,205,35],[184,30,205,36,"getStateForAction"],[184,47,205,53],[184,48,205,54,"state"],[184,53,205,59],[184,55,205,61,"action"],[184,61,205,67],[184,63,205,69,"options"],[184,70,205,76],[184,71,205,77],[185,12,206,16],[186,8,207,12],[187,6,208,8],[188,4,209,4],[188,5,209,5],[189,2,210,0],[189,3,210,1],[190,2,211,0,"exports"],[190,9,211,7],[190,10,211,8,"stackRouterOverride"],[190,29,211,27],[190,32,211,30,"stackRouterOverride"],[190,51,211,49],[191,2,212,0],[191,11,212,9,"getActionSingularIdFn"],[191,32,212,30,"getActionSingularIdFn"],[191,33,212,31,"actionGetId"],[191,44,212,42],[191,46,212,44,"name"],[191,50,212,48],[191,52,212,50],[192,4,213,4],[192,8,213,8],[192,15,213,15,"actionGetId"],[192,26,213,26],[192,31,213,31],[192,41,213,41],[192,43,213,43],[193,6,214,8],[193,13,214,16,"options"],[193,20,214,23],[193,24,214,28,"actionGetId"],[193,35,214,39],[193,36,214,40,"name"],[193,40,214,44],[193,42,214,46,"options"],[193,49,214,53],[193,50,214,54,"params"],[193,56,214,60],[193,60,214,64],[193,61,214,65],[193,62,214,66],[193,63,214,67],[194,4,215,4],[194,5,215,5],[194,11,216,9],[194,15,216,13,"actionGetId"],[194,26,216,24],[194,31,216,29],[194,35,216,33],[194,37,216,35],[195,6,217,8],[195,13,217,16,"options"],[195,20,217,23],[195,24,217,28],[195,25,217,29],[195,26,217,30],[195,28,217,32,"useScreens_1"],[195,40,217,44],[195,41,217,45,"getSingularId"],[195,54,217,58],[195,56,217,60,"name"],[195,60,217,64],[195,62,217,66,"options"],[195,69,217,73],[195,70,217,74],[196,4,218,4],[197,4,219,4],[197,11,219,11,"undefined"],[197,20,219,20],[198,2,220,0],[199,2,221,0],[200,0,222,0],[201,0,223,0],[202,0,224,0],[203,2,225,0],[203,11,225,9,"filterSingular"],[203,25,225,23,"filterSingular"],[203,26,225,24,"state"],[203,31,225,29],[203,33,225,31,"getId"],[203,38,225,36],[203,40,225,38],[204,4,226,4],[204,8,226,8],[204,9,226,9,"state"],[204,14,226,14],[204,16,226,16],[205,6,227,8],[205,13,227,15,"state"],[205,18,227,20],[206,4,228,4],[207,4,229,4],[207,8,229,8],[207,9,229,9,"state"],[207,14,229,14],[207,15,229,15,"routes"],[207,21,229,21],[207,23,229,23],[208,6,230,8],[208,13,230,15,"state"],[208,18,230,20],[209,4,231,4],[210,4,232,4],[210,10,232,10,"currentIndex"],[210,22,232,22],[210,25,232,25,"state"],[210,30,232,30],[210,31,232,31,"index"],[210,36,232,36],[210,40,232,40,"state"],[210,45,232,45],[210,46,232,46,"routes"],[210,52,232,52],[210,53,232,53,"length"],[210,59,232,59],[210,62,232,62],[210,63,232,63],[211,4,233,4],[211,10,233,10,"current"],[211,17,233,17],[211,20,233,20,"state"],[211,25,233,25],[211,26,233,26,"routes"],[211,32,233,32],[211,33,233,33,"currentIndex"],[211,45,233,45],[211,46,233,46],[212,4,234,4],[212,10,234,10,"name"],[212,14,234,14],[212,17,234,17,"current"],[212,24,234,24],[212,25,234,25,"name"],[212,29,234,29],[213,4,235,4],[213,10,235,10,"id"],[213,12,235,12],[213,15,235,15,"getId"],[213,20,235,20],[213,23,235,23],[214,6,235,25,"params"],[214,12,235,31],[214,14,235,33,"current"],[214,21,235,40],[214,22,235,41,"params"],[215,4,235,48],[215,5,235,49],[215,6,235,50],[216,4,236,4],[216,8,236,8],[216,9,236,9,"id"],[216,11,236,11],[216,13,236,13],[217,6,237,8],[217,13,237,15,"state"],[217,18,237,20],[218,4,238,4],[219,4,239,4],[220,4,240,4],[220,8,240,8,"routes"],[220,14,240,14],[220,17,240,17,"state"],[220,22,240,22],[220,23,240,23,"routes"],[220,29,240,29],[221,4,241,4,"routes"],[221,10,241,10],[221,13,241,13,"routes"],[221,19,241,19],[221,20,241,20,"filter"],[221,26,241,26],[221,27,241,27],[221,28,241,28,"route"],[221,33,241,33],[221,35,241,35,"index"],[221,40,241,40],[221,45,241,45],[222,6,242,8],[223,6,243,8],[223,10,243,12,"index"],[223,15,243,17],[223,20,243,22,"currentIndex"],[223,32,243,34],[223,34,243,36],[224,8,244,12],[224,15,244,19],[224,19,244,23],[225,6,245,8],[226,6,246,8],[227,6,247,8],[227,13,247,15,"name"],[227,17,247,19],[227,22,247,24,"route"],[227,27,247,29],[227,28,247,30,"name"],[227,32,247,34],[227,36,247,38,"id"],[227,38,247,40],[227,43,247,45,"getId"],[227,48,247,50],[227,51,247,53],[228,8,247,55,"params"],[228,14,247,61],[228,16,247,63,"route"],[228,21,247,68],[228,22,247,69,"params"],[229,6,247,76],[229,7,247,77],[229,8,247,78],[230,4,248,4],[230,5,248,5],[230,6,248,6],[231,4,249,4],[231,11,249,4,"Object"],[231,17,249,4],[231,18,249,4,"assign"],[231,24,249,4],[231,29,250,11,"state"],[231,34,250,16],[232,6,251,8,"index"],[232,11,251,13],[232,13,251,15,"routes"],[232,19,251,21],[232,20,251,22,"length"],[232,26,251,28],[232,29,251,31],[232,30,251,32],[233,6,252,8,"routes"],[234,4,252,14],[235,2,254,0],[236,2,255,0],[236,8,255,6,"Stack"],[236,13,255,11],[236,16,255,14,"Object"],[236,22,255,20],[236,23,255,21,"assign"],[236,29,255,27],[236,30,255,29,"props"],[236,35,255,34],[236,39,255,39],[237,4,256,4],[237,24,256,11,"_reactJsxDevRuntime"],[237,43,256,11],[237,44,256,11,"jsxDEV"],[237,50,256,11],[237,51,256,12,"RNStack"],[237,58,256,19],[237,60,256,19,"Object"],[237,66,256,19],[237,67,256,19,"assign"],[237,73,256,19],[237,78,256,24,"props"],[237,83,256,29],[238,6,256,31,"UNSTABLE_router"],[238,21,256,46],[238,23,256,48,"exports"],[238,30,256,55],[238,31,256,56,"stackRouterOverride"],[239,4,256,76],[240,6,256,76,"fileName"],[240,14,256,76],[240,16,256,76,"_jsxFileName"],[240,28,256,76],[241,6,256,76,"lineNumber"],[241,16,256,76],[242,6,256,76,"columnNumber"],[242,18,256,76],[243,4,256,76],[243,11,256,77],[243,12,256,78],[244,2,257,0],[244,3,257,1],[244,5,257,3],[245,4,258,4,"Screen"],[245,10,258,10],[245,12,258,12,"RNStack"],[245,19,258,19],[245,20,258,20,"Screen"],[245,26,258,26],[246,4,259,4,"Protected"],[246,13,259,13],[246,15,259,15,"Protected_1"],[246,26,259,26],[246,27,259,27,"Protected"],[247,2,260,0],[247,3,260,1],[247,4,260,2],[248,2,261,0,"exports"],[248,9,261,7],[248,10,261,8,"default"],[248,17,261,15],[248,20,261,18,"Stack"],[248,25,261,23],[249,2,262,0],[249,8,262,6,"StackRouter"],[249,19,262,17],[249,22,262,21,"options"],[249,29,262,28],[249,33,262,33],[250,4,263,4],[250,10,263,10,"router"],[250,16,263,16],[250,19,263,19],[250,20,263,20],[250,21,263,21],[250,23,263,23,"native_1"],[250,31,263,31],[250,32,263,32,"StackRouter"],[250,43,263,43],[250,45,263,45,"options"],[250,52,263,52],[250,53,263,53],[251,4,264,4],[251,11,264,4,"Object"],[251,17,264,4],[251,18,264,4,"assign"],[251,24,264,4],[251,29,265,11,"router"],[251,35,265,17],[251,37,266,11],[251,38,266,12],[251,39,266,13],[251,41,266,15,"exports"],[251,48,266,22],[251,49,266,23,"stackRouterOverride"],[251,68,266,42],[251,70,266,44,"router"],[251,76,266,50],[251,77,266,51],[252,2,268,0],[252,3,268,1],[253,2,269,0,"exports"],[253,9,269,7],[253,10,269,8,"StackRouter"],[253,21,269,19],[253,24,269,22,"StackRouter"],[253,35,269,33],[254,0,269,34],[254,3]],"functionMap":{"names":["<global>","isStackAction","stackRouterOverride","getStateForAction","getIdFunction","state.routes.findLast$argument_0","state.preloadedRoutes.find$argument_0","state.routes.filter$argument_0","state.preloadedRoutes.filter$argument_0","getActionSingularIdFn","<anonymous>","filterSingular","routes.filter$argument_0","Object.assign$argument_0","StackRouter"],"mappings":"AAA;ACY;CDM;4BEU;2BCE;YCY;aDc;sDEe,yFF;0DES,6CF;2DGI,yFH;6DI6C,0BJ;sEKyD,sDL;SDqB;CFE;ASE;eCE,oDD;eCG,2DD;CTG;AWK;2BCgB;KDO;CXM;4BaC;CbE;oBcK;CdM"},"hasCjsExports":true},"type":"js/module"}]}